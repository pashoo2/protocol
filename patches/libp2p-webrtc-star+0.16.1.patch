diff --git a/node_modules/libp2p-webrtc-star/src/index.js b/node_modules/libp2p-webrtc-star/src/index.js
index 9d58293..c8a590d 100644
--- a/node_modules/libp2p-webrtc-star/src/index.js
+++ b/node_modules/libp2p-webrtc-star/src/index.js
@@ -1,261 +1,264 @@
-'use strict'
-
-const debug = require('debug')
-const log = debug('libp2p:webrtc-star')
-const multiaddr = require('multiaddr')
-const mafmt = require('mafmt')
-const withIs = require('class-is')
-const io = require('socket.io-client')
-const EE = require('events').EventEmitter
-const SimplePeer = require('simple-peer')
-const PeerId = require('peer-id')
-const PeerInfo = require('peer-info')
-const Connection = require('interface-connection').Connection
-const toPull = require('stream-to-pull-stream')
-const once = require('once')
-const setImmediate = require('async/setImmediate')
-const webrtcSupport = require('webrtcsupport')
-const utils = require('./utils')
-const cleanUrlSIO = utils.cleanUrlSIO
-const cleanMultiaddr = utils.cleanMultiaddr
-
-const noop = once(() => {})
+const debug = require('debug');
+const log = debug('libp2p:webrtc-star');
+const multiaddr = require('multiaddr');
+const mafmt = require('mafmt');
+const withIs = require('class-is');
+const io = require('socket.io-client');
+const EE = require('events').EventEmitter;
+const SimplePeer = require('simple-peer');
+const PeerId = require('peer-id');
+const PeerInfo = require('peer-info');
+const Connection = require('interface-connection').Connection;
+const toPull = require('stream-to-pull-stream');
+const once = require('once');
+const setImmediate = require('async/setImmediate');
+const webrtcSupport = require('webrtcsupport');
+const utils = require('./utils');
+const cleanUrlSIO = utils.cleanUrlSIO;
+const cleanMultiaddr = utils.cleanMultiaddr;
+
+const noop = once(() => {});
 
 const sioOptions = {
   transports: ['websocket'],
-  'force new connection': true
-}
+  'force new connection': true,
+  query: {
+    wrtc: true,
+  },
+};
 
 class WebRTCStar {
-  constructor (options) {
-    options = options || {}
+  constructor(options) {
+    options = options || {};
 
-    this.maSelf = undefined
+    this.maSelf = undefined;
 
-    this.sioOptions = {
-      transports: ['websocket'],
-      'force new connection': true
-    }
+    this.sioOptions = sioOptions;
 
     if (options.wrtc) {
-      this.wrtc = options.wrtc
+      this.wrtc = options.wrtc;
     }
 
-    this.discovery = new EE()
-    this.discovery.tag = 'webRTCStar'
-    this.discovery._isStarted = false
-    this.discovery.start = (callback) => {
-      this.discovery._isStarted = true
-      setImmediate(callback)
-    }
-    this.discovery.stop = (callback) => {
-      this.discovery._isStarted = false
-      setImmediate(callback)
-    }
-
-    this.listenersRefs = {}
-    this._peerDiscovered = this._peerDiscovered.bind(this)
+    this.discovery = new EE();
+    this.discovery.tag = 'webRTCStar';
+    this.discovery._isStarted = false;
+    this.discovery.start = callback => {
+      this.discovery._isStarted = true;
+      setImmediate(callback);
+    };
+    this.discovery.stop = callback => {
+      this.discovery._isStarted = false;
+      setImmediate(callback);
+    };
+
+    this.listenersRefs = {};
+    this._peerDiscovered = this._peerDiscovered.bind(this);
   }
 
-  dial (ma, options, callback) {
+  dial(ma, options, callback) {
     if (typeof options === 'function') {
-      callback = options
-      options = {}
+      callback = options;
+      options = {};
     }
 
-    callback = callback ? once(callback) : noop
+    callback = callback ? once(callback) : noop;
 
-    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now()
+    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();
 
-    const sioClient = this
-      .listenersRefs[Object.keys(this.listenersRefs)[0]].io
+    const sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;
 
-    const spOptions = { initiator: true, trickle: false }
+    const spOptions = { initiator: true, trickle: false };
 
     // Use custom WebRTC implementation
-    if (this.wrtc) { spOptions.wrtc = this.wrtc }
+    if (this.wrtc) {
+      spOptions.wrtc = this.wrtc;
+    }
 
-    let channel
+    let channel;
     try {
-      channel = new SimplePeer(spOptions)
+      channel = new SimplePeer(spOptions);
     } catch (err) {
-      log('Could not create connection:', err)
-      return callback(err)
+      log('Could not create connection:', err);
+      return callback(err);
     }
 
-    const conn = new Connection(toPull.duplex(channel))
-    let connected = false
+    const conn = new Connection(toPull.duplex(channel));
+    let connected = false;
 
-    channel.on('signal', (signal) => {
+    channel.on('signal', signal => {
       sioClient.emit('ss-handshake', {
         intentId: intentId,
         srcMultiaddr: this.maSelf.toString(),
         dstMultiaddr: ma.toString(),
-        signal: signal
-      })
-    })
+        signal: signal,
+      });
+    });
 
-    channel.once('timeout', () => callback(new Error('timeout')))
+    channel.once('timeout', () => callback(new Error('timeout')));
 
-    channel.once('error', (err) => {
-      if (!connected) { callback(err) }
-    })
+    channel.once('error', err => {
+      if (!connected) {
+        callback(err);
+      }
+    });
 
     // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we
     // are clueless as to why.
-    sioClient.on('ws-handshake', (offer) => {
+    sioClient.on('ws-handshake', offer => {
       if (offer.intentId === intentId && offer.err) {
-        return callback(new Error(offer.err))
+        return callback(new Error(offer.err));
       }
 
       if (offer.intentId !== intentId || !offer.answer) {
-        return
+        return;
       }
 
       channel.once('connect', () => {
-        connected = true
-        conn.destroy = channel.destroy.bind(channel)
+        connected = true;
+        conn.destroy = channel.destroy.bind(channel);
 
-        channel.once('close', () => conn.destroy())
+        channel.once('close', () => conn.destroy());
 
-        conn.getObservedAddrs = (callback) => callback(null, [ma])
+        conn.getObservedAddrs = callback => callback(null, [ma]);
 
-        callback(null, conn)
-      })
+        callback(null, conn);
+      });
 
-      channel.signal(offer.signal)
-    })
+      channel.signal(offer.signal);
+    });
 
-    return conn
+    return conn;
   }
 
-  createListener (options, handler) {
+  createListener(options, handler) {
     if (typeof options === 'function') {
-      handler = options
-      options = {}
+      handler = options;
+      options = {};
     }
 
-    const listener = new EE()
+    const listener = new EE();
 
     listener.listen = (ma, callback) => {
-      callback = callback ? once(callback) : noop
+      callback = callback ? once(callback) : noop;
 
       if (!webrtcSupport.support && !this.wrtc) {
-        return setImmediate(() => callback(new Error('no WebRTC support')))
+        return setImmediate(() => callback(new Error('no WebRTC support')));
       }
 
-      this.maSelf = ma
+      this.maSelf = ma;
+      let sioUrl = cleanUrlSIO(ma);
+      log('Dialing to Signalling Server on: ' + sioUrl);
+      listener.io = io.connect(sioUrl, this.sioOptions);
 
-      const sioUrl = cleanUrlSIO(ma)
+      listener.io.once('connect_error', callback);
+      listener.io.once('error', err => {
+        listener.emit('error', err);
+        listener.emit('close');
+      });
 
-      log('Dialing to Signalling Server on: ' + sioUrl)
-
-      listener.io = io.connect(sioUrl, sioOptions)
-
-      listener.io.once('connect_error', callback)
-      listener.io.once('error', (err) => {
-        listener.emit('error', err)
-        listener.emit('close')
-      })
-
-      listener.io.on('ws-handshake', incommingDial)
-      listener.io.on('ws-peer', this._peerDiscovered)
+      listener.io.on('ws-handshake', incommingDial);
+      listener.io.on('ws-peer', this._peerDiscovered);
 
       listener.io.on('connect', () => {
-        listener.io.emit('ss-join', ma.toString())
-      })
+        listener.io.emit('ss-join', ma.toString());
+      });
 
       listener.io.once('connect', () => {
-        listener.emit('listening')
-        callback()
-      })
+        listener.emit('listening');
+        callback();
+      });
 
-      const self = this
-      function incommingDial (offer) {
+      const self = this;
+      function incommingDial(offer) {
         if (offer.answer || offer.err) {
-          return
+          return;
         }
 
-        const spOptions = { trickle: false }
+        const spOptions = { trickle: false };
 
         // Use custom WebRTC implementation
-        if (self.wrtc) { spOptions.wrtc = self.wrtc }
+        if (self.wrtc) {
+          spOptions.wrtc = self.wrtc;
+        }
 
-        let channel
+        let channel;
         try {
-          channel = new SimplePeer(spOptions)
+          channel = new SimplePeer(spOptions);
         } catch (err) {
-          log('Could not create incoming connection:', err)
-          return callback(err)
+          log('Could not create incoming connection:', err);
+          return callback(err);
         }
 
-        const conn = new Connection(toPull.duplex(channel))
+        const conn = new Connection(toPull.duplex(channel));
 
         channel.once('connect', () => {
-          conn.getObservedAddrs = (callback) => {
-            return callback(null, [offer.srcMultiaddr])
-          }
+          conn.getObservedAddrs = callback => {
+            return callback(null, [offer.srcMultiaddr]);
+          };
 
-          listener.emit('connection', conn)
-          handler(conn)
-        })
+          listener.emit('connection', conn);
+          handler(conn);
+        });
 
-        channel.once('signal', (signal) => {
-          offer.signal = signal
-          offer.answer = true
-          listener.io.emit('ss-handshake', offer)
-        })
+        channel.once('signal', signal => {
+          offer.signal = signal;
+          offer.answer = true;
+          listener.io.emit('ss-handshake', offer);
+        });
 
-        channel.signal(offer.signal)
+        channel.signal(offer.signal);
       }
-    }
+    };
 
-    listener.close = (callback) => {
-      callback = callback ? once(callback) : noop
+    listener.close = callback => {
+      callback = callback ? once(callback) : noop;
 
-      listener.io.emit('ss-leave')
+      listener.io.emit('ss-leave');
 
       setImmediate(() => {
-        listener.emit('close')
-        callback()
-      })
-    }
+        listener.emit('close');
+        callback();
+      });
+    };
 
-    listener.getAddrs = (callback) => {
-      setImmediate(() => callback(null, [this.maSelf]))
-    }
+    listener.getAddrs = callback => {
+      setImmediate(() => callback(null, [this.maSelf]));
+    };
 
-    this.listenersRefs[multiaddr.toString()] = listener
-    return listener
+    this.listenersRefs[multiaddr.toString()] = listener;
+    return listener;
   }
 
-  filter (multiaddrs) {
+  filter(multiaddrs) {
     if (!Array.isArray(multiaddrs)) {
-      multiaddrs = [multiaddrs]
+      multiaddrs = [multiaddrs];
     }
 
-    return multiaddrs.filter((ma) => {
+    return multiaddrs.filter(ma => {
       if (ma.protoNames().indexOf('p2p-circuit') > -1) {
-        return false
+        return false;
       }
 
-      return mafmt.WebRTCStar.matches(ma)
-    })
+      return mafmt.WebRTCStar.matches(ma);
+    });
   }
 
-  _peerDiscovered (maStr) {
-    if (!this.discovery._isStarted) return
+  _peerDiscovered(maStr) {
+    if (!this.discovery._isStarted) return;
 
-    log('Peer Discovered:', maStr)
-    maStr = cleanMultiaddr(maStr)
+    log('Peer Discovered:', maStr);
+    maStr = cleanMultiaddr(maStr);
 
-    const split = maStr.split('/ipfs/')
-    const peerIdStr = split[split.length - 1]
-    const peerId = PeerId.createFromB58String(peerIdStr)
-    const peerInfo = new PeerInfo(peerId)
-    peerInfo.multiaddrs.add(multiaddr(maStr))
-    this.discovery.emit('peer', peerInfo)
+    const split = maStr.split('/ipfs/');
+    const peerIdStr = split[split.length - 1];
+    const peerId = PeerId.createFromB58String(peerIdStr);
+    const peerInfo = new PeerInfo(peerId);
+    peerInfo.multiaddrs.add(multiaddr(maStr));
+    this.discovery.emit('peer', peerInfo);
   }
 }
 
-module.exports = withIs(WebRTCStar, { className: 'WebRTCStar', symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar' })
+module.exports = withIs(WebRTCStar, {
+  className: 'WebRTCStar',
+  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar',
+});
diff --git a/node_modules/libp2p-webrtc-star/src/utils.js b/node_modules/libp2p-webrtc-star/src/utils.js
index 13b39d5..5dba8bf 100644
--- a/node_modules/libp2p-webrtc-star/src/utils.js
+++ b/node_modules/libp2p-webrtc-star/src/utils.js
@@ -1,49 +1,49 @@
-'use strict'
 
-const multiaddr = require('multiaddr')
 
-function cleanUrlSIO (ma) {
-  const maStrSplit = ma.toString().split('/')
-  const tcpProto = ma.protos()[1].name
-  const wsProto = ma.protos()[2].name
-  const tcpPort = ma.stringTuples()[1][1]
+const multiaddr = require('multiaddr');
+
+function cleanUrlSIO(ma) {
+  const maStrSplit = ma.toString().split('/');
+  const tcpProto = ma.protos()[1].name;
+  const wsProto = ma.protos()[2].name;
+  const tcpPort = ma.stringTuples()[1][1];
 
   if (tcpProto !== 'tcp' || (wsProto !== 'ws' && wsProto !== 'wss')) {
-    throw new Error('invalid multiaddr: ' + ma.toString())
+    throw new Error('invalid multiaddr: ' + ma.toString());
   }
 
   if (!multiaddr.isName(ma)) {
-    return 'http://' + maStrSplit[2] + ':' + maStrSplit[4]
+    return 'http://' + maStrSplit[2] + ':' + maStrSplit[4];
   }
 
   if (wsProto === 'ws') {
-    return 'http://' + maStrSplit[2] + (tcpPort === 80 ? '' : ':' + tcpPort)
+    return 'http://' + maStrSplit[2] + (tcpPort === 80 ? '' : ':' + tcpPort);
   }
 
   if (wsProto === 'wss') {
-    return 'https://' + maStrSplit[2] + (tcpPort === 443 ? '' : ':' + tcpPort)
+    return 'https://' + maStrSplit[2] + (tcpPort === 443 ? '' : ':' + tcpPort);
   }
 }
 
-function cleanMultiaddr (maStr) {
-  const legacy = '/libp2p-webrtc-star'
+function cleanMultiaddr(maStr) {
+  const legacy = '/libp2p-webrtc-star';
 
   if (maStr.indexOf(legacy) !== -1) {
-    maStr = maStr.substring(legacy.length, maStr.length)
-    let ma = multiaddr(maStr)
-    const tuppleIPFS = ma.stringTuples().filter((tupple) => {
-      return tupple[0] === 421 // ipfs code
-    })[0]
-
-    ma = ma.decapsulate('ipfs')
-    ma = ma.encapsulate('/p2p-webrtc-star')
-    ma = ma.encapsulate(`/ipfs/${tuppleIPFS[1]}`)
-    maStr = ma.toString()
+    maStr = maStr.substring(legacy.length, maStr.length);
+    let ma = multiaddr(maStr);
+    const tuppleIPFS = ma.stringTuples().filter(tupple => {
+      return tupple[0] === 421; // ipfs code
+    })[0];
+
+    ma = ma.decapsulate('ipfs');
+    ma = ma.encapsulate('/p2p-webrtc-star');
+    ma = ma.encapsulate(`/ipfs/${tuppleIPFS[1]}`);
+    maStr = ma.toString();
   }
 
-  return maStr
+  return maStr;
 }
 
-exports = module.exports
-exports.cleanUrlSIO = cleanUrlSIO
-exports.cleanMultiaddr = cleanMultiaddr
+exports = module.exports;
+exports.cleanUrlSIO = cleanUrlSIO;
+exports.cleanMultiaddr = cleanMultiaddr;
