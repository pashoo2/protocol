diff --git a/node_modules/@types/orbit-db/Keystore.d.ts b/node_modules/@types/orbit-db/Keystore.d.ts
index 1bc5dd8..b759372 100644
--- a/node_modules/@types/orbit-db/Keystore.d.ts
+++ b/node_modules/@types/orbit-db/Keystore.d.ts
@@ -1,6 +1,35 @@
 declare module "orbit-db-keystore" {
-    export class Keystore {
+    export interface IOrbitDBKeystoreStore {
+        status: string;
+        open(): Promise<void>;
+        close(): Promise<void>;
+        put(k: string, v :any): Promise<void>;
+        get(k: string): string | Uint8Array;
+    }
+
+    export interface IOrbitDBKeystoreCache {
+        length: number;
+        keys: string[];
+        set(k: string, v :any): void;
+        get(k: string): any;
+        remove(k: string): void;
+        clear(): void;
+    }
+    
+    export interface IOrbitDBStorageCredentials {
+        password: string;
+    }
+
+    export interface IOrbitDBKeystoreOptionsForSecretStorage {
+        store?: string | IOrbitDBKeystoreStore;
+        cache?: IOrbitDBKeystoreCache;
+        dbName?: string;
+        credentials: IOrbitDBStorageCredentials;
+    }
 
+   export type TOrbitDBKeystoreOptions = IOrbitDBKeystoreOptionsForSecretStorage | string;
+    
+    export class Keystore {
         hasKey(id:string): Promise<boolean>
 
         createKey(id:string): Promise<{publicKey: string, privateKey: string}>
@@ -9,8 +38,9 @@ declare module "orbit-db-keystore" {
 
     }
 
-    export default class {
+    export default class extends Keystore {
         static create(directory?: string)
         static verify(signature: string, publicKey: string, data: string, v?:string): Promise<boolean>
+        constructor(options: TOrbitDBKeystoreOptions): Keystore;
     }
 }
diff --git a/node_modules/@types/orbit-db/OrbitDB.d.ts b/node_modules/@types/orbit-db/OrbitDB.d.ts
index 406d6e8..5c4b70a 100644
--- a/node_modules/@types/orbit-db/OrbitDB.d.ts
+++ b/node_modules/@types/orbit-db/OrbitDB.d.ts
@@ -13,6 +13,18 @@ declare module 'orbit-db' {
     import * as IPFS from "ipfs";
     import * as elliptic from "elliptic";
 
+    export interface OrbitDbStorage {
+        static public createStore(path: string): Cache; 
+    }
+
+    export interface IOrbitDBOptions {
+        directory?: string,
+        peerId?: string,
+        keystore?: Keystore,
+        cache?: Cache,
+        storage?: OrbitDbStorage,
+    }; 
+
     export class OrbitDB {
 
         stores: any;
@@ -22,10 +34,7 @@ declare module 'orbit-db' {
         static databaseTypes: string[];
         
 
-        constructor(ipfs: IPFS, directory?: string, options?: {
-            peerId?: string,
-            keystore?: Keystore
-        });
+        constructor(ipfs: IPFS, identity?: Identity, options?: IOrbitDBOptions);
 
         /**
          * Creates and returns an instance of OrbitDB. 
@@ -39,13 +48,7 @@ declare module 'orbit-db' {
          * <li>identity (Identity Instance): By default it creates an instance of Identity</li>
          * </ul>
          */
-        static createInstance(ipfs: IPFS, options?: {
-            directory?: string,
-            peerId?: string,
-            keystore?: Keystore,
-            cache?: Cache,
-            identity?: Identity
-        }): Promise<OrbitDB>
+        static createInstance(ipfs: IPFS, options?: IOrbitDBOptions & { identity?: Identity }): Promise<OrbitDB>
 
         create(name: string, type: TStoreType, options?: ICreateOptions): Promise<Store>;
 
