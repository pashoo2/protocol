import firebase from 'firebase/app';
import 'firebase/auth';
import 'firebase/database';
import { ICAConnectionSignUpCredentials, ICAConnectionUserAuthorizedResult } from '../../central-authority-connections.types';
import { ICAConnectionConfigurationFirebase, ICAConnectionFirebaseUserProfile } from '../central-authority-connection-firebase.types.configuration';
import { ICentralAuthorityUserAuthCredentials, TCentralAuthorityUserCryptoCredentials, ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';
import { CAConnectionFirestoreUtilsCredentialsStrorage } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';
import { ISensitiveDataSessionStorage } from '../../../../sensitive-data-session-storage/sensitive-data-session-storage.types';
import { ICAConnectionFirebaseBaseSessionData } from './central-authority-connection-firebase-base.types';
export declare class CAConnectionWithFirebaseBase {
    static validateConfiguration: (configuration: any) => configuration is ICAConnectionConfigurationFirebase;
    isConnected: boolean;
    get isUserSignedIn(): boolean;
    get isAuthorized(): boolean;
    get authResult(): ICAConnectionUserAuthorizedResult | void;
    protected configuration?: ICAConnectionConfigurationFirebase;
    protected isAuthorizedWithCredentials: boolean;
    protected valueofCredentialsSignUpOnAuthorizedSuccess?: ICAConnectionUserAuthorizedResult;
    protected connectionWithCredentialsStorage?: CAConnectionFirestoreUtilsCredentialsStrorage;
    protected get currentUser(): firebase.User | null;
    protected get isVerifiedAccount(): boolean;
    protected get databaseURL(): Error | string;
    protected get app(): firebase.app.App;
    getApp(): void | firebase.app.App;
    signOut(): Promise<boolean | Error>;
    connect(configuration: ICAConnectionConfigurationFirebase, name?: string): Promise<boolean | Error>;
    getCAUserProfile: () => Promise<Partial<ICentralAuthorityUserProfile> | undefined | Error>;
    protected getCurrentUserData(): firebase.User | null;
    protected mapUserFirebaseDataToCAUserProfileData(userData: firebase.User): Partial<ICentralAuthorityUserProfile>;
    protected mapUserProviderDataToCAUserProfileData(userData: firebase.UserInfo): Partial<ICentralAuthorityUserProfile>;
    protected getCurrentUserProfileData(): Partial<ICentralAuthorityUserProfile> | undefined;
    protected generateAndSetCredentialsForTheCurrentUser(signUpCredentials: ICAConnectionSignUpCredentials): Promise<Error | TCentralAuthorityUserCryptoCredentials>;
    protected setConnectedStatus(isConnected: false | firebase.app.App): void;
    protected setAuthorizedStatus(isAuthorized: boolean): void;
    protected checkIfConnected(): boolean | Error;
    protected checkSignUpCredentials(signUpCredentials: ICAConnectionSignUpCredentials): boolean | Error;
    protected setConnectionWithCredentialsStorage(connectionWithCredentialsStorage: CAConnectionFirestoreUtilsCredentialsStrorage): void;
    protected startConnectionWithCredentialsStorage(): Promise<boolean | Error>;
    protected waitingUserInit(): Promise<void | firebase.User | Error>;
    protected handleUnauthorized(): void;
    protected onAuthorizationFailed(error: Error | string): Error;
    protected singUpWithAuthCredentials(authCredentials: ICentralAuthorityUserAuthCredentials): Promise<boolean | Error>;
    protected singInWithAuthCredentials(authCredentials: ICentralAuthorityUserAuthCredentials): Promise<boolean | Error>;
    protected setSessionPersistance(): Promise<void>;
    protected getUserProfileData(): Promise<Error | ICentralAuthorityUserProfile>;
    protected returnOnAuthorizedResult(cryptoCredentials: TCentralAuthorityUserCryptoCredentials): Promise<ICAConnectionUserAuthorizedResult | Error>;
    protected mapAppProfileToFirebaseProfileWithoutEmail(profile: Partial<ICentralAuthorityUserProfile>): ICAConnectionFirebaseUserProfile;
    protected setProfileDataEmail(email: string): Promise<Error | boolean>;
    protected setProfileDataWithFirebase(profileDataPartialWithoutPhoneNumber: Partial<ICentralAuthorityUserProfile>): Promise<Error | boolean>;
    protected setProfileData(profile: Partial<ICentralAuthorityUserProfile>): Promise<Error | ICentralAuthorityUserProfile>;
    protected handleAuthEmailNotVerified(): Promise<boolean | Error>;
    protected chekIfVerifiedAccount(): Promise<boolean | Error>;
    protected generateNewCryptoCredentialsForConfigurationProvided: () => Promise<Error | TCentralAuthorityUserCryptoCredentials>;
    protected checkUserIdentityIsValidForConfigurationProvided(cryptoCredentials: TCentralAuthorityUserCryptoCredentials): Error | TCentralAuthorityUserCryptoCredentials;
    protected readCryptoCredentialsForTheUserFromDatabase(signUpCredentials: ICAConnectionSignUpCredentials): Promise<Error | TCentralAuthorityUserCryptoCredentials | null>;
    protected setCryptoCredentialsForTheUserToDatabase: (cryptoCredentials: TCentralAuthorityUserCryptoCredentials, signUpCredentials: ICAConnectionSignUpCredentials) => Promise<Error | TCentralAuthorityUserCryptoCredentials>;
    protected createOrSetCredentialsInDB(signUpCredentials: ICAConnectionSignUpCredentials, generateNewCryptoCredentialsForConfigurationProvided?: () => Promise<Error | TCentralAuthorityUserCryptoCredentials>, setCryptoCredentialsForTheUserToDatabase?: (cryptoCredentials: TCentralAuthorityUserCryptoCredentials, signUpCredentials: ICAConnectionSignUpCredentials) => Promise<Error | TCentralAuthorityUserCryptoCredentials>): Promise<Error | TCentralAuthorityUserCryptoCredentials>;
    protected checkIfCredentialsExistsForTheUser(signUpCredentials: ICAConnectionSignUpCredentials): Promise<Error | void | TCentralAuthorityUserCryptoCredentials>;
    protected setSessionData(session: ISensitiveDataSessionStorage, sessionData: object): Promise<Error | undefined>;
    protected setCurrentUserCryptoCredentialsInSession(session: ISensitiveDataSessionStorage, cryptoCredentials: TCentralAuthorityUserCryptoCredentials): Promise<Error | undefined>;
    protected readSessionData(session: ISensitiveDataSessionStorage): Promise<Error | undefined | ICAConnectionFirebaseBaseSessionData>;
    protected readCryptoCrdentialsFromSession(session: ISensitiveDataSessionStorage): Promise<undefined | Error | TCentralAuthorityUserCryptoCredentials>;
    protected createOrReturnExistingCredentialsForUser(signUpCredentials: ICAConnectionSignUpCredentials): Promise<Error | TCentralAuthorityUserCryptoCredentials>;
    protected signInWithSessionPersisted(): Promise<any>;
    protected signIn(firebaseCredentials: ICAConnectionSignUpCredentials): Promise<boolean | Error>;
    protected signUp(signUpCredentials: ICAConnectionSignUpCredentials): Promise<Error | boolean>;
    protected disconnectCredentialsStorage(): Promise<Error | boolean>;
}
export default CAConnectionWithFirebaseBase;
//# sourceMappingURL=central-authority-connection-firebase-base.d.ts.map