import { ICentralAuthorityUserProfile, TCentralAuthorityUserIdentity } from './central-authority-class-types/central-authority-class-types-common';
import { TCentralAuthorityUserCryptoCredentials } from './central-authority-class-types/central-authority-class-types-crypto-credentials';
import { TCAUserIdentityRawTypes, TCAuthProviderIdentifier } from './central-authority-class-user-identity/central-authority-class-user-identity.types';
import { ICentralAuthority, ICentralAuthorityAuthProvidersOptions, ICentralAuthorityOptions, ICentralAuthorityUser } from './central-authority-class.types';
import { ICAConnectionPool, ICAConnectionPoolAuthResult, ICAConnectionsPoolOptions } from './central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types';
import { ICAConnectionSignUpCredentials, TCAAuthProviderIdentity } from './central-authority-connections/central-authority-connections.types';
import { CentralAuthorityStorageCurrentUserCredentials } from './central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials';
import { ICAStorageCurrentUserCredentials, ICAStorageCurrentUserCredentialsOptions } from './central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types';
import { ICASwarmCredentialsProvider, ICASwarmCredentialsProviderOptions } from './central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types';
export declare class CentralAuthority implements ICentralAuthority {
    get isRunning(): boolean;
    protected isRunningInstance: boolean;
    protected authProviderId?: TCAuthProviderIdentifier;
    protected remoteProvidedUserCryptoCredntials?: TCentralAuthorityUserCryptoCredentials;
    protected locallyStoredUserCryptoCredntials?: TCentralAuthorityUserCryptoCredentials;
    protected userProfileOnAuthService?: ICentralAuthorityUserProfile;
    protected authProvidersPoolConfiguration?: ICentralAuthorityAuthProvidersOptions;
    protected connectionAuthProvidersPool?: ICAConnectionPool;
    protected connectionStorageCurrentUserCrdentials?: ICAStorageCurrentUserCredentials;
    protected connectionSwarmCredentialsProvider?: ICASwarmCredentialsProvider;
    protected get errorNotRunning(): import("../basic-classes/error-extended-class-base/error-extended-class-base").ErrorExtendedBaseClass;
    connect(options: ICentralAuthorityOptions): Promise<Error | void>;
    disconnect(): Promise<Error | void>;
    getSwarmUserCredentials(identity: TCAUserIdentityRawTypes): Promise<TCentralAuthorityUserCryptoCredentials | Error | null>;
    getSwarmUserEncryptionPubKey(identity: TCAUserIdentityRawTypes): Promise<Error | null | CryptoKey>;
    getSwarmUserSignPubKey(identity: TCAUserIdentityRawTypes): Promise<Error | null | CryptoKey>;
    getUserIdentity(): Error | TCentralAuthorityUserIdentity;
    getUserEncryptionKeyPair(): Error | CryptoKeyPair;
    getUserDataSignKeyPair(): Error | CryptoKeyPair;
    getCAUserProfile(): Promise<ICentralAuthorityUserProfile | undefined>;
    exportCryptoCredentials(): Promise<string | Error>;
    protected validateOptions(options: ICentralAuthorityOptions): Error | void;
    protected setOptions(options: ICentralAuthorityOptions): Error | void;
    protected unsetOptions(): void;
    protected setIsRunning(): void;
    protected unsetIsRunning(): void;
    protected closeConnectionToAuthProvidersPool(): Promise<Error | void>;
    protected closeConnectionToCurrentUserCredentialsStorage(): Promise<Error | void>;
    protected closeConnectionSwarmCredentialsProvider(): Promise<Error | void>;
    protected closeAllConnections(): Promise<Error | void>;
    protected unsetPropsOnClose(): void;
    protected disconnectAll(): Promise<Error | void>;
    protected handleFailAndClose(error?: string | Error): Promise<Error>;
    protected getOptionsForAuthProvidersConnectionsPool(options: ICentralAuthorityAuthProvidersOptions): ICAConnectionsPoolOptions;
    protected getOptionsToAuthorizeUserOnAuthConnection(optionsUserCredentials: ICentralAuthorityUser): [TCAAuthProviderIdentity, ICAConnectionSignUpCredentials, Partial<ICentralAuthorityUserProfile> | undefined];
    protected setUserOnAuthResult(caSwarmConnectionsPoolAuthResult: ICAConnectionPoolAuthResult): void;
    protected unsetUserOnAuthResult(): void;
    protected setConnectionToAuthProvidersPool(connectionSwarmPool: ICAConnectionPool): void;
    protected unsetConnectionToAuthProvidersPool(): void;
    protected connectToAuthProvidersPool(optionsConnectionPool: ICentralAuthorityAuthProvidersOptions, optionsUserCredentials: ICentralAuthorityUser): Promise<Error | void>;
    protected getOptionsForCAStorageCurrentUserCredentials(optionsUser: ICentralAuthorityUser): ICAStorageCurrentUserCredentialsOptions;
    protected setConnectionToCurrentUserCredentialsStorage(connection: CentralAuthorityStorageCurrentUserCredentials): void;
    protected unsetConnectionToCurrentUserCredentialsStorage(): void;
    protected connectToUserCredentialsStorage(optionsUser: ICentralAuthorityUser): Promise<Error | void>;
    protected setLocallyStoredCredentials(cryptoCredentials: TCentralAuthorityUserCryptoCredentials): void | Error;
    protected unsetLocallyStoredCredentials(): void;
    protected readAndSetLocallyStoredUserCredentials(): Promise<Error | void>;
    protected compareLocalAndRemoteCredentials(): Promise<Error | void>;
    protected storeCryptoCredentialsFromAuthProvider(): Promise<Error | void>;
    protected createConnectionToSwarmCredentialsStorage(): Error | ICASwarmCredentialsProvider;
    protected getOptionsForSwarmCredentialsStorageConnection(): Error | ICASwarmCredentialsProviderOptions;
    protected setConnectionToSwarmCredentialsStorage(connection: ICASwarmCredentialsProvider): void;
    protected unsetConnectionToSwarmCredentialsStorage(): void;
    protected connectToSwarmCredentialsStorage(): Promise<Error | void>;
    protected readSwarmUserCredentials(identity: TCAUserIdentityRawTypes): Promise<TCentralAuthorityUserCryptoCredentials | Error | null>;
    protected getCurrentUserCryptoCredentials(): Error | TCentralAuthorityUserCryptoCredentials;
}
//# sourceMappingURL=central-authority-class.d.ts.map