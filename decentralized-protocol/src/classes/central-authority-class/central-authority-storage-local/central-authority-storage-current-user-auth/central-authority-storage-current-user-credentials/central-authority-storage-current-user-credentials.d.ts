import { TCentralAuthorityUserIdentity } from './../../../central-authority-class-types/central-authority-class-types-common';
import { TCentralAuthorityUserCryptoCredentials } from './../../../central-authority-class-types/central-authority-class-types-crypto-credentials';
import { SecretStorage } from 'classes/secret-storage-class';
import { TCAuthProviderIdentifier } from '../../../central-authority-class-user-identity/central-authority-class-user-identity.types';
import { ICAStorageCurrentUserCredentials, ICAStorageCurrentUserCredentialsOptions } from './central-authority-storage-current-user-credentials.types';
export declare class CentralAuthorityStorageCurrentUserCredentials implements ICAStorageCurrentUserCredentials {
    protected static authorizeInStorage(secretStorageConnection: SecretStorage, cryptoKey: CryptoKey): Promise<Error | void>;
    protected get isSecretStorageActive(): boolean;
    private isDisconnected;
    private secretStorageEncryptionKey?;
    private secretStorageConnection?;
    connect: (options: ICAStorageCurrentUserCredentialsOptions) => Promise<Error | void>;
    disconnect: () => Promise<Error | void>;
    set: (userCryptoCredentials: TCentralAuthorityUserCryptoCredentials) => Promise<void | Error>;
    get: (userIdentity: TCentralAuthorityUserIdentity) => Promise<TCentralAuthorityUserCryptoCredentials | Error | void>;
    unset: (userIdentity: TCentralAuthorityUserIdentity) => Promise<Error | void>;
    getByAuthProvider: (authProviderIdentity: TCAuthProviderIdentifier) => Promise<TCentralAuthorityUserCryptoCredentials | Error | void>;
    protected reconnect(): Promise<Error | void>;
    protected keyWithPrefix(key: string): string;
    protected getCredentials(key: string): Promise<TCentralAuthorityUserCryptoCredentials | Error | void>;
    protected validateAuthProviderId(authProviderURL: string): Error | void;
    protected validateUserIdentity(userIdentity: any): userIdentity is TCentralAuthorityUserIdentity;
    protected getAuthProviderIdentityByUserId(userIdentity: string): Error | string;
    protected exportCredentialsToString(userCryptoCredentials: TCentralAuthorityUserCryptoCredentials): Promise<string | Error>;
    protected setCredentialsForUserIdentity(userCryptoCredentials: TCentralAuthorityUserCryptoCredentials, userCryptoCredentialsExported: string): Promise<void | Error>;
    protected setCredentialsForAuthProvider(userCryptoCredentials: TCentralAuthorityUserCryptoCredentials, userCryptoCredentialsExported: string): Promise<Error | void>;
    protected unsetCredentialsForUser(identityOrCredentials: string | TCentralAuthorityUserCryptoCredentials): Promise<Error | void>;
    protected validateCryptoCredentials(cryptoCredentials: any): cryptoCredentials is TCentralAuthorityUserCryptoCredentials;
    private setIsDisconnected;
    private unsetIsDisconnected;
    private setSecretStorageCryptoKey;
    private unsetSecretStorageCryptoKey;
    private setSecretStorageConnection;
    private unsetSecretStorageConnection;
    private createConnectionToSecretStorage;
    private readSecretStorageCryptoKeyFromSession;
    private setSecretStorageCryptoKeyInSession;
    private createSecretStorageConnection;
    private disconnectFromSecretStorage;
    private checkConnectionAndReconnect;
}
//# sourceMappingURL=central-authority-storage-current-user-credentials.d.ts.map