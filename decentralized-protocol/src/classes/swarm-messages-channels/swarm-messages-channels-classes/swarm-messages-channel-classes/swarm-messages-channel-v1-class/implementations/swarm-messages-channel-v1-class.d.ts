import { ESwarmStoreConnector } from 'classes/swarm-store-class/swarm-store-class.const';
import { ISwarmMessageInstanceDecrypted, TSwarmMessageSerialized } from 'classes/swarm-message/swarm-message-constructor.types';
import { ISwarmStoreConnector, ISwarmStoreConnectorBasic, ISwarmStoreOptionsConnectorFabric, ISwarmStoreProviderOptions, TSwarmStoreConnectorConnectionOptions, TSwarmStoreDatabaseOptions, TSwarmStoreDatabaseType } from 'classes/swarm-store-class/swarm-store-class.types';
import { ISwarmMessageStore, ISwarmMessageStoreAccessControlOptions, ISwarmMessageStoreOptionsWithConnectorFabric, TSwarmMessagesStoreGrantAccessCallback } from 'classes/swarm-message-store/types/swarm-message-store.types';
import { ISwarmMessageConstructorWithEncryptedCacheFabric } from 'classes/swarm-message-encrypted-cache/swarm-message-encrypted-cache.types';
import { ISwarmMessagesDatabaseCache, ISwarmMessagesDatabaseCacheOptions, ISwarmMessagesDatabaseConnectOptions } from 'classes/swarm-messages-database/swarm-messages-database.types';
import { ISwarmMessagesDatabaseMessagesCollector } from 'classes/swarm-messages-database/swarm-messages-database.messages-collector.types';
import { SWARM_MESSAGES_CHANNEL_ENCRYPTION } from '../../../../const/swarm-messages-channels-main.const';
import { TSwarmMessageUserIdentifierSerialized } from '../../../../../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-common-validator-user-identifier/central-authority-common-validator-user-identifier.types';
import { ISwarmMessagesDatabaseConnector, ISwarmMessageDatabaseEvents } from '../../../../../swarm-messages-database/swarm-messages-database.types';
import { ISwarmMessageChannelDescriptionWithoutDatabaseOptionsRaw, ISwarmMessagesChannelConstructorUtils } from '../../../../types/swarm-messages-channel-instance.types';
import { TSwarmMessagesChannelId, ISwarmMessagesChannel, ISwarmMessagesChannelConstructorOptions, ISwarmMessageChannelDescriptionRaw } from '../../../../types/swarm-messages-channel-instance.types';
import { ISwarmMessagesChannelsDescriptionsList } from '../../../../types/swarm-messages-channels-list-instance.types';
import { ISwarmMessagesChannelV1ClassChannelsListHandlerConstructorOptions } from '../types/swarm-messages-channel-v1-class-channels-list-handler.types';
import { ISwarmMessagesChannelV1DatabaseHandlerConstructorOptions } from '../types/swarm-messages-channel-v1-class-messages-database-handler.types';
import { IQueuedEncryptionClassBase } from '../../../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';
import { EventEmitter } from '../../../../../basic-classes/event-emitter-class-base/event-emitter-class-base.types';
import { ESwarmStoreConnectorOrbitDbDatabaseType } from '../../../../../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';
import { SWARM_MESSAGES_CHANNEL_VERSION } from '../../../const/swarm-messages-channel-classes-params.const';
import { TSwarmMessageDatabaseMessagesCached } from '../../../../../swarm-messages-database/swarm-messages-database.types';
import { TSwarmStoreDatabaseEntityKey, TSwarmStoreDatabaseIteratorMethodArgument } from '../../../../../swarm-store-class/swarm-store-class.types';
import { ISwarmMessageStoreDeleteMessageArg, ISwarmMessageStoreMessagingRequestWithMetaResult } from '../../../../../swarm-message-store/types/swarm-message-store.types';
import { ISwarmMessagesChannelV1ClassChannelsListHandler, ISwarmMessagesChannelV1ClassChannelsListHandlerConstructor } from '../types/swarm-messages-channel-v1-class-channels-list-handler.types';
import { ISwarmMessagesChannelV1DatabaseHandler, ISwarmMessagesChannelV1DatabaseHandlerConstructor } from '../types/swarm-messages-channel-v1-class-messages-database-handler.types';
import { ISwarmMessagesChannelNotificationEmitter } from '../../../../types/swarm-messages-channel-events.types';
export declare class SwarmMessagesChannelV1Class<P extends ESwarmStoreConnector, T extends TSwarmMessageSerialized, DbType extends TSwarmStoreDatabaseType<P>, DBO extends TSwarmStoreDatabaseOptions<P, T, DbType>, ConnectorBasic extends ISwarmStoreConnectorBasic<P, T, DbType, DBO>, CO extends TSwarmStoreConnectorConnectionOptions<P, T, DbType, DBO, ConnectorBasic>, PO extends ISwarmStoreProviderOptions<P, T, DbType, DBO, ConnectorBasic, CO>, ConnectorMain extends ISwarmStoreConnector<P, T, DbType, DBO, ConnectorBasic, CO>, CFO extends ISwarmStoreOptionsConnectorFabric<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain>, GAC extends TSwarmMessagesStoreGrantAccessCallback<P, MD | T>, MCF extends ISwarmMessageConstructorWithEncryptedCacheFabric | undefined, ACO extends ISwarmMessageStoreAccessControlOptions<P, T, MD | T, GAC> | undefined, O extends ISwarmMessageStoreOptionsWithConnectorFabric<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, MD | T, GAC, MCF, ACO>, SMS extends ISwarmMessageStore<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, MD | T, GAC, MCF, ACO, O>, MD extends ISwarmMessageInstanceDecrypted, SMSM extends ISwarmMessagesDatabaseMessagesCollector<P, DbType, MD>, DCO extends ISwarmMessagesDatabaseCacheOptions<P, DbType, MD, SMSM>, DCCRT extends ISwarmMessagesDatabaseCache<P, T, DbType, DBO, MD, SMSM>, OPT extends ISwarmMessagesDatabaseConnectOptions<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT>, CHD extends ISwarmMessageChannelDescriptionRaw<P, T, DbType, DBO> = ISwarmMessageChannelDescriptionRaw<P, T, DbType, DBO>> implements ISwarmMessagesChannel<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD> {
    private __options;
    private __swarmMessagesChannelV1ClassChannelsListHandlerConstructor;
    private __swarmMessagesChannelV1DatabaseHandlerConstructor;
    get id(): TSwarmMessagesChannelId;
    get version(): SWARM_MESSAGES_CHANNEL_VERSION;
    get name(): string;
    get description(): string;
    get tags(): string[];
    get dbType(): DbType;
    get messageEncryption(): SWARM_MESSAGES_CHANNEL_ENCRYPTION;
    get admins(): Array<TSwarmMessageUserIdentifierSerialized>;
    get channelInactiveReasonError(): Error | undefined;
    get emitterChannelState(): ISwarmMessagesChannelNotificationEmitter<P, T, DbType>;
    get emitterChannelMessagesDatabase(): EventEmitter<ISwarmMessageDatabaseEvents<P, T, DbType, DBO, MD>>;
    get markedAsRemoved(): boolean;
    get isReady(): boolean;
    get cachedMessages(): TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined;
    protected get _swarmMessagesChannelDescriptionWODatabaseOptions(): ISwarmMessageChannelDescriptionWithoutDatabaseOptionsRaw<P, DbType>;
    protected get _swarmMessagesChannelDescriptionActual(): CHD;
    protected get _constructorOptionsUtils(): ISwarmMessagesChannelConstructorUtils<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT>;
    protected get _whetherChannelIsActive(): boolean;
    protected get _actualSwarmMessagesIssuer(): string;
    protected _initializationPromise: Promise<ISwarmMessagesDatabaseConnector<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT>> | undefined;
    private __swarmMessagesChannelDescriptionActual;
    private __channelInactiveReasonError;
    private __markedAsRemoved;
    private __isClosed;
    private __swarmMessagesChannelsListHandlerInstance;
    private __swarmMessagesChannelDatabaseHandlerInstance;
    constructor(__options: ISwarmMessagesChannelConstructorOptions<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT, CHD>, __swarmMessagesChannelV1ClassChannelsListHandlerConstructor: ISwarmMessagesChannelV1ClassChannelsListHandlerConstructor<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>, __swarmMessagesChannelV1DatabaseHandlerConstructor: ISwarmMessagesChannelV1DatabaseHandlerConstructor<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT, CHD['messageEncryption']>);
    addMessage(message: Omit<MD['bdy'], 'iss'>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): Promise<void>;
    deleteMessage(messageAddressOrKey: ISwarmMessageStoreDeleteMessageArg<P, DbType>): Promise<void>;
    collect(options: TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>): Promise<Array<Error | MD>>;
    collectWithMeta(options: TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>): Promise<Array<ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD> | undefined>>;
    updateChannelDescription(channelRawDescription: Readonly<ISwarmMessageChannelDescriptionRaw<P, T, DbType, DBO>>): Promise<void>;
    close(): Promise<void>;
    deleteLocally(): Promise<void>;
    dropDescriptionAndDeleteRemotely(): Promise<void>;
    protected _validateSwarmMessagesChannelsListInstance(swarmMessagesChannelsListInstance: ISwarmMessagesChannelsDescriptionsList<P, T, MD>): void;
    protected _validateSwarmChannelDescription(swarmMessagesChannelDescription: ISwarmMessageChannelDescriptionRaw<P, T, DbType, DBO>): void;
    protected _validateOptions(options: ISwarmMessagesChannelConstructorOptions<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT>): void;
    protected _getOptionsForSwarmMessagesChannelsListConstructor(): ISwarmMessagesChannelV1ClassChannelsListHandlerConstructorOptions<P, T, DbType, DBO, MD>;
    protected _createSwarmMessagesChannelsListHandlerInstance(): ISwarmMessagesChannelV1ClassChannelsListHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>;
    protected _setChannelInactiveReasonError(channelInactivityResonError: Error): void;
    protected _unsetChannelInactiveReasonError(): void;
    protected _setChannelClosed(): void;
    protected _setChannelMarkedAsRemoved(): void;
    protected _unsetChannelMarkedAsRemoved(): void;
    protected _unsetInstancesRelated(): void;
    protected _setListenersSwarmMessagesChannelsListHandlerInstance(swarmMessagesChannelsListInstance: ISwarmMessagesChannelV1ClassChannelsListHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>, isAddListeners?: boolean): void;
    protected _setChannelDescriptionActual(channelDescriptionUpdated: ISwarmMessageChannelDescriptionRaw<P, T, DbType, DBO>): void;
    protected _restartActualSwarmMessagesChannelDatabaseHandlerInstanceByActualChannelDescription(): Promise<void>;
    protected _restartChannelDatabaseConnectorWithDatabaseHandler(): Promise<void>;
    protected _getChannelDatabaseOptionsByChannelDescriptionActual(): DBO;
    protected _getMessagesEncryptionQueueOrUndefinedIfChannelNotEncryptedByPassword(messageEncryption: CHD['messageEncryption']): CHD['messageEncryption'] extends SWARM_MESSAGES_CHANNEL_ENCRYPTION.PASSWORD ? IQueuedEncryptionClassBase : undefined;
    protected _getOptionsForChannelDatabaseHandlerConstructor(): ISwarmMessagesChannelV1DatabaseHandlerConstructorOptions<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT, CHD['messageEncryption']>;
    protected _createSwarmMessagesChannelDatabaseHandler(): ISwarmMessagesChannelV1DatabaseHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>;
    protected _setListenersSwarmMessagesChannelDatabaseHandlerInstance(swarmMessagesChannelDatabaseHandlerInstance: ISwarmMessagesChannelV1DatabaseHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>, isAddListeners?: boolean): void;
    protected _unsetListenersSwarmMessagesChannelDatabaseHandlerInstance(): void;
    protected _unsetListenersSwarmMessagesChannelsListHandlerInstance(): void;
    protected _unsetAllListenersOfInstancesRelated(): void;
    protected _closeChannelDatabaseHandlerInstance(): Promise<void>;
    protected _resetState(): void;
    protected _verifyChannelIsNotClosed(): void;
    protected _verifyChannelIsReadyForMessaging(): void;
    protected _verifyChannelIsReadyForChannelListOperations(): void;
    protected _getActiveSwarmMessagesChannelDatabaseHandlerInstance(): ISwarmMessagesChannelV1DatabaseHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>;
    protected __closeChannelWithReasonError(error: Error): Promise<void>;
    protected _getActiveSwarmMessagesChannelsListHandlerInstance(): ISwarmMessagesChannelV1ClassChannelsListHandler<P, T, DbType, DBO, ConnectorBasic, CO, PO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD>;
    private __emitChannelOpened;
    private __emitChannelClosed;
    private handleChannelsListHandlerEventChannelDescriptionUpdate;
    private __handleChannelsListHandlerEventChannelDescriptionRemoved;
    private __handleChannelDatabaseHandlerEventDatabaseReady;
    private __handleChannelDatabaseHandlerEventDatabaseClosed;
    private __handleChannelDatabaseHandlerEventDatabaseDropped;
}
//# sourceMappingURL=swarm-messages-channel-v1-class.d.ts.map