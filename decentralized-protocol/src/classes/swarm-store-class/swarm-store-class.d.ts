import { TSwarmStoreDatabaseRequestMethodReturnType, ISwarmStoreDatabasesCommonStatusList } from './swarm-store-class.types';
import { ESwarmStoreConnector, ESwarmStoreEventNames, ESwarmStoreDbStatus } from './swarm-store-class.const';
import { ISwarmStoreOptionsWithConnectorFabric, TSwarmStoreConnectorConnectionOptions, ISwarmStoreProviderOptions, ISwarmStoreOptionsConnectorFabric } from './swarm-store-class.types';
import { TSwarmStoreDatabaseType, ISwarmStoreConnectorBasic, ISwarmStoreWithConnector, ISwarmStoreConnectorDatabasesPersistentList } from './swarm-store-class.types';
import { ISwarmStoreConnector, ISwarmStoreDatabasesStatuses, TSwarmStoreValueTypes, TSwarmStoreDatabaseMethod, TSwarmStoreDatabaseMethodArgument, TSwarmStoreConnectorEventRetransmitter, TSwarmStoreDatabaseOptions, ISwarmStoreEvents, ISwarmStore } from './swarm-store-class.types';
declare const SwarmStore_base: import("../basic-classes/event-emitter-class-base").EventEmitterContructor<any>;
export declare class SwarmStore<P extends ESwarmStoreConnector, ItemType extends TSwarmStoreValueTypes<P>, DbType extends TSwarmStoreDatabaseType<P>, DBO extends TSwarmStoreDatabaseOptions<P, ItemType, DbType>, ConnectorBasic extends ISwarmStoreConnectorBasic<P, ItemType, DbType, DBO>, PO extends TSwarmStoreConnectorConnectionOptions<P, ItemType, DbType, DBO, ConnectorBasic>, CO extends ISwarmStoreProviderOptions<P, ItemType, DbType, DBO, ConnectorBasic, PO>, ConnectorMain extends ISwarmStoreConnector<P, ItemType, DbType, DBO, ConnectorBasic, PO>, CFO extends ISwarmStoreOptionsConnectorFabric<P, ItemType, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain>, O extends ISwarmStoreOptionsWithConnectorFabric<P, ItemType, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO>, E extends ISwarmStoreEvents<P, ItemType, DbType, DBO>> extends SwarmStore_base implements ISwarmStore<P, ItemType, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, O>, ISwarmStoreWithConnector<P, ItemType, DbType, DBO, ConnectorBasic, PO, ConnectorMain> {
    get isReady(): boolean;
    get isClosed(): boolean;
    get dbStatuses(): ISwarmStoreDatabasesStatuses;
    get databases(): ISwarmStoreDatabasesCommonStatusList<P, ItemType, DbType, DBO>;
    protected connector: ConnectorMain | undefined;
    protected dbStatusesExisting: ISwarmStoreDatabasesStatuses;
    protected storeConnectorEventsHandlers: Record<ESwarmStoreEventNames, TSwarmStoreConnectorEventRetransmitter> | undefined;
    protected get databasesKnownOptionsList(): Record<DBO['dbName'], DBO> | undefined;
    protected databasesOpenedList: Record<DBO['dbName'], boolean>;
    protected persistentDatbasesList?: ISwarmStoreConnectorDatabasesPersistentList<P, ItemType, DbType, DBO, Record<DBO['dbName'], DBO>>;
    connect(options: O): Promise<Error | void>;
    close(): Promise<Error | undefined>;
    openDatabase(dbOptions: DBO): Promise<void | Error>;
    closeDatabase(dbName: string): Promise<void | Error>;
    dropDatabase(dbName: string): Promise<void | Error>;
    request<A extends ItemType, DT extends DbType>(dbName: DBO['dbName'], dbMethod: TSwarmStoreDatabaseMethod<P>, arg: TSwarmStoreDatabaseMethodArgument<P, A, DbType>): Promise<TSwarmStoreDatabaseRequestMethodReturnType<P, A>>;
    protected validateOptions(options: O): void;
    protected getDatabasesListKey(directory?: string): Promise<string>;
    protected getStorageConnector(connectorName: ESwarmStoreConnector): typeof import("./swarm-store-connectors").SwarmStoreConnectorOrbitDB;
    protected getDatabaseOptions(dbName: DBO['dbName']): Promise<DBO | undefined>;
    getConnectorOrError(): ConnectorMain | Error;
    protected setDatabasePersistentListAndPreloadDatabasesList(persistentDatbasesList: ISwarmStoreConnectorDatabasesPersistentList<P, ItemType, DbType, DBO, Record<DBO['dbName'], DBO>>): Promise<void>;
    protected emitDatabasesListUpdated(): void;
    protected setDatabaseHasBeenOpened(dbName: DBO['dbName']): void;
    protected deleteDatabaseFromOpenedList(dbName: DBO['dbName']): void;
    protected handleDatabaseOpened(dbOpenedOptions: DBO): Promise<void>;
    protected handleDatabaseClosed(dbOpenedOptions: DBO): Promise<void>;
    protected emitDatbaseDropped(dbName: string): void;
    protected handleDatabaseDropped(dbOpenedOptions: DBO): Promise<void>;
    protected addDatabaseOpenedOptions(dbOpenedOptions: DBO): Promise<void>;
    protected removeDatabaseOpenedOptions(dbOpenedOptions: DBO): Promise<void>;
    protected getOptionsForConnectorFabric(options: O): CO;
    protected createConnectionWithStorageConnector(options: O): ConnectorMain;
    protected startConnectionWithConnector(connector: ConnectorMain, options: O): Promise<void>;
    protected setEmptyStatusForDb: (dbName: string) => void;
    protected setClosedStatusForDb: (dbName: string) => void;
    protected createStatusTable(options: O): void;
    protected dbReadyListener: (dbName: string) => void;
    protected dbUpdateListener: (dbName: string) => ESwarmStoreDbStatus;
    protected dbCloseListener: (dbName: string) => ESwarmStoreDbStatus;
    protected dbLoadingListener: ([dbName, percent]: [string, number]) => void;
    protected subscribeOnDbEvents(connector: ConnectorMain, isSubscribe?: boolean): void;
    protected unsubscribeFromDbEvents(connector: ConnectorMain): void;
    protected subscribeConnectorAllEvents(connector: ConnectorMain): void;
    protected unSubscribeConnectorAllEvents(connector: ConnectorMain): void;
    protected subscribeOnConnector(connector: ConnectorMain): void;
    protected unSubscribeFromConnector(connector: ConnectorMain): void;
    protected closeConnector(): Promise<void>;
    protected reset(): void;
}
export {};
//# sourceMappingURL=swarm-store-class.d.ts.map