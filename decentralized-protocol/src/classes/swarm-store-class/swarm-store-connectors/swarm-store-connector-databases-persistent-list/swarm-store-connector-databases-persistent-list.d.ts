import { ESwarmStoreConnector } from '../../swarm-store-class.const';
import { IStorageCommon } from '../../../../types/storage.types';
import { ISerializer } from '../../../../types/serialization.types';
import { ISwarmStoreConnectorDatabasesPersistentListConstructorParams } from '../../swarm-store-class.types';
import { IAsyncQueueConcurrentWithAutoExecution } from '../../../basic-classes/async-queue-class-base';
import { TSwarmStoreValueTypes, TSwarmStoreDatabaseType, TSwarmStoreDatabaseOptions, ISwarmStoreConnectorDatabasesPersistentList } from '../../swarm-store-class.types';
export declare class SwarmStoreConnectorPersistentList<P extends ESwarmStoreConnector, ItemType extends TSwarmStoreValueTypes<P>, DbType extends TSwarmStoreDatabaseType<P>, DBO extends TSwarmStoreDatabaseOptions<P, ItemType, DbType>, DBL extends Record<DBO['dbName'], DBO>> implements ISwarmStoreConnectorDatabasesPersistentList<P, ItemType, DbType, DBO, DBL> {
    get databasesKnownOptionsList(): DBL | undefined;
    protected _databaseListPersistentStorage: IStorageCommon | undefined;
    protected _keyPrefixInStorageForSerializedDbList: string | undefined;
    protected _serializer: ISerializer | undefined;
    protected _databasesList: DBL | undefined;
    private _asyncOperationsQueue;
    private _wasClosed;
    protected readonly _maxFailsOfersistentStorageOperation = 3;
    protected get _databasesUniqNamesList(): Array<DBO['dbName']> | undefined;
    constructor(params: ISwarmStoreConnectorDatabasesPersistentListConstructorParams);
    loadDatabasesListFromPersistentStorage(): Promise<DBL>;
    getDatabaseOptions(dbName: DBO['dbName']): Promise<DBO | undefined>;
    addDatabase(dbName: DBO['dbName'], dbOptions: DBO): Promise<void>;
    addDatabaseSerializedOptions(dbName: DBO['dbName'], dbOptions: string): Promise<void>;
    removeDatabase(dbName: DBO['dbName']): Promise<void>;
    close(): Promise<void>;
    protected _validateParams(params: ISwarmStoreConnectorDatabasesPersistentListConstructorParams): params is ISwarmStoreConnectorDatabasesPersistentListConstructorParams;
    protected _setParams(params: ISwarmStoreConnectorDatabasesPersistentListConstructorParams): void;
    protected _initializeAsyncQueue(): void;
    protected _setInstanceClosed(): void;
    protected _unsetParams(): void;
    protected _unsetAsyncQueue(): void;
    protected _resetTheInstance(): void;
    protected _checkInstanceIsNotClosed(): void;
    protected _getAsyncOperationsQueue(): IAsyncQueueConcurrentWithAutoExecution<void, Error>;
    protected _destroyAsyncOperationsQueue(): Promise<void>;
    protected _getDatabasesListClone(): DBL;
    protected _getDatabaseListPersistentStorage(): IStorageCommon;
    protected _getKeyPrefixForSerializedDbListInStorage(): string;
    protected _getSerializer(): ISerializer;
    protected _getStorageKeyForDatabasesNamesList(): string;
    protected _getStorageKeyForDatabase(dbName: string): string;
    protected _isTheLastFailedOperationAllowed(attempt: number): boolean;
    protected _readValueForKeyFromStore(keyInStore: string): Promise<string | undefined>;
    private _setValueForKeyInStorage;
    protected _addValueForKeyInStorage(keyInStore: string, value: string): Promise<void>;
    protected _removeValueForKeyFromStorage(keyInStore: string): Promise<void>;
    protected _loadDatabasesListNamesSerializedFromStorage(): Promise<string | undefined>;
    protected _loadDatabasesListNamesFromStorage(): Promise<Array<string> | undefined>;
    protected _loadDatabaseOptionsSerializedOrUndefinedFromStorage(dbName: DBO['dbName']): Promise<string | undefined>;
    protected _parseDatabaseOptions(dbOptionsSerialized: string): DBO;
    protected _serializeDatabaseOptions(dbOptionsUnserialized: DBO): string;
    protected _loadDatabaseOptionsParsedOrUndefinedFromStorage(dbName: DBO['dbName']): Promise<DBO | undefined>;
    protected _loadDatabaseOptionsParsedFromStorage(dbName: DBO['dbName']): Promise<DBO>;
    protected _loadDatabasesOptionsFromStorage(dbsNames: Array<DBO['dbName']>): Promise<Array<[DBO['dbName'], DBO]>>;
    protected _loadDatabasesListFromStorage(dbsNames: Array<string>): Promise<DBL>;
    protected _loadDatabasesListFromStorageIfExists(): Promise<DBL | undefined>;
    protected _setDatabasesList(databasesList: DBL): void;
    protected _setDefaultDatabasesList(): void;
    protected _loadDatabasesListIfNotLoaded(): Promise<void>;
    protected _getDatabasesNamesListStringified(): string;
    protected _saveDatabasesNamesListInPersistentStorage(): Promise<void>;
    protected _removeDatabaseOptionsFromStorage(dbName: DBO['dbName']): Promise<void>;
    protected _addDatabaseOptionsSerializedToStorage(dbName: DBO['dbName'], dbOptionsSerialized: string): Promise<void>;
    protected _addDatabaseOptionsToStorage(dbName: DBO['dbName'], dbOptions: DBO): Promise<void>;
    protected _setDatabasesListValue(databaseList: DBL): void;
    protected _removeDatabaseFromTheCacheList(dbName: DBO['dbName']): void;
    protected _addDatabaseToTheCacheList(dbName: DBO['dbName'], dbOptions: DBO): void;
    protected _removeDatabaseFromListAndSaveInStorage(dbName: DBO['dbName']): Promise<void>;
    protected _addDatabaseToTheListAndSaveInStorage(dbName: DBO['dbName'], dbOptions: DBO): Promise<void>;
    protected _setDatabasesListValueAndSaveDatabasesNamesListInStorage(databasesList: DBL, attempt?: number): Promise<void>;
    protected _runStorageOperationInTransaction<T>(runOperationInTransaction: () => Promise<T>): Promise<T>;
    protected _waitAllPendingAsyncEndedAndExecute(runAsyncOperation: () => Promise<void>): Promise<void>;
    protected _waitQueueAndRunOperationInTransaction(runOperationInTransaction: () => Promise<void>): Promise<void>;
    protected _createRemoveDatabaseFromTheListAndStorageOperation(dbName: DBO['dbName'], attempt?: number): () => Promise<void>;
    protected _createAddDatabaseToTheListInStorageOperation(dbName: DBO['dbName'], dbOptions: DBO): () => Promise<void>;
}
//# sourceMappingURL=swarm-store-connector-databases-persistent-list.d.ts.map