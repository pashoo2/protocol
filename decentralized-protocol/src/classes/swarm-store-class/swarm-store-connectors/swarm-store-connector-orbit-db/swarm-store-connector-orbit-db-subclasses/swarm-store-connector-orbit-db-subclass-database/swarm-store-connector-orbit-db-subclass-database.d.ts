/// <reference types="node" />
import * as orbitDbModule from 'orbit-db';
import OrbitDbFeedStore from 'orbit-db-feedstore';
import { ISwarmStoreConnectorOrbitDbDatabaseOptions, ISwarmStoreConnectorOrbitDbDatabaseValue, ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions, TSwarmStoreConnectorOrbitDbDatabaseEntityIndex } from './swarm-store-connector-orbit-db-subclass-database.types';
import { ESwarmStoreConnectorOrbitDbDatabaseIteratorOption, TSwarmStoreConnectorOrbitDbDatabase } from './swarm-store-connector-orbit-db-subclass-database.types';
import { ESwarmStoreConnectorOrbitDbDatabaseType } from './swarm-store-connector-orbit-db-subclass-database.const';
import { ESwarmStoreEventNames, ESwarmStoreConnector } from '../../../../swarm-store-class.const';
import { TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbLoad } from './swarm-store-connector-orbit-db-subclass-database.types';
import { ISwarmStoreConnectorRequestLoadAnswer, TSwarmStoreDatabaseType, TSwarmStoreValueTypes } from '../../../../swarm-store-class.types';
import { TSwarmStoreDatabaseEntityAddress, TSwarmStoreDatabaseOptions } from '../../../../swarm-store-class.types';
import { IPromisePending } from '../../../../../../types/promise.types';
import { ISwarmStoreConnectorBasic } from '../../../../swarm-store-class.types';
import { ESortFileds } from './swarm-store-connector-orbit-db-subclass-database.const';
import { Sorter } from '../../../../../basic-classes/sorter-class/sorter-class';
import { ESortingOrder } from '../../../../../basic-classes/sorter-class';
import { ISortingOptions } from '../../../../../basic-classes/sorter-class/sorter-class.types';
import { TSwarmStoreConnectorOrbitDbDatabaseAddMethodArgument, TSwarmStoreConnectorOrbitDbDatabaseStoreKey } from './swarm-store-connector-orbit-db-subclass-database.types';
declare const SwarmStoreConnectorOrbitDBDatabase_base: import("../../../../../basic-classes/event-emitter-class-base").EventEmitterContructor<any>;
export declare class SwarmStoreConnectorOrbitDBDatabase<ItemType extends TSwarmStoreValueTypes<ESwarmStoreConnector.OrbitDB>, DbType extends TSwarmStoreDatabaseType<ESwarmStoreConnector.OrbitDB>, DBO extends TSwarmStoreDatabaseOptions<ESwarmStoreConnector.OrbitDB, ItemType, DbType>> extends SwarmStoreConnectorOrbitDBDatabase_base implements ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO> {
    isReady: boolean;
    isClosed: boolean;
    dbName: string;
    private isFullyLoaded;
    private options?;
    protected orbitDb?: orbitDbModule.OrbitDB;
    protected database?: TSwarmStoreConnectorOrbitDbDatabase<ItemType>;
    protected preloadCount: number;
    protected newEntriesPending: [string, LogEntry<ItemType>, any][];
    protected itemsOverallCountInStorage: number;
    protected entriesReceived: Record<string, string>;
    protected creatingNewDBInstancePromise: IPromisePending<Error | TSwarmStoreConnectorOrbitDbDatabase<ItemType>> | undefined;
    protected __iteratorSorter: Sorter<LogEntry<ItemType>, ESortFileds> | undefined;
    protected get _iteratorSorter(): Sorter<LogEntry<ItemType>, ESortFileds>;
    protected get itemsCurrentlyLoaded(): number;
    protected get itemsOverallCount(): number;
    protected dbType: ESwarmStoreConnectorOrbitDbDatabaseType;
    protected emitBatchesInterval?: NodeJS.Timer;
    protected _currentDatabaseRestartSilent?: Promise<TSwarmStoreConnectorOrbitDbDatabase<ItemType>>;
    protected get _isAllItemsLoadedFromPersistentStorageToCache(): boolean;
    protected get isKVStore(): boolean;
    constructor(options: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>, orbitDb: orbitDbModule.OrbitDB);
    protected _validateOptions(options: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>): void;
    connect(): Promise<Error | void>;
    close(opt?: any): Promise<Error | void>;
    add(addArg: TSwarmStoreConnectorOrbitDbDatabaseAddMethodArgument<ItemType>): Promise<string | Error>;
    get(keyOrHash: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex): Promise<Error | ISwarmStoreConnectorOrbitDbDatabaseValue<ItemType> | undefined>;
    remove(keyOrEntryAddress: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex): Promise<Error | void>;
    iterator(options?: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>): Promise<Error | Array<ISwarmStoreConnectorOrbitDbDatabaseValue<ItemType> | undefined | Error>>;
    drop(): Promise<Error | void>;
    load(count: TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbLoad): Promise<ISwarmStoreConnectorRequestLoadAnswer | Error>;
    parseValueStored: (e: LogEntry<ItemType>) => Error | {
        id: LogEntry<ItemType>['identity']['id'];
        value: LogEntry<ItemType>['payload']['value'];
        key: LogEntry<ItemType>['payload']['key'];
        hash: LogEntry<ItemType>['hash'];
    };
    protected createDb(): Promise<Error | TSwarmStoreConnectorOrbitDbDatabase<ItemType>>;
    protected _get: (keyOrHash: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex, database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>) => Error | ISwarmStoreConnectorOrbitDbDatabaseValue<ItemType> | undefined;
    protected _close(opt?: any): Promise<Error | void>;
    protected _add(addArg: TSwarmStoreConnectorOrbitDbDatabaseAddMethodArgument<ItemType>): Promise<string | Error>;
    protected _remove(keyOrEntryAddress: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex): Promise<Error | void>;
    protected restartDbInstanceSilent(): Promise<Error | TSwarmStoreConnectorOrbitDbDatabase<ItemType>>;
    protected setItemsOverallCount(total: number): void;
    protected incItemsOverallCountByOne(): void;
    protected resetItemsOverall(): void;
    protected _load(count: TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbLoad): Promise<ISwarmStoreConnectorRequestLoadAnswer | Error>;
    protected getLogEntryHash(logEntry: LogEntry<ItemType>): TSwarmStoreDatabaseEntityAddress<ESwarmStoreConnector.OrbitDB>;
    protected getLogEntryKey(logEntry: LogEntry<ItemType>): TSwarmStoreDatabaseEntityAddress<ESwarmStoreConnector.OrbitDB> | undefined;
    protected _getLodEntryAddedTime(logEntry: LogEntry<ItemType>): number;
    protected readRawValueFromStorage: (keyOrHash: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex, database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>) => ItemType | LogEntry<ItemType> | Error | undefined;
    protected _getAllOplogEntriesOrErrors(database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>): LogEntry<ItemType>[] | Error;
    protected findAddedEntryForKeyInKeyValueDbOpLog(key: TSwarmStoreConnectorOrbitDbDatabaseStoreKey, entry: ItemType, database: OrbitDbFeedStore<ItemType>): LogEntry<ItemType> | undefined | Error;
    protected getAllAddedValuesFromOpLogOrError(database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>): LogEntry<ItemType>[] | Error;
    protected readRawEntry: (keyOrHash: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex, database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>) => LogEntry<ItemType> | Error | undefined;
    protected _filterEntryByIteratorOperationCondition<OP extends ESwarmStoreConnectorOrbitDbDatabaseIteratorOption>(logEntry: LogEntry<ItemType>, operationCondition: OP, operationConditionValue: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>[OP]): boolean;
    protected isOplogEntry: (value: any) => value is LogEntry<ItemType>;
    protected _filterOplogValuesByOplogOperationConditions: (logEntriesList: LogEntry<ItemType>[], filterOptions: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>) => Array<LogEntry<ItemType>>;
    protected _sortOplogValuesByAddedTime<T extends Array<Error | undefined | LogEntry<ItemType>>>(logEntriesList: T, direction: ESortingOrder): T;
    protected getValuesForEqualIteratorOption(eqOperand: string | string[], database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>): Array<ISwarmStoreConnectorOrbitDbDatabaseValue<ItemType> | Error | undefined>;
    protected preloadEntitiesBeforeIterate(count: number): Promise<void>;
    protected _getOnlyFilterIteratorOperatorsList(iteratorOptions: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>): ESwarmStoreConnectorOrbitDbDatabaseIteratorOption[];
    protected _isExistsFilterByEntryTimeAdded(iteratorOptions: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>): boolean;
    protected _sortIteratedItems<T extends Array<Error | undefined | LogEntry<ItemType>>>(iteratedItems: T, sortingOptions: Partial<ISortingOptions<LogEntry<any>, ESortFileds>>): T;
    protected iteratorDbOplog(iteratorOptions: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions<DbType>, database: TSwarmStoreConnectorOrbitDbDatabase<ItemType>): Error | Array<LogEntry<ItemType> | undefined | Error>;
    private getDbStoreInstance;
    private setReadyState;
    private unsetReadyState;
    protected unsetAllListenersForEvents: () => void;
    protected emitError(error: Error | string, mehodName?: string, isFatal?: boolean): Error;
    protected onFatalError(error: Error | string, methodName: string): Promise<Error>;
    protected emitEvent(event: ESwarmStoreEventNames, ...args: any[]): void;
    private getStoreOptions;
    private emitFullyLoaded;
    protected removeKeyKVStore(key: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex): Promise<void>;
    removeEntry(entryAddress: TSwarmStoreConnectorOrbitDbDatabaseEntityIndex): Promise<Error | void>;
    private emitNewEntry;
    private emitEmtriesPending;
    private checkWasEntryReceived;
    private addMessageToReceivedMessages;
    private resetEntriesReceived;
    private resetEntriesPending;
    private addMessageToEmitPending;
    private handleNewEntry;
    private handleFeedStoreReady;
    private handleFeedStoreReadySilent;
    private handleFeedStoreLoaded;
    protected handleFeedStoreLoadProgressSilent: (address: string, hash: string, entry: LogEntry<ItemType>, progress: number, total: number) => void;
    private handleFeedStoreLoadProgress;
    private handleFeedStoreReplicated;
    private handleFeedStoreClosed;
    private closeInstanceOfStore;
    private closeCurrentStore;
    private setPreventCloseDatabaseCache;
    private unsetPreventCloseDatabaseCache;
    private closeDatabaseCache;
    private getDatabaseCache;
    private restartStore;
    private handleFeedStoreReplicateInProgress;
    private handleWrite;
    private setFeedStoreEventListeners;
    private setFeedStoreEventListenersSilent;
    private unsetStoreEventListeners;
    private getAccessControllerOptions;
    protected createPendingPromiseCreatingNewDBInstance(): void;
    protected resolvePendingPromiseCreatingNewDBInstance(result: Error | TSwarmStoreConnectorOrbitDbDatabase<ItemType>): void;
    protected _waitTillCurrentDatabaseIsBeingRestarted(): Promise<TSwarmStoreConnectorOrbitDbDatabase<ItemType> | undefined>;
    protected _getDatabaseInstanceForQuering(): Promise<TSwarmStoreConnectorOrbitDbDatabase<ItemType>>;
    private createDbInstance;
    private createDbInstanceSilent;
    private setOptions;
    private setOrbitDbInstance;
    private emitEntries;
    private emitBatch;
    private startEmitBatchesInterval;
    private unsetEmithBatchInterval;
    private _setRestartDatabaseSilent;
    private _unsetCurrentRestartDatabaseSilent;
    private _restartCurrentDbSilentAndPreloadInQueue;
    private __createLogEntryFieldsValuesGetter;
    private __setSorter;
    private __unsetSorter;
    private __createSorter;
}
export {};
//# sourceMappingURL=swarm-store-connector-orbit-db-subclass-database.d.ts.map