import OrbitDB from 'orbit-db';
import { Keystore } from 'orbit-db-keystore';
import { IPFS } from 'types/ipfs.types';
import { ISwarmStoreConnectorOrbitDBOptions, ISwarmStoreConnectorOrbitDBConnectionOptions, ISwarmStoreConnectorOrbitDBEvents } from './swarm-store-connector-orbit-db.types';
import { ISwarmStoreConnectorOrbitDbDatabaseOptions, TSwarmStoreConnectorOrbitDbDatabaseMethodNames, TSwarmStoreConnectorOrbitDbDatabaseMethodArgument } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';
import { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types';
import { TSwarmStoreDatabaseType, ISwarmStoreConnectorBasic } from '../../swarm-store-class.types';
import { ISwarmStoreConnectorOrbitDbUtilsAddressCreateRootPathOptions } from './swarm-store-connector-orbit-db-utils/swarm-store-connector-orbit-db-utils-address/swarm-store-connector-orbit-db-utils-address.types';
import { TSecretStorageAuthorizazionOptions } from '../../../secret-storage-class/secret-storage-class.types';
import { ISwarmStoreConnectorOrbitDbConnecectionBasicFabric } from './swarm-store-connector-orbit-db.types';
import { TSwarmStoreDatabaseOptions, TSwarmStoreConnectorConnectionOptions } from '../../swarm-store-class.types';
import { ISwarmStoreConnector, TSwarmStoreValueTypes } from '../../swarm-store-class.types';
import { ESwarmStoreConnector } from '../../swarm-store-class.const';
import { TSwarmMessageUserIdentifierSerialized } from '../../../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-common-validator-user-identifier/central-authority-common-validator-user-identifier.types';
import { EventEmitter } from '../../../basic-classes/event-emitter-class-base/event-emitter-class-base.types';
declare const SwarmStoreConnectorOrbitDB_base: import("../../../basic-classes/event-emitter-class-base/event-emitter-class-base.types").EventEmitterContructor<ISwarmStoreConnectorOrbitDBEvents<ESwarmStoreConnector, any, any, any>>;
export declare class SwarmStoreConnectorOrbitDB<ItemType extends TSwarmStoreValueTypes<ESwarmStoreConnector.OrbitDB>, DbType extends TSwarmStoreDatabaseType<ESwarmStoreConnector.OrbitDB>, DBO extends TSwarmStoreDatabaseOptions<ESwarmStoreConnector.OrbitDB, ItemType, DbType>, ConnectorBasic extends ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>, PO extends TSwarmStoreConnectorConnectionOptions<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO, ConnectorBasic>> extends SwarmStoreConnectorOrbitDB_base implements ISwarmStoreConnector<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO, ConnectorBasic, PO>, EventEmitter<ISwarmStoreConnectorOrbitDBEvents<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>> {
    private static isLoadedCustomIdentityProvider;
    private static isLoadedCustomAccessController;
    private static loadCustomIdentityProvider;
    private static loadCustomAccessController;
    isReady: boolean;
    isClosed: boolean;
    protected userId: TSwarmMessageUserIdentifierSerialized;
    protected directory: string;
    protected rootPath?: string;
    protected identity?: any;
    protected connectionOptions?: ISwarmStoreConnectorOrbitDBConnectionOptions<ItemType, DbType, DBO, ConnectorBasic>;
    protected options?: ISwarmStoreConnectorOrbitDBOptions<ItemType, DbType>;
    protected ipfs?: IPFS;
    protected orbitDb?: OrbitDB;
    protected databases: ConnectorBasic[];
    protected identityKeystore?: Keystore;
    protected storage?: ISwarmStoreConnectorOrbitDBSubclassStorageFabric;
    protected initializationPromise: Promise<void> | undefined;
    private dbCloseListeners;
    protected _connectorBasicFabric: ISwarmStoreConnectorOrbitDbConnecectionBasicFabric<ItemType, DbType, DBO, ConnectorBasic> | undefined;
    constructor(options: ISwarmStoreConnectorOrbitDBOptions<ItemType, DbType>);
    connect(connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions<ItemType, DbType, DBO, ConnectorBasic>): Promise<void | Error>;
    openDatabase(dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>, openAttempt?: number, checkOptionsIsExists?: boolean): Promise<void | Error>;
    dropDatabase(dbName: string): Promise<any>;
    closeDatabase(dbName: string): Promise<Error | void>;
    request: <ISwarmDatabaseValueTypes>(dbName: string, dbMethod: TSwarmStoreConnectorOrbitDbDatabaseMethodNames, arg: TSwarmStoreConnectorOrbitDbDatabaseMethodArgument<ISwarmDatabaseValueTypes, DbType>) => Promise<Error | any>;
    close: () => Promise<Error | void>;
    protected setIsClosed: () => void;
    protected getDbConnection: (dbName: string, checkIsOpen?: boolean) => ConnectorBasic | undefined;
    protected getDbConnectionExists(dbName: string): ConnectorBasic | undefined;
    protected handleDbClose(database: ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>): Promise<void>;
    protected handleErrorOnDbOpen(database: ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>, error: Error | string): Promise<Error>;
    protected waitingDbOpened(dbName: string): Promise<Error | ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>>;
    protected unsetAllListenersForEvents: () => void;
    protected emitDatabaseClose(database: ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>): void;
    protected emitError(error: Error | string, mehodName?: string): Error;
    private setIsReady;
    protected setReady(): void;
    protected setNotReady(): void;
    protected deleteDatabaseFromList(database: ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>): void;
    protected checkDbOptions(options: unknown): options is ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>;
    private applyOptions;
    private createStorages;
    protected getParamsForStoreRootPath(): ISwarmStoreConnectorOrbitDbUtilsAddressCreateRootPathOptions;
    protected createStoreRootPath(): Promise<void>;
    protected initialize(credentials?: TSecretStorageAuthorizazionOptions): Promise<void>;
    protected unsetInitializationPromise: () => void;
    protected createInitializationPromise(options: ISwarmStoreConnectorOrbitDBOptions<ItemType, DbType>): void;
    private createIdentityKeystores;
    private getOptionsForSwarmStoreConnectorOrbitDBSubclassStorageFabric;
    private createStorageFabric;
    protected createKeystore(credentials: TSecretStorageAuthorizazionOptions, keystoreNamePrefix?: string): Keystore | Error;
    private createIdentity;
    protected getIdxDbOptions(dbName: string): number;
    protected unsetOptionsForDatabase(dbName: string): void;
    protected setDbOptions(dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>, checkIfExists?: boolean): void | Error;
    protected setDbOptionsIfNotExists(dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>): void | Error;
    private closeDb;
    private setConnectionOptions;
    private unsetSwarmConnectionOptions;
    private disconnectFromSwarm;
    private connectToSwarm;
    private stopOrbitDBInsance;
    private createOrbitDBInstance;
    protected getDbOptions(dbName: string): ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType> | void | Error;
    protected stop(): Promise<Error | void>;
    private openDatabaseNotCheckOptionsExists;
    private restartDbConnection;
    protected removeDbFromList(database: ISwarmStoreConnectorBasic<ESwarmStoreConnector.OrbitDB, ItemType, DbType, DBO>): void;
    private handleDatabaseStoreClosed;
    private handleLoadingProgress;
    private handleDatabaseUpdated;
    private handleNewEntryAddedToDatabase;
    private setListenersDatabaseEvents;
    private unsetListenersDatabaseEvents;
    private closeDatabases;
    private waitDatabaseOpened;
    private openDatabases;
    protected extendDatabaseOptionsWithCache(dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>, dbName: string): Promise<ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>>;
    protected createDatabaseConnectorImplementation(dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<ItemType, DbType>, dbName: string, orbitDb: OrbitDB): Promise<ConnectorBasic>;
    protected addDatabaseNameToListOfUsingSecretStorage(dbName: string): Promise<void>;
    protected _setConnectorBasicFabric(connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions<ItemType, DbType, DBO, ConnectorBasic>): void;
}
export {};
//# sourceMappingURL=swarm-store-connector-orbit-db.d.ts.map