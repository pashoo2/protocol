import { ISwarmMessageDatabaseEvents, ISwarmMessagesDatabaseConnectCurrentUserOptions, ISwarmMessagesDatabaseConnectOptions, ISwarmMessagesDatabaseReady, TSwarmMessageDatabaseMessagesCached } from './swarm-messages-database.types';
import { ESwarmStoreConnector } from '../swarm-store-class/swarm-store-class.const';
import { ISwarmMessageStore, ISwarmMessageStoreDeleteMessageArg, TSwarmMessagesStoreGrantAccessCallback, ISwarmMessageStoreAccessControlOptions, ISwarmMessageStoreOptionsWithConnectorFabric } from '../swarm-message-store/types/swarm-message-store.types';
import { TSwarmMessageSerialized, ISwarmMessageInstanceDecrypted } from '../swarm-message/swarm-message-constructor.types';
import { TTypedEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base.types';
import { TSwarmStoreDatabaseEntityAddress, TSwarmStoreDatabaseEntityKey, TSwarmStoreDatabaseOptions, TSwarmStoreDatabaseType } from '../swarm-store-class/swarm-store-class.types';
import { ESwarmStoreConnectorOrbitDbDatabaseType } from '../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';
import { TSwarmMessageUserIdentifierSerialized } from '../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-common-validator-user-identifier/central-authority-common-validator-user-identifier.types';
import { ISwarmMessagesDatabaseCacheOptions, ISwarmMessagesDatabaseCache } from './swarm-messages-database.types';
import { ISwarmMessageStoreMessageWithMeta } from '../swarm-message-store/types/swarm-message-store.types';
import { ESwarmMessagesDatabaseOperation } from './swarm-messages-database.const';
import { ISwarmStoreConnectorBasic, ISwarmStoreConnector, TSwarmStoreConnectorConnectionOptions, ISwarmStoreProviderOptions, ISwarmStoreOptionsConnectorFabric } from '../swarm-store-class/swarm-store-class.types';
import { ISwarmMessageConstructorWithEncryptedCacheFabric } from '../swarm-message-encrypted-cache/swarm-message-encrypted-cache.types';
import { ISwarmMessagesDatabaseConnector } from './swarm-messages-database.types';
import { ISwarmMessagesDatabaseMessagesCollector } from './swarm-messages-database.messages-collector.types';
import { TSwarmStoreDatabaseIteratorMethodArgument } from '../swarm-store-class/swarm-store-class.types';
export declare class SwarmMessagesDatabase<P extends ESwarmStoreConnector, T extends TSwarmMessageSerialized, DbType extends TSwarmStoreDatabaseType<P>, DBO extends TSwarmStoreDatabaseOptions<P, T, DbType>, ConnectorBasic extends ISwarmStoreConnectorBasic<P, T, DbType, DBO>, PO extends TSwarmStoreConnectorConnectionOptions<P, T, DbType, DBO, ConnectorBasic>, CO extends ISwarmStoreProviderOptions<P, T, DbType, DBO, ConnectorBasic, PO>, ConnectorMain extends ISwarmStoreConnector<P, T, DbType, DBO, ConnectorBasic, PO>, CFO extends ISwarmStoreOptionsConnectorFabric<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain>, GAC extends TSwarmMessagesStoreGrantAccessCallback<P, MD | T>, MCF extends ISwarmMessageConstructorWithEncryptedCacheFabric | undefined, ACO extends ISwarmMessageStoreAccessControlOptions<P, T, MD | T, GAC> | undefined, O extends ISwarmMessageStoreOptionsWithConnectorFabric<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, MD | T, GAC, MCF, ACO>, SMS extends ISwarmMessageStore<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, MD | T, GAC, MCF, ACO, O>, MD extends ISwarmMessageInstanceDecrypted, SMSM extends ISwarmMessagesDatabaseMessagesCollector<P, DbType, MD>, DCO extends ISwarmMessagesDatabaseCacheOptions<P, DbType, MD, SMSM>, DCCRT extends ISwarmMessagesDatabaseCache<P, T, DbType, DBO, MD, SMSM>, OPT extends ISwarmMessagesDatabaseConnectOptions<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT>> implements ISwarmMessagesDatabaseConnector<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, GAC, MCF, ACO, O, SMS, MD, SMSM, DCO, DCCRT, OPT> {
    get dbName(): DBO['dbName'] | undefined;
    get dbType(): DbType;
    get isReady(): boolean;
    get emitter(): TTypedEmitter<ISwarmMessageDatabaseEvents<P, T, DbType, DBO, MD>>;
    get isMessagesListContainsAllMessages(): boolean;
    get whetherMessagesListUpdateInProgress(): boolean;
    get swarmMessagesCache(): DCCRT;
    get cachedMessages(): TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined;
    protected get _currentUserId(): TSwarmMessageUserIdentifierSerialized | undefined;
    protected get _isKeyValueDatabase(): boolean;
    protected get _swarmMessagesCacheClassFromOptions(): OPT['cacheOptions']['cacheConstructor'];
    protected _dbName?: DBO['dbName'];
    protected _dbType?: DbType;
    protected _emitter: import("../basic-classes/event-emitter-class-base/event-emitter-class-base.types").EventEmitter<ISwarmMessageDatabaseEvents<P, T, DbType, DBO, MD>>;
    protected _swarmMessageStore?: SMS;
    protected _swarmMessagesCache: DCCRT | undefined;
    protected _dbOptions?: DBO;
    protected _currentUserOptons?: ISwarmMessagesDatabaseConnectCurrentUserOptions;
    protected _swarmMessagesCollector?: SMSM;
    protected _cacheOptions?: OPT['cacheOptions'];
    protected _isReady: boolean;
    protected _messagesOperationsHashesHandled: Set<string>;
    protected _messagesCached: TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined;
    connect(options: OPT): Promise<void>;
    close(): Promise<void>;
    drop(): Promise<void>;
    addMessage(message: Parameters<SMS['addMessage']>[1], key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): ReturnType<SMS['addMessage']>;
    deleteMessage(messageAddressOrKey: ISwarmMessageStoreDeleteMessageArg<P, DbType>): ReturnType<SMS['deleteMessage']>;
    collect(options: TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>): ReturnType<SMS['collect']>;
    collectWithMeta(options: TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>): ReturnType<SMS['collectWithMeta']>;
    protected _checkIsReady(): this is ISwarmMessagesDatabaseReady<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, GAC, MCF, ACO, O, MD, SMSM>;
    protected _validateOptions(options: OPT): void;
    protected _setDbOptions(dbOptions: DBO): void;
    protected _setUserOptions(optionsUser: ISwarmMessagesDatabaseConnectCurrentUserOptions): void;
    protected _setOptions(options: OPT): void;
    protected _validateCacheOptions(options?: OPT['cacheOptions']): void;
    protected _setCacheOptions(options: OPT['cacheOptions']): void;
    protected _handleOptions(options: OPT): void;
    protected _checkDatabaseProps(): this is Omit<ISwarmMessagesDatabaseReady<P, T, DbType, DBO, ConnectorBasic, PO, CO, ConnectorMain, CFO, GAC, MCF, ACO, O, MD, SMSM>, 'isReady'>;
    protected _setIsReady: () => void;
    protected _unsetIsReady: () => void;
    protected _setMessagesCached: (messagesCached: TSwarmMessageDatabaseMessagesCached<P, DbType, MD>) => void;
    protected _updateMessagesCache(attempt?: number): void;
    protected _getSwarmMessageWithMeta(dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): ISwarmMessageStoreMessageWithMeta<P, MD>;
    protected _addSwarmMessageWithMetaToMessagesCache(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>): Promise<void>;
    protected _createAndAddSwarmMessageWithMetaToMessagesCacheByMessageAndMetaRelatedTo(dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): Promise<void>;
    protected _addMessageToCache(dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): Promise<void>;
    protected _removeMessageFromCache(messageAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): Promise<void>;
    protected _handleDatabaseLoadingEvent: (dbName: DBO['dbName'], percentage: number) => void;
    protected _handleDatabaseUpdatedEvent: (dbName: DBO['dbName']) => void;
    protected _getUniqueHashForMessageMetaInfo: (messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>, message?: MD) => string;
    protected _getUniqueHashForMessageMetaInfoAndDatabaseOperation(databaseOperation: ESwarmMessagesDatabaseOperation, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>, message?: MD): string;
    protected _addOperationUnderMessageToListOfHandled: (databaseOperation: ESwarmMessagesDatabaseOperation, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>, message?: MD) => void;
    protected _deleteOperationUnderMessageFromListOfHandled: (databaseOperation: ESwarmMessagesDatabaseOperation, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>, message?: MD) => void;
    protected _hasSwarmMessageOperationAlreadyBeenHandled: (databaseOperation: ESwarmMessagesDatabaseOperation, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>, message?: MD) => boolean;
    protected _emitNewMessageEvent(dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): void;
    protected _handleDatabaseNewMessage(dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): Promise<void>;
    protected _handleDatabaseNewMessageIfHaventBeenHandledBefore: (dbName: DBO['dbName'], message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>) => Promise<void>;
    protected _emitDeleteMessageEvent(dbName: DBO['dbName'], userID: TSwarmMessageUserIdentifierSerialized, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, messageDeletedAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, keyOrHash: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): void;
    protected _handleDatabaseDeleteMessage(dbName: DBO['dbName'], userID: TSwarmMessageUserIdentifierSerialized, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, messageDeletedAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, keyOrHash: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): Promise<void>;
    protected _handleDatabaseDeleteMessageIfNotHaveBeenHandledBefore: (dbName: DBO['dbName'], userID: TSwarmMessageUserIdentifierSerialized, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, messageDeletedAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, keyOrHash: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined) => Promise<void>;
    protected _handleDatabaseMessageError: (dbName: DBO['dbName'], messageSerialized: T, error: Error, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>) => void;
    protected _handleDatabaseReadyEvent: (dbName: DBO['dbName']) => void;
    protected _emitInstanceClosed(): void;
    protected _handleDatabaseClosedEvent: (dbName: DBO['dbName']) => Promise<void>;
    protected _emitDatabaseDropped(): void;
    protected _handleDatabaseDroppedEvent: (dbName: DBO['dbName']) => Promise<void>;
    protected _setSwarmMessagesStoreListeners(isSetListeners?: boolean): void;
    protected _handleCacheUpdating: () => void;
    protected _handleCacheUpdatingEnded: (messagesCached: TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined) => void;
    protected _handleCacheUpdated: (messagesCached: TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined) => void;
    protected _setCacheListeners(isSetListeners?: boolean): void;
    protected _setListeners(isSetListeners?: boolean): void;
    protected _openDatabaseInstance(): Promise<void>;
    protected _getSwarmMessageStoreCollectMessages(): SMSM;
    protected _getSwarmMessagesCacheOptions(): DCO;
    protected _startSwarmMessagesCache(): Promise<void>;
    protected _unsetOptions(): void;
    protected _unsetThisInstanceListeners(): void;
    protected _unsetSwarmStoreListeners(): void;
    protected _unsetSwarmMessageStoreInstance(): void;
    protected _handleDatabaseClosed(): Promise<void>;
    protected _closeSwarmDatabaseInstance(): Promise<void>;
    protected _closeSwarmMessagesCahceInstance(): Promise<void>;
    protected _dropSwarmDatabaseInstance(): Promise<void>;
    protected _handleCacheUpdateOnNewMessage(message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): Promise<void>;
    protected _handleCacheUpdateOnMessageDeleteFromKVDatabase(userID: TSwarmMessageUserIdentifierSerialized, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, messageDeletedAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, keyOrHash: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): Promise<void>;
}
//# sourceMappingURL=swarm-messages-database.d.ts.map