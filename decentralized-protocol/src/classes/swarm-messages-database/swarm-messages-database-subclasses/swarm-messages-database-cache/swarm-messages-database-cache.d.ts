import { ESwarmStoreConnector } from '../../../swarm-store-class/swarm-store-class.const';
import { TSwarmStoreDatabaseEntityAddress, TSwarmStoreDatabaseEntityKey, TSwarmStoreDatabaseEntityUniqueIndex, TSwarmStoreDatabaseIteratorMethodArgument, TSwarmStoreDatabaseType } from '../../../swarm-store-class/swarm-store-class.types';
import { ISwarmMessageDatabaseEvents, ISwarmMessagesDatabaseCache, TSwarmMessageDatabaseMessagesCached } from '../../swarm-messages-database.types';
import { ISwarmMessageStoreMessagingRequestWithMetaResult } from '../../../swarm-message-store';
import { ESwarmStoreConnectorOrbitDbDatabaseType } from '../../../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database';
import { TTypedEmitter } from '../../../basic-classes/event-emitter-class-base/event-emitter-class-base.types';
import { ISwarmMessageStoreMessageWithMeta } from '../../../swarm-message-store/types/swarm-message-store.types';
import { ISwarmMessagesDatabaseCacheOptions } from '../../swarm-messages-database.types';
import { ISwarmMessagesDatabaseMessagesCacheStoreNonTemp, ISwarmMessagesDatabaseMessagesCacheStoreTemp } from './swarm-messages-database-cache.types';
import { ISwarmMessagesDatabaseMesssageMeta } from '../../swarm-messages-database.types';
import { TSwarmMessagesDatabaseMessagesCacheStore } from './swarm-messages-database-cache.types';
import { TSwarmMessageSerialized } from '../../../swarm-message/swarm-message-constructor.types';
import { TSwarmStoreDatabaseOptions } from '../../../swarm-store-class/swarm-store-class.types';
import { ISwarmMessageInstanceDecrypted } from '../../../swarm-message/swarm-message-constructor.types';
import { ISwarmMessagesDatabaseMessagesCollector } from '../../swarm-messages-database.messages-collector.types';
export declare class SwarmMessagesDatabaseCache<P extends ESwarmStoreConnector, T extends TSwarmMessageSerialized, DbType extends TSwarmStoreDatabaseType<P>, DBO extends TSwarmStoreDatabaseOptions<P, T, DbType>, MD extends ISwarmMessageInstanceDecrypted, SMC extends ISwarmMessagesDatabaseMessagesCollector<P, DbType, MD>, DCO extends ISwarmMessagesDatabaseCacheOptions<P, DbType, MD, SMC>> implements ISwarmMessagesDatabaseCache<P, T, DbType, DBO, MD, SMC> {
    get isReady(): boolean;
    get cache(): TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined;
    get isUpdating(): boolean;
    get emitter(): TTypedEmitter<ISwarmMessageDatabaseEvents<P, T, DbType, DBO, MD>>;
    get whetherMessagesListContainsAllMessages(): boolean;
    protected _isReady: boolean;
    protected _dbType?: DbType;
    protected _dbName?: string;
    protected _options: DCO | undefined;
    protected get _swarmMesssagesCollector(): SMC | undefined;
    protected _emitter: import("../../../basic-classes/event-emitter-class-base/event-emitter-class-base.types").EventEmitter<ISwarmMessageDatabaseEvents<P, T, DbType, DBO, MD>>;
    protected _messagesCachedStore?: ISwarmMessagesDatabaseMessagesCacheStoreNonTemp<P, DbType, MD>;
    protected _whetherMessagesListContainsAllMessages: boolean;
    protected _isSwarmMessagesCacheUpdateRequested: boolean;
    protected _pendingMessagesCacheUpdatePromise: Promise<void> | undefined;
    protected _defferedPartialCacheUpdatePromise: ReturnType<SwarmMessagesDatabaseCache<P, T, DbType, DBO, MD, SMC, DCO>['_runDefferedMessagesUpdateInCache']> | undefined;
    protected _messagesCacheUpdatingBatch: Promise<void> | undefined;
    protected get _isKeyValueDatabase(): boolean;
    protected get _messagesCached(): TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined;
    protected get _isCacheUpdateActive(): boolean;
    protected get _isDefferedMessagesUpdateActive(): boolean;
    constructor(options: DCO);
    start(): Promise<void>;
    close(): Promise<void>;
    update(): Promise<TSwarmMessageDatabaseMessagesCached<P, DbType, MD> | undefined>;
    addMessage(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>): Promise<boolean>;
    deleteMessage(messageUniqAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined): Promise<void>;
    protected _checkIsReady(): this is {
        _isReady: true;
        _dbName: DBO['dbName'];
        _dbType: DbType;
        _swarmMesssagesCollector: NonNullable<SMC>;
        _messagesCachedStore: ISwarmMessagesDatabaseMessagesCacheStoreNonTemp<P, DbType, MD>;
    };
    protected _setOptions(options: DCO): void;
    protected _createMessagesCachedStorage<IsTemp extends boolean>(isTemp: IsTemp): TSwarmMessagesDatabaseMessagesCacheStore<P, DbType, MD, IsTemp>;
    protected _initializeCacheStore(): void;
    protected _resetTheInstance(): void;
    protected _unsetCacheStore(): void;
    protected _unsetOptions(): void;
    protected _clearEventEmitter(): void;
    protected _checkMessagesEqual<MI extends MD>(messageFirst?: MI, messageSecond?: MI): boolean;
    protected _checkWhetherMessgeWithMetaInstancesEqual(messageWithMetaMetaInstanceFirst: ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>['message'] | undefined, messageWithMetaMetaInstanceSecond: ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>['message'] | undefined): boolean;
    protected _waitTillMessagesCacheUpateBatchOver(): Promise<void>;
    protected _emitCacheUpdatingIsInProgress(): void;
    protected _emitCacheUpdatingIsEnded(): void;
    protected _emitCacheUpdated(): void;
    protected _setMessagesCacheUpdateInProgress: (promisePending: Promise<void>) => void;
    protected _unsetCacheUpdateInProgress: (promisePending: Promise<void>) => void;
    protected _setNewCacheUpdatePlanned: () => void;
    protected _unsetNewCacheUpdatePlanned: () => void;
    protected _whetherMaxDatabaseQueriesAttemptsFailed: (queryAttemtNumber: number) => boolean;
    protected _getDatabaseMessagesToReadQueryOptionsWithMessagesToExclude: (messagesCountToQuery: number, messagesReadAddressesOrKeysToExclude: Array<TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>>) => TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>;
    protected _getDatabaseMessagesToReadQueryOptionsWithMessagesToInclude: (messagesReadAddressesOrKeysToInclude: Array<TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>>) => TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>;
    protected _requestTimeBrowserIdle: () => Promise<number>;
    protected _getItemsCountToReadForIdlePeriod: (timeAvailToRun: number) => number;
    protected _getMessageAddressByDescription: (message: ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>) => TSwarmStoreDatabaseEntityAddress<P> | undefined;
    protected _getMessageKeyByDescription: (message: ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>) => TSwarmStoreDatabaseEntityKey<P> | undefined;
    protected _mapMessagesWithMetaToStorageRelatedStructure: (messagesWithMeta: Array<ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD> | undefined>) => TSwarmMessageDatabaseMessagesCached<P, DbType, MD>;
    protected _whetherMessagesLimitReached: (messagesCount: number) => boolean;
    protected _getMessageWithMeta(dbName: string, message: MD, messageAddress: TSwarmStoreDatabaseEntityAddress<P>, key?: TSwarmStoreDatabaseEntityKey<P>): ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>;
    protected _setAllStoredMessagesReadFromDatabaseToCache(): void;
    protected _unsetAllStoredMessagesReadFromDatabaseToCache(): void;
    protected _getSwarmMessagesCollector(): SMC;
    protected _performMessagesCacheCollectPageRequest(queryOptions: TSwarmStoreDatabaseIteratorMethodArgument<P, DbType>): Promise<Array<ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD> | undefined>>;
    protected _mapMessagesDescriptionsToKVStoreMap<MWM extends ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>>(messagesWithMeta: Array<MWM | undefined>): TSwarmMessageDatabaseMessagesCached<ESwarmStoreConnector.OrbitDB, ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE, MD>;
    protected _mapMessagesDescriptionsToFeedStore<MWM extends ISwarmMessageStoreMessagingRequestWithMetaResult<P, MD>>(messagesWithMeta: Array<MWM | undefined>): TSwarmMessageDatabaseMessagesCached<ESwarmStoreConnector.OrbitDB, ESwarmStoreConnectorOrbitDbDatabaseType.FEED, MD>;
    protected _getMessagesReadKeys(messagesCache: TSwarmMessageDatabaseMessagesCached<P, ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE, MD>): Array<TSwarmStoreDatabaseEntityKey<P>>;
    protected _getMessagesReadAddresses(messagesCache: TSwarmMessageDatabaseMessagesCached<P, ESwarmStoreConnectorOrbitDbDatabaseType.FEED, MD>): Array<TSwarmStoreDatabaseEntityKey<P>>;
    protected _getMessagesReadKeysOrAddresses(messagesCache: TSwarmMessageDatabaseMessagesCached<P, DbType, MD>): Array<TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>>;
    protected _createMessagesCacheUpdatingBatchPromise: () => (() => void);
    protected _getItemsCountCanBeReadForCurrentIdlePeriod(): Promise<number>;
    protected _whetherToStopMessagesReading: (expectedMessagesOverallToReadAtTheBatchCount: number, expectedNewMessagesToReadAtTheBatchCount: number, resultedNewMessagesReadAtTheBatchCount: number) => Promise<boolean>;
    protected getMessagesIdentitiesToExcludeAtCacheUpdateBatch(messagesCachedStoreTemp: ISwarmMessagesDatabaseMessagesCacheStoreTemp<P, DbType, MD, true>): TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[];
    protected _performMessagesReadingToUpdateCache(messagesCachedStoreTemp: ISwarmMessagesDatabaseMessagesCacheStoreTemp<P, DbType, MD, true>): Promise<void>;
    protected _waitForCurrentMessagesUpdate(): Promise<void>;
    protected _planNewCacheUpdate(): Promise<void>;
    protected _runNextCacheUpdateIterationIfNecessary(): Promise<void>;
    protected _linkTempStoreToMessagesCachedStore(messagesTempStore: ISwarmMessagesDatabaseMessagesCacheStoreTemp<P, DbType, MD, true>): void;
    protected _updateMessagesCachedStoreByLinkedTempStoreMessagesAndUnlinkTempStore(): boolean;
    protected _setCurrentFullMessagesCacheUpdateInProgressAndEmitEvent(promiseMessagesCacheUpdating: Promise<void>): void;
    protected _unsetCurrentFullMessagesCacheUpdateInProgressAndEmitEvent(promiseMessagesCacheUpdating: Promise<void>): void;
    protected _runNewCacheUpdate(): Promise<void>;
    protected _updateMessagesCache(): Promise<void>;
    protected _addSwarmMessageWithMetaToCachedStore(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>): boolean;
    protected _clearMessagesDefferedUpdateFullQueueIfNoFullCacheUpdateAcive(): void;
    protected _runDefferedMessagesPartialUpdateAndResetDefferedMessagesFullQueueIfNoActiveFullCahceUpdate(): void;
    protected _addMessageToCachedStoreRunDefferedUpdate(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>): boolean;
    protected _removeMessageFromCachedStoreAndEmitEvent: (messageUniqAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> | undefined : TSwarmStoreDatabaseEntityAddress<P>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined) => Promise<void>;
    protected _getMessagesDefferedUpdateWithinCacheUpdateBatch(): Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>> | undefined;
    protected _getDefferedUpdateAfterCacheUpdateProcess(): Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>> | undefined;
    protected _resetMessagesDefferedFullQueue(): void;
    protected _resetMessagesDefferedQueuePartial(): void;
    protected _getAndResetMessagesForPartialDefferedUpdateBatch(): Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>> | undefined;
    protected _getAndResetDefferedUpdateAfterCacheUpdateProcess(): Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>> | undefined;
    protected _runDefferedMessageReadBatch(messagesMetaToRead: TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[]): Promise<TSwarmMessageDatabaseMessagesCached<P, DbType, MD>>;
    protected _getMessagesUniqIndexesToReadAtBatch(messagesMetaToRead: TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[], messagesCountReadAtPreviousBatches: number, messagesCountToReadAtBatch: number): TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[];
    protected _unsetMessagesNotExistsInTheStore<DT extends DbType>(messagesUniqIndexesForReading: TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[], messagesReadByUniqIndexes: TSwarmMessageDatabaseMessagesCached<P, DbType, MD>, cacheStore: ISwarmMessagesDatabaseMessagesCacheStoreNonTemp<P, DT, MD>, dbType: DT): boolean;
    protected _runDefferedMessagesUpdateInCache<DT extends DbType>(messagesForUpdateMeta: Set<ISwarmMessagesDatabaseMesssageMeta<P, DT>>, cacheStore: ISwarmMessagesDatabaseMessagesCacheStoreNonTemp<P, DT, MD>, dbType: DT): Promise<boolean>;
    protected _setActiveDefferedPartialCacheUpdate<ItemType extends T>(activeUpdate: ReturnType<SwarmMessagesDatabaseCache<P, ItemType, DbType, DBO, MD, SMC, DCO>['_runDefferedMessagesUpdateInCache']>): void;
    protected _unsetActiveDefferedPartialCacheUpdate(): void;
    protected _runDefferedPartialCacheUpdateForCachedMessagesStore(messagesMetaToUpdate: Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>>, messagesCachedStore: ISwarmMessagesDatabaseMessagesCacheStoreNonTemp<P, DbType, MD>, dbType: DbType): Promise<boolean>;
    protected _runDefferedPartialCacheUpdate: (messagesMetaToUpdate: Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>>) => Promise<boolean>;
    protected _runDefferedPartialCacheUpdateAfterFullCacheUpdateAndResetDefferedUpdateQueue(): Promise<boolean>;
    protected _runDefferedPartialCacheUpdateDebounced: () => void;
}
//# sourceMappingURL=swarm-messages-database-cache.d.ts.map