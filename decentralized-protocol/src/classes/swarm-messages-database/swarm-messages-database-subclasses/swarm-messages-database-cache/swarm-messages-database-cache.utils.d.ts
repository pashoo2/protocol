import { TSwarmStoreDatabaseEntityAddress, TSwarmStoreDatabaseEntityKey } from '../../../swarm-store-class/swarm-store-class.types';
import { ESwarmStoreConnector } from '../../../swarm-store-class/swarm-store-class.const';
import { ISwarmMessagesDatabaseMesssageMeta } from '../../swarm-messages-database.types';
import { ESwarmStoreConnectorOrbitDbDatabaseType } from '../../../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';
import { ISwarmMessagesDatabaseMessagesCacheMessageDescription } from './swarm-messages-database-cache.types';
import { ISwarmMessageStoreMessageWithMeta, ISwarmMessageStoreMessagingRequestWithMetaResult } from '../../../swarm-message-store/types/swarm-message-store.types';
import { TSwarmStoreDatabaseEntityUniqueIndex } from '../../../swarm-store-class/swarm-store-class.types';
import { ISwarmMessageInstanceDecrypted, ISwarmMessageDecrypted } from '../../../swarm-message/swarm-message-constructor.types';
export declare const checkMessageAddress: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messageUniqAddress: any, dbType: DbType) => messageUniqAddress is DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? undefined : TSwarmStoreDatabaseEntityAddress<P>;
export declare const checkMessageKey: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(key: any, dbType: DbType) => key is DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined;
export declare const getMessagesMetaByAddressAndKey: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messageUniqAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> : TSwarmStoreDatabaseEntityAddress<P>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined, dbType: DbType) => ISwarmMessagesDatabaseMesssageMeta<P, DbType>;
export declare const createMessagesMetaByAddressAndKey: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messageUniqAddress: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityAddress<P> : TSwarmStoreDatabaseEntityAddress<P>, key: DbType extends ESwarmStoreConnectorOrbitDbDatabaseType.KEY_VALUE ? TSwarmStoreDatabaseEntityKey<P> : undefined, dbType: DbType) => ISwarmMessagesDatabaseMesssageMeta<P, DbType>;
export declare const getMessageMetaForMessageWithMeta: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType, MD extends ISwarmMessageInstanceDecrypted>(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>, dbType: DbType) => ISwarmMessagesDatabaseMesssageMeta<P, DbType>;
export declare const getMessageMetaByUniqIndex: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messageUniqIndex: TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>, dbType: DbType) => ISwarmMessagesDatabaseMesssageMeta<P, DbType>;
export declare const getMessageUniqIndexByMeta: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messageMeta: ISwarmMessagesDatabaseMesssageMeta<P, DbType>, dbType: DbType) => TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>;
export declare const getMessagesUniqIndexesByMeta: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType>(messagesMeta: Set<ISwarmMessagesDatabaseMesssageMeta<P, DbType>>, dbType: DbType) => TSwarmStoreDatabaseEntityUniqueIndex<P, DbType>[];
export declare const getMessageDescriptionForMessageWithMeta: <P extends ESwarmStoreConnector, DbType extends ESwarmStoreConnectorOrbitDbDatabaseType, MD extends ISwarmMessageInstanceDecrypted>(swarmMessageWithMeta: ISwarmMessageStoreMessageWithMeta<P, MD>, dbType: DbType) => ISwarmMessagesDatabaseMessagesCacheMessageDescription<P, DbType>;
export declare function _whetherSwarmMessagesDecryptedEqual<T extends ISwarmMessageDecrypted | Error>(first: T | undefined, second: T | undefined): boolean;
export declare function compareTwoSwarmMessageStoreMessagingRequestWithMetaResults<T extends ISwarmMessageStoreMessagingRequestWithMetaResult<ESwarmStoreConnector, ISwarmMessageDecrypted>>(firstResult: T | undefined, secondResult: T | undefined): boolean;
//# sourceMappingURL=swarm-messages-database-cache.utils.d.ts.map