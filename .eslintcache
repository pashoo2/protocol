[{"/home/paul/Projects/protocol/__test__/central-authority-identity.test/central-authority-identity.utils.ts":"1","/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts":"2","/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.shared.ts":"3","/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"4","/home/paul/Projects/protocol/__test__/data-sign-test.ts":"5","/home/paul/Projects/protocol/__test__/encryption-test.ts":"6","/home/paul/Projects/protocol/__test__/error-extended-class-test.ts":"7","/home/paul/Projects/protocol/__test__/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"8","/home/paul/Projects/protocol/__test__/mocha-chai-initialize.ts":"9","/home/paul/Projects/protocol/__test__/swarm-message-store-test/swarm-message-store-test.const.ts":"10","/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/index.ts":"11","/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/swarrm-message-constructor.const.ts":"12","/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/swarrm-message-constructor.shared.ts":"13","/home/paul/Projects/protocol/__test__/validation-messaging.test/validate-messaging-timestamps-test.ts":"14","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"15","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"16","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"17","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"18","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/index.ts":"19","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts":"20","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts":"21","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts":"22","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts":"23","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts":"24","/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"25","/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts":"26","/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts":"27","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"28","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"29","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts":"30","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"31","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"32","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"33","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"34","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"35","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"36","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"37","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"38","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts":"39","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts":"40","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"41","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"42","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts":"43","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"44","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"45","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"46","/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts":"47","/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts":"48","/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts":"49","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/index.ts":"50","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"51","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"52","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"53","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"54","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts":"55","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"56","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts":"57","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"58","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"59","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"60","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"61","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts":"62","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"63","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts":"64","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"65","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"66","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts":"67","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"68","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"69","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"70","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"71","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts":"72","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"73","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"74","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts":"75","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"76","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"77","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts":"78","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"79","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"80","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"81","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"82","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts":"83","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"84","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts":"85","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"86","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts":"87","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"88","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"89","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"90","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"91","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts":"92","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"93","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"94","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"95","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts":"96","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts":"97","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.ts":"98","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts":"99","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"100","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts":"101","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"102","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts":"103","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"104","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"105","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"106","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts":"107","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"108","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"109","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts":"110","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"111","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"112","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts":"113","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts":"114","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"115","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"116","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"117","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts":"118","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"119","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"120","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts":"121","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"122","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"123","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"124","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts":"125","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"126","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"127","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts":"128","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"129","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"130","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"131","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"132","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"133","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts":"134","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"135","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"136","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts":"137","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"138","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"139","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"140","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts":"141","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts":"142","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"143","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"144","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"145","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts":"146","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts":"147","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts":"148","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"149","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"150","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts":"151","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"152","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"153","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"154","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"155","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"156","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"157","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts":"158","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts":"159","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts":"160","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"161","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts":"162","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts":"163","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"164","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts":"165","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"166","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"167","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts":"168","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"169","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"170","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts":"171","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts":"172","/home/paul/Projects/protocol/src/classes/central-authority-class/index.ts":"173","/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts":"174","/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.ts":"175","/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts":"176","/home/paul/Projects/protocol/src/classes/connection-bridge/index.ts":"177","/home/paul/Projects/protocol/src/classes/index.ts":"178","/home/paul/Projects/protocol/src/classes/open-storage/index.ts":"179","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.const.ts":"180","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.ts":"181","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.types.ts":"182","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/index.ts":"183","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"184","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"185","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"186","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"187","/home/paul/Projects/protocol/src/classes/safe-storage-class/index.ts":"188","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"189","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts":"190","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"191","/home/paul/Projects/protocol/src/classes/secret-storage-class/index.ts":"192","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts":"193","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts":"194","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"195","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"196","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts":"197","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"198","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts":"199","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"200","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"201","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts":"202","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"203","/home/paul/Projects/protocol/src/classes/storage-providers/index.ts":"204","/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts":"205","/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"206","/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"207","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts":"208","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"209","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"210","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts":"211","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"212","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.const.ts":"213","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.ts":"214","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.types.ts":"215","/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts":"216","/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"217","/home/paul/Projects/protocol/src/classes/swarm-connection-class/index.ts":"218","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/index.ts":"219","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/index.ts":"220","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"221","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"222","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"223","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"224","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"225","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"226","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"227","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/index.d.ts":"228","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"229","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"230","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"231","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"232","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"233","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"234","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"235","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"236","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"237","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"238","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"239","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"240","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"241","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"242","/home/paul/Projects/protocol/src/classes/swarm-message/index.ts":"243","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts":"244","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts":"245","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts":"246","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts":"247","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts":"248","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts":"249","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts":"250","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts":"251","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts":"252","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts":"253","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts":"254","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts":"255","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts":"256","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts":"257","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts":"258","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts":"259","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts":"260","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts":"261","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts":"262","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts":"263","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts":"264","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"265","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"266","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts":"267","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"268","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"269","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts":"270","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"271","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"272","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"273","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts":"274","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"275","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"276","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"277","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts":"278","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"279","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"280","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts":"281","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"282","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"283","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"284","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"285","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts":"286","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts":"287","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts":"288","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts":"289","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts":"290","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts":"291","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts":"292","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts":"293","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts":"294","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts":"295","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts":"296","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts":"297","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts":"298","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts":"299","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts":"300","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts":"301","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts":"302","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts":"303","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts":"304","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts":"305","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts":"306","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts":"307","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts":"308","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts":"309","/home/paul/Projects/protocol/src/classes/swarm-message-store/index.ts":"310","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts":"311","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts":"312","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts":"313","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts":"314","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts":"315","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts":"316","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts":"317","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts":"318","/home/paul/Projects/protocol/src/classes/swarm-store-class/index.ts":"319","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts":"320","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts":"321","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"322","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts":"323","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts":"324","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts":"325","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts":"326","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"327","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"328","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"329","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts":"330","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"331","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"332","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"333","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts":"334","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"335","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"336","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts":"337","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"338","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"339","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"340","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts":"341","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"342","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts":"343","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"344","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"345","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts":"346","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"347","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"348","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"349","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"350","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"351","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"352","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-main.ts":"353","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"354","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"355","/home/paul/Projects/protocol/src/const/common-date-time/index.ts":"356","/home/paul/Projects/protocol/src/const/common-values/common-values-env.ts":"357","/home/paul/Projects/protocol/src/const/common-values/common-values.ts":"358","/home/paul/Projects/protocol/src/const/common-values/index.ts":"359","/home/paul/Projects/protocol/src/const/const-api-conf.ts":"360","/home/paul/Projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"361","/home/paul/Projects/protocol/src/const/const-crypto-keys/index.ts":"362","/home/paul/Projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"363","/home/paul/Projects/protocol/src/const/const-validation-regex/index.ts":"364","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"365","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"366","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"367","/home/paul/Projects/protocol/src/const/const-validation-schemes/index.ts":"368","/home/paul/Projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"369","/home/paul/Projects/protocol/src/const/const-validation-values/index.ts":"370","/home/paul/Projects/protocol/src/const/const-values-restrictions-common.ts":"371","/home/paul/Projects/protocol/src/index.ts":"372","/home/paul/Projects/protocol/src/react-app-env.d.ts":"373","/home/paul/Projects/protocol/src/types/channels.types.ts":"374","/home/paul/Projects/protocol/src/types/common.types.ts":"375","/home/paul/Projects/protocol/src/types/encryption-keys.types.ts":"376","/home/paul/Projects/protocol/src/types/helper.types.ts":"377","/home/paul/Projects/protocol/src/types/index.d.ts":"378","/home/paul/Projects/protocol/src/types/ipfs.d.ts":"379","/home/paul/Projects/protocol/src/types/ipfs.types.d.ts":"380","/home/paul/Projects/protocol/src/types/main.types.ts":"381","/home/paul/Projects/protocol/src/types/orbit-db-cache.d.ts":"382","/home/paul/Projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts":"383","/home/paul/Projects/protocol/src/types/orbit-db-keystore.d.ts":"384","/home/paul/Projects/protocol/src/types/users.types.ts":"385","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-array.ts":"386","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-check-value.ts":"387","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"388","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time.ts":"389","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-main.ts":"390","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-number.ts":"391","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-objects.ts":"392","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-timer.ts":"393","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-url.ts":"394","/home/paul/Projects/protocol/src/utils/common-utils/common-utils.ts":"395","/home/paul/Projects/protocol/src/utils/common-utils/index.ts":"396","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"397","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"398","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"399","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts":"400","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts":"401","/home/paul/Projects/protocol/src/utils/data-cache-utils/index.ts":"402","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"403","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"404","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts":"405","/home/paul/Projects/protocol/src/utils/data-compression-utils/index.ts":"406","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"407","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts":"408","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"409","/home/paul/Projects/protocol/src/utils/data-sign-utils/index.ts":"410","/home/paul/Projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"411","/home/paul/Projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"412","/home/paul/Projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"413","/home/paul/Projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"414","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"415","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts":"416","/home/paul/Projects/protocol/src/utils/data-validators-utils/index.ts":"417","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"418","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"419","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/index.ts":"420","/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts":"421","/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts":"422","/home/paul/Projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"423","/home/paul/Projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"424","/home/paul/Projects/protocol/src/utils/encryption-utils/encryption-utils.ts":"425","/home/paul/Projects/protocol/src/utils/encryption-utils/index.ts":"426","/home/paul/Projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"427","/home/paul/Projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"428","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.const.ts":"429","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.ts":"430","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.types.ts":"431","/home/paul/Projects/protocol/src/utils/firebase-utils/firebase-utils.ts":"432","/home/paul/Projects/protocol/src/utils/firebase-utils/index.ts":"433","/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"434","/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"435","/home/paul/Projects/protocol/src/utils/hash-calculation-utils/index.ts":"436","/home/paul/Projects/protocol/src/utils/identity-utils/identity-utils.ts":"437","/home/paul/Projects/protocol/src/utils/identity-utils/index.ts":"438","/home/paul/Projects/protocol/src/utils/index.ts":"439","/home/paul/Projects/protocol/src/utils/ipfs-utils/index.ts":"440","/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts":"441","/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts":"442","/home/paul/Projects/protocol/src/utils/lazy-loading-utils/index.ts":"443","/home/paul/Projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"444","/home/paul/Projects/protocol/src/utils/main-utils.ts":"445","/home/paul/Projects/protocol/src/utils/password-utils/decrypt.password-utils.ts":"446","/home/paul/Projects/protocol/src/utils/password-utils/derive-key.password-utils.ts":"447","/home/paul/Projects/protocol/src/utils/password-utils/encrypt.password-utils.ts":"448","/home/paul/Projects/protocol/src/utils/password-utils/index.ts":"449","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.const.ts":"450","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.types.ts":"451","/home/paul/Projects/protocol/src/utils/string-encoding-utils.ts":"452","/home/paul/Projects/protocol/src/utils/string-utilities.ts":"453","/home/paul/Projects/protocol/src/utils/typed-array-utils.ts":"454","/home/paul/Projects/protocol/src/utils/validation-utils/index.ts":"455","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"456","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts":"457","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils.ts":"458","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts":"459","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts":"460","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts":"461","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts":"462","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts":"463","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts":"464","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.ts":"465","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts":"466","/home/paul/Projects/protocol/src/classes/filestorage-class/index.ts":"467","/home/paul/Projects/protocol/src/utils/files-utils/files-utils-size.ts":"468","/home/paul/Projects/protocol/src/utils/files-utils/index.ts":"469","/home/paul/Projects/protocol/src/app-render.tsx":"470","/home/paul/Projects/protocol/src/app.tsx":"471","/home/paul/Projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx":"472","/home/paul/Projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts":"473","/home/paul/Projects/protocol/src/components/filestore-add-file/index.ts":"474","/home/paul/Projects/protocol/src/utils/files-utils/files-utils-download.ts":"475","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts":"476","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts":"477","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts":"478","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts":"479","/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts":"480","/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx":"481","/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts":"482","/home/paul/Projects/protocol/src/components/connect-to-swarm/index.ts":"483","/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/index.ts":"484","/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts":"485","/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts":"486","/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts":"487","/home/paul/Projects/protocol/src/components/sensitive-data-storage/index.ts":"488","/home/paul/Projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx":"489","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts":"490","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts":"491","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts":"492"},{"size":3785,"mtime":1585664079333,"results":"493","hashOfConfig":"494"},{"size":631,"mtime":1586094465927,"results":"495","hashOfConfig":"494"},{"size":181,"mtime":1585664079337,"results":"496","hashOfConfig":"494"},{"size":8849,"mtime":1585664079337,"results":"497","hashOfConfig":"494"},{"size":2394,"mtime":1585664079341,"results":"498","hashOfConfig":"494"},{"size":3231,"mtime":1585664079341,"results":"499","hashOfConfig":"494"},{"size":2982,"mtime":1585664079341,"results":"500","hashOfConfig":"494"},{"size":343,"mtime":1585664079361,"results":"501","hashOfConfig":"494"},{"size":1591,"mtime":1585664079361,"results":"502","hashOfConfig":"494"},{"size":1068,"mtime":1585664079393,"results":"503","hashOfConfig":"494"},{"size":51,"mtime":1585664079397,"results":"504","hashOfConfig":"494"},{"size":198,"mtime":1585664079397,"results":"505","hashOfConfig":"494"},{"size":697,"mtime":1585664079397,"results":"506","hashOfConfig":"494"},{"size":1525,"mtime":1585664079413,"results":"507","hashOfConfig":"494"},{"size":33,"mtime":1583771335337,"results":"508","hashOfConfig":"509"},{"size":602,"mtime":1583771335337,"results":"510","hashOfConfig":"509"},{"size":43,"mtime":1583771335337,"results":"511","hashOfConfig":"509"},{"size":163,"mtime":1583771335337,"results":"512","hashOfConfig":"509"},{"size":93,"mtime":1584216278493,"results":"513","hashOfConfig":"509"},{"size":216,"mtime":1583771335337,"results":"514","hashOfConfig":"509"},{"size":3259,"mtime":1583771335337,"results":"515","hashOfConfig":"509"},{"size":1937,"mtime":1583771335337,"results":"516","hashOfConfig":"509"},{"size":561,"mtime":1583771335337,"results":"517","hashOfConfig":"509"},{"size":140,"mtime":1584216278493,"results":"518","hashOfConfig":"509"},{"size":615,"mtime":1584046725208,"results":"519","hashOfConfig":"509"},{"size":606,"mtime":1584046725208,"results":"520","hashOfConfig":"509"},{"size":52,"mtime":1584216278493,"results":"521","hashOfConfig":"509"},{"size":235,"mtime":1583771335337,"results":"522","hashOfConfig":"509"},{"size":1329,"mtime":1583771335337,"results":"523","hashOfConfig":"509"},{"size":95,"mtime":1584216278493,"results":"524","hashOfConfig":"509"},{"size":2819,"mtime":1583771335337,"results":"525","hashOfConfig":"509"},{"size":1636,"mtime":1583771335341,"results":"526","hashOfConfig":"509"},{"size":4314,"mtime":1586455382467,"results":"527","hashOfConfig":"509"},{"size":4421,"mtime":1583771335341,"results":"528","hashOfConfig":"509"},{"size":1314,"mtime":1586455382467,"results":"529","hashOfConfig":"509"},{"size":8064,"mtime":1586455382467,"results":"530","hashOfConfig":"509"},{"size":1874,"mtime":1583771335341,"results":"531","hashOfConfig":"509"},{"size":2614,"mtime":1586455382467,"results":"532","hashOfConfig":"509"},{"size":193,"mtime":1584216278493,"results":"533","hashOfConfig":"509"},{"size":89,"mtime":1584216278493,"results":"534","hashOfConfig":"509"},{"size":728,"mtime":1583771335341,"results":"535","hashOfConfig":"509"},{"size":1648,"mtime":1583771335341,"results":"536","hashOfConfig":"509"},{"size":146,"mtime":1584216278493,"results":"537","hashOfConfig":"509"},{"size":191,"mtime":1583771335341,"results":"538","hashOfConfig":"509"},{"size":2582,"mtime":1586089918855,"results":"539","hashOfConfig":"509"},{"size":978,"mtime":1583771335341,"results":"540","hashOfConfig":"509"},{"size":103,"mtime":1584216278493,"results":"541","hashOfConfig":"509"},{"size":4922,"mtime":1583771335341,"results":"542","hashOfConfig":"509"},{"size":2663,"mtime":1583771335341,"results":"543","hashOfConfig":"509"},{"size":125,"mtime":1584216278493,"results":"544","hashOfConfig":"509"},{"size":58,"mtime":1583771335341,"results":"545","hashOfConfig":"509"},{"size":2081,"mtime":1584046725208,"results":"546","hashOfConfig":"509"},{"size":216,"mtime":1583771335341,"results":"547","hashOfConfig":"509"},{"size":2025,"mtime":1583771335341,"results":"548","hashOfConfig":"509"},{"size":785,"mtime":1583771335341,"results":"549","hashOfConfig":"509"},{"size":66,"mtime":1583771335341,"results":"550","hashOfConfig":"509"},{"size":185,"mtime":1584216278493,"results":"551","hashOfConfig":"509"},{"size":2892,"mtime":1586713991282,"results":"552","hashOfConfig":"509"},{"size":900,"mtime":1583771335341,"results":"553","hashOfConfig":"509"},{"size":751,"mtime":1583771335341,"results":"554","hashOfConfig":"509"},{"size":187,"mtime":1583771335341,"results":"555","hashOfConfig":"509"},{"size":237,"mtime":1584216278493,"results":"556","hashOfConfig":"509"},{"size":1579,"mtime":1583771335341,"results":"557","hashOfConfig":"509"},{"size":81,"mtime":1584216278493,"results":"558","hashOfConfig":"509"},{"size":360,"mtime":1583771335341,"results":"559","hashOfConfig":"509"},{"size":1786,"mtime":1583771335341,"results":"560","hashOfConfig":"509"},{"size":169,"mtime":1584216278493,"results":"561","hashOfConfig":"509"},{"size":738,"mtime":1583771335341,"results":"562","hashOfConfig":"509"},{"size":224,"mtime":1583771335341,"results":"563","hashOfConfig":"509"},{"size":379,"mtime":1583771335341,"results":"564","hashOfConfig":"509"},{"size":2670,"mtime":1583771335341,"results":"565","hashOfConfig":"509"},{"size":293,"mtime":1584216278493,"results":"566","hashOfConfig":"509"},{"size":781,"mtime":1583771335341,"results":"567","hashOfConfig":"509"},{"size":1934,"mtime":1583771335341,"results":"568","hashOfConfig":"509"},{"size":157,"mtime":1584216278493,"results":"569","hashOfConfig":"509"},{"size":1081,"mtime":1583771335341,"results":"570","hashOfConfig":"509"},{"size":1962,"mtime":1583771335341,"results":"571","hashOfConfig":"509"},{"size":157,"mtime":1584216278493,"results":"572","hashOfConfig":"509"},{"size":671,"mtime":1583771335341,"results":"573","hashOfConfig":"509"},{"size":215,"mtime":1583771335341,"results":"574","hashOfConfig":"509"},{"size":340,"mtime":1583771335341,"results":"575","hashOfConfig":"509"},{"size":3790,"mtime":1583771335341,"results":"576","hashOfConfig":"509"},{"size":281,"mtime":1584216278493,"results":"577","hashOfConfig":"509"},{"size":1720,"mtime":1583771335341,"results":"578","hashOfConfig":"509"},{"size":70,"mtime":1584216278493,"results":"579","hashOfConfig":"509"},{"size":1742,"mtime":1583771335341,"results":"580","hashOfConfig":"509"},{"size":70,"mtime":1584216278493,"results":"581","hashOfConfig":"509"},{"size":684,"mtime":1584216278493,"results":"582","hashOfConfig":"509"},{"size":224,"mtime":1583771335341,"results":"583","hashOfConfig":"509"},{"size":76,"mtime":1583771335341,"results":"584","hashOfConfig":"509"},{"size":3995,"mtime":1583771335341,"results":"585","hashOfConfig":"509"},{"size":293,"mtime":1584216278493,"results":"586","hashOfConfig":"509"},{"size":1035,"mtime":1583771335341,"results":"587","hashOfConfig":"509"},{"size":7347,"mtime":1583771335341,"results":"588","hashOfConfig":"509"},{"size":2890,"mtime":1583771335341,"results":"589","hashOfConfig":"509"},{"size":185,"mtime":1584216278493,"results":"590","hashOfConfig":"509"},{"size":2194,"mtime":1586713991298,"results":"591","hashOfConfig":"509"},{"size":31632,"mtime":1586713991298,"results":"592","hashOfConfig":"509"},{"size":6538,"mtime":1586713991314,"results":"593","hashOfConfig":"509"},{"size":33050,"mtime":1586713991314,"results":"594","hashOfConfig":"509"},{"size":62,"mtime":1584216278493,"results":"595","hashOfConfig":"509"},{"size":19542,"mtime":1586713991314,"results":"596","hashOfConfig":"509"},{"size":83,"mtime":1584216278493,"results":"597","hashOfConfig":"509"},{"size":311,"mtime":1583771335341,"results":"598","hashOfConfig":"509"},{"size":14225,"mtime":1583771335341,"results":"599","hashOfConfig":"509"},{"size":1182,"mtime":1583771335341,"results":"600","hashOfConfig":"509"},{"size":263,"mtime":1584216278493,"results":"601","hashOfConfig":"509"},{"size":145,"mtime":1583771335341,"results":"602","hashOfConfig":"509"},{"size":4334,"mtime":1583771335341,"results":"603","hashOfConfig":"509"},{"size":151,"mtime":1584216278493,"results":"604","hashOfConfig":"509"},{"size":651,"mtime":1583771335341,"results":"605","hashOfConfig":"509"},{"size":746,"mtime":1583771335341,"results":"606","hashOfConfig":"509"},{"size":155,"mtime":1584216278493,"results":"607","hashOfConfig":"509"},{"size":231,"mtime":1584216278493,"results":"608","hashOfConfig":"509"},{"size":110,"mtime":1583771335341,"results":"609","hashOfConfig":"509"},{"size":77,"mtime":1583771335341,"results":"610","hashOfConfig":"509"},{"size":75,"mtime":1586629649527,"results":"611","hashOfConfig":"509"},{"size":285,"mtime":1586713991326,"results":"612","hashOfConfig":"509"},{"size":717,"mtime":1583771335341,"results":"613","hashOfConfig":"509"},{"size":306,"mtime":1583771335341,"results":"614","hashOfConfig":"509"},{"size":346,"mtime":1584216278493,"results":"615","hashOfConfig":"509"},{"size":385,"mtime":1583771335341,"results":"616","hashOfConfig":"509"},{"size":333,"mtime":1583771335341,"results":"617","hashOfConfig":"509"},{"size":130,"mtime":1583771335341,"results":"618","hashOfConfig":"509"},{"size":186,"mtime":1584216278493,"results":"619","hashOfConfig":"509"},{"size":26102,"mtime":1586713991326,"results":"620","hashOfConfig":"509"},{"size":3760,"mtime":1586713991330,"results":"621","hashOfConfig":"509"},{"size":115,"mtime":1584216278493,"results":"622","hashOfConfig":"509"},{"size":758,"mtime":1583771335345,"results":"623","hashOfConfig":"509"},{"size":868,"mtime":1583771335345,"results":"624","hashOfConfig":"509"},{"size":181,"mtime":1583771335345,"results":"625","hashOfConfig":"509"},{"size":192,"mtime":1583771335345,"results":"626","hashOfConfig":"509"},{"size":1290,"mtime":1583771335345,"results":"627","hashOfConfig":"509"},{"size":123,"mtime":1584216278493,"results":"628","hashOfConfig":"509"},{"size":579,"mtime":1584216278493,"results":"629","hashOfConfig":"509"},{"size":4415,"mtime":1586713991346,"results":"630","hashOfConfig":"509"},{"size":111,"mtime":1584216278493,"results":"631","hashOfConfig":"509"},{"size":900,"mtime":1586713991370,"results":"632","hashOfConfig":"509"},{"size":19491,"mtime":1586713991390,"results":"633","hashOfConfig":"509"},{"size":2065,"mtime":1586713991402,"results":"634","hashOfConfig":"509"},{"size":224,"mtime":1584216278493,"results":"635","hashOfConfig":"509"},{"size":70,"mtime":1584216278493,"results":"636","hashOfConfig":"509"},{"size":1588,"mtime":1583771335345,"results":"637","hashOfConfig":"509"},{"size":15111,"mtime":1584046334640,"results":"638","hashOfConfig":"509"},{"size":2944,"mtime":1583771335345,"results":"639","hashOfConfig":"509"},{"size":248,"mtime":1584216278493,"results":"640","hashOfConfig":"509"},{"size":78,"mtime":1584216278493,"results":"641","hashOfConfig":"509"},{"size":126,"mtime":1584216278493,"results":"642","hashOfConfig":"509"},{"size":15922,"mtime":1583771335345,"results":"643","hashOfConfig":"509"},{"size":1944,"mtime":1583771335345,"results":"644","hashOfConfig":"509"},{"size":135,"mtime":1584216278493,"results":"645","hashOfConfig":"509"},{"size":3891,"mtime":1583771335345,"results":"646","hashOfConfig":"509"},{"size":3563,"mtime":1584216278493,"results":"647","hashOfConfig":"509"},{"size":7626,"mtime":1584216278493,"results":"648","hashOfConfig":"509"},{"size":4883,"mtime":1584216278493,"results":"649","hashOfConfig":"509"},{"size":453,"mtime":1583771335345,"results":"650","hashOfConfig":"509"},{"size":310,"mtime":1583771335345,"results":"651","hashOfConfig":"509"},{"size":365,"mtime":1584216278493,"results":"652","hashOfConfig":"509"},{"size":3256,"mtime":1584216278493,"results":"653","hashOfConfig":"509"},{"size":255,"mtime":1583771335345,"results":"654","hashOfConfig":"509"},{"size":14405,"mtime":1583771335345,"results":"655","hashOfConfig":"509"},{"size":206,"mtime":1584216278493,"results":"656","hashOfConfig":"509"},{"size":117,"mtime":1584216278493,"results":"657","hashOfConfig":"509"},{"size":3800,"mtime":1583771335345,"results":"658","hashOfConfig":"509"},{"size":65,"mtime":1584216278493,"results":"659","hashOfConfig":"509"},{"size":665,"mtime":1583771335345,"results":"660","hashOfConfig":"509"},{"size":4672,"mtime":1583771335345,"results":"661","hashOfConfig":"509"},{"size":129,"mtime":1584216278493,"results":"662","hashOfConfig":"509"},{"size":1589,"mtime":1583771335345,"results":"663","hashOfConfig":"509"},{"size":504,"mtime":1583771335345,"results":"664","hashOfConfig":"509"},{"size":115,"mtime":1584216278493,"results":"665","hashOfConfig":"509"},{"size":180,"mtime":1584216278493,"results":"666","hashOfConfig":"509"},{"size":243,"mtime":1584216278493,"results":"667","hashOfConfig":"509"},{"size":1884,"mtime":1586713991406,"results":"668","hashOfConfig":"509"},{"size":12356,"mtime":1586713991406,"results":"669","hashOfConfig":"509"},{"size":4767,"mtime":1586713991422,"results":"670","hashOfConfig":"509"},{"size":37,"mtime":1584216278493,"results":"671","hashOfConfig":"509"},{"size":424,"mtime":1584223399152,"results":"672","hashOfConfig":"509"},{"size":110,"mtime":1584216278493,"results":"673","hashOfConfig":"509"},{"size":46,"mtime":1583771335345,"results":"674","hashOfConfig":"509"},{"size":5218,"mtime":1583771335345,"results":"675","hashOfConfig":"509"},{"size":1151,"mtime":1583771335345,"results":"676","hashOfConfig":"509"},{"size":165,"mtime":1584216278493,"results":"677","hashOfConfig":"509"},{"size":839,"mtime":1583771335345,"results":"678","hashOfConfig":"509"},{"size":15598,"mtime":1583771335345,"results":"679","hashOfConfig":"509"},{"size":3120,"mtime":1583771335345,"results":"680","hashOfConfig":"509"},{"size":514,"mtime":1583771335345,"results":"681","hashOfConfig":"509"},{"size":128,"mtime":1584216278493,"results":"682","hashOfConfig":"509"},{"size":1490,"mtime":1583771335345,"results":"683","hashOfConfig":"509"},{"size":32718,"mtime":1583771335345,"results":"684","hashOfConfig":"509"},{"size":1469,"mtime":1583771335345,"results":"685","hashOfConfig":"509"},{"size":181,"mtime":1584216278493,"results":"686","hashOfConfig":"509"},{"size":160,"mtime":1584216278493,"results":"687","hashOfConfig":"509"},{"size":111,"mtime":1584216278493,"results":"688","hashOfConfig":"509"},{"size":298,"mtime":1583771335345,"results":"689","hashOfConfig":"509"},{"size":1497,"mtime":1583771335345,"results":"690","hashOfConfig":"509"},{"size":51,"mtime":1584216278493,"results":"691","hashOfConfig":"509"},{"size":1440,"mtime":1583771335349,"results":"692","hashOfConfig":"509"},{"size":55,"mtime":1584216278493,"results":"693","hashOfConfig":"509"},{"size":563,"mtime":1583771335349,"results":"694","hashOfConfig":"509"},{"size":363,"mtime":1586713991426,"results":"695","hashOfConfig":"509"},{"size":29083,"mtime":1586713991426,"results":"696","hashOfConfig":"509"},{"size":1747,"mtime":1586713991426,"results":"697","hashOfConfig":"509"},{"size":325,"mtime":1584216278493,"results":"698","hashOfConfig":"509"},{"size":111,"mtime":1584216278493,"results":"699","hashOfConfig":"509"},{"size":80,"mtime":1583771335349,"results":"700","hashOfConfig":"509"},{"size":5189,"mtime":1583771335349,"results":"701","hashOfConfig":"509"},{"size":119,"mtime":1584216278493,"results":"702","hashOfConfig":"509"},{"size":216,"mtime":1583771335349,"results":"703","hashOfConfig":"509"},{"size":5946,"mtime":1583771335349,"results":"704","hashOfConfig":"509"},{"size":57,"mtime":1584216278493,"results":"705","hashOfConfig":"509"},{"size":1569,"mtime":1583771335349,"results":"706","hashOfConfig":"509"},{"size":1153,"mtime":1583771335349,"results":"707","hashOfConfig":"509"},{"size":643,"mtime":1583771335349,"results":"708","hashOfConfig":"509"},{"size":1322,"mtime":1583771335349,"results":"709","hashOfConfig":"509"},{"size":59,"mtime":1584216278493,"results":"710","hashOfConfig":"509"},{"size":1417,"mtime":1583771335349,"results":"711","hashOfConfig":"509"},{"size":145,"mtime":1584216278493,"results":"712","hashOfConfig":"509"},{"size":56,"mtime":1584216278493,"results":"713","hashOfConfig":"509"},{"size":466,"mtime":1584223399152,"results":"714","hashOfConfig":"509"},{"size":1467,"mtime":1584905706087,"results":"715","hashOfConfig":"509"},{"size":1406,"mtime":1585664079449,"results":"716","hashOfConfig":"509"},{"size":4370,"mtime":1585664079465,"results":"717","hashOfConfig":"509"},{"size":8913,"mtime":1585664079481,"results":"718","hashOfConfig":"509"},{"size":1844,"mtime":1584905733051,"results":"719","hashOfConfig":"509"},{"size":10991,"mtime":1585664079497,"results":"720","hashOfConfig":"509"},{"size":114,"mtime":1583771335349,"results":"721","hashOfConfig":"509"},{"size":445,"mtime":1584216278493,"results":"722","hashOfConfig":"509"},{"size":35,"mtime":1583771335349,"results":"723","hashOfConfig":"509"},{"size":51,"mtime":1583771335349,"results":"724","hashOfConfig":"509"},{"size":48,"mtime":1583771335349,"results":"725","hashOfConfig":"509"},{"size":35,"mtime":1583771335349,"results":"726","hashOfConfig":"509"},{"size":33,"mtime":1583771335349,"results":"727","hashOfConfig":"509"},{"size":31,"mtime":1583771335349,"results":"728","hashOfConfig":"509"},{"size":30,"mtime":1583771335349,"results":"729","hashOfConfig":"509"},{"size":37,"mtime":1583771335349,"results":"730","hashOfConfig":"509"},{"size":40,"mtime":1583771335349,"results":"731","hashOfConfig":"509"},{"size":25,"mtime":1583771335349,"results":"732","hashOfConfig":"509"},{"size":28,"mtime":1583771335349,"results":"733","hashOfConfig":"509"},{"size":29,"mtime":1583771335349,"results":"734","hashOfConfig":"509"},{"size":5817,"mtime":1584223399152,"results":"735","hashOfConfig":"509"},{"size":2202,"mtime":1586713991494,"results":"736","hashOfConfig":"509"},{"size":234,"mtime":1584216278497,"results":"737","hashOfConfig":"509"},{"size":2057,"mtime":1586716530496,"results":"738","hashOfConfig":"509"},{"size":11339,"mtime":1586894325954,"results":"739","hashOfConfig":"509"},{"size":7478,"mtime":1586892374291,"results":"740","hashOfConfig":"509"},{"size":157,"mtime":1584216278497,"results":"741","hashOfConfig":"509"},{"size":105,"mtime":1584216278497,"results":"742","hashOfConfig":"509"},{"size":6125,"mtime":1586895837682,"results":"743","hashOfConfig":"509"},{"size":1573,"mtime":1586895055096,"results":"744","hashOfConfig":"509"},{"size":173,"mtime":1584216278497,"results":"745","hashOfConfig":"509"},{"size":76,"mtime":1583771335353,"results":"746","hashOfConfig":"509"},{"size":11210,"mtime":1586895095136,"results":"747","hashOfConfig":"509"},{"size":4943,"mtime":1586893901715,"results":"748","hashOfConfig":"509"},{"size":313,"mtime":1584216278497,"results":"749","hashOfConfig":"509"},{"size":226,"mtime":1584216278497,"results":"750","hashOfConfig":"509"},{"size":714,"mtime":1584216278497,"results":"751","hashOfConfig":"509"},{"size":163,"mtime":1584216278497,"results":"752","hashOfConfig":"509"},{"size":308,"mtime":1583771335353,"results":"753","hashOfConfig":"509"},{"size":773,"mtime":1583771335353,"results":"754","hashOfConfig":"509"},{"size":165,"mtime":1584216278497,"results":"755","hashOfConfig":"509"},{"size":129,"mtime":1583771335353,"results":"756","hashOfConfig":"509"},{"size":832,"mtime":1583771335353,"results":"757","hashOfConfig":"509"},{"size":203,"mtime":1584216278497,"results":"758","hashOfConfig":"509"},{"size":551,"mtime":1584216278497,"results":"759","hashOfConfig":"509"},{"size":54,"mtime":1583771335353,"results":"760","hashOfConfig":"509"},{"size":201,"mtime":1584216278497,"results":"761","hashOfConfig":"509"},{"size":552,"mtime":1584216278497,"results":"762","hashOfConfig":"509"},{"size":53,"mtime":1583771335353,"results":"763","hashOfConfig":"509"},{"size":275,"mtime":1584216278497,"results":"764","hashOfConfig":"509"},{"size":494,"mtime":1584216278497,"results":"765","hashOfConfig":"509"},{"size":2310,"mtime":1584216278497,"results":"766","hashOfConfig":"509"},{"size":249,"mtime":1583771335353,"results":"767","hashOfConfig":"509"},{"size":281,"mtime":1584216278497,"results":"768","hashOfConfig":"509"},{"size":803,"mtime":1583771335353,"results":"769","hashOfConfig":"509"},{"size":1917,"mtime":1584216278497,"results":"770","hashOfConfig":"509"},{"size":214,"mtime":1583771335353,"results":"771","hashOfConfig":"509"},{"size":175,"mtime":1584216278497,"results":"772","hashOfConfig":"509"},{"size":890,"mtime":1583771335353,"results":"773","hashOfConfig":"509"},{"size":49,"mtime":1583771335353,"results":"774","hashOfConfig":"509"},{"size":299,"mtime":1584216278497,"results":"775","hashOfConfig":"509"},{"size":260,"mtime":1583771335353,"results":"776","hashOfConfig":"509"},{"size":1914,"mtime":1584216278497,"results":"777","hashOfConfig":"509"},{"size":60,"mtime":1583771335353,"results":"778","hashOfConfig":"509"},{"size":14058,"mtime":1586719424177,"results":"779","hashOfConfig":"509"},{"size":3546,"mtime":1583771335353,"results":"780","hashOfConfig":"509"},{"size":151,"mtime":1584216278497,"results":"781","hashOfConfig":"509"},{"size":5838,"mtime":1583771335353,"results":"782","hashOfConfig":"509"},{"size":1544,"mtime":1583771335353,"results":"783","hashOfConfig":"509"},{"size":760,"mtime":1586719271861,"results":"784","hashOfConfig":"509"},{"size":3089,"mtime":1583771335353,"results":"785","hashOfConfig":"509"},{"size":1831,"mtime":1583771335353,"results":"786","hashOfConfig":"509"},{"size":271,"mtime":1584216278497,"results":"787","hashOfConfig":"509"},{"size":109,"mtime":1583771335353,"results":"788","hashOfConfig":"509"},{"size":189,"mtime":1583771335353,"results":"789","hashOfConfig":"509"},{"size":206,"mtime":1583771335353,"results":"790","hashOfConfig":"509"},{"size":117,"mtime":1583771335353,"results":"791","hashOfConfig":"509"},{"size":209,"mtime":1583771335353,"results":"792","hashOfConfig":"509"},{"size":210,"mtime":1583771335353,"results":"793","hashOfConfig":"509"},{"size":115,"mtime":1583771335353,"results":"794","hashOfConfig":"509"},{"size":201,"mtime":1583771335353,"results":"795","hashOfConfig":"509"},{"size":212,"mtime":1583771335353,"results":"796","hashOfConfig":"509"},{"size":123,"mtime":1583771335353,"results":"797","hashOfConfig":"509"},{"size":221,"mtime":1583771335353,"results":"798","hashOfConfig":"509"},{"size":216,"mtime":1583771335353,"results":"799","hashOfConfig":"509"},{"size":159,"mtime":1583771335353,"results":"800","hashOfConfig":"509"},{"size":99,"mtime":1583771335353,"results":"801","hashOfConfig":"509"},{"size":713,"mtime":1583771335353,"results":"802","hashOfConfig":"509"},{"size":199,"mtime":1583771335353,"results":"803","hashOfConfig":"509"},{"size":177,"mtime":1584216278493,"results":"804","hashOfConfig":"509"},{"size":125,"mtime":1584216278493,"results":"805","hashOfConfig":"509"},{"size":52,"mtime":1584216278497,"results":"806","hashOfConfig":"509"},{"size":3593,"mtime":1586893636448,"results":"807","hashOfConfig":"509"},{"size":72,"mtime":1584216278497,"results":"808","hashOfConfig":"509"},{"size":4724,"mtime":1583771335349,"results":"809","hashOfConfig":"509"},{"size":1394,"mtime":1583771335349,"results":"810","hashOfConfig":"509"},{"size":16451,"mtime":1585664079517,"results":"811","hashOfConfig":"509"},{"size":5960,"mtime":1586715103959,"results":"812","hashOfConfig":"509"},{"size":168,"mtime":1584216278497,"results":"813","hashOfConfig":"509"},{"size":3024,"mtime":1583771335353,"results":"814","hashOfConfig":"509"},{"size":13424,"mtime":1586713991498,"results":"815","hashOfConfig":"509"},{"size":8356,"mtime":1583771335353,"results":"816","hashOfConfig":"509"},{"size":50,"mtime":1584216278497,"results":"817","hashOfConfig":"509"},{"size":226,"mtime":1584216278497,"results":"818","hashOfConfig":"509"},{"size":534,"mtime":1584216278497,"results":"819","hashOfConfig":"509"},{"size":245,"mtime":1584216278497,"results":"820","hashOfConfig":"509"},{"size":270,"mtime":1583771335353,"results":"821","hashOfConfig":"509"},{"size":7024,"mtime":1583771335353,"results":"822","hashOfConfig":"509"},{"size":2057,"mtime":1583771335353,"results":"823","hashOfConfig":"509"},{"size":218,"mtime":1584216278497,"results":"824","hashOfConfig":"509"},{"size":1025,"mtime":1585664079553,"results":"825","hashOfConfig":"509"},{"size":18365,"mtime":1585664079577,"results":"826","hashOfConfig":"509"},{"size":3211,"mtime":1584223399152,"results":"827","hashOfConfig":"509"},{"size":161,"mtime":1584216278497,"results":"828","hashOfConfig":"509"},{"size":126,"mtime":1583771335353,"results":"829","hashOfConfig":"509"},{"size":2808,"mtime":1583771335353,"results":"830","hashOfConfig":"509"},{"size":218,"mtime":1584216278497,"results":"831","hashOfConfig":"509"},{"size":157,"mtime":1583771335353,"results":"832","hashOfConfig":"509"},{"size":677,"mtime":1583771335357,"results":"833","hashOfConfig":"509"},{"size":1420,"mtime":1586713991498,"results":"834","hashOfConfig":"509"},{"size":73,"mtime":1584216278497,"results":"835","hashOfConfig":"509"},{"size":763,"mtime":1583771335357,"results":"836","hashOfConfig":"509"},{"size":155,"mtime":1584216278497,"results":"837","hashOfConfig":"509"},{"size":2422,"mtime":1586713991498,"results":"838","hashOfConfig":"509"},{"size":158,"mtime":1583771335365,"results":"839","hashOfConfig":"509"},{"size":287,"mtime":1584216278497,"results":"840","hashOfConfig":"509"},{"size":542,"mtime":1583771335365,"results":"841","hashOfConfig":"509"},{"size":8724,"mtime":1583771335365,"results":"842","hashOfConfig":"509"},{"size":286,"mtime":1583771335365,"results":"843","hashOfConfig":"509"},{"size":1178,"mtime":1583771335365,"results":"844","hashOfConfig":"509"},{"size":37264,"mtime":1586713991498,"results":"845","hashOfConfig":"509"},{"size":1443,"mtime":1583771335365,"results":"846","hashOfConfig":"509"},{"size":72,"mtime":1583771335365,"results":"847","hashOfConfig":"509"},{"size":434,"mtime":1583771335365,"results":"848","hashOfConfig":"509"},{"size":54,"mtime":1583771335365,"results":"849","hashOfConfig":"509"},{"size":148,"mtime":1584216278497,"results":"850","hashOfConfig":"509"},{"size":27,"mtime":1583771335365,"results":"851","hashOfConfig":"509"},{"size":228,"mtime":1583771335365,"results":"852","hashOfConfig":"509"},{"size":71,"mtime":1584216278497,"results":"853","hashOfConfig":"509"},{"size":78,"mtime":1583771335365,"results":"854","hashOfConfig":"509"},{"size":206,"mtime":1583771335365,"results":"855","hashOfConfig":"509"},{"size":37,"mtime":1584216278497,"results":"856","hashOfConfig":"509"},{"size":1749,"mtime":1583771335365,"results":"857","hashOfConfig":"509"},{"size":49,"mtime":1584216278497,"results":"858","hashOfConfig":"509"},{"size":1713,"mtime":1583771335365,"results":"859","hashOfConfig":"509"},{"size":480,"mtime":1583771335365,"results":"860","hashOfConfig":"509"},{"size":56,"mtime":1583771335369,"results":"861","hashOfConfig":"509"},{"size":153,"mtime":1584216278497,"results":"862","hashOfConfig":"509"},{"size":1262,"mtime":1583771335369,"results":"863","hashOfConfig":"509"},{"size":58,"mtime":1584216278497,"results":"864","hashOfConfig":"509"},{"size":592,"mtime":1583771335369,"results":"865","hashOfConfig":"509"},{"size":52,"mtime":1586455382579,"results":"866","hashOfConfig":"509"},{"size":40,"mtime":1583771335369,"results":"867","hashOfConfig":"509"},{"size":534,"mtime":1583771335385,"results":"868","hashOfConfig":"509"},{"size":163,"mtime":1583771335385,"results":"869","hashOfConfig":"509"},{"size":215,"mtime":1583771335385,"results":"870","hashOfConfig":"509"},{"size":838,"mtime":1583771335385,"results":"871","hashOfConfig":"509"},{"size":385,"mtime":1584216278497,"results":"872","hashOfConfig":"509"},{"size":23,"mtime":1583771335385,"results":"873","hashOfConfig":"509"},{"size":11616,"mtime":1586455382583,"results":"874","hashOfConfig":"509"},{"size":393,"mtime":1583771335385,"results":"875","hashOfConfig":"509"},{"size":2965,"mtime":1584042773045,"results":"876","hashOfConfig":"509"},{"size":261,"mtime":1583771335385,"results":"877","hashOfConfig":"509"},{"size":937,"mtime":1583771335385,"results":"878","hashOfConfig":"509"},{"size":338,"mtime":1583771335385,"results":"879","hashOfConfig":"509"},{"size":3371,"mtime":1583771335385,"results":"880","hashOfConfig":"509"},{"size":72,"mtime":1583771335385,"results":"881","hashOfConfig":"509"},{"size":2441,"mtime":1584216278497,"results":"882","hashOfConfig":"509"},{"size":266,"mtime":1583771335385,"results":"883","hashOfConfig":"509"},{"size":70,"mtime":1583771335385,"results":"884","hashOfConfig":"509"},{"size":453,"mtime":1583771335385,"results":"885","hashOfConfig":"509"},{"size":1248,"mtime":1586455382583,"results":"886","hashOfConfig":"509"},{"size":345,"mtime":1583771335385,"results":"887","hashOfConfig":"509"},{"size":527,"mtime":1583771335385,"results":"888","hashOfConfig":"509"},{"size":38,"mtime":1583771335385,"results":"889","hashOfConfig":"509"},{"size":404,"mtime":1584216278497,"results":"890","hashOfConfig":"509"},{"size":66,"mtime":1583771335385,"results":"891","hashOfConfig":"509"},{"size":3866,"mtime":1583771335385,"results":"892","hashOfConfig":"509"},{"size":178,"mtime":1583771335385,"results":"893","hashOfConfig":"509"},{"size":176,"mtime":1584216278497,"results":"894","hashOfConfig":"509"},{"size":89,"mtime":1583771335385,"results":"895","hashOfConfig":"509"},{"size":91,"mtime":1584216278497,"results":"896","hashOfConfig":"509"},{"size":532,"mtime":1583771335385,"results":"897","hashOfConfig":"509"},{"size":63,"mtime":1583771335385,"results":"898","hashOfConfig":"509"},{"size":50,"mtime":1583771335385,"results":"899","hashOfConfig":"509"},{"size":142,"mtime":1584216278497,"results":"900","hashOfConfig":"509"},{"size":1682,"mtime":1583771335385,"results":"901","hashOfConfig":"509"},{"size":136,"mtime":1583771335385,"results":"902","hashOfConfig":"509"},{"size":1727,"mtime":1584216278497,"results":"903","hashOfConfig":"509"},{"size":303,"mtime":1584216278497,"results":"904","hashOfConfig":"509"},{"size":9668,"mtime":1584216278497,"results":"905","hashOfConfig":"509"},{"size":453,"mtime":1584216278497,"results":"906","hashOfConfig":"509"},{"size":1992,"mtime":1584216278497,"results":"907","hashOfConfig":"509"},{"size":2317,"mtime":1584216278497,"results":"908","hashOfConfig":"509"},{"size":986,"mtime":1583771335385,"results":"909","hashOfConfig":"509"},{"size":48,"mtime":1583771335385,"results":"910","hashOfConfig":"509"},{"size":90,"mtime":1584216278501,"results":"911","hashOfConfig":"509"},{"size":281,"mtime":1583771335385,"results":"912","hashOfConfig":"509"},{"size":6650,"mtime":1583771335385,"results":"913","hashOfConfig":"509"},{"size":89,"mtime":1584216278501,"results":"914","hashOfConfig":"509"},{"size":1862,"mtime":1583771335385,"results":"915","hashOfConfig":"509"},{"size":1800,"mtime":1583771335385,"results":"916","hashOfConfig":"509"},{"size":2307,"mtime":1583771335385,"results":"917","hashOfConfig":"509"},{"size":4384,"mtime":1583771335385,"results":"918","hashOfConfig":"509"},{"size":141,"mtime":1583771335385,"results":"919","hashOfConfig":"509"},{"size":405,"mtime":1584216278501,"results":"920","hashOfConfig":"509"},{"size":6608,"mtime":1583771335385,"results":"921","hashOfConfig":"509"},{"size":153,"mtime":1584216278501,"results":"922","hashOfConfig":"509"},{"size":186,"mtime":1583771335385,"results":"923","hashOfConfig":"509"},{"size":3133,"mtime":1583771335385,"results":"924","hashOfConfig":"509"},{"size":132,"mtime":1583771335385,"results":"925","hashOfConfig":"509"},{"size":547,"mtime":1583771335385,"results":"926","hashOfConfig":"509"},{"size":34,"mtime":1584216278501,"results":"927","hashOfConfig":"509"},{"size":400,"mtime":1583771335385,"results":"928","hashOfConfig":"509"},{"size":1478,"mtime":1584216278501,"results":"929","hashOfConfig":"509"},{"size":91,"mtime":1584216278501,"results":"930","hashOfConfig":"509"},{"size":75,"mtime":1583771335385,"results":"931","hashOfConfig":"509"},{"size":34,"mtime":1584216278501,"results":"932","hashOfConfig":"509"},{"size":672,"mtime":1584216278501,"results":"933","hashOfConfig":"509"},{"size":67,"mtime":1584216278501,"results":"934","hashOfConfig":"509"},{"size":295,"mtime":1586455382635,"results":"935","hashOfConfig":"509"},{"size":619,"mtime":1586455382635,"results":"936","hashOfConfig":"509"},{"size":38,"mtime":1584216278501,"results":"937","hashOfConfig":"509"},{"size":560,"mtime":1583771335385,"results":"938","hashOfConfig":"509"},{"size":718,"mtime":1583771335385,"results":"939","hashOfConfig":"509"},{"size":3088,"mtime":1583771335385,"results":"940","hashOfConfig":"509"},{"size":5878,"mtime":1584216278501,"results":"941","hashOfConfig":"509"},{"size":2493,"mtime":1583771335385,"results":"942","hashOfConfig":"509"},{"size":213,"mtime":1584216278501,"results":"943","hashOfConfig":"509"},{"size":2097,"mtime":1583771335385,"results":"944","hashOfConfig":"509"},{"size":473,"mtime":1583771335385,"results":"945","hashOfConfig":"509"},{"size":575,"mtime":1583771335385,"results":"946","hashOfConfig":"509"},{"size":462,"mtime":1583771335385,"results":"947","hashOfConfig":"509"},{"size":3990,"mtime":1583771335385,"results":"948","hashOfConfig":"509"},{"size":137,"mtime":1584216278501,"results":"949","hashOfConfig":"509"},{"size":1042,"mtime":1583771335389,"results":"950","hashOfConfig":"509"},{"size":564,"mtime":1583771335389,"results":"951","hashOfConfig":"509"},{"size":1175,"mtime":1583771335389,"results":"952","hashOfConfig":"509"},{"size":352,"mtime":1586455382499,"results":"953","hashOfConfig":"509"},{"size":7138,"mtime":1586455382523,"results":"954","hashOfConfig":"509"},{"size":1533,"mtime":1586455382531,"results":"955","hashOfConfig":"509"},{"size":296,"mtime":1586455382531,"results":"956","hashOfConfig":"509"},{"size":51,"mtime":1586455382551,"results":"957","hashOfConfig":"509"},{"size":1371,"mtime":1586455382559,"results":"958","hashOfConfig":"509"},{"size":5084,"mtime":1586455382559,"results":"959","hashOfConfig":"509"},{"size":8365,"mtime":1586455382559,"results":"960","hashOfConfig":"509"},{"size":125,"mtime":1586455382559,"results":"961","hashOfConfig":"509"},{"size":633,"mtime":1586455382615,"results":"962","hashOfConfig":"509"},{"size":77,"mtime":1586455382615,"results":"963","hashOfConfig":"509"},{"size":260,"mtime":1586455382443,"results":"964","hashOfConfig":"509"},{"size":439,"mtime":1586713991278,"results":"965","hashOfConfig":"509"},{"size":4079,"mtime":1586713991526,"results":"966","hashOfConfig":"509"},{"size":1044,"mtime":1586455382579,"results":"967","hashOfConfig":"509"},{"size":38,"mtime":1586455382579,"results":"968","hashOfConfig":"509"},{"size":778,"mtime":1586455382607,"results":"969","hashOfConfig":"509"},{"size":252,"mtime":1586455382479,"results":"970","hashOfConfig":"509"},{"size":2827,"mtime":1586455382479,"results":"971","hashOfConfig":"509"},{"size":403,"mtime":1586455382479,"results":"972","hashOfConfig":"509"},{"size":296,"mtime":1586455382479,"results":"973","hashOfConfig":"509"},{"size":1440,"mtime":1586713991506,"results":"974","hashOfConfig":"509"},{"size":1408,"mtime":1586713991526,"results":"975","hashOfConfig":"509"},{"size":524,"mtime":1586713991526,"results":"976","hashOfConfig":"509"},{"size":122,"mtime":1586713991526,"results":"977","hashOfConfig":"509"},{"size":50,"mtime":1586713991434,"results":"978","hashOfConfig":"509"},{"size":198,"mtime":1586713991434,"results":"979","hashOfConfig":"509"},{"size":4825,"mtime":1586713991450,"results":"980","hashOfConfig":"509"},{"size":989,"mtime":1586713991478,"results":"981","hashOfConfig":"509"},{"size":42,"mtime":1586713991550,"results":"982","hashOfConfig":"509"},{"size":1397,"mtime":1586713991562,"results":"983","hashOfConfig":"509"},{"size":79,"mtime":1586713991314,"results":"984","hashOfConfig":"509"},{"size":0,"mtime":1586895873294,"results":"985","hashOfConfig":"509"},{"size":673,"mtime":1586896590772,"results":"986","hashOfConfig":"509"},{"filePath":"987","messages":"988","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15rtne0",{"filePath":"989","messages":"990","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"991","messages":"992","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"993","messages":"994","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"995","messages":"996","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"997","messages":"998","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"999","messages":"1000","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1001","messages":"1002","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1003","messages":"1004","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1005","messages":"1006","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1007","messages":"1008","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1009","messages":"1010","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1011","messages":"1012","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1013","messages":"1014","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lsq9bm",{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1029"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032"},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1038","messages":"1039","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1042","messages":"1043","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1053"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1058"},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1066"},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1071"},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1074","messages":"1075","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1080","messages":"1081","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1130","messages":"1131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1132","messages":"1133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1134","messages":"1135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1136","messages":"1137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1138"},{"filePath":"1139","messages":"1140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1143","messages":"1144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1145","messages":"1146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1149","messages":"1150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1151","messages":"1152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1155","messages":"1156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159"},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1178"},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1181"},{"filePath":"1182","messages":"1183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1186","messages":"1187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1188"},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1191","messages":"1192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1193","messages":"1194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1201","messages":"1202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1203","messages":"1204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1205","messages":"1206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1207","messages":"1208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1209","messages":"1210","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1211"},{"filePath":"1212","messages":"1213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1214"},{"filePath":"1215","messages":"1216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1221"},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1224","messages":"1225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1226","messages":"1227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1228"},{"filePath":"1229","messages":"1230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1233","messages":"1234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1237","messages":"1238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1239","messages":"1240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1241","messages":"1242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1247","messages":"1248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1263","messages":"1264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1265","messages":"1266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1269","messages":"1270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1271"},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1274","messages":"1275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1280","messages":"1281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1282","messages":"1283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1284","messages":"1285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1286","messages":"1287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1290","messages":"1291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1292","messages":"1293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1294","messages":"1295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1296","messages":"1297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1298","messages":"1299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1302","messages":"1303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1304","messages":"1305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1306","messages":"1307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1308","messages":"1309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1310"},{"filePath":"1311","messages":"1312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1313"},{"filePath":"1314","messages":"1315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1316","messages":"1317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1328","messages":"1329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1330"},{"filePath":"1331","messages":"1332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1333","messages":"1334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1335","messages":"1336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1337","messages":"1338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1339","messages":"1340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1341","messages":"1342","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1343"},{"filePath":"1344","messages":"1345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1346","messages":"1347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1348","messages":"1349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1350"},{"filePath":"1351","messages":"1352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1355","messages":"1356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1357","messages":"1358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1359","messages":"1360","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1361","messages":"1362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1363","messages":"1364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1365","messages":"1366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1367","messages":"1368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1369","messages":"1370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1371","messages":"1372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1373","messages":"1374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1375","messages":"1376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1377","messages":"1378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1379","messages":"1380","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1381"},{"filePath":"1382","messages":"1383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1384"},{"filePath":"1385","messages":"1386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1387","messages":"1388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1389","messages":"1390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1391","messages":"1392","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1393"},{"filePath":"1394","messages":"1395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1396","messages":"1397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1398","messages":"1399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1400","messages":"1401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1402","messages":"1403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1404","messages":"1405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1406","messages":"1407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1408","messages":"1409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1410"},{"filePath":"1411","messages":"1412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1413","messages":"1414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1415","messages":"1416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1417","messages":"1418","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1419","messages":"1420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1421","messages":"1422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1423","messages":"1424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1425","messages":"1426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1429"},{"filePath":"1430","messages":"1431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1432","messages":"1433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1434","messages":"1435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1436","messages":"1437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1438","messages":"1439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1440","messages":"1441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1442","messages":"1443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1444","messages":"1445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1446","messages":"1447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1448","messages":"1449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1450","messages":"1451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1452","messages":"1453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1454","messages":"1455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1456","messages":"1457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1458"},{"filePath":"1459","messages":"1460","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1461"},{"filePath":"1462","messages":"1463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1464","messages":"1465","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1466"},{"filePath":"1467","messages":"1468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1469","messages":"1470","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1471"},{"filePath":"1472","messages":"1473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1474","messages":"1475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1476","messages":"1477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1478","messages":"1479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1480","messages":"1481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1482","messages":"1483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1484","messages":"1485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1486","messages":"1487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1488","messages":"1489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1490","messages":"1491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1492","messages":"1493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1494","messages":"1495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1496","messages":"1497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1498","messages":"1499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1500","messages":"1501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1502","messages":"1503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1504","messages":"1505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1506","messages":"1507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1508","messages":"1509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1510","messages":"1511","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1512","messages":"1513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1514","messages":"1515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1516","messages":"1517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1518","messages":"1519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1520","messages":"1521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1522","messages":"1523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1524","messages":"1525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1526","messages":"1527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1528","messages":"1529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1530","messages":"1531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1532","messages":"1533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1534","messages":"1535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1536","messages":"1537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1538","messages":"1539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1540","messages":"1541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1542","messages":"1543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1544","messages":"1545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1546","messages":"1547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1548","messages":"1549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1550","messages":"1551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1552","messages":"1553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1554","messages":"1555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1556","messages":"1557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1558","messages":"1559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1560","messages":"1561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1562","messages":"1563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1564","messages":"1565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1566","messages":"1567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1568","messages":"1569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1570","messages":"1571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1572","messages":"1573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1574","messages":"1575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1576","messages":"1577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1578","messages":"1579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1580","messages":"1581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1582","messages":"1583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1584","messages":"1585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1586","messages":"1587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1588","messages":"1589","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1590","messages":"1591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1592","messages":"1593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1594","messages":"1595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1596","messages":"1597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1598","messages":"1599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1600","messages":"1601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1602","messages":"1603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1604","messages":"1605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1606","messages":"1607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1608","messages":"1609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1610","messages":"1611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1612","messages":"1613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1614","messages":"1615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1616","messages":"1617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1618","messages":"1619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1620","messages":"1621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1622","messages":"1623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1624","messages":"1625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1626","messages":"1627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1628","messages":"1629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1630","messages":"1631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1632","messages":"1633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1634","messages":"1635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1636"},{"filePath":"1637","messages":"1638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1639","messages":"1640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1641","messages":"1642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1643","messages":"1644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1645","messages":"1646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1647","messages":"1648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1649","messages":"1650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1651","messages":"1652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1653","messages":"1654","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1655"},{"filePath":"1656","messages":"1657","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1658","messages":"1659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1660","messages":"1661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1662","messages":"1663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1664","messages":"1665","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1666"},{"filePath":"1667","messages":"1668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1669","messages":"1670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1671","messages":"1672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1673","messages":"1674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1675","messages":"1676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1677","messages":"1678","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1679"},{"filePath":"1680","messages":"1681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1682","messages":"1683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1684","messages":"1685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1686"},{"filePath":"1687","messages":"1688","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1689"},{"filePath":"1690","messages":"1691","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1692"},{"filePath":"1693","messages":"1694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1695","messages":"1696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1697","messages":"1698","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1699"},{"filePath":"1700","messages":"1701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1702","messages":"1703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1704","messages":"1705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1706","messages":"1707","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1708","messages":"1709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1710","messages":"1711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1712","messages":"1713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1714","messages":"1715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1716","messages":"1717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1718","messages":"1719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1720","messages":"1721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1722","messages":"1723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1724"},{"filePath":"1725","messages":"1726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1727","messages":"1728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1729","messages":"1730","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1731","messages":"1732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1733","messages":"1734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1735","messages":"1736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1737","messages":"1738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1739","messages":"1740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1741","messages":"1742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1743","messages":"1744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1745","messages":"1746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1747","messages":"1748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1749","messages":"1750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1751","messages":"1752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1753","messages":"1754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1755","messages":"1756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1757","messages":"1758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1759","messages":"1760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1761","messages":"1762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1763","messages":"1764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1765","messages":"1766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1767","messages":"1768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1769","messages":"1770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1771","messages":"1772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1773","messages":"1774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1775","messages":"1776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1777","messages":"1778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1779","messages":"1780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1781","messages":"1782","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1783"},{"filePath":"1784","messages":"1785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1786","messages":"1787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1788","messages":"1789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1790","messages":"1791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1792","messages":"1793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1794","messages":"1795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1796","messages":"1797","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1798"},{"filePath":"1799","messages":"1800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1801","messages":"1802","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1803"},{"filePath":"1804","messages":"1805","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1806"},{"filePath":"1807","messages":"1808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1809","messages":"1810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1811","messages":"1812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1815","messages":"1816","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1817"},{"filePath":"1818","messages":"1819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1820","messages":"1821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1822","messages":"1823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1824","messages":"1825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1826","messages":"1827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1828","messages":"1829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1830","messages":"1831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1832","messages":"1833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1834","messages":"1835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1836","messages":"1837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1838","messages":"1839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1840","messages":"1841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1842","messages":"1843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1844","messages":"1845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1846","messages":"1847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1848","messages":"1849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1850","messages":"1851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1852","messages":"1853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1854","messages":"1855","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1856"},{"filePath":"1857","messages":"1858","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1859"},{"filePath":"1860","messages":"1861","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1862"},{"filePath":"1863","messages":"1864","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1865"},{"filePath":"1866","messages":"1867","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1868"},{"filePath":"1869","messages":"1870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1871","messages":"1872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1873","messages":"1874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1875","messages":"1876","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1877"},{"filePath":"1878","messages":"1879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1880","messages":"1881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1882","messages":"1883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1884","messages":"1885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1886","messages":"1887","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1888"},{"filePath":"1889","messages":"1890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1891","messages":"1892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1893","messages":"1894","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1895"},{"filePath":"1896","messages":"1897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1898","messages":"1899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1900","messages":"1901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1902","messages":"1903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1904","messages":"1905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1906","messages":"1907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1908","messages":"1909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1910","messages":"1911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1912","messages":"1913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1914","messages":"1915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1916","messages":"1917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1918","messages":"1919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1920","messages":"1921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1922","messages":"1923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1924","messages":"1925","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1926"},{"filePath":"1927","messages":"1928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1929","messages":"1930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1931","messages":"1932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1933","messages":"1934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1935","messages":"1936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1937","messages":"1938","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1939"},{"filePath":"1940","messages":"1941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1942","messages":"1943","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1944"},{"filePath":"1945","messages":"1946","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1947","messages":"1948","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1949"},{"filePath":"1950","messages":"1951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1952","messages":"1953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1954","messages":"1955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1956","messages":"1957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1958","messages":"1959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1960","messages":"1961","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1962"},{"filePath":"1963","messages":"1964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1965","messages":"1966","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1967"},{"filePath":"1968","messages":"1969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1970","messages":"1971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1972","messages":"1973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1974","messages":"1975","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1976"},{"filePath":"1977","messages":"1978","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1979","messages":"1980","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1981"},{"filePath":"1982","messages":"1983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1984","messages":"1985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1986","messages":"1987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1988","messages":"1989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1990","messages":"1991","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1992","messages":"1993","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1994","messages":"1995","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1996"},{"filePath":"1997","messages":"1998","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1999","messages":"2000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2001","messages":"2002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2003","messages":"2004","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2005"},{"filePath":"2006","messages":"2007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2008","messages":"2009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2010","messages":"2011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2012","messages":"2013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2014","messages":"2015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2016","messages":"2017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2018","messages":"2019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2020","messages":"2021","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2022","messages":"2023","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2024","messages":"2025","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2026","messages":"2027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2028","messages":"2029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2030","messages":"2031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2032","messages":"2033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2034","messages":"2035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/Projects/protocol/__test__/central-authority-identity.test/central-authority-identity.utils.ts",["2036"],"/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts",["2037"],"/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.shared.ts",["2038"],"/home/paul/Projects/protocol/__test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",["2039"],"/home/paul/Projects/protocol/__test__/data-sign-test.ts",["2040"],"/home/paul/Projects/protocol/__test__/encryption-test.ts",["2041"],"/home/paul/Projects/protocol/__test__/error-extended-class-test.ts",["2042"],"/home/paul/Projects/protocol/__test__/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",["2043"],"/home/paul/Projects/protocol/__test__/mocha-chai-initialize.ts",["2044"],"/home/paul/Projects/protocol/__test__/swarm-message-store-test/swarm-message-store-test.const.ts",["2045"],"/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/index.ts",["2046"],"/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/swarrm-message-constructor.const.ts",["2047"],"/home/paul/Projects/protocol/__test__/swarrm-message-constructor.test/swarrm-message-constructor.shared.ts",["2048"],"/home/paul/Projects/protocol/__test__/validation-messaging.test/validate-messaging-timestamps-test.ts",["2049"],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts",["2050","2051","2052","2053","2054","2055","2056"],"import { ASYNC_QUEUE_BASE_CLASS_OPTIONS } from './async-queue-class-base.const';\nimport { extend } from '../../../utils/common-utils/common-utils-objects';\nimport {\n  TAsyncQueueBaseClassPromiseProviderPending,\n  TAsyncQueueBaseClassPromiseProvider,\n} from './async-queue-class-base.types';\nimport {\n  TAsyncQueueBaseClass,\n  IAsyncQueueBaseClassOptions,\n} from './async-queue-class-base.types';\nimport { getRun } from './async-queue-class-base.utils';\nimport { delay } from '../../../utils/common-utils/common-utils-timer';\nimport { TAsyncQueueBaseClassPromiseProviderBatch } from './async-queue-class-base.types';\n\nexport class AsyncQueueClassBase extends TAsyncQueueBaseClass {\n  protected queue: TAsyncQueueBaseClassPromiseProvider<any>[] = [];\n\n  protected batch: Promise<any[]> | void = undefined;\n\n  protected runPromiseProvider?: ReturnType<typeof getRun>;\n\n  constructor(options?: Partial<IAsyncQueueBaseClassOptions>) {\n    super(\n      extend(\n        options || {},\n        ASYNC_QUEUE_BASE_CLASS_OPTIONS\n      ) as IAsyncQueueBaseClassOptions\n    );\n    this.runPromiseProvider = getRun(this.options.promiseTimeout);\n  }\n\n  public do = async <T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | (T extends any[] ? Array<T | Error> : never)> => {\n    return new Promise((res) => {\n      this.queue.push(() => {\n        return this.createPromise<T>(promiseProvider)\n          .then(res)\n          .catch(res);\n      });\n      this.start();\n    });\n  };\n\n  protected async createBatch(): Promise<any[]> {\n    if (!this.queue.length) {\n      return [];\n    }\n\n    const { options } = this;\n    const promisePendingBatch = this.queue.splice(0, options.batchSize);\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    return Promise.all(\n      promisePendingBatch.map(this.runPromiseProvider)\n    ).catch((err) => new Array(promisePendingBatch.length).fill(err)); // fill with an error if the batch was rejected\n  }\n\n  protected start = async () => {\n    if (this.batch) {\n      return;\n    }\n    if (!this.queue.length) {\n      return;\n    }\n    this.batch = this.createBatch();\n    try {\n      await this.batch;\n    } catch (err) {\n      console.error('AsyncQueueClassBase::error');\n      console.error(err);\n    }\n\n    const { delayMs } = this.options;\n\n    await delay(delayMs);\n    this.batch = undefined;\n    this.start();\n  };\n\n  protected isBatch<T>(\n    promiseProvider: any\n  ): promiseProvider is TAsyncQueueBaseClassPromiseProviderBatch<T> {\n    return promiseProvider instanceof Array;\n  }\n  protected createPromise<T>(promiseProvider: any): Promise<T | Error>;\n  protected createPromise<T>(promiseProvider: any[]): Promise<Array<T | Error>>;\n  protected createPromise<T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<Array<T | Error> | T | Error> {\n    let result;\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    if (this.isBatch<T>(promiseProvider)) {\n      result = Promise.all(promiseProvider.map(this.runPromiseProvider));\n    } else {\n      result = this.runPromiseProvider(promiseProvider);\n    }\n    this.start();\n    return result;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts",["2057","2058"],"export interface IAsyncQueueBaseClassOptions {\n  /**\n   * a number of promises in one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  batchSize: number;\n  /**\n   * timeout for a one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  promiseTimeout: number;\n  /**\n   * a delay between executing of a two batches\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  delayMs: number;\n}\n\nexport type TAsyncQueueBaseClassPromiseProvider<T> = () => Promise<T>;\n\nexport type TAsyncQueueBaseClassPromiseProviderBatch<\n  T\n> = TAsyncQueueBaseClassPromiseProvider<T>[];\n\nexport type TAsyncQueueBaseClassPromiseProviderPending<T> =\n  | TAsyncQueueBaseClassPromiseProvider<T>\n  | TAsyncQueueBaseClassPromiseProviderBatch<T>;\n\nexport interface IAsyncQueueBaseClass {\n  /**\n   * resolve promises provided in queue\n   *\n   * @template T\n   * @param {Promise<T>[]} pending\n   * @returns {(Promise<T | Error>)}\n   * @memberof IAsyncQueueBaseClass\n   */\n  do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderBatch<T>\n  ): Promise<Array<T | Error> | Error>;\n  do<T>(pending: TAsyncQueueBaseClassPromiseProvider<T>): Promise<T | Error>;\n}\n\nexport abstract class TAsyncQueueBaseClass implements IAsyncQueueBaseClass {\n  /**\n   * queue of promises pending\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract queue: TAsyncQueueBaseClassPromiseProvider<any>[];\n\n  /**\n   * the currently executing batch of a promises\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract batch: Promise<any[]> | void;\n\n  constructor(protected options: IAsyncQueueBaseClassOptions) {}\n\n  public abstract async do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | Array<T | Error>>;\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts",["2059"],"import { TAsyncQueueBaseClassPromiseProvider } from './async-queue-class-base.types';\nimport { timeout } from '../../../utils/common-utils/common-utils-timer';\n\nconst returnError = (res: any) => {\n  return res instanceof Error ? res : new Error(String(res));\n};\n\nexport const getRun = (timeoutMs: number) => <T>(\n  promiseProvider: TAsyncQueueBaseClassPromiseProvider<T>\n): Promise<T | Error> => {\n  try {\n    return Promise.race([promiseProvider(), timeout(timeoutMs)]).catch(\n      returnError\n    );\n  } catch (err) {\n    return Promise.resolve(err);\n  }\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["2060","2061","2062"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["2063"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["2064"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\nimport { getFilenameByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected getHeader(name: string) {\n    return this.response.headers.get(name);\n  }\n\n  protected getFileNameByResponse(extension?: string | null) {\n    const contentDisposition = this.getHeader('content-disposition');\n    let fileName = '' as string | undefined;\n\n    if (contentDisposition) {\n      const fileNameMatch = /filename=\"(.+)\"/.exec(contentDisposition);\n\n      if (fileNameMatch?.length === 2) fileName = fileNameMatch[1];\n    }\n    if (!fileName) {\n      fileName = getFilenameByUrl(this.response.url);\n    }\n\n    if (extension) {\n      return fileName && fileName.endsWith(extension)\n        ? fileName\n        : `${fileName}.${extension}`;\n    }\n    return fileName;\n  }\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File(\n          [result],\n          this.getFileNameByResponse(extension) || 'unknown',\n          {\n            type: mimeType || undefined,\n          }\n        );\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["2065","2066","2067"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport { ownValueOf } from 'types/helper.types';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["2068","2069"],"import { isURL } from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!isURL(url)) {\n      this.baseUrl = '';\n      try {\n        new URL(url); // maybe it's data url\n      } catch (err) {\n        return new Error('The url is not valid');\n      }\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["2070"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  if (urlTrimmed.startsWith('data:')) {\n    return urlTrimmed;\n  }\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["2071","2072"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["2073"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["2074"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["2075"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["2076","2077","2078"],"import { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from './../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const {\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authorityProviderURI,\n  } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["2079"],"import {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n  ICAIdentityCommonInstance,\n  TUserIdentityVersion,\n  TCAUserIdentityRawTypes,\n} from './central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from '../central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentitySilent } from '../central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { parseIdentity } from './central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers';\nimport { serializeIdentity } from './central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n  CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER,\n} from './central-authority-class-user-identity.const';\nimport { CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME } from '../central-authority-class-const/central-authority-class-const';\n\nexport class CentralAuthorityIdentity implements ICAIdentityCommonInstance {\n  protected _userIdentitySerialized?: Error | TCentralAuthorityUserIdentity;\n\n  protected _userIdentityParsed?: Error | ICAUserUniqueIdentifierDescription;\n\n  public isValid?: boolean;\n\n  constructor(protected _userIdentity: TCAUserIdentityRawTypes) {\n    if (_userIdentity instanceof CentralAuthorityIdentity) {\n      return _userIdentity;\n    }\n    if (!_userIdentity) {\n      return;\n    }\n\n    let identity = _userIdentity;\n\n    if (typeof _userIdentity === 'object') {\n      //check may be it is a crypto credentials object\n      const identityVal = ((_userIdentity as unknown) as any)[\n        CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME\n      ];\n\n      if (typeof identityVal === 'string') {\n        identity = identityVal;\n      }\n    }\n    if (validateUserIdentitySilent(identity)) {\n      this.parseUserIdentity(identity);\n    } else {\n      const userIdentityDescription = this.extendDescriptionWithVersion(\n        identity as ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n      );\n\n      this.serializeUserIdentityDescription(userIdentityDescription);\n    }\n  }\n\n  protected extendDescriptionWithVersion(\n    _userIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ): ICAUserUniqueIdentifierDescription {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = _userIdentityDescription;\n\n    if (!version) {\n      // extend the description with the\n      // current version\n      const result = {\n        ..._userIdentityDescription,\n        [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSION_CURRENT,\n      };\n\n      this._userIdentity = result;\n      return result as ICAUserUniqueIdentifierDescription;\n    }\n    return _userIdentityDescription as ICAUserUniqueIdentifierDescription;\n  }\n\n  public get identityDescription(): ICAUserUniqueIdentifierDescription | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentityParsed } = this;\n\n    if (!_userIdentityParsed) {\n      return new Error('Failed to parse the user identity');\n    }\n    return _userIdentityParsed;\n  }\n\n  public get identityDescritptionSerialized():\n    | TCentralAuthorityUserIdentity\n    | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentitySerialized } = this;\n\n    if (!_userIdentitySerialized) {\n      return new Error('Failed to serialize the user identity');\n    }\n    return _userIdentitySerialized;\n  }\n\n  /**\n   * uniquely identifies the user\n   */\n  public get id(): string | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { authorityProviderURI, userUniqueIdentifier } = this\n      .identityDescription as ICAUserUniqueIdentifierDescription;\n\n    return `${authorityProviderURI}${CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER}${userUniqueIdentifier}`;\n  }\n\n  public get version(): TUserIdentityVersion | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    return (((this.identityDescription as ICAUserUniqueIdentifierDescription)\n      .version ||\n      CA_USER_IDENTITY_VERSION_CURRENT) as unknown) as TUserIdentityVersion;\n  }\n\n  public toString(): TCentralAuthorityUserIdentity {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return '';\n    }\n    return this.identityDescritptionSerialized as string;\n  }\n\n  protected checkUserIdentityDescriptionIsValid = (): Error | void => {\n    const { _userIdentitySerialized, isValid, _userIdentityParsed } = this;\n    let err: Error | void;\n\n    if (!isValid) {\n      err = new Error('The identity is not valid');\n    }\n    if (!_userIdentityParsed) {\n      err = new Error('There is no user identity parsed');\n    }\n    if (_userIdentityParsed instanceof Error) {\n      err = _userIdentityParsed;\n    }\n    if (!_userIdentitySerialized) {\n      err = new Error('The identity description serialized is not defined');\n    }\n    if (_userIdentitySerialized instanceof Error) {\n      err = _userIdentitySerialized;\n    }\n    if (err instanceof Error) {\n      console.error(err);\n      return err;\n    }\n  };\n\n  protected setIdentityIsValid(): void {\n    if (this.isValid !== false) {\n      this.isValid = true;\n    }\n  }\n\n  protected parseUserIdentity(\n    userIdentity: TCentralAuthorityUserIdentity\n  ): void {\n    if (userIdentity) {\n      const parsedUserIdentity = parseIdentity(userIdentity);\n      if (parsedUserIdentity instanceof Error) {\n        console.error(parsedUserIdentity);\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = new Error(\n          'Failed to parse the user identity'\n        );\n      } else {\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = userIdentity;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identity serialized is not defined');\n\n      this._userIdentityParsed = err;\n      this._userIdentitySerialized = err;\n    }\n    this.isValid = false;\n  }\n\n  protected serializeUserIdentityDescription(\n    userIdentityDescription: ICAUserUniqueIdentifierDescription\n  ) {\n    if (userIdentityDescription) {\n      const serializedDescription = serializeIdentity(userIdentityDescription);\n\n      if (serializedDescription instanceof Error) {\n        this._userIdentityParsed = new Error(\n          'Failed to serialize the user identity description'\n        );\n        this._userIdentitySerialized = serializedDescription;\n      } else {\n        this._userIdentityParsed = userIdentityDescription;\n        this._userIdentitySerialized = serializedDescription;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identifier description is not defined');\n\n      this._userIdentitySerialized = err;\n      this._userIdentityParsed = err;\n    }\n    this.isValid = false;\n  }\n}\n\nexport default CentralAuthorityIdentity;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.ts",["2080"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["2081"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["2082","2083","2084","2085"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["2086","2087","2088","2089","2090"],"import { CAConnectionWithFirebaseUtilDatabase } from '../central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport {\n  getUserIdentityByCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK,\n} from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport {\n  ICAConnectionFirebase,\n  ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure,\n} from './central-authority-connection-firebase-utils.credentials-storage.types';\nimport { encodeForFirebaseKey } from 'utils/firebase-utils/firebase-utils';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsValidExportedCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n/**\n * This class is used for storing\n * and reading the user's credentials.\n * It also used for reading\n * credentials of another user from the\n * Firebase remote database.\n * @export\n * @class CAConnectionFirestoreUtilsCredentialsStrorage\n * @extends {CAConnectionWithFirebaseUtilDatabase}\n */\nexport class CAConnectionFirestoreUtilsCredentialsStrorage extends CAConnectionWithFirebaseUtilDatabase {\n  protected connectionToFirebase?: ICAConnectionFirebase;\n\n  protected get firebaseUserData(): firebase.User | null | Error {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { app } = this;\n\n    try {\n      return app!!.auth().currentUser;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected get firebaseUserId(): string | Error {\n    const { firebaseUserData: userData } = this;\n\n    if (userData instanceof Error) {\n      console.error(userData);\n      return new Error('Failed to read the user data from a firebase');\n    }\n    if (userData == null) {\n      return new Error('There is no user data');\n    }\n    try {\n      return userData.uid;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  constructor(connectionToFirebase: ICAConnectionFirebase) {\n    super();\n\n    this.setUpConnection(connectionToFirebase);\n  }\n\n  /**\n   * returns a string will used to store/read value of\n   * the user credentials\n   * @protected\n   * @param {string} userId\n   * @returns {string}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected getCredentialsKeyByUserId(userId: string): string {\n    return `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${encodeForFirebaseKey(\n      userId\n    )}`;\n  }\n\n  protected checkIsConnected(): boolean | Error {\n    const isConnectedToDatabase = super.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { app, connectionToFirebase } = this;\n\n    if (!connectionToFirebase) {\n      return new Error(\n        'There is no instance implements a connection to the Firebase application'\n      );\n    }\n    if (!connectionToFirebase.isConnected) {\n      return new Error(\n        'There is no active connection to the firebase appliction'\n      );\n    }\n    if (!app) {\n      return new Error('There is no app connection');\n    }\n    return true;\n  }\n\n  protected checkIsAuthorized(): boolean | Error {\n    const isConnectedToDatabase = this.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { firebaseUserId, connectionToFirebase } = this;\n\n    if (!connectionToFirebase || !connectionToFirebase.isUserSignedIn) {\n      return new Error(\n        'The user is not authorized in the Firebase application'\n      );\n    }\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('The user is not authorized');\n    }\n    return true;\n  }\n\n  protected setUpConnection(connectionToFirebase: ICAConnectionFirebase) {\n    this.connectionToFirebase = connectionToFirebase;\n\n    const app = connectionToFirebase.getApp();\n\n    if (!app) {\n      throw new Error(\n        'There is no insatnce which implements a connection to the Firebase app'\n      );\n    }\n    this.app = app;\n  }\n\n  /**\n   *\n   * check if a credentials set in the storage\n   * are in the valid format\n   * @protected\n   * @param {*} storedCredentialsValue\n   * @returns {storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected checkStoredCredentialsFormat(\n    storedCredentialsValue: any\n  ): storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n    if (storedCredentialsValue instanceof Error) {\n      console.error(storedCredentialsValue);\n      return false;\n    }\n    if (storedCredentialsValue && typeof storedCredentialsValue === 'object') {\n      const {\n        credentials,\n        [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseId,\n      } = storedCredentialsValue;\n\n      // an id set for the user by the Firebase\n      if (typeof firebaseId === 'string') {\n        if (checkIsValidExportedCryptoCredentialsToString(credentials)) {\n          return true;\n        }\n        console.error(\n          \"Credentials are't exists or invalid in the stored credentials\"\n        );\n      } else {\n        console.error(\n          'Firebase user id is not valid in the stored credentials'\n        );\n      }\n    }\n    return false;\n  }\n\n  protected async getCredentialsByValueStored(\n    storedCredentialsValue: any\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (storedCredentialsValue == null) {\n      return null;\n    }\n    if (storedCredentialsValue instanceof Error) {\n      return storedCredentialsValue;\n    }\n    if (!this.checkStoredCredentialsFormat(storedCredentialsValue)) {\n      return new Error('the value stored have an unknown format');\n    }\n\n    const { credentials: exportedCredentials } = storedCredentialsValue;\n    const importedCredentials = await importCryptoCredentialsFromAString(\n      exportedCredentials\n    );\n\n    if (importedCredentials instanceof Error) {\n      console.error(importedCredentials);\n      return new Error('Failed to import credentials value stored');\n    }\n    return importedCredentials;\n  }\n\n  /**\n   *\n   * filter a value stored for the user key\n   * to get a value of the credentials\n   * for the user\n   * @protected\n   * @param {{\n   *     [key: string]: any;\n   *   }} [valueStored]\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | null | Error>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected async filterCredentialsValues(valueStored?: {\n    [key: string]: any;\n  }): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (!valueStored) {\n      return null;\n    }\n    if (valueStored instanceof Error) {\n      return valueStored;\n    }\n\n    const keys = Object.keys(valueStored);\n\n    // if an empty object\n    if (keys.length === 0) {\n      return null;\n    }\n\n    const len = Math.min(\n      keys.length,\n      CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK\n    );\n    let idx = 0;\n    let keyValueStored;\n    let valueValueStored;\n    let credentialsImported;\n\n    // for each property of the value stored\n    // check wherether it is a valid\n    // crypto credentials\n    for (; idx < len; idx++) {\n      keyValueStored = keys[idx];\n      valueValueStored = valueStored[keyValueStored];\n      credentialsImported = await this.getCredentialsByValueStored(\n        valueValueStored\n      );\n\n      if (!(credentialsImported instanceof Error)) {\n        return credentialsImported;\n      }\n    }\n    return null;\n  }\n\n  // check if there is a credentials for the current user is exists\n  // and return it if exists\n  public async getCredentialsForTheCurrentUser(): Promise<\n    Error | null | TCentralAuthorityUserCryptoCredentials\n  > {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no connection to the database server');\n    }\n    try {\n      // read a value storerd as user's\n      // credentials in the database\n      const snapshot = await database\n        .ref(CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX)\n        .orderByChild(\n          CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY\n        )\n        .equalTo(firebaseUserId)\n        .once('value');\n\n      if (snapshot.exists()) {\n        const valueStored = snapshot.val();\n        return this.filterCredentialsValues(valueStored);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the user data from the database');\n    }\n    return null;\n  }\n\n  // store the credentials value\n  // for the current user\n  public async setUserCredentials(\n    credentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    // check if a credentials value is\n    // already exists for the user\n    const credentialsForTheCurrentUser = await this.getCredentialsForTheCurrentUser();\n\n    if (\n      credentialsForTheCurrentUser != null &&\n      !(credentialsForTheCurrentUser instanceof Error)\n    ) {\n      // if a credentials are already stored for the user\n      // return it\n      return credentialsForTheCurrentUser;\n    }\n\n    const userId = getUserIdentityByCryptoCredentials(credentials);\n\n    if (userId instanceof Error) {\n      console.error(userId);\n      return new Error(\"Failed to get a user's identity from the credentials\");\n    }\n\n    const exportedCryptoCredentials = await exportCryptoCredentialsToString(\n      credentials\n    );\n\n    if (exportedCryptoCredentials instanceof Error) {\n      console.error(exportedCryptoCredentials);\n      return new Error('Failed to export the crypto credentials value');\n    }\n\n    // check if the user id is not exists in the database\n    // user id is a user identity\n    // TODO - it's necessary to implement on the Firebase server to check whether the user can update credentials for the userid\n    const credentialsForTheUserId = await this.getUserCredentials(userId);\n\n    if (\n      credentialsForTheUserId != null &&\n      !(credentialsForTheUserId instanceof Error)\n    ) {\n      return new Error(\n        'A crypto credentials is already exists for the user id'\n      );\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storeResult = await this.setValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue, {\n      credentials: exportedCryptoCredentials,\n      [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseUserId,\n    });\n\n    if (storeResult instanceof Error) {\n      console.error(storeResult);\n      return new Error('Failed to store the credentials in the database');\n    }\n    return credentials;\n  }\n\n  /**\n   *\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login(email)\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    if (!this.checkIsConnected()) {\n      return new Error('There is no active connection to the Firebase');\n    }\n    if (!validateUserIdentity(userId)) {\n      return new Error('The user identity is not valid');\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storedCredentialsValue = await this.getValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue);\n\n    return this.getCredentialsByValueStored(storedCredentialsValue);\n  }\n\n  // disconnect from the database\n  public async disconnect(): Promise<Error | boolean> {\n    const isConnected = this.checkIsConnected();\n\n    if (!isConnected) {\n      return true;\n    }\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no active database connection');\n    }\n    try {\n      await database.goOffline();\n    } catch (err) {\n      console.error();\n      return new Error('Failed to disconnect from the databases');\n    }\n    return true;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["2091"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["2092","2093","2094","2095","2096","2097","2098"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["2099"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport { isURL } from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return isURL(configuration.databaseURL);\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["2100","2101"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["2102"],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["2103","2104"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport { isURL } from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["2105","2106","2107","2108"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["2109"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  dataSignExportKeyPairAsString as exportKeyPairDataSignAsString,\n  dataSignExportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair),\n    exportKeyPairDataSignAsString(signDataKeyPair),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["2110","2111"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { calcCryptoKeyPairHash } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections/central-authority-connections.types';\nimport { normalizeUrl } from '../../../../utils/common-utils/common-utils-url';\nimport { CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS } from './central-authority-utils-crypto-credentials.const';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  withoutIdentityVersion: boolean = false\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n  if (withoutIdentityVersion) {\n    const userCAIdentity = new CentralAuthorityIdentity(userIdentity);\n    const { id } = userCAIdentity;\n\n    if (id instanceof Error) {\n      return new Error('The identity is not valid');\n    }\n    cryptoCredentialsExported[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME] = id;\n  }\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\n// allow to absent for a private keys in a pairs\nexport const exportCryptoCredentialsToStringWithoutTheCAIdentityVersion = (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> =>\n  exportCryptoCredentialsToString(userCryptoCredentials, true);\n\nexport const compareAuthProvidersIdentities = (\n  ...authProvidersIds: TCAAuthProviderIdentity[]\n): boolean => {\n  const { length: len } = authProvidersIds;\n\n  if (len < 2) {\n    return true;\n  }\n\n  const firstAuthProviderId = normalizeUrl(\n    authProvidersIds[0],\n    CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n  );\n  let idx = 0;\n\n  while (++idx < len) {\n    if (\n      firstAuthProviderId !==\n      normalizeUrl(\n        authProvidersIds[idx],\n        CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const cryptoCredentialsBase = credentials[0];\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsBase)) {\n    return new Error('The crypto credentials on index 0 is not valid');\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  const userIdentityBase = new CentralAuthorityIdentity(\n    cryptoCredentialsBase[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n  );\n\n  if (!userIdentityBase.isValid) {\n    return new Error(\n      'The user identity is not valid in the crypto credentials base'\n    );\n  }\n\n  const cryptoCredentialsKeysBase =\n    cryptoCredentialsBase[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n  const cryptoCredentialsEncryptKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.encryptionKeyPair\n  );\n\n  if (cryptoCredentialsEncryptKeyPairHashBase instanceof Error) {\n    return new Error('Failed to calculate hash of the encrypt key pairs base');\n  }\n\n  const cryptoCredentialsSignKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.signDataKeyPair\n  );\n\n  if (cryptoCredentialsSignKeyPairHashBase instanceof Error) {\n    return new Error(\n      'Failed to calculate hash of the data sign key pairs base'\n    );\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let nextCryptoCredentials = null;\n  let keyPairs = null;\n  let userIdentity = null;\n  let encryptionKeyPairsHash = null;\n  let signPairsHash = null;\n\n  for (; idx < length; idx += 1) {\n    nextCryptoCredentials = credentials[idx];\n\n    if (!checkIsValidCryptoCredentials(nextCryptoCredentials)) {\n      return new Error(`The crypto credentials on index ${idx} is not valid`);\n    }\n\n    userIdentity = new CentralAuthorityIdentity(\n      nextCryptoCredentials[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n    );\n\n    if (!userIdentity.isValid) {\n      return new Error(\n        `The user identity is not valid in the crypto credentials on index ${idx}`\n      );\n    }\n    if (userIdentity.id !== userIdentityBase.id) {\n      return new Error(`The user identity are different on index ${idx}`);\n    }\n\n    keyPairs = nextCryptoCredentials[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n    encryptionKeyPairsHash = await calcCryptoKeyPairHash(\n      keyPairs.encryptionKeyPair\n    );\n\n    if (cryptoCredentialsEncryptKeyPairHashBase !== encryptionKeyPairsHash) {\n      return new Error(\n        `The encryption key pairs are different on index ${idx}`\n      );\n    }\n\n    signPairsHash = await calcCryptoKeyPairHash(keyPairs.signDataKeyPair);\n\n    if (cryptoCredentialsSignKeyPairHashBase !== signPairsHash) {\n      return new Error(`The data sign key pairs are different on index ${idx}`);\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(cryptoKeysExported);\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(cryptoCredentialsExported);\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity | string,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  if (caIdentity instanceof CentralAuthorityIdentity) {\n    if (caIdentity.isValid) {\n      return getExportedAsStringCryptoCredentials(\n        String(caIdentity), // conver it to identity\n        cryptoCredentialsKeyPairs\n      );\n    }\n    return new Error('The CA identity is wrong');\n  }\n  return new Error('The CA identity must be an instance of caIdentity');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n\nexport const getUserIdentityVersion = (\n  userIdentity: TCentralAuthorityUserIdentity | CentralAuthorityIdentity\n): TUserIdentityVersion | Error => {\n  if (\n    !(userIdentity instanceof CentralAuthorityIdentity) &&\n    typeof userIdentity !== 'string'\n  ) {\n    return new Error(\n      'The userIdentity must be a string or an instance of the CentralAuthorityIdentity class'\n    );\n  }\n\n  const userIdentityObj = new CentralAuthorityIdentity(userIdentity);\n\n  if (!userIdentityObj.isValid) {\n    return new Error('The user identity is not valid');\n  }\n  return userIdentityObj.version;\n};\n\nexport const getVersionOfCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): TUserIdentityVersion | Error => {\n  const userIdentity = getUserIdentityByCryptoCredentials(cryptoCredentials);\n\n  if (userIdentity instanceof Error) {\n    return userIdentity;\n  }\n  return getUserIdentityVersion(userIdentity);\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["2112","2113","2114","2115","2116","2117"],"import {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserCryptoCredentialsExported,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsCryptoKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair by a function provided\n * and user's identity\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsWithFunc = (\n  cryptoCredentials: any,\n  credentialsValidationFunction: (c: any) => boolean\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!credentialsValidationFunction(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (\n    !checkIsValidCryptoCredentialsWithFunc(\n      cryptoCredentials,\n      checkIsValidExportedCryptoCredentialsToString\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["2118"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts",[],"/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.ts",["2119","2120","2121","2122","2123"],"/home/paul/Projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts",[],"/home/paul/Projects/protocol/src/classes/connection-bridge/index.ts",[],"/home/paul/Projects/protocol/src/classes/index.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/index.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["2124","2125","2126","2127","2128","2129"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["2130","2131"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/Projects/protocol/src/classes/safe-storage-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts",["2132","2133","2134"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SecretStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["2135"],"import { ISecretStoreCredentialsCryptoKey } from './../../secret-storage-class.types';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkIsStorageProviderInstance = (\n  storageProviderInstance: any\n): Error | boolean => {\n  if (!storageProviderInstance || typeof storageProviderInstance !== 'object') {\n    return new Error('Storage provider must be an object');\n  }\n\n  const { connect, get, set, disconnect } = storageProviderInstance;\n\n  if (\n    typeof connect !== 'function' ||\n    typeof get !== 'function' ||\n    typeof set !== 'function' ||\n    typeof disconnect !== 'function'\n  ) {\n    return new Error(\n      'The instance has a wrong implemntation of a StorageProvider interface'\n    );\n  }\n  return true;\n};\n\nexport const validateCryptoKeyCredentials = (\n  credentials?: ISecretStoreCredentialsCryptoKey\n): void | Error => {\n  if (!credentials) {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must not be empty'\n    );\n  }\n  if (typeof credentials !== 'object') {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must be an object'\n    );\n  }\n\n  const { key } = credentials;\n\n  if (!key) {\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be provided to authorize'\n    );\n  }\n  if (key instanceof CryptoKey) {\n    return;\n  }\n  return new Error(\n    'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n  );\n};\n","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts",["2136","2137","2138"],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/index.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["2139","2140"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../storage-providers.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const dbNameRes =\n      dbName || SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n    const levelStorage = levelup(leveljs(dbNameRes));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelup(leveljs(dbNameRes));\n  }\n}\n","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["2141"],"import Multiaddr from 'multiaddr';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\nimport { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES } from './swarm-connection-class-subclass-ipfs.signal-star.conf';\n\nexport enum SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS {\n  FLOODSUB = 'floodsub',\n  GOSSIPPSUB = 'gossipsub',\n}\n\n//https://github.com/ipfs/js-ipfs/blob/master/doc/config.md#api\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT = {\n  Addresses: {\n    // if a dommain used then '/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'\n    Swarm: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES,\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n    ],\n    API: '',\n    Gateway: '',\n    Delegates: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10,\n    },\n    webRTCStar: {\n      Enabled: true,\n    },\n  },\n  Bootstrap: [\n    ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  ],\n  Pubsub: {\n    Enabled: true,\n    Router: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS.GOSSIPPSUB,\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500,\n    },\n  },\n};\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["2142","2143"],"import { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT } from './swarm-connection-class-subclass-ipfs.browser.conf';\nimport { getLibPeerToPeer } from './swarm-connection-class-subclass-ipfs.libp2p.conf';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL =\n  'https://cdn.jsdelivr.net/npm/ipfs/dist/index.js';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT = {\n  init: {\n    emptyRepo: true, // TODO - set to false\n    //privateKey TODO - create PeerId instance by the user's public and private keys\n  },\n  start: true,\n  pass: '', // TODO - use the password for it,\n  silent: false, // TODO - set true on production\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  preload: {\n    enabled: true,\n    addresses: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  config: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT,\n  // libp2p: getLibPeerToPeer,\n};\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT = 2000;\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS = 3;\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["2144","2145"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as WebSocketStar from 'libp2p-websocket-star';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as SECIO from 'libp2p-secio';\nimport * as WStar from 'libp2p-webrtc-star';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebSocketStar transport and give it our PeerId, straight from the ipfs node\n  const wstar = new WStar({\n    id: peerInfo.id,\n  });\n  const wsstar = new WebSocketStar({\n    id: peerInfo.id,\n  });\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  // Websocket connections failed cause CORS policy\n  // const delegatePeerRouterWS = new DelegatedPeerRouter(\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n  // const delegateContentRouterWS = new DelegatedContentRouter(\n  //   peerInfo.id,\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n\n  console.warn('IPFS delegate node config HTTP');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP);\n  // console.warn('IPFS delegate node config HTTP-WS');\n  // console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS);\n\n  // Build and return our libp2p node\n  return new Libp2p({\n    peerInfo,\n    peerBook,\n    /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n    switch: {\n      denyTTL: 2 * 60 * 1e3, // 2 minute base\n      denyAttempts: 5, // back off 5 times\n      maxParallelDials: 100,\n      maxColdCalls: 25,\n      dialTimeout: 20e3,\n    },\n    // Lets limit the connection managers peers and have it check peer health less frequently\n    connectionManager: {\n      minPeers: 25,\n      maxPeers: 100,\n      pollInterval: 5000,\n    },\n    modules: {\n      transport: [wstar, wsstar],\n      streamMuxer: [MPLEX, SPDY],\n      connEncryption: [SECIO],\n      peerDiscovery: [Bootstrap, wstar.discovery, wsstar.discovery],\n      dht: KadDHT,\n      // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n      pubsub: PubSubGossip,\n      contentRouting: [\n        delegateContentRouter,\n        // TODO - CORS failed for websocket // delegateContentRouterWS,\n      ],\n      peerRouting: [\n        delegatePeerRouter,\n        // TODO - CORS failed for websocket // delegatePeerRouterWS,\n      ],\n    },\n    config: {\n      peerDiscovery: {\n        // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n        autoDial: true,\n        mdns: {\n          interval: 10000,\n          enabled: true,\n        },\n        bootstrap: {\n          interval: 30e3,\n          enabled: true,\n          list: bootstrapList,\n        },\n        webrtcStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n        webSocketStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n      },\n      // Turn on relay with hop active so we can connect to more peers\n      // implements the circuit-relay mechanism that allows nodes that\n      // don't speak the same protocol to communicate using a third relay node.\n      // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n      // can be forund on here\n      // https://github.com/libp2p/specs/tree/master/relay\n      /**\n       * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n       *\n       * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n       * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n       */\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true,\n        },\n      },\n      /**\n       * Create a new KadDHT.\n       *\n       * @param {Switch} sw libp2p-switch instance\n       * @param {object} options DHT options\n       * @param {number} options.kBucketSize k-bucket size (default 20)\n       * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n       * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n       * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n       * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n       * @param {randomWalkOptions} options.randomWalk randomWalk options\n       */\n      /**\n       * Random walk options\n       *\n       * @typedef {Object} randomWalkOptions\n       * @property {boolean} enabled discovery enabled (default: true)\n       * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n       * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n       * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n       * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n       */\n      dht: {\n        enabled: true,\n        kBucketSize: 20,\n        concurrency: 5,\n        randomWalk: {\n          queriesPerPeriod: 2,\n          enabled: true,\n          interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n          timeout: 2e3, // End the query quickly since we're running so frequently\n        },\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true,\n        signMessages: true,\n        strictSigning: true,\n      },\n    },\n  });\n};\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["2146","2147","2148"],"import {\n  ISwarmConnectionSubclass,\n  ESwarmConnectionSubclassStatus,\n  IIPFSSpecificOptions,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS,\n} from './swarm-connection-class-subclass-ipfs.const';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport * as Ipfs from 'types/ipfs.types';\n\nexport class SwarmConnectionSubclassIPFS\n  extends getStatusClass<typeof ESwarmConnectionSubclassStatus>({\n    errorStatus: ESwarmConnectionSubclassStatus.ERROR,\n    instanceName: 'SwarmConnectionSubclassIPFS',\n  })\n  implements ISwarmConnectionSubclass {\n  protected IPFS?: any;\n\n  protected options?: IIPFSSpecificOptions;\n\n  protected connection?: Ipfs.IPFS;\n\n  public isClosed: boolean = false;\n\n  protected reconnectionAttempt: number = 0;\n\n  public get isConnected(): boolean {\n    const { isClosed, connection } = this;\n\n    return !isClosed && !!connection && !!connection.isOnline();\n  }\n\n  public getNativeConnection(): Ipfs.IPFS | undefined {\n    return this.connection;\n  }\n\n  public async close(): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:close');\n    if (isClosed) {\n      return true;\n    }\n    this.setConnectionClosed();\n    await this.stopCurrentConnection();\n    return true;\n  }\n\n  public async connect(\n    options: IIPFSSpecificOptions\n  ): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The connection was closed previousely');\n    }\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      console.error(setOptionsResult);\n      return this.setErrorStatus('Failed to set the options');\n    }\n\n    const scriptLoadingResult = await this.preloadIpfsModule();\n\n    console.warn('ipfs:connect');\n    if (scriptLoadingResult instanceof Error) {\n      console.error(scriptLoadingResult);\n      return this.setErrorStatus('Failed to preload the IPFS library');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect\n      const connectionResult = await this.reconnect();\n\n      if (connectionResult instanceof Error) {\n        console.error(connectionResult);\n        return this.setErrorStatus('Failed to connect the first time');\n      }\n    }\n    return true;\n  }\n\n  protected setConnectionClosed() {\n    console.warn('Ipfs connection is closed');\n    this.isClosed = true;\n    this.setStatus(ESwarmConnectionSubclassStatus.CLOSE);\n  }\n\n  protected setOptions(options?: IIPFSSpecificOptions): Error | boolean {\n    if (!options || typeof options.password !== 'string') {\n      return new Error(\n        'An options and a password must be specified to encrypt the provate data'\n      );\n    }\n    this.options = options;\n    return true;\n  }\n\n  protected setIpfsConstructor(IPFS: any) {\n    this.IPFS = IPFS;\n  }\n\n  protected setIpfsConnection(ipfsNode: Ipfs.IPFS) {\n    this.connection = ipfsNode;\n    // unset the listeners for the node,\n    // cause it may be already set\n    this.unsetListeners(ipfsNode);\n    // set listeners for an events\n    // emitted by the IPFS node\n    this.setListeners(ipfsNode);\n  }\n\n  protected unsetCurrentConnection(ipfsNode?: Ipfs.IPFS) {\n    const { connection } = this;\n\n    if (ipfsNode) {\n      if (ipfsNode === connection) {\n        this.connection = undefined;\n      }\n      if (ipfsNode) {\n        this.unsetListeners(ipfsNode);\n      }\n    }\n  }\n\n  protected async preloadIpfsModule(): Promise<Error | boolean> {\n    let ipfsModule: unknown | Error;\n\n    try {\n      ipfsModule = await import('ipfs');\n    } catch (err) {\n      ipfsModule = err as Error;\n    }\n\n    if (ipfsModule instanceof Error) {\n      console.error(\n        `Failed to load the IPFS main script from the source ${SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL}`\n      );\n      return ipfsModule;\n    }\n    if (!ipfsModule || typeof (ipfsModule as any).create !== 'function') {\n      return new Error('Failed to load an instance of IPFS');\n    }\n    this.setIpfsConstructor(ipfsModule);\n    return true;\n  }\n\n  protected handleStarted = () => {\n    console.warn('IPFS connection to the swarm was started');\n    this.setStatus(ESwarmConnectionSubclassStatus.STARTED);\n  };\n\n  protected handleError = async (error?: Error) => {\n    if (error) {\n      console.error(\n        'An error has occured with the IPFS swarm connection subclass'\n      );\n      console.error(error);\n    }\n  };\n\n  protected handleInitialized = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    this.setStatus(ESwarmConnectionSubclassStatus.INITIALIZED);\n  };\n\n  protected handleStop = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.setStatus(ESwarmConnectionSubclassStatus.STOP);\n      this.reconnect();\n    }\n  };\n\n  protected setListeners(\n    connection: Ipfs.IPFS,\n    isSetListeners: boolean = true\n  ) {\n    // const methodName = isSetListeners ? 'on' : 'off';\n    // connection[methodName]('start', this.handleStarted);\n    // connection[methodName]('init', this.handleInitialized);\n    // connection[methodName]('error', this.handleError);\n    // connection[methodName]('stop', this.handleStop);\n  }\n\n  protected unsetListeners = (connection: Ipfs.IPFS) => {\n    this.setListeners(connection, false);\n  };\n\n  protected async createConnection(): Promise<Error | boolean> {\n    console.warn('create a new IPFS connection to the swarm');\n    const { IPFS, options } = this;\n\n    if (IPFS) {\n      const connection: Ipfs.IPFS = await IPFS.create({\n        ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n        pass: options ? options.password : null, // password from options\n      });\n\n      // this is working connection\n      // const connection: Ipfs.IPFS = await IPFS.create({\n      //   \"preload\":\n      //   {\"enabled\":false},\n      //   \"config\":{\"Addresses\":{\"Swarm\":[\"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"]}},\n      //   \"repo\":\"orbit-chat-ipfs-dfffd\",\n      //   \"EXPERIMENTAL\": {\n      //     \"pubsub\":true,\n      //   }}\n      // );\n\n      if (connection instanceof Error) {\n        console.error('Failed to create a new IPFS node');\n        return connection;\n      }\n      this.setIpfsConnection(connection);\n      console.warn('IPFS node config');\n      console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT);\n      return true;\n    }\n    return new Error('Ipfs was not loaded as a dynamic module previousely');\n  }\n\n  protected async startConnection(): Promise<Error | boolean> {\n    const { connection, isClosed } = this;\n\n    if (isClosed) {\n      return new Error('Unable to start connection closed previousely');\n    }\n    if (!connection) {\n      return new Error(\n        'There is no connection to the IPFS, it must be created before start'\n      );\n    }\n    try {\n      await Promise.race([\n        timeout(SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT),\n        connection.ready,\n      ]);\n    } catch (err) {\n      console.error(err);\n\n      // if failed to start or a timeout has reached\n      // stop the connection\n      const stopConnectionResult = await this.stopConnection(connection);\n\n      if (stopConnectionResult instanceof Error) {\n        this.setErrorStatus(\n          'Failed to stop the connection during creating a new one'\n        );\n        return stopConnectionResult;\n      }\n      return err;\n    }\n\n    const nodeId = await connection.id();\n\n    if (!nodeId) {\n      return new Error('Failed to start node id connection');\n    }\n    console.warn(`Ipfs node was started as: /n ${nodeId}`);\n    return true;\n  }\n\n  protected async stopConnection(connection: Ipfs.IPFS): Promise<Error | void> {\n    console.warn('Stop the connection');\n    try {\n      connection.stop();\n    } catch (err) {\n      console.error(new Error('Failed to stop the ipfs node'));\n      return err;\n    }\n  }\n\n  async stopCurrentConnection(): Promise<Error | void> {\n    const { connection } = this;\n\n    if (connection) {\n      // if the current connection is exists, then stop it\n      // unset the connection and it's listeners\n      this.unsetCurrentConnection(connection);\n      const connectionStopResult = await this.stopConnection(connection);\n\n      if (connectionStopResult instanceof Error) {\n        console.error(connectionStopResult);\n        return connectionStopResult;\n      }\n    }\n  }\n\n  protected incReconnectionAttempt() {\n    this.reconnectionAttempt += 1;\n    console.warn('ipfs:incReconnectionAttempt');\n  }\n\n  protected resetReconnectionAttempt() {\n    this.reconnectionAttempt = 0;\n    console.warn('ipfs:resetReconnectionAttempt');\n  }\n\n  protected async reconnect(): Promise<Error | boolean> {\n    console.warn('ipfs:reconnect');\n    this.incReconnectionAttempt();\n    if (\n      this.reconnectionAttempt >\n      SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS\n    ) {\n      await this.close();\n      this.setStatus(ESwarmConnectionSubclassStatus.CONNECTION_FAILED);\n      return new Error('Failed to connect to the SWARM throught the IPFS');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect once again\n      console.error(startResult);\n      return this.reconnect();\n    }\n    this.resetReconnectionAttempt();\n    return true;\n  }\n\n  protected async start(): Promise<Error | boolean> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:start');\n    if (isClosed) {\n      return new Error(\n        'Unable to connect to the swarm if the connection was closed before'\n      );\n    }\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTING);\n\n    // stop the current connection if exists\n    const stopConnectionResult = await this.stopCurrentConnection();\n\n    if (stopConnectionResult instanceof Error) {\n      this.setErrorStatus('Failed to stop the previous connection');\n    }\n\n    // create a new connection to the ipfs\n    const createConnectionResult = await this.createConnection();\n\n    if (createConnectionResult instanceof Error) {\n      this.setErrorStatus(createConnectionResult);\n      return new Error('Failed to create a new connection');\n    }\n\n    const startConnectionResult = await this.startConnection();\n\n    if (startConnectionResult instanceof Error) {\n      this.setErrorStatus(startConnectionResult);\n      return new Error('Failed to start the connection');\n    }\n    // if started succesfully\n    // then set the status that the node\n    // was started succesfully\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTED);\n    return true;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/index.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts",["2149"],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts",["2150"],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",["2151","2152","2153"],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts",["2154"],"import {\n  ISwarmMessageRaw,\n  TSwarmMessageSignatureAlgorithm,\n} from '../../swarm-message-constructor.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from './swarm-message-utils-signature.types';\nimport { SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER } from './swarm-message-utils-signature.const';\n\nexport const swarmMessageUtilSignatureGetStringForSignByMessageRaw: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw = (\n  msg: Omit<ISwarmMessageRaw, 'sig'>\n) =>\n  `${msg.alg}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.uid}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.bdy}`;\n","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts",["2155","2156","2157","2158","2159","2160"],"import assert from 'assert';\nimport { SwarmStore } from '../swarm-store-class/swarm-store-class';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from '../swarm-store-class/swarm-store-class.const';\nimport {\n  ISwarmMessageStoreAccessControlOptions,\n  ISwarmMessageDatabaseConstructors,\n} from './swarm-message-store.types';\nimport {\n  ISwarmMessageConstructor,\n  ISwarmMessageInstance,\n} from '../swarm-message/swarm-message-constructor.types';\nimport {\n  ESwarmMessageStoreEventNames,\n  SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT,\n} from './swarm-message-store.const';\nimport { extend } from '../../utils/common-utils/common-utils-objects';\nimport { ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer } from '../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreDatabaseIteratorMethodAnswer,\n  TSwarmStoreDatabaseMethodAnswer,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  TSwarmStoreDatabaseMethodArgument,\n  TSwarmStoreDatabaseIteratorMethodArgument,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  ESwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n} from '../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreValueTypes,\n  TSwarmStoreDatabaseMethod,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  TSwarmMessageStoreConnectReturnType,\n  ISwarmMessageStoreOptions,\n} from './swarm-message-store.types';\nimport {\n  ISwarmMessageStoreEvents,\n  ISwarmMessageStore,\n} from './swarm-message-store.types';\nimport { swarmMessageStoreUtilsConnectorOptionsProvider } from './swarm-message-store-utils/swarm-message-store-utils-connector-options-provider';\nimport { getMessageConstructorForDatabase } from './swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common';\nimport {\n  TSwarmMessageStoreMessageId,\n  ISwarmMessageStoreDeleteMessageArg,\n} from './swarm-message-store.types';\nimport {\n  TSwarmMessageSeriazlized,\n  ISwarmMessage,\n} from '../swarm-message/swarm-message-constructor.types';\nimport { isDefined } from '../../utils/common-utils/common-utils-main';\n\nexport class SwarmMessageStore<P extends ESwarmStoreConnector>\n  extends SwarmStore<P, ISwarmMessageStoreEvents>\n  implements ISwarmMessageStore<P> {\n  protected connectorType: P | undefined;\n\n  protected accessControl: ISwarmMessageStoreAccessControlOptions | undefined;\n\n  protected messageConstructors: ISwarmMessageDatabaseConstructors | undefined;\n\n  protected get dbMethodAddMessage(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.add as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  protected get dbMethodRemoveMessage(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.remove as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  protected get dbMethodIterator(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.iterator as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  public async connect(\n    options: ISwarmMessageStoreOptions<P>\n  ): TSwarmMessageStoreConnectReturnType<P> {\n    const optionsSwarmStore = await swarmMessageStoreUtilsConnectorOptionsProvider(\n      options\n    );\n\n    this.setOptions(optionsSwarmStore);\n\n    const connectionResult = await super.connect(optionsSwarmStore);\n\n    if (connectionResult instanceof Error) {\n      throw connectionResult;\n    }\n    this.setListeners();\n  }\n\n  public async addMessage(\n    dbName: string,\n    message: ISwarmMessageInstance | string\n  ): Promise<TSwarmMessageStoreMessageId> {\n    assert(dbName, 'Database name must be provided');\n    this.validateMessageFormat(message);\n\n    const response = (await this.request<\n      TSwarmStoreValueTypes<P>,\n      TSwarmMessageStoreMessageId\n    >(dbName, this.dbMethodAddMessage, this.serializeMessage(message))) as\n      | TSwarmStoreDatabaseMethodAnswer<P, string>\n      | Error;\n\n    if (response instanceof Error) {\n      throw response;\n    }\n    return this.deserializeAddMessageResponse(response);\n  }\n\n  public async deleteMessage(\n    dbName: string,\n    messageAddress: ISwarmMessageStoreDeleteMessageArg<P>\n  ): Promise<void> {\n    assert(dbName, 'Database name must be provided');\n    assert(\n      messageAddress && typeof messageAddress === 'string',\n      'Message address must be a non empty string'\n    );\n\n    const result = await this.request(\n      dbName,\n      this.dbMethodRemoveMessage,\n      this.getArgRemoveMessage(messageAddress)\n    );\n\n    if (result instanceof Error) {\n      throw result;\n    }\n  }\n\n  public async collect(\n    dbName: string,\n    options: TSwarmStoreDatabaseIteratorMethodArgument<P>\n  ) {\n    assert(typeof dbName === 'string', '');\n\n    const iterator = await this.request(\n      dbName,\n      this.dbMethodIterator,\n      this.getArgIterateDb(dbName, options)\n    );\n\n    if (iterator instanceof Error) {\n      throw iterator;\n    }\n    return this.collectMessages(\n      dbName,\n      iterator as TSwarmStoreDatabaseIteratorMethodAnswer<P, any>\n    );\n  }\n\n  protected validateOpts(options: ISwarmMessageStoreOptions<P>): void {\n    super.validateOptions(options);\n\n    const { messageConstructors } = options;\n\n    assert(messageConstructors, 'messages constructors must be specified');\n    assert(\n      typeof messageConstructors === 'object',\n      'messages constructors must an object'\n    );\n\n    const validateMessageConstructor = (mc: any) => {\n      assert(\n        typeof mc === 'object',\n        'the message constructor must be specified'\n      );\n      assert(\n        typeof mc.construct === 'function',\n        'the message constructor must have the \"construct\" method'\n      );\n    };\n\n    assert(\n      typeof messageConstructors.default === 'object',\n      'the default message constructor must be cpecified'\n    );\n    validateMessageConstructor(messageConstructors.default);\n    Object.values(messageConstructors).forEach(validateMessageConstructor);\n  }\n\n  protected setOptions(options: ISwarmMessageStoreOptions<P>): void {\n    this.validateOpts(options);\n    this.connectorType = options.provider;\n    this.accessControl = options.accessControl;\n    this.messageConstructors = options.messageConstructors;\n  }\n\n  /**\n   * return the message constructor specified\n   * for the database\n   *\n   * @protected\n   * @param {string} dbName\n   * @returns {(ISwarmMessageConstructor | undefined)}\n   * @memberof SwarmMessageStore\n   */\n  protected getMessageConstructor(\n    dbName: string\n  ): ISwarmMessageConstructor | undefined {\n    if (!dbName || !this.messageConstructors) {\n      return;\n    }\n    return getMessageConstructorForDatabase(dbName, this.messageConstructors);\n  }\n\n  /**\n   * emits error occurred on a message creation\n   *\n   * @protected\n   * @memberof SwarmMessageStore\n   */\n  protected emitMessageConstructionFails = (\n    dbName: string,\n    message: string,\n    messageAddr: string,\n    error: Error\n  ) => {\n    this.emit(\n      ESwarmMessageStoreEventNames.NEW_MESSAGE_ERROR,\n      dbName,\n      message,\n      error,\n      messageAddr\n    );\n  };\n\n  /**\n   * new message incoming\n   *\n   * @protected\n   * @memberof SwarmMessageStore\n   */\n  protected emitMessageNew = (\n    dbName: string,\n    message: ISwarmMessageInstance,\n    messageAddr: string\n  ) => {\n    console.log('SwarmMessageStore::emitMessageNew', {\n      dbName,\n      message,\n      messageAddr,\n    });\n    this.emit(\n      ESwarmMessageStoreEventNames.NEW_MESSAGE,\n      dbName,\n      message,\n      messageAddr\n    );\n  };\n\n  /**\n   * handle a new message stored in the local database\n   *\n   * @memberof SwarmMessageStore\n   */\n  protected handleNewMessage = async ([dbName, message, messageAddress]: [\n    string,\n    P extends ESwarmStoreConnector.OrbitDB\n      ? LogEntry<TSwarmMessageSeriazlized>\n      : any,\n    string\n  ]): Promise<void> => {\n    console.log('SwarmMessageStore::handleNewMessage', {\n      dbName,\n      message,\n      messageAddress,\n    });\n    const messageConstructor = this.getMessageConstructor(dbName);\n\n    if (\n      typeof message !== 'object' ||\n      typeof message.payload !== 'object' ||\n      typeof message.payload.value !== 'string'\n    ) {\n      return this.emitMessageConstructionFails(\n        dbName,\n        String(message),\n        messageAddress,\n        new Error('There is unknown message format')\n      );\n    }\n\n    const { hash: messageHash, payload } = message;\n    const { value: messageString } = payload;\n\n    if (!messageConstructor) {\n      return this.emitMessageConstructionFails(\n        dbName,\n        messageString,\n        messageHash,\n        new Error('There is no message constructor specified for the message')\n      );\n    }\n\n    try {\n      const swarmMessage = await messageConstructor.construct(messageString);\n\n      if (swarmMessage instanceof Error) {\n        return this.emitMessageConstructionFails(\n          dbName,\n          messageString,\n          messageHash,\n          swarmMessage\n        );\n      }\n      return this.emitMessageNew(dbName, swarmMessage, message.hash);\n    } catch (err) {\n      return this.emitMessageConstructionFails(\n        dbName,\n        messageString,\n        messageHash,\n        err\n      );\n    }\n  };\n\n  protected setListeners() {\n    this.addListener(ESwarmStoreEventNames.NEW_ENTRY, this.handleNewMessage);\n  }\n\n  /**\n   * validate format of a message to send\n   *\n   * @protected\n   * @param {(ISwarmMessageInstance | string)} message\n   * @memberof SwarmMessageStore\n   */\n  protected validateMessageFormat(message: ISwarmMessageInstance | string) {\n    assert(message, 'Message must be provided');\n    assert(\n      typeof message === 'string' || typeof message === 'object',\n      'Message must be a string or an object'\n    );\n    assert(\n      typeof (message as ISwarmMessageInstance).bdy === 'object' &&\n        typeof (message as ISwarmMessageInstance).uid === 'string' &&\n        typeof (message as ISwarmMessageInstance).sig === 'string',\n      'Message must be a string or an object'\n    );\n  }\n\n  /**\n   * serizlize the message to a fromat\n   * to store it in the store with\n   * a type specified in the options\n   *\n   * @protected\n   * @returns {TSwarmStoreValueTypes<P>}\n   * @memberof SwarmMessageStore\n   */\n  protected serializeMessage(\n    message: ISwarmMessageInstance | string\n  ): TSwarmStoreValueTypes<P> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return String(message) as TSwarmStoreValueTypes<P>;\n      default:\n        throw new Error(\n          'Failed to serizlize the message to the store connector compatible format'\n        );\n    }\n  }\n\n  /**\n   * returns the argument for a message removing request\n   * accepted by the connector type provided\n   *\n   * @protected\n   * @param {string} messageAddress\n   * @param {(ISwarmMessageInstance | string)} message\n   * @returns {TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>>}\n   * @memberof SwarmMessageStore\n   */\n  protected getArgRemoveMessage(\n    messageAddress: string\n  ): TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return messageAddress as TSwarmStoreDatabaseMethodArgument<\n          P,\n          TSwarmStoreValueTypes<P>\n        >;\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message removing'\n        );\n    }\n  }\n\n  /**\n   * returns argment for a database values iterator\n   *\n   * @protected\n   * @param {string} dbName\n   * @returns {TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>>}\n   * @memberof SwarmMessageStore\n   */\n  protected getArgIterateDb(\n    dbName: string,\n    options: TSwarmStoreDatabaseIteratorMethodArgument<P>\n  ): TSwarmStoreDatabaseIteratorMethodArgument<P> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        assert(options, 'The iteratro opti');\n        return options\n          ? (extend(\n              options,\n              SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT\n            ) as TSwarmStoreDatabaseIteratorMethodArgument<P>)\n          : (SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT as TSwarmStoreDatabaseIteratorMethodArgument<\n              P\n            >);\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message collecting'\n        );\n    }\n  }\n\n  protected collectMessagesFromOrbitDBIterator(\n    dbName: string,\n    iteratorAnswer: TSwarmStoreDatabaseIteratorMethodAnswer<\n      ESwarmStoreConnector.OrbitDB,\n      string\n    > // TODO - may be not a string\n  ): Promise<(ISwarmMessageInstance | Error)[]> {\n    const messageConstructor = this.getMessageConstructor(dbName);\n\n    if (!messageConstructor) {\n      throw new Error(\n        `Message constructor is not defined for the database \"${dbName}\"`\n      );\n    }\n\n    if (iteratorAnswer instanceof Error) {\n      throw iteratorAnswer;\n    }\n    return Promise.all(\n      iteratorAnswer\n        .map((messageSerialized) => {\n          if (messageSerialized instanceof Error) {\n            return messageSerialized;\n          }\n          if (!messageSerialized) {\n            return messageSerialized;\n          }\n          try {\n            return messageConstructor\n              .construct(messageSerialized.value)\n              .catch((err: Error) => err);\n          } catch (err) {\n            return err;\n          }\n        })\n        .filter(isDefined)\n    );\n  }\n\n  /**\n   * collect messages from iterator\n   *\n   * @protected\n   * @param {TSwarmStoreDatabaseIteratorMethodAnswer<P, any>} iterator\n   * @returns {ISwarmMessageInstance[]}\n   * @memberof SwarmMessageStore\n   */\n  protected collectMessages(\n    dbName: string,\n    iterator: TSwarmStoreDatabaseIteratorMethodAnswer<P, any>\n  ): Promise<(ISwarmMessageInstance | Error)[]> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return this.collectMessagesFromOrbitDBIterator(dbName, iterator);\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message collecting'\n        );\n    }\n  }\n\n  /**\n   * transforms the result of a query for adding a message\n   * to the unique message's identifier in the database\n   *\n   * @protected\n   * @param {TSwarmStoreDatabaseMethodAnswer<\n   *       P,\n   *       TSwarmMessageSeriazlized\n   *     >} addMessageResponse\n   * @returns {TSwarmMessageStoreMessageId}\n   * @memberof SwarmMessageStore\n   */\n  protected deserializeAddMessageResponse(\n    addMessageResponse: TSwarmStoreDatabaseMethodAnswer<\n      P,\n      TSwarmMessageSeriazlized\n    >\n  ): TSwarmMessageStoreMessageId {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        if (typeof addMessageResponse !== 'string') {\n          throw new Error('There is a wrong responce on add message request');\n        }\n        return addMessageResponse;\n      default:\n        return String(addMessageResponse);\n    }\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts",["2161"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts",["2162"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",["2163","2164","2165","2166","2167","2168","2169","2170"],"import { ISecretStoreCredentials } from '../secret-storage-class/secret-storage-class.types';\nimport { ISwarmStoreConnectorOrbitDBConnectionOptions } from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { ESwarmStoreDbStatus as ESwarmStoreDatabaseStatus } from './swarm-store-class.const';\nimport { SWARM_STORE_DATABASE_STATUS_ABSENT } from './swarm-store-class.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseValue,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodArgument,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from './swarm-store-class.const';\n\nexport type TSwarmStoreConnectorEventRetransmitter = (...args: any[]) => void;\n\nexport interface ISwarmStoreEvents {\n  [ESwarmStoreEventNames.STATE_CHANGE]: boolean;\n  [ESwarmStoreEventNames.ERROR]: Error;\n  [ESwarmStoreEventNames.CLOSE]: void;\n  [ESwarmStoreEventNames.UPDATE]: string;\n  [ESwarmStoreEventNames.LOADING]: number;\n  [ESwarmStoreEventNames.DB_LOADING]: [string, number];\n  [ESwarmStoreEventNames.READY]: string;\n}\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseMethodArgument<\n  P extends ESwarmStoreConnector,\n  M\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<M>\n  : never;\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseIteratorMethodArgument<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseIteratorMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB\n  ?\n      | Error\n      | Array<ISwarmStoreConnectorOrbitDbDatabaseValue<T> | Error | undefined>\n  : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB ? T : never;\n\n// a value can be stored\nexport type TSwarmStoreValueTypes<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB ? any : never;\n\nexport interface ISwarmStoreDatabaseBaseOptions {\n  // Database name\n  dbName: string;\n  // is a puclic database. Private by\n  isPublic?: boolean;\n}\n\n/**\n * options of a swarm database\n *\n * @export\n * @interface ISwarmStoreDatabaseOptions\n */\nexport type TSwarmStoreDatabaseOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseOptions<T> &\n      ISwarmStoreDatabaseBaseOptions\n  : ISwarmStoreDatabaseBaseOptions;\n/**\n * options of swarm databases want to connect\n *\n * @export\n * @interface ISwarmStoreDatabasesOptions\n */\nexport interface ISwarmStoreDatabasesOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> {\n  // databases which must be started when the orbit db\n  // instance will be ready to use\n  databases: P extends never\n    ? ISwarmStoreDatabaseBaseOptions\n    : TSwarmStoreDatabaseOptions<P, T>[];\n  // a virtual directory name where to store all the data received\n  directory?: string;\n}\n\n/**\n * options about the current user which\n * will be connected to swarm databases\n *\n * @export\n * @interface ISwarmStoreUserOptions\n */\nexport interface ISwarmStoreUserOptions {\n  // the current user identity\n  userId?: string;\n  // credentials used for data encryption\n  credentials?: ISecretStoreCredentials;\n}\n\nexport type TSwarmStoreConnectorConnectionOptions<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDBConnectionOptions\n  : never;\n\n/**\n * options defines which provider to use\n *\n * @export\n * @interface ISwarmStoreProviderOptions\n */\nexport interface ISwarmStoreProviderOptions<P extends ESwarmStoreConnector> {\n  provider: P;\n  providerConnectionOptions: TSwarmStoreConnectorConnectionOptions<P>;\n}\n\n/**\n * this options excluded options specific\n * for a provider connection\n *\n * @export\n * @interface ISwarmStoreMainOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreMainOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> extends ISwarmStoreUserOptions, ISwarmStoreDatabasesOptions<P, T> {}\n\n/**\n * options used for connection to a swarm databases\n *\n * @export\n * @interface ISwarmStoreOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreOptions<\n  P extends ESwarmStoreConnector,\n  T extends any = never\n>\n  extends Required<ISwarmStoreMainOptions<P, T>>,\n    Required<ISwarmStoreProviderOptions<P>> {}\n\n/**\n * store a status of each database\n *\n * key - database name\n * value - the last event from the database received from the provider\n * @export\n * @interface ISwarmStoreDatabasesStatus\n */\nexport interface ISwarmStoreDatabasesStatuses\n  extends Record<\n    string,\n    ESwarmStoreDatabaseStatus | typeof SWARM_STORE_DATABASE_STATUS_ABSENT\n  > {}\n\n// methods available for a database providers\nexport type TSwarmStoreDatabaseMethod<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMethodNames\n  : never;\n\n/**\n * this interface must be implemented by a swarm storage connectors\n *\n * @export\n * @interface ISwarmStoreConnector\n * @extends {EventEmitter<ISwarmStoreEvents>}\n * @template P\n */\nexport interface ISwarmStoreConnectorBase<P extends ESwarmStoreConnector> {\n  // ready to use\n  isReady: boolean;\n  // disconnected from the swarm\n  isClosed: boolean;\n  // open connection with all databases\n  connect(\n    options: TSwarmStoreConnectorConnectionOptions<P>\n  ): Promise<Error | void>;\n  // close all the existing connections\n  close(): Promise<Error | void>;\n  // open a new connection to the database specified\n  openDatabase(dbOptions: TSwarmStoreDatabaseOptions<P>): Promise<void | Error>;\n  // close connection to a database specified\n  closeDatabase(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName']\n  ): Promise<void | Error>;\n  // send request to a swarm database to perform\n  // an operation such as read or seta value\n  // on a database\n  request<V extends TSwarmStoreValueTypes<P>, A>(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName'],\n    dbMethod: TSwarmStoreDatabaseMethod<P>,\n    arg: TSwarmStoreDatabaseMethodArgument<P, V>\n  ): Promise<\n    | Error\n    | TSwarmStoreDatabaseMethodAnswer<P, A>\n    | TSwarmStoreDatabaseIteratorMethodAnswer<P, A>\n  >;\n}\n\nexport interface ISwarmStoreConnector<P extends ESwarmStoreConnector>\n  extends EventEmitter<ISwarmStoreEvents>,\n    ISwarmStoreConnectorBase<P> {}\n\n/**\n * Implements connection to a swarm\n * databases.\n * After the instance will be connected\n * to databases it allows to send request\n * to databases connected to.\n * Status of connection to a specific\n * databases is available on subscription\n * to the instance's methods.\n *\n * @export\n * @interface ISwarmStore\n */\nexport interface ISwarmStore<\n  P extends ESwarmStoreConnector,\n  ItemType extends any\n> extends Omit<ISwarmStoreConnectorBase<P>, 'connect'> {\n  // status of a database connected to\n  dbStatuses: ISwarmStoreDatabasesStatuses;\n  // open connection with all databases\n  connect(options: ISwarmStoreOptions<P, ItemType>): Promise<Error | void>;\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["2171"],"import OrbitDB from 'orbit-db';\nimport AccessController from 'orbit-db-access-controllers/src/access-controller-interface';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions,\n  TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback,\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport class SwarmStoreConnectorOrbitDBSubclassAccessController<\n  T\n> extends AccessController {\n  // Returns the type of the access controller\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE;\n  }\n  /**\n   * create and preload an instance\n   * of the SwarmStoreConnectorOrbitDBSubclassAccessController\n   *\n   * @static\n   * @template T\n   * @param {OrbitDB} orbitdb\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>} [options={}]\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public static async create<T>(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ): Promise<SwarmStoreConnectorOrbitDBSubclassAccessController<T>> {\n    return new SwarmStoreConnectorOrbitDBSubclassAccessController<T>(\n      orbitdb,\n      options\n    );\n  }\n\n  // if true then anyone have access\n  // to the database\n  protected _isPublic: boolean = false;\n\n  protected _grantAccessCallback?: TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback<\n    T\n  >;\n\n  protected _orbitdb?: OrbitDB;\n\n  protected _options?: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    T\n  >;\n\n  constructor(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ) {\n    super();\n    this._orbitdb = orbitdb;\n    this.setOptions(options);\n  }\n\n  /**\n   * Called by the databases (the log) to see if entry should\n   * be allowed in the database. Return true if the entry is allowed,\n   * false is not allowed.\n   *\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async canAppend(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      console.warn(\n        `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::entry have an unknown format`\n      );\n      return false;\n    }\n\n    // Write keys and admins keys are allowed\n    const { _options, _isPublic } = this;\n\n    if (_isPublic) {\n      return this.checkAccess(entry, identityProvider);\n    }\n\n    if (!_options) {\n      return false;\n    }\n\n    const { identity } = entry;\n    const { id: userPerformedActionOnEntryId } = identity;\n    const { write: accessListForUsers } = _options;\n\n    // If the ACL contains the writer's public key or it contains '*'\n    if (\n      accessListForUsers &&\n      accessListForUsers.includes(userPerformedActionOnEntryId)\n    ) {\n      return this.checkAccess(entry, identityProvider);\n    }\n    return false;\n  }\n\n  /**\n   *  return manifest params\n   *\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async save(): Promise<\n    ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest\n  > {\n    return {};\n  }\n\n  /**\n   * check if the entry have the common fields\n   * used to verfy the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {entry is LogEntry<T>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyEntryFormat(entry: LogEntry<T>): entry is LogEntry<T> {\n    if (!entry || typeof entry !== 'object') {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n\n    if (!id) {\n      return false;\n    }\n    if (payload === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * validate the identiry provided by the entity\n   *\n   * @protected\n   * @param {IdentityJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyIdentity(\n    identity: IdentityJson,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    return (identityProvider as any).verifyIdentity(identity);\n  }\n\n  /**\n   * validate the entity format and\n   * check the access on it for the\n   * identity provided\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async verifyEntity(entry: LogEntry<T>): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n    const { _grantAccessCallback } = this;\n\n    if (typeof _grantAccessCallback === 'function') {\n      return _grantAccessCallback(payload, id);\n    }\n    return true;\n  }\n\n  /**\n   * validates the enetry and verify the user have\n   * the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async checkAccess(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    try {\n      if (!this.verifyEntryFormat(entry)) {\n        return false;\n      }\n\n      const { identity } = entry;\n      const validateIdentityResult = await this.verifyIdentity(\n        identity,\n        identityProvider\n      );\n\n      if (validateIdentityResult !== true) {\n        return false;\n      }\n      return this.verifyEntity(entry);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  protected setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>\n  ) {\n    if (options) {\n      const { write, grantAccess } = options;\n\n      if (write instanceof Array) {\n        if (write.includes('*')) {\n          this._isPublic = true;\n        }\n      } else {\n        console.warn(\n          `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::Noone have access on the database`\n        );\n      }\n      if (typeof grantAccess === 'function') {\n        if (grantAccess.length !== 2) {\n          console.warn(\n            `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::A grant access callback must receives 2 arguments generally, but receives ${grantAccess.length}`\n          );\n        }\n        this._grantAccessCallback = grantAccess;\n      }\n      this._options = options;\n    }\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",["2172"],"import { ESwarmStoreEventNames } from '../../../../swarm-store-class.const';\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX =\n  'SwarmStoreConnectorOrbitDBDatabase';\n\nexport enum EOrbidDBFeedSoreEvents {\n  REPLICATED = 'replicated',\n  REPLICATE_PROGRESS = 'replicate.progress',\n  LOAD = 'load',\n  LOAD_PROGRESS = 'load.progress',\n  READY = 'ready',\n  CLOSE = 'closed',\n  // Emitted after an entry was added locally to the database.\n  // hash is the IPFS hash of the latest state of the database.\n  // entry is the added database op.\n  WRITE = 'write',\n}\n\nexport enum EOrbitDbFeedStoreOperation {\n  DELETE = 'DEL',\n  ADD = 'ADD',\n}\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION: IStoreOptions = {\n  localOnly: false,\n  create: true,\n  replicate: true,\n};\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT = 500;\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT = {\n  limit: SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT,\n};\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["2173","2174","2175","2176","2177","2178","2179","2180","2181"],"import * as orbitDbModule from 'orbit-db';\nimport OrbitDbFeedStore from 'orbit-db-feedstore';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseEvents,\n  ISwarmStoreConnectorOrbitDbDatabaseValue,\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions,\n  TFeedStoreHash,\n} from './swarm-store-connector-orbit-db-subclass-database.types';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX,\n  EOrbidDBFeedSoreEvents,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT,\n} from './swarm-store-connector-orbit-db-subclass-database.const';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport { ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport { ESwarmStoreConnectorOrbitDbDatabaseIteratorOption } from './swarm-store-connector-orbit-db-subclass-database.types';\nimport { EOrbitDbFeedStoreOperation } from './swarm-store-connector-orbit-db-subclass-database.const';\nimport { ESwarmStoreEventNames } from '../../../../swarm-store-class.const';\n\nexport class SwarmStoreConnectorOrbitDBDatabase<\n  TFeedStoreType\n> extends EventEmitter<\n  ISwarmStoreConnectorOrbitDbDatabaseEvents<\n    SwarmStoreConnectorOrbitDBDatabase<TFeedStoreType>,\n    TFeedStoreType\n  >\n> {\n  // is loaded fully and ready to use\n  public isReady: boolean = false;\n\n  // whether is closed\n  public isClosed: boolean = false;\n\n  // a name of the database\n  public dbName: string = '';\n\n  private isFullyLoaded: boolean = false;\n\n  private options?: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>;\n\n  protected orbitDb?: orbitDbModule.OrbitDB;\n\n  protected database?: OrbitDbFeedStore<TFeedStoreType>;\n\n  protected newEntriesPending: [string, LogEntry<TFeedStoreType>, any][] = [];\n\n  constructor(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>,\n    orbitDb: orbitDbModule.OrbitDB\n  ) {\n    super();\n    this.setOptions(options);\n    this.setOrbitDbInstance(orbitDb);\n  }\n\n  public async connect(): Promise<Error | void> {\n    this.unsetReadyState();\n\n    const dbStoreCreationResult = await this.createDbInstance();\n\n    if (dbStoreCreationResult instanceof Error) {\n      return dbStoreCreationResult;\n    }\n\n    const loadDbResult = await dbStoreCreationResult.load(\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT\n    );\n\n    if ((loadDbResult as unknown) instanceof Error) {\n      console.error(loadDbResult);\n      return this.onFatalError(\n        'The fatal error has occurred on databse loading',\n        'connect'\n      );\n    }\n  }\n\n  public async close(): Promise<Error | void> {\n    const closeCurrentStoreResult = await this.closeCurrentStore();\n\n    this.unsetReadyState();\n    this.isClosed = true;\n    this.emitEvent(ESwarmStoreEventNames.CLOSE, this);\n    this.unsetAllListenersForEvents();\n    if (closeCurrentStoreResult instanceof Error) {\n      return closeCurrentStoreResult;\n    }\n  }\n\n  public async add(value: TFeedStoreType): Promise<string | Error> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hash = await database.add(value);\n      console.log(`ADDED DATA WITH HASH -- ${hash}`);\n      if (typeof hash !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value stored'\n        );\n      }\n      return hash;\n    } catch (err) {\n      console.trace(err);\n      return err;\n    }\n  }\n\n  public async get(\n    hash: TFeedStoreHash\n  ): Promise<\n    Error | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType> | undefined\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    try {\n      const e = database.get(hash);\n\n      if (e instanceof Error) {\n        return new Error('An error has occurred on get the data from the key');\n      }\n      if (e.hash !== hash) {\n        return undefined;\n      }\n      if (e) {\n        return this.parseValueStored(e);\n      }\n    } catch (err) {\n      return err;\n    }\n    return undefined;\n  }\n\n  public async remove(hash: TFeedStoreHash): Promise<Error | void> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hashRemoved = await database.remove(hash);\n\n      if (typeof hashRemoved !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value removed'\n        );\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async iterator(\n    options?: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  ): Promise<\n    | Error\n    | Array<\n        | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType>\n        | Error\n        | undefined\n      >\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    const eqOperand =\n      options && options[ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.eq];\n\n    if (eqOperand) {\n      return this.getValues(eqOperand, database);\n    }\n\n    const iteratorOptionsRes =\n      options ||\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT;\n\n    return database\n      .iterator(iteratorOptionsRes)\n      .collect()\n      .map(this.parseValueStored);\n  }\n\n  protected parseValueStored = (\n    e: LogEntry<TFeedStoreType>\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType>\n    | Error\n    | undefined => {\n    const { payload, identity, hash } = e;\n\n    if (payload) {\n      if (payload.op === EOrbitDbFeedStoreOperation.DELETE) {\n        return undefined;\n      }\n      return {\n        id: identity.id,\n        value: payload.value,\n        hash,\n      };\n    } else {\n      return new Error('An unknown fromat of the data stored');\n    }\n  };\n\n  protected getValues(\n    hash: string | string[],\n    database: OrbitDbFeedStore<TFeedStoreType>\n  ): Promise<\n    Array<\n      | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType>\n      | Error\n      | undefined\n    >\n  > {\n    const pending =\n      typeof hash === 'string'\n        ? [this.get(hash)]\n        : hash.map((h) => this.get(h));\n\n    return Promise.all(pending);\n  }\n\n  private getDbStoreInstance(): Error | OrbitDbFeedStore<TFeedStoreType> {\n    const { isReady, database } = this;\n\n    if (!isReady) {\n      return new Error('The store is not ready to use');\n    }\n    if (!database) {\n      return this.emitError('The database store instance is empty');\n    }\n    return database;\n  }\n\n  private setReadyState(isReady: boolean = true) {\n    this.isReady = isReady;\n  }\n\n  private unsetReadyState() {\n    this.setReadyState(false);\n  }\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(EOrbidDBFeedSoreEvents).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitError(\n    error: Error | string,\n    mehodName?: string,\n    isFatal: boolean = false\n  ): Error {\n    const err = typeof error === 'string' ? new Error() : error;\n    const eventName = isFatal\n      ? ESwarmStoreEventNames.FATAL\n      : ESwarmStoreEventNames.ERROR;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(eventName, err);\n    return err;\n  }\n\n  protected onFatalError(error: Error | string, methodName: string) {\n    this.unsetReadyState();\n    this.emitError(error, methodName, true);\n\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.close();\n    }\n    return this.emitError(\n      'The database closed cause a fatal error',\n      methodName,\n      true\n    );\n  }\n\n  protected emitEvent(event: ESwarmStoreEventNames, ...args: any[]) {\n    const { options } = this;\n    const { dbName } = options!;\n\n    this.emit(event, dbName, ...args);\n  }\n\n  private getFeedStoreOptions(): IStoreOptions | undefined | Error {\n    return SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION;\n  }\n\n  private emitFullyLoaded() {\n    if (!this.isFullyLoaded) {\n      this.isFullyLoaded = true;\n      this.emitEvent(ESwarmStoreEventNames.LOADING, 100);\n    }\n  }\n\n  protected logStore = () => {\n    const { database } = this;\n    const posts = database!.iterator({ limit: -1 }).collect();\n\n    console.log('STORE::READY--');\n    posts.forEach((post: any) => {\n      if (post && post.identity) {\n        console.log(post.identity.id);\n      }\n    });\n    console.log('--STORE::READY');\n  };\n\n  private emitNewEntry = (\n    address: string,\n    entry: LogEntry<TFeedStoreType>,\n    heads: any\n  ) => {\n    console.log('emit new entry', {\n      address,\n      entry,\n      heads,\n    });\n    this.emit(ESwarmStoreEventNames.NEW_ENTRY, [\n      this.dbName,\n      entry,\n      address,\n      heads,\n      this,\n    ]);\n  };\n\n  private emitEmtriesPending() {\n    const newEntriesPending = this.newEntriesPending;\n\n    console.log('emitEmtriesPending');\n    newEntriesPending.forEach((newEntry) => this.emitNewEntry(...newEntry));\n    this.newEntriesPending.splice(0, newEntriesPending.length);\n  }\n\n  private handleNewEntry = (\n    address: string,\n    entry: LogEntry<TFeedStoreType>,\n    heads: any\n  ) => {\n    console.log('add entry pending', {\n      address,\n      entry,\n      heads,\n    });\n    this.newEntriesPending.push([address, entry, heads]);\n  };\n\n  private handleFeedStoreReady = () => {\n    this.emitFullyLoaded();\n    this.setReadyState();\n    this.emitEvent(ESwarmStoreEventNames.READY);\n    this.logStore();\n    this.emitEmtriesPending();\n  };\n\n  private handleFeedStoreLoaded = () => {\n    // emit event that the database local copy was fully loaded\n    // this.emitFullyLoaded();\n  };\n\n  private handleFeedStoreLoadProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    total: number\n  ) => {\n    console.log('Log in progress', {\n      address,\n      hash,\n      entry,\n      progress,\n      total,\n    });\n    // emit event database local copy loading progress\n    this.emitEvent(ESwarmStoreEventNames.LOADING, progress);\n    this.handleNewEntry(address, entry, {});\n  };\n\n  private handleFeedStoreReplicated = () => {\n    // emit event that the db updated, cause it\n    // was replicated with another peer db copy\n    const { dbName } = this;\n    console.log('REPLICATED', { dbName });\n    this.emitEvent(ESwarmStoreEventNames.UPDATE, dbName);\n    this.logStore();\n    this.emitEmtriesPending();\n  };\n\n  private handleFeedStoreClosed = () => {\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.unsetReadyState();\n      this.emitError(\n        'The instance was closed unexpected',\n        'handleFeedStoreClosed'\n      );\n      this.restartStore();\n    }\n  };\n\n  private async closeInstanceOfStore(\n    storeInstance: OrbitDbFeedStore<TFeedStoreType>\n  ): Promise<Error | void> {\n    if (!storeInstance) {\n      return new Error('An instance of the store must be specified');\n    }\n    this.unsetFeedStoreEventListeners(storeInstance);\n    try {\n      await storeInstance.close();\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Fatal error has occurred on close the instance of the Feed store'\n      );\n    }\n  }\n\n  private async closeCurrentStore(): Promise<Error | void> {\n    const { database } = this;\n\n    if (database) {\n      const closeStoreResult = await this.closeInstanceOfStore(database);\n\n      if (closeStoreResult instanceof Error) {\n        console.error(closeStoreResult);\n        return new Error(\n          'Failed to close the current instance of the Database store'\n        );\n      }\n      this.database = undefined;\n    }\n  }\n\n  // restart the store\n  private async restartStore(): Promise<Error | void> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The store was closed previousely');\n    }\n\n    const currentStoreStopResult = await this.closeCurrentStore();\n\n    if (currentStoreStopResult instanceof Error) {\n      console.error(currentStoreStopResult);\n      return this.onFatalError(\n        'Failed to restart the Database cause failed to close the store instance',\n        'restartStore'\n      );\n    }\n    return this.connect();\n  }\n\n  private handleFeedStoreReplicateInProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    have: unknown\n  ) => {\n    console.warn(`handleFeedStoreReplicateInProgress::\n      addr: ${address}\n      hash: ${hash}\n      progress: ${progress}\n    `);\n    this.logStore();\n    this.handleNewEntry(address, entry, {});\n  };\n\n  private handleWrite = (\n    address: string,\n    entry: LogEntry<TFeedStoreType>,\n    heads: any\n  ) => {\n    console.log('WRITE', {\n      address,\n      entry,\n      heads,\n    });\n    this.emitNewEntry(address, entry, heads);\n  };\n\n  private setFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>,\n    isSet = true\n  ): Error | void {\n    if (!feedStore) {\n      return new Error('An instance of the FeedStore must be specified');\n    }\n    if (!feedStore.events) {\n      return new Error('An unknown API of the FeedStore');\n    }\n    if (\n      typeof feedStore.events.addListener !== 'function' ||\n      typeof feedStore.events.removeListener !== 'function'\n    ) {\n      return new Error('An unknown API of the FeedStore events');\n    }\n\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.READY,\n      this.handleFeedStoreReady\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD,\n      this.handleFeedStoreLoaded\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD_PROGRESS,\n      this.handleFeedStoreLoadProgress\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATED,\n      this.handleFeedStoreReplicated\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.CLOSE,\n      this.handleFeedStoreClosed\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATE_PROGRESS,\n      this.handleFeedStoreReplicateInProgress\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.WRITE,\n      this.handleWrite\n    );\n  }\n\n  private unsetFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>\n  ) {\n    this.setFeedStoreEventListeners(feedStore, false);\n  }\n\n  private getAccessControllerOptions(): ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    TFeedStoreType\n  > {\n    const { options } = this;\n    const resultedOptions: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<TFeedStoreType> = {\n      type: SwarmStoreConnectorOrbitDBSubclassAccessController.type,\n    };\n\n    if (!options) {\n      return resultedOptions;\n    }\n\n    const { isPublic, write, grantAccess } = options;\n\n    if (isPublic) {\n      resultedOptions.write = ['*'];\n    } else if (write instanceof Array) {\n      resultedOptions.write = write.filter(\n        (identity) => identity && typeof identity === 'string'\n      );\n    }\n    if (typeof grantAccess === 'function') {\n      if (grantAccess.length !== 2) {\n        console.warn(\n          'The grant access callback function must have 2 arguments'\n        );\n      }\n      resultedOptions.grantAccess = grantAccess;\n    }\n    return resultedOptions;\n  }\n\n  private async createDbInstance(): Promise<\n    Error | OrbitDbFeedStore<TFeedStoreType>\n  > {\n    try {\n      const { orbitDb, options } = this;\n\n      if (!orbitDb) {\n        return this.onFatalError(\n          'There is no intance of the OrbitDb is specified',\n          'createDbInstance'\n        );\n      }\n\n      const { dbName } = options!;\n\n      if (!dbName) {\n        return this.onFatalError(\n          'A name of the database must be specified',\n          'createDbInstance'\n        );\n      }\n\n      const dbFeedStoreOptions = this.getFeedStoreOptions();\n\n      if (dbFeedStoreOptions instanceof Error) {\n        return this.onFatalError(\n          dbFeedStoreOptions,\n          'createDbInstance::getFeedStoreOptions'\n        );\n      }\n\n      const db = await orbitDb.feed<TFeedStoreType>(dbName, {\n        ...SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n        accessController: this.getAccessControllerOptions(),\n      });\n\n      if (db instanceof Error) {\n        return this.onFatalError(db, 'createDbInstance::feed store creation');\n      }\n\n      const setStoreListenersResult = this.setFeedStoreEventListeners(db);\n\n      if (setStoreListenersResult instanceof Error) {\n        return this.onFatalError(\n          setStoreListenersResult,\n          'createDbInstance::set feed store listeners'\n        );\n      }\n      this.database = db;\n      return db;\n    } catch (err) {\n      return this.onFatalError(err, 'createDbInstance');\n    }\n  }\n\n  private setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  ): void | Error {\n    if (!options) {\n      return this.onFatalError('Options must be specified', 'setOptions');\n    }\n\n    const { dbName } = options;\n\n    if (typeof dbName !== 'string') {\n      return this.onFatalError(\n        'A name of the database must be specified',\n        'setOptions'\n      );\n    }\n    this.options = options;\n    this.dbName = dbName;\n  }\n\n  private setOrbitDbInstance(orbitDb: orbitDbModule.OrbitDB): void | Error {\n    if (!orbitDb) {\n      return this.onFatalError(\n        'An instance of orbit db must be specified',\n        'setOrbitDbInstance'\n      );\n    }\n    this.orbitDb = orbitDb;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",["2182","2183"],"import { ISwarmStoreDatabaseBaseOptions } from '../../../../swarm-store-class.types';\nimport { ESwarmStoreEventNames } from '../../../../swarm-store-class.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback,\n  ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n} from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  extends ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback<\n      TFeedStoreType\n    >,\n    ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n    ISwarmStoreDatabaseBaseOptions {}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseEvents<\n  TSwarmStoreConnectorOrbitDBDatabase,\n  TFeedStoreType\n> {\n  [ESwarmStoreEventNames.FATAL]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n\n  [ESwarmStoreEventNames.ERROR]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  // Database name and percents loaded\n  [ESwarmStoreEventNames.LOADING]: [\n    string,\n    number,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmStoreEventNames.UPDATE]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.CLOSE]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.READY]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.NEW_ENTRY]: [\n    string, // database name\n    any, // entry added\n    string, // address of the entry,\n    any, // heads\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseValue<TStoreValueType> {\n  id: string; // id of the user who is store the event\n  value: TStoreValueType;\n  hash: string;\n}\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseIteratorOption {\n  eq = 'eq',\n  gt = 'gt',\n  gte = 'gte',\n  lt = 'lt',\n  lte = 'lte',\n  limit = 'limit',\n  reverse = 'reverse',\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions {\n  // if the equal operator applyied all other will not be applied\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.eq]?: string | string[];\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.limit]?: number;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.reverse]?: boolean;\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer<T> {\n  collect(): T[];\n}\n\nexport type TFeedStoreHash = string;\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseMethodNames {\n  'get' = 'get',\n  'add' = 'add',\n  'remove' = 'remove',\n  'iterator' = 'iterator',\n}\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodNames = ESwarmStoreConnectorOrbitDbDatabaseMethodNames;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<TFeedStoreType> =\n  | TFeedStoreHash\n  | TFeedStoreType\n  | ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions;\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["2184","2185","2186","2187"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    // TODO - may be verify the identity with central authority\n    const verifyResult = await KeystoreClass.verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",["2188"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["2189"],"import { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { validateCryptoKeyCredentials } from './../../../../../secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: IStorageProviderOptions;\n\n  protected secretStorage?: InstanceType<typeof SecretStorage>;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<IStorageProviderOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (isClose) {\n      throw new Error('The instance was closed before');\n    }\n    if (isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public close = async (cb?: TCallbackError): Promise<void> => {\n    if (!this.isOpen || this.isClose) {\n      return;\n    }\n    this.setIsClose();\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    if (this.isClose) {\n      console.error('CLOSED');\n    }\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del(key: string, cb?: TCallbackError) {\n    return this.put(key, '', cb);\n  }\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      await this.disconnectSecretStorage();\n    }\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected getSecretStorage(): Error | SecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<IStorageProviderOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    } else if ((credentials as ISecretStoreCredentials).password) {\n      const credentialsValidationResult = SecretStorage.validateCredentials(\n        credentials as ISecretStoreCredentials\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::credentials not valid');\n      }\n      this.credentials = credentials as ISecretStoreCredentials;\n    }\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n    this.unsetSecretStorage();\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["2190","2191","2192","2193","2194","2195","2196"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/index.ts",[],"/home/paul/Projects/protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/Projects/protocol/src/const/common-values/common-values.ts",[],"/home/paul/Projects/protocol/src/const/common-values/index.ts",[],"/home/paul/Projects/protocol/src/const/const-api-conf.ts",[],"/home/paul/Projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/const/const-crypto-keys/index.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-regex/index.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/index.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-values/index.ts",[],"/home/paul/Projects/protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/Projects/protocol/src/index.ts",[],"/home/paul/Projects/protocol/src/react-app-env.d.ts",[],"/home/paul/Projects/protocol/src/types/channels.types.ts",[],"/home/paul/Projects/protocol/src/types/common.types.ts",[],"/home/paul/Projects/protocol/src/types/encryption-keys.types.ts",[],"/home/paul/Projects/protocol/src/types/helper.types.ts",["2197","2198","2199"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n\nexport type ArrayFirst<T extends any[]> = T extends Array<infer F> ? F : never;\n\nexport type Defined<T extends {}> = {\n  [k in keyof T]: T[k] extends undefined ? NonNullable<T[k]> : T[k];\n};\n","/home/paul/Projects/protocol/src/types/index.d.ts",[],"/home/paul/Projects/protocol/src/types/ipfs.d.ts",[],"/home/paul/Projects/protocol/src/types/ipfs.types.d.ts",[],"/home/paul/Projects/protocol/src/types/main.types.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-keystore.d.ts",["2200","2201","2202"],"import 'orbit-db-keystore';\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore {\n    status: string;\n    open(): Promise<void>;\n    close(): Promise<void>;\n    put(k: string, v: any): Promise<void>;\n    get(k: string): string | Uint8Array;\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStore;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n}\n","/home/paul/Projects/protocol/src/types/users.types.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-array.ts",["2203","2204","2205","2206"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n\n/**\n * check wherether the array\n * includes all items\n * @param testedArray\n * @param requiredItems\n */\nexport const commonUtilsArrayIncludesAll = (\n  testedArray: any[],\n  requiredItems: any[]\n): boolean => {\n  const len = requiredItems.length;\n  let idx = 0;\n\n  while (idx < len) {\n    if (!testedArray.includes(requiredItems[idx])) {\n      return false;\n    }\n    idx++;\n  }\n  return true;\n};\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-check-value.ts",["2207"],"export const checkIsError = (v: any): v is Error => v instanceof Error;\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-main.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-objects.ts",["2208","2209","2210","2211"],"import { TObjectKeys, TDictionary } from '../../types/common.types';\nimport { isDefined } from './common-utils-main';\n\nexport const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n\nexport const getObjectKeys = (o: object): Array<TObjectKeys> =>\n  (Object.keys(o) as Array<TObjectKeys>).concat(\n    Object.getOwnPropertySymbols(o)\n  );\n\n/**\n * extends object with another object if the object\n * have no properties\n *\n * @export\n * @template T\n * @template E\n * @param {T} o\n * @param {E} ext\n * @returns {T}\n */\nexport function extend<T extends TDictionary<any>, E extends TDictionary<any>>(\n  o: T | undefined,\n  ext: E,\n  replaceExisting?: boolean\n): T & E {\n  if (!o) {\n    return ext;\n  }\n\n  const keys = getObjectKeys(ext);\n  let idx = 0;\n  let k: keyof E;\n  const len = keys.length;\n\n  while (idx < len) {\n    k = keys[idx];\n    idx++;\n    if (!isDefined(ext[k])) {\n      continue;\n    }\n    if (replaceExisting || !isDefined(o[k])) {\n      o[k] = ext[k];\n    } else if (typeof o[k] === 'object' && typeof ext[k] === 'object') {\n      o[k] = extend(o[k], ext[k]);\n    }\n  }\n  return o;\n}\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["2212","2213","2214"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  isJWK,\n  getJWK,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\n\nexport const dataSignIsCryptoKeyPairImported = (\n  key: any\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const dataSignGenerateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModuleDataSign.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const dataSignExportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModuleDataSign.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await dataSignExportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return dataSignExportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const dataSignExportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await dataSignExportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        dataSignExportKey(keyPair.privateKey),\n        dataSignExportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  try {\n    const res = await dataSignExportKeyPair(keyPair);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKey = async (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModuleDataSign.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, true);\n\nexport const dataSignImportPrivateKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, false);\n\nexport const dataSignImportKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (dataSignIsCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        dataSignImportPublicKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]\n        ),\n        dataSignImportPrivateKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        ),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyPairFromString = (\n  keyPairString: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (dataSignIsCryptoKeyPairImported(keyPairObject)) {\n        return dataSignImportKeyPair(keyPairObject);\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return dataSignImportKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, true);\n\nexport const dataSignImportPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, false);\n\nexport const dataSignCheckIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const dataSignGetKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (dataSignCheckIfStringIsKeyPair(key)) {\n      const keyPair = await dataSignImportKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return dataSignGetKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await dataSignImportKeyFromString(\n        key,\n        type === 'public'\n      );\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return dataSignGetKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const dataSignImportEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return dataSignImportKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return dataSignImportKey(jwk);\n    } else if (typeof key === 'string') {\n      return dataSignImportKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const dataSignConvertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await dataSignImportEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return dataSignExportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",["2215"],"if (!window.crypto) {\n  window.CryptoKey = require('@trust/webcrypto/src/keys/CryptoKey');\n  window.CryptoKeyPair = require('@trust/webcrypto/src/keys/CryptoKeyPair');\n  (window as any).JsonWebKey = require('@trust/webcrypto/src/keys/JsonWebKey');\n}\n\nexport const ENCRYPTION_FORMAT_SUPPORTED = !window.crypto ? 'SHA-1' : undefined;\n\nexport const crypto = window.crypto || require('@trust/webcrypto');\n\nexport const cryptoModuleDataSign = crypto.subtle;\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["2216"],"import { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  dataSignGetKeyOfType,\n  dataSignExportKey,\n} from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModuleDataSign.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["2217"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { dataSignGetKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<true | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModuleDataSign.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res !== true\n      ? new Error('The signature for the data is not valid')\n      : true;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyData = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<true | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n  return verifyNative(k, d, s);\n};\n","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["2218","2219","2220","2221","2222"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-validators-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["2223","2224","2225","2226","2227","2228","2229","2230","2231","2232"],"import {\n  CONST_CRYPTO_KEYS_TYPES,\n  CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS,\n} from 'const/const-crypto-keys/const-crypto-keys';\nimport {\n  HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM,\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM,\n} from 'utils/hash-calculation-utils/hash-calculation-utils.const';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\n\nimport { commonUtilsArrayIncludesAll } from '../common-utils/common-utils-array';\nimport { eCRYPTO_UTILS_KEYS_USAGES } from '../encryption-utils/crypto-utils.const';\nimport {\n  calculateHash,\n  calculateHashNative,\n} from './../hash-calculation-utils/hash-calculation-utils';\nimport {\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n} from './encryption-keys-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (keyPair: any): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    isCryptoKey(keyPair.publicKey) &&\n    isCryptoKey(keyPair.privateKey)\n  );\n};\n\nexport const isCryptoKeyIncludesUsages = (\n  cryptoKey: CryptoKey,\n  expectedUsages: eCRYPTO_UTILS_KEYS_USAGES[] | eCRYPTO_UTILS_KEYS_USAGES\n): boolean => {\n  const { usages } = cryptoKey;\n\n  if (typeof expectedUsages === 'string') {\n    return usages.includes(expectedUsages);\n  }\n  return commonUtilsArrayIncludesAll(usages, expectedUsages as string[]);\n};\n\nexport const isCryptoKeyDataSign = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.sign);\n\nexport const isCryptoKeyDataVerify = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.verify);\n\nexport const isCryptoKeyDataEncryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.encrypt);\n\nexport const isCryptoKeyDataDecryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.decrypt);\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n\nexport const exportCryptokeyInFormat = async (\n  key: CryptoKey,\n  format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS\n): Promise<ArrayBuffer | JsonWebKey | Error> => {\n  try {\n    const result = await crypto.subtle.exportKey(format, key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      return new Error(\n        'exportCryptokeyInFormat::error returned from the exportKey'\n      );\n    }\n    return result;\n  } catch (err) {\n    console.error(err);\n    return new Error(\n      'exportCryptokeyInFormat::An error thrown when export the crypto key'\n    );\n  }\n};\n\n/**\n * calculates hash string of the crypto key\n * @param {CryptoKey} key\n */\nexport const calcCryptoKeyHash = async (\n  key: CryptoKey,\n  alg: HASH_CALCULATION_UTILS_HASH_ALHORITHM = HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM\n): Promise<Error | string> => {\n  if (!(key instanceof CryptoKey)) {\n    return new Error('Key os not an instance of CryptoKey');\n  }\n  if (!key.extractable) {\n    return new Error('The crypto key is not extractable');\n  }\n\n  let format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS =\n    CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.RAW;\n  const keyAlgName = key.algorithm.name.toLowerCase();\n\n  if (keyAlgName.includes('rsa-') || keyAlgName.includes('ecdsa')) {\n    if (key.type.includes(CONST_CRYPTO_KEYS_TYPES.PUBLIC)) {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.SPKI;\n    } else {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.PKCS8;\n    }\n  }\n\n  const exportedCryptoKey = await exportCryptokeyInFormat(key, format);\n\n  if (exportedCryptoKey instanceof Error) {\n    console.error(exportedCryptoKey);\n    return new Error('Failed to export the crypto key in the RAW format');\n  }\n\n  const hashCalcResult = await calculateHashNative(\n    exportedCryptoKey as ArrayBuffer,\n    alg\n  );\n\n  if (hashCalcResult instanceof Error) {\n    console.error(hashCalcResult);\n    return new Error('Failed to calculate a hash for the exported crypto key');\n  }\n  return encodeArrayBufferToDOMString(hashCalcResult);\n};\n\n// allow to absent for a private keys in a pairs\nexport const calcCryptoKeyPairHash = async (\n  cryptoPair: CryptoKeyPair,\n  alg?: HASH_CALCULATION_UTILS_HASH_ALHORITHM\n): Promise<Error | string> => {\n  const pending = [calcCryptoKeyHash(cryptoPair.publicKey)];\n\n  if (cryptoPair.privateKey) {\n    pending.push(calcCryptoKeyHash(cryptoPair.privateKey));\n  }\n\n  const results = await Promise.all(pending);\n\n  if (results[0] instanceof Error) {\n    return new Error('Failed to calculate hash of the private key');\n  }\n  if (results[1] instanceof Error) {\n    return new Error('Failed to calculate hash of the puclic key');\n  }\n  return calculateHash(`${results[0]}___${results[1]}`);\n};\n","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["2233"],"import { cryptoModule } from './main.crypto-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/Projects/protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["2234"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      return importKeyPair(keyPairObject);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/Projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/Projects/protocol/src/utils/firebase-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/Projects/protocol/src/utils/hash-calculation-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/Projects/protocol/src/utils/identity-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/ipfs-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts",["2235"],"import IPFS from 'ipfs';\nimport {\n  IPFS_UTILS_DEFAULT_OPTIONS,\n  IPFS_UTILS_DEFAULT_TIMEOUT_MS,\n} from './ipfs-utils.const';\n\n/**\n * create a ready to use connection to IPFS with a basis default options\n */\nexport const ipfsUtilsConnectBasic = async (\n  options?: object,\n  timeoutMs: number = IPFS_UTILS_DEFAULT_TIMEOUT_MS\n) => {\n  let timer: NodeJS.Timeout | undefined;\n  try {\n    timer = setTimeout(() => {\n      throw new Error('Connection timed out');\n    }, timeoutMs);\n    return await IPFS.create({\n      ...IPFS_UTILS_DEFAULT_OPTIONS,\n      ...options,\n    });\n  } finally {\n    clearTimeout(timer!);\n  }\n};\n","/home/paul/Projects/protocol/src/utils/lazy-loading-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/Projects/protocol/src/utils/main-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/encrypt.password-utils.ts",["2236","2237"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n","/home/paul/Projects/protocol/src/utils/password-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/password-utils.const.ts",["2238","2239"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM = 'SHA-512';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/string-encoding-utils.ts",["2240"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/Projects/protocol/src/utils/string-utilities.ts",[],"/home/paul/Projects/protocol/src/utils/typed-array-utils.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/index.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils.ts",["2241","2242"],"import { ValidationError } from './validation-utils-validation-error';\nimport Ajv, { ValidateFunction } from 'ajv';\nimport ajvJSONSchemaDraft6 from 'ajv/lib/refs/json-schema-draft-06.json';\nimport memoize from 'lodash.memoize';\nimport { isDEV } from 'const/common-values/common-values-env';\n\nconst ajv = new Ajv({\n  allErrors: isDEV,\n  verbose: isDEV,\n});\n\najv.addMetaSchema(ajvJSONSchemaDraft6);\n\nconst ajvVerbose = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\najvVerbose.addMetaSchema(ajvJSONSchemaDraft6);\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  return !!getValidatorForJSONSchema(schema)(value);\n};\n\nexport const getVerboseValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajvVerbose.compile(schema)\n);\n\nexport const validateVerboseBySchema = (\n  schema: object,\n  value: any\n): Error | void => {\n  const validator = getVerboseValidatorForJSONSchema(schema);\n  const validationResult = validator(value);\n\n  if (!validationResult) {\n    return new ValidationError(validator.errors);\n  }\n};\n","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts",["2243","2244","2245","2246"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport {\n  IFileStorageClassProviderIPFSOptions,\n  IFileStorageClassProviderIPFSFileAddOptions,\n} from './filestorage-class-provider-ipfs.types';\nimport {\n  FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER,\n  FILE_STORAGE_PROVIDER_IPFS_TYPE,\n} from './filestorage-class-provider-ipfs.const';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport { extend } from 'utils';\nimport { getFileSize } from 'utils/files-utils';\nimport assert from 'assert';\nimport path from 'path';\nimport { FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS } from './filestorage-class-provider-ipfs.const';\nimport { IPFS, FileObject, IPFSFile } from 'types/ipfs.types';\nimport BufferList from 'bl';\nimport { FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT } from './filestorage-class-provider-ipfs.const';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport { UnixTime } from 'types/ipfs.types';\nimport { downloadFile } from '../../../../utils/files-utils/files-utils-download';\nimport {\n  IFileStorageClassProviderIPFSFileGetOptions,\n  IFileStorageClassProviderIPFSFileDownloadOptions,\n} from './filestorage-class-provider-ipfs.types';\n\nexport class FileStorageClassProviderIPFS\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.IPFS> {\n  public type = FILE_STORAGE_PROVIDER_IPFS_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n\n  public get status() {\n    const { _ipfs: ipfs } = this;\n\n    if (!ipfs || !ipfs.isOnline()) {\n      return FILE_STORAGE_SERVICE_STATUS.NOT_READY;\n    }\n    if (!ipfs.files || this._error) {\n      return FILE_STORAGE_SERVICE_STATUS.ERROR;\n    }\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  /**\n   * this is the prefix for path\n   * of each file uploaded\n   *\n   * @protected\n   * @type {string}\n   * @memberof FileStorageClassProviderIPFS\n   */\n  protected _rootPath: string = FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n\n  protected _ipfs?: IPFS;\n\n  protected _error?: Error;\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/ipfs');\n  }\n\n  public async connect(options: IFileStorageClassProviderIPFSOptions) {\n    try {\n      this.setOptions(options);\n      await this._ipfs?.ready;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n    return FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n  }\n\n  public async close() {\n    this._ipfs = undefined;\n  }\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageClassProviderIPFSFileAddOptions\n  ): Promise<TFileStorageFileAddress> => {\n    const ipfs = this._ipfs;\n    const fileSize = getFileSize(file);\n\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(fileSize, 'Failed to get a size of the file');\n    let files: IPFSFile[] | Error | undefined;\n    const progressCallback = options?.progress;\n    let resolve: undefined | Function;\n    const pending = new Promise((res, rej) => {\n      resolve = res;\n    });\n    const opts = extend(\n      options || {},\n      {\n        pin: false,\n        cidVersion: 1,\n        progress: (bytes: number) => {\n          const percent = (bytes / fileSize!) * 100;\n\n          if (progressCallback) {\n            progressCallback(percent);\n          }\n          if (resolve && percent >= 100) {\n            resolve();\n          }\n        },\n      },\n      true\n    );\n\n    try {\n      files = await Promise.race([\n        ipfs?.add(this.getFileObject(filename, file), opts),\n        timeout(FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS),\n      ]);\n      await pending;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n\n    if (!files) {\n      throw new Error('Failed to upload for an unknown reason');\n    }\n    if (files instanceof Error) {\n      throw files;\n    }\n    return this.getMultiaddr(files[0]);\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileGetOptions\n  ): Promise<File> => {\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(this.isFileServed(addr), 'The file is not supported by the service');\n\n    const ipfs = this._ipfs;\n    const fileDesc = this.getFileDescription(addr);\n    const filesOrChunks = await ipfs!.get(fileDesc.cid);\n    const content = new BufferList();\n    let lastModified = 0;\n    let fileBlob: ArrayBuffer | Blob[];\n\n    if (!filesOrChunks) {\n      throw new Error('Failed to read the file');\n    }\n    if (filesOrChunks instanceof Array) {\n      const chunksLen = filesOrChunks.length;\n      let idx = 0;\n\n      while (idx < chunksLen) {\n        const chunk = filesOrChunks[idx++];\n        content.append(chunk.content);\n        lastModified = this.getMSByUnix(chunk.mtime);\n      }\n      const buff = content.slice();\n      fileBlob = buff.buffer.slice(\n        buff.byteOffset,\n        buff.byteOffset + buff.byteLength\n      );\n    } else {\n      if (!filesOrChunks.content) {\n        throw new Error(\"Failed to read the file's content\");\n      }\n      if (filesOrChunks.content instanceof Blob) {\n        fileBlob = [filesOrChunks.content];\n        if (filesOrChunks.mtime) {\n          lastModified = this.getMSByUnix(filesOrChunks.mtime);\n        }\n      } else if (typeof filesOrChunks.content === 'string') {\n        content.append(filesOrChunks.content);\n      }\n      throw new Error('Unknown content type');\n    }\n    return new File([fileBlob], fileDesc.path, {\n      lastModified: lastModified ? lastModified : undefined,\n    });\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileDownloadOptions\n  ) => {\n    const file = await this.get(addr, options);\n\n    downloadFile(file);\n  };\n\n  protected setOptions(options: IFileStorageClassProviderIPFSOptions) {\n    assert(options.ipfs, 'An instance of IPFS must be provided in the options');\n    this._ipfs = options.ipfs;\n    this._rootPath =\n      options.rootPath || FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n  }\n\n  protected getFileObject(\n    filename: string,\n    file: TFileStorageFile\n  ): FileObject {\n    const filePath = path.join('/', this._rootPath, filename);\n\n    return {\n      path: filePath,\n      content: file,\n      mtime: file instanceof File ? new Date(file.lastModified) : undefined,\n    };\n  }\n\n  protected getMultiaddr(file: IPFSFile): TFileStorageFileAddress {\n    return path.join('/ipfs/', file.hash, file.path);\n  }\n\n  protected getFileDescription(addr: TFileStorageFileAddress) {\n    const [nothing, prefix, cid, path] = addr.split('/');\n\n    assert(cid, 'Failed to get CID by the address');\n    assert(path, 'Failed to get file path by the address');\n    return {\n      cid,\n      path,\n    };\n  }\n\n  protected getMSByUnix(unix?: UnixTime): number {\n    return unix && unix.secs ? unix.secs : Date.now();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts",["2247","2248"],"import { IFileStorageService } from './filestorage-class.types';\n/**\n * status of a service\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_STATUS {\n  /**\n   * ready to use\n   */\n  READY = 'READY',\n  /**\n   * connecting to the service\n   */\n  CONNECTING = 'CONNECTING',\n  /**\n   * not ready - may be disconnected or still not connected to\n   */\n  NOT_READY = 'NOT_READY',\n  /**\n   * fault on connecting or file uploading\n   * and means that the service can't be used\n   * anymore\n   */\n  ERROR = 'ERROR',\n}\n\n/**\n * service type\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_TYPE {\n  IPFS = 'IPFS',\n  HTTP = 'HTTP',\n  // will be added in the feature\n  // AMAZONS3 = 'AMAZONS3',\n  // AZUREBLOB = 'AZUREBLOB',\n}\n\n// implementations of the services.\n// will be loaded only if required\nexport const FILE_STORAGE_SERVICES_IMPLEMENTATIONS: Record<\n  FILE_STORAGE_SERVICE_TYPE,\n  () => Promise<any> // Promise<new () => IFileStorageService<any>>\n> = {\n  [FILE_STORAGE_SERVICE_TYPE.IPFS]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-ipfs'),\n  [FILE_STORAGE_SERVICE_TYPE.HTTP]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-http'),\n};\n\nexport const FILE_STORAGE_SERVICE_PREFIX = '/file';\n\nexport const FILE_STORAGE_SERVICE_PREFIX_LENGTH =\n  FILE_STORAGE_SERVICE_PREFIX.length;\n","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts",["2249"],"import { IFileStorageClassProviderIPFSOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs';\nimport {\n  IFileStorageClassProviderHTTPFileDownloadOptions,\n  IFileStorageClassProviderHTTPOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport { IFileStorageClassProviderIPFSFileDownloadOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport { FILE_STORAGE_SERVICE_TYPE } from './filestorage-class.const';\nimport {\n  IFileStorageClassProviderIPFSFileAddOptions,\n  IFileStorageClassProviderIPFSFileGetOptions,\n} from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_SERVICE_TYPE as FileStorageServiceType,\n  FILE_STORAGE_SERVICE_STATUS as FileStorageServiceStatus,\n} from './filestorage-class.const';\n\nexport type TFileStorageServiceOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> = T extends FILE_STORAGE_SERVICE_TYPE.IPFS\n  ? IFileStorageClassProviderIPFSOptions\n  : T extends FILE_STORAGE_SERVICE_TYPE.HTTP\n  ? IFileStorageClassProviderHTTPOptions\n  : never;\n\nexport type TFileStorageServiceFileAddOptions =\n  | IFileStorageClassProviderIPFSFileAddOptions\n  | IFileStorageClassProviderHTTPFileAddOptions;\n\nexport type TFileStorageServiceFileGetOptions =\n  | IFileStorageClassProviderIPFSFileGetOptions\n  | IFileStorageClassProviderHTTPFileGetOptions;\n\nexport type TFileStorageServiceFileDownloadOptions =\n  | IFileStorageClassProviderHTTPFileDownloadOptions\n  | IFileStorageClassProviderIPFSFileDownloadOptions;\n\nexport interface IFileStorageServiceFileAddCommonOptions {\n  progress?: (progress: number) => any;\n}\n\nexport type TFileStorageFile = ArrayBuffer | Buffer | Blob | File;\n\n/**\n * multiaddr or address in the ipfs:\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66',\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66/a.txt'\n * or if http file:\n * '/http/server.com:3000/download/file.pdf',\n * '/https/upload.com/?d=f'\n */\nexport type TFileStorageFileAddress = string;\n\n/**\n * unique identifier of the service connected to,\n * may be an url or another string\n */\nexport type TFileStorageServiceIdentifier = string;\n\nexport interface IFileStorageService<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * the current status of the service\n   *\n   * @type {FileStorageServiceStatus}\n   * @memberof IFileStorageService\n   */\n  status: FileStorageServiceStatus;\n  /**\n   * type of the service\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageService\n   */\n  type: FileStorageServiceType;\n  /**\n   * unique name of the service, maybe url\n   *\n   * @type {TFileStorageServiceIdentifier}\n   * @memberof IFileStorageService\n   */\n  identifier: TFileStorageServiceIdentifier;\n  /**\n   * is only the one implementation is allowed\n   *\n   * @type {boolean}\n   * @memberof IFileStorageService\n   */\n  isSingleton: boolean;\n  /**\n   * initialize connection with the service\n   *\n   * @param {TFileStorageServiceOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorageService\n   */\n  connect(\n    options: TFileStorageServiceOptions<T>\n  ): Promise<TFileStorageServiceIdentifier>;\n  /**\n   * close connection to the service\n   *\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  close(): Promise<void>;\n  /**\n   * check whether a file with the address\n   * is served by the service.\n   *\n   * @param {TFileStorageFileAddress} addr\n   * @returns {boolean}\n   * @memberof IFileStorageService\n   */\n  isFileServed(addr: TFileStorageFileAddress): boolean;\n  /**\n   * add the file to the service\n   *\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorageService\n   */\n  add(\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageServiceFileAddCommonOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file\n   * TODO - add download progress callback\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file itself\n   * @memberof IFileStorageService\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   * @param {TFileStorageFileAddress} addr\n   * @param {TFileStorageServiceFileDownloadOptions} [options]\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n\nexport interface IFileStorageServiceConnectOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> {\n  /**\n   * type of the service provider\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  type: FileStorageServiceType;\n  /**\n   * options used be the service provider to\n   * connect to the service\n   *\n   * @type {TFileStorageServiceOptions}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  options: TFileStorageServiceOptions<T>;\n}\n\nexport interface IFileStorage<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * connect to the file upload service\n   *\n   * @param {IFileStorageServiceConnectOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorage\n   */\n  connect(\n    configurations: IFileStorageServiceConnectOptions<T>[]\n  ): Promise<TFileStorageServiceIdentifier[]>;\n  /**\n   * close the existing connection with the service\n   * have the identifier provided\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  close(serviceId: TFileStorageServiceIdentifier): Promise<void>;\n  /**\n   * add the file to the service\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier connected to,\n   * on which to upload the file\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorage\n   */\n  add(\n    service: TFileStorageServiceIdentifier | T,\n    filename: string,\n    file: TFileStorageFile,\n    options?: TFileStorageServiceFileAddOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file from the service\n   *\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [TFileStorageServiceIdentifier] service - service identifier connected to,\n   * from which to download the file. If the identifier is not provided, then\n   * it will be identified by a services connected to by the address provided.\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file donwloaded from the service\n   * @memberof IFileStorage\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   *\n   * @param {TFileStorageFileAddress} addr - file address supported by services\n   * connected to\n   * @param {TFileStorageServiceFileDownloadOptions} [options] - options which used\n   * by the service to download the file\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n","/home/paul/Projects/protocol/src/classes/filestorage-class/index.ts",[],"/home/paul/Projects/protocol/src/utils/files-utils/files-utils-size.ts",[],"/home/paul/Projects/protocol/src/utils/files-utils/index.ts",[],"/home/paul/Projects/protocol/src/app-render.tsx",[],"/home/paul/Projects/protocol/src/app.tsx",["2250","2251"],"/home/paul/Projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx",["2252","2253","2254"],"/home/paul/Projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts",["2255","2256","2257"],"import { FileStorageClassProviderIPFS } from 'classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs';\nimport { ipfsUtilsConnectBasic } from 'utils/ipfs-utils/ipfs-utils';\nimport { IFileStorageService } from '../../classes/filestorage-class/filestorage-class.types';\nimport { FileStorageClassProviderHTTP } from '../../classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http';\nimport {\n  FileStorage,\n  FILE_STORAGE_SERVICE_TYPE,\n} from 'classes/filestorage-class';\n\nexport const connectToFileStorage = async () => {\n  const ipfs = await ipfsUtilsConnectBasic();\n  const optionsIpfs = {\n    ipfs,\n  };\n  const optionsHTTP = {};\n  const fileStoreProvider = new FileStorage();\n\n  await fileStoreProvider.connect([\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.IPFS,\n      options: optionsIpfs,\n    },\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.HTTP,\n      options: optionsHTTP,\n    },\n  ]);\n  return fileStoreProvider;\n};\n","/home/paul/Projects/protocol/src/components/filestore-add-file/index.ts",[],"/home/paul/Projects/protocol/src/utils/files-utils/files-utils-download.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts",["2258","2259"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport path from 'path';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_PROVIDER_HTTP_TYPE,\n  FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER,\n} from './filestorage-class-provider-http.const';\nimport { HTTP_REQUEST_MODE } from 'classes/basic-classes/http-request-class-base';\nimport { downloadFileByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class FileStorageClassProviderHTTP\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.HTTP> {\n  public type = FILE_STORAGE_PROVIDER_HTTP_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n\n  public get status() {\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/http') || this.isBlobAddr(addr);\n  }\n\n  public async connect(options: {}) {\n    return FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n  }\n\n  public async close() {}\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: {}\n  ): Promise<TFileStorageFileAddress> => {\n    throw new Error('The HTTP provider does not supports files uploading');\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileGetOptions\n  ): Promise<File> => {\n    const urlNormalized = this.getFileURL(addr);\n    const req = new HttpRequest({\n      credentials: 'include',\n      mode: HTTP_REQUEST_MODE.CORS,\n      ...options,\n      url: urlNormalized,\n    });\n\n    return await req.send();\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileAddOptions\n  ) => {\n    const urlNormalized = this.getFileURL(addr);\n\n    downloadFileByUrl(urlNormalized);\n  };\n\n  protected isBlobAddr(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/data:');\n  }\n\n  protected getFileURL(addr: TFileStorageFileAddress): string {\n    if (this.isBlobAddr(addr)) {\n      return addr.slice(1);\n    }\n\n    const isHttps = addr.startsWith('/https');\n    const protocol = isHttps ? 'https://' : 'http://';\n    const addrWithoutPrefix = (isHttps ? addr.slice(6) : addr.slice(5)).replace(\n      /^\\W+/,\n      ''\n    );\n    const resultedUrl = `${protocol}${addrWithoutPrefix}`;\n\n    return String(new URL(resultedUrl));\n  }\n}\n","/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts",[],"/home/paul/Projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts",[],"/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts",[],"/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx",[],"/home/paul/Projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts",[],"/home/paul/Projects/protocol/src/components/connect-to-swarm/index.ts",[],"/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/index.ts",[],"/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts",[],"/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts",["2260","2261"],"/home/paul/Projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts",["2262","2263"],"/home/paul/Projects/protocol/src/components/sensitive-data-storage/index.ts",[],"/home/paul/Projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"2264"},{"ruleId":null,"fatal":true,"severity":2,"message":"2265"},{"ruleId":null,"fatal":true,"severity":2,"message":"2266"},{"ruleId":null,"fatal":true,"severity":2,"message":"2267"},{"ruleId":null,"fatal":true,"severity":2,"message":"2268"},{"ruleId":null,"fatal":true,"severity":2,"message":"2269"},{"ruleId":null,"fatal":true,"severity":2,"message":"2270"},{"ruleId":null,"fatal":true,"severity":2,"message":"2271"},{"ruleId":null,"fatal":true,"severity":2,"message":"2272"},{"ruleId":null,"fatal":true,"severity":2,"message":"2273"},{"ruleId":null,"fatal":true,"severity":2,"message":"2274"},{"ruleId":null,"fatal":true,"severity":2,"message":"2275"},{"ruleId":null,"fatal":true,"severity":2,"message":"2276"},{"ruleId":null,"fatal":true,"severity":2,"message":"2277"},{"ruleId":"2278","severity":1,"message":"2279","line":16,"column":56,"nodeType":"2280","messageId":"2281","endLine":16,"endColumn":59},{"ruleId":"2278","severity":1,"message":"2279","line":18,"column":28,"nodeType":"2280","messageId":"2281","endLine":18,"endColumn":31},{"ruleId":"2278","severity":1,"message":"2279","line":34,"column":37,"nodeType":"2280","messageId":"2281","endLine":34,"endColumn":40},{"ruleId":"2278","severity":1,"message":"2279","line":45,"column":42,"nodeType":"2280","messageId":"2281","endLine":45,"endColumn":45},{"ruleId":"2278","severity":1,"message":"2279","line":84,"column":22,"nodeType":"2280","messageId":"2281","endLine":84,"endColumn":25},{"ruleId":"2278","severity":1,"message":"2279","line":88,"column":47,"nodeType":"2280","messageId":"2281","endLine":88,"endColumn":50},{"ruleId":"2278","severity":1,"message":"2279","line":89,"column":47,"nodeType":"2280","messageId":"2281","endLine":89,"endColumn":50},{"ruleId":"2278","severity":1,"message":"2279","line":59,"column":65,"nodeType":"2280","messageId":"2281","endLine":59,"endColumn":68},{"ruleId":"2278","severity":1,"message":"2279","line":69,"column":37,"nodeType":"2280","messageId":"2281","endLine":69,"endColumn":40},{"ruleId":"2278","severity":1,"message":"2279","line":4,"column":27,"nodeType":"2280","messageId":"2281","endLine":4,"endColumn":30},{"ruleId":"2282","severity":1,"message":"2283","line":2,"column":10,"nodeType":"2284","endLine":2,"endColumn":13},{"ruleId":"2278","severity":1,"message":"2279","line":9,"column":56,"nodeType":"2280","messageId":"2281","endLine":9,"endColumn":59},{"ruleId":"2278","severity":1,"message":"2279","line":15,"column":55,"nodeType":"2280","messageId":"2281","endLine":15,"endColumn":58},{"ruleId":"2285","severity":1,"message":"2286","line":87,"column":15,"nodeType":"2287","messageId":"2288","endLine":87,"endColumn":27},{"ruleId":"2282","severity":1,"message":"2289","line":58,"column":9,"nodeType":"2284","endLine":58,"endColumn":15},{"ruleId":"2282","severity":1,"message":"2290","line":8,"column":10,"nodeType":"2284","endLine":8,"endColumn":20},{"ruleId":"2278","severity":1,"message":"2279","line":77,"column":27,"nodeType":"2280","messageId":"2281","endLine":77,"endColumn":30},{"ruleId":"2278","severity":1,"message":"2279","line":78,"column":39,"nodeType":"2280","messageId":"2281","endLine":78,"endColumn":42},{"ruleId":"2285","severity":1,"message":"2286","line":98,"column":36,"nodeType":"2287","messageId":"2288","endLine":98,"endColumn":40},{"ruleId":"2278","severity":1,"message":"2279","line":130,"column":38,"nodeType":"2280","messageId":"2281","endLine":130,"endColumn":41},{"ruleId":"2282","severity":1,"message":"2291","line":38,"column":7,"nodeType":"2284","endLine":38,"endColumn":17},{"ruleId":"2292","severity":1,"message":"2293","line":65,"column":3,"nodeType":"2294","endLine":65,"endColumn":19},{"ruleId":"2295","severity":1,"message":"2296","line":65,"column":17,"nodeType":"2297","messageId":"2298"},{"ruleId":"2282","severity":1,"message":"2299","line":3,"column":3,"nodeType":"2284","endLine":3,"endColumn":41},{"ruleId":"2282","severity":1,"message":"2300","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":39},{"ruleId":"2278","severity":1,"message":"2279","line":2,"column":7,"nodeType":"2280","messageId":"2281","endLine":2,"endColumn":10},{"ruleId":"2278","severity":1,"message":"2279","line":13,"column":12,"nodeType":"2280","messageId":"2281","endLine":13,"endColumn":15},{"ruleId":"2278","severity":1,"message":"2279","line":47,"column":28,"nodeType":"2280","messageId":"2281","endLine":47,"endColumn":31},{"ruleId":"2278","severity":1,"message":"2279","line":67,"column":28,"nodeType":"2280","messageId":"2281","endLine":67,"endColumn":31},{"ruleId":"2278","severity":1,"message":"2279","line":38,"column":58,"nodeType":"2280","messageId":"2281","endLine":38,"endColumn":61},{"ruleId":"2285","severity":1,"message":"2286","line":624,"column":19,"nodeType":"2287","messageId":"2288","endLine":624,"endColumn":40},{"ruleId":"2282","severity":1,"message":"2301","line":393,"column":9,"nodeType":"2284","endLine":393,"endColumn":21},{"ruleId":"2285","severity":1,"message":"2286","line":191,"column":14,"nodeType":"2287","messageId":"2288","endLine":191,"endColumn":47},{"ruleId":"2285","severity":1,"message":"2286","line":217,"column":26,"nodeType":"2287","messageId":"2288","endLine":217,"endColumn":76},{"ruleId":"2285","severity":1,"message":"2286","line":217,"column":26,"nodeType":"2287","messageId":"2288","endLine":217,"endColumn":75},{"ruleId":"2278","severity":1,"message":"2279","line":329,"column":17,"nodeType":"2280","messageId":"2281","endLine":329,"endColumn":20},{"ruleId":"2285","severity":1,"message":"2286","line":44,"column":14,"nodeType":"2287","messageId":"2288","endLine":44,"endColumn":19},{"ruleId":"2285","severity":1,"message":"2286","line":44,"column":14,"nodeType":"2287","messageId":"2288","endLine":44,"endColumn":18},{"ruleId":"2278","severity":1,"message":"2279","line":158,"column":29,"nodeType":"2280","messageId":"2281","endLine":158,"endColumn":32},{"ruleId":"2278","severity":1,"message":"2279","line":188,"column":29,"nodeType":"2280","messageId":"2281","endLine":188,"endColumn":32},{"ruleId":"2278","severity":1,"message":"2279","line":225,"column":20,"nodeType":"2280","messageId":"2281","endLine":225,"endColumn":23},{"ruleId":"2282","severity":1,"message":"2302","line":4,"column":10,"nodeType":"2284","endLine":4,"endColumn":30},{"ruleId":"2278","severity":1,"message":"2279","line":37,"column":32,"nodeType":"2280","messageId":"2281","endLine":37,"endColumn":35},{"ruleId":"2285","severity":1,"message":"2286","line":103,"column":13,"nodeType":"2287","messageId":"2288","endLine":103,"endColumn":23},{"ruleId":"2285","severity":1,"message":"2286","line":103,"column":13,"nodeType":"2287","messageId":"2288","endLine":103,"endColumn":22},{"ruleId":"2285","severity":1,"message":"2286","line":134,"column":13,"nodeType":"2287","messageId":"2288","endLine":134,"endColumn":23},{"ruleId":"2285","severity":1,"message":"2286","line":134,"column":13,"nodeType":"2287","messageId":"2288","endLine":134,"endColumn":22},{"ruleId":"2285","severity":1,"message":"2286","line":152,"column":30,"nodeType":"2287","messageId":"2288","endLine":152,"endColumn":40},{"ruleId":"2285","severity":1,"message":"2286","line":152,"column":30,"nodeType":"2287","messageId":"2288","endLine":152,"endColumn":39},{"ruleId":"2278","severity":1,"message":"2279","line":7,"column":18,"nodeType":"2280","messageId":"2281","endLine":7,"endColumn":21},{"ruleId":"2303","severity":1,"message":"2304","line":339,"column":21,"nodeType":"2305","messageId":"2306","endLine":348,"endColumn":16},{"ruleId":"2303","severity":1,"message":"2304","line":349,"column":22,"nodeType":"2305","messageId":"2306","endLine":352,"endColumn":16},{"ruleId":"2282","severity":1,"message":"2307","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":44},{"ruleId":"2278","severity":1,"message":"2279","line":10,"column":19,"nodeType":"2280","messageId":"2281","endLine":10,"endColumn":22},{"ruleId":"2278","severity":1,"message":"2279","line":26,"column":19,"nodeType":"2280","messageId":"2281","endLine":26,"endColumn":22},{"ruleId":"2278","severity":1,"message":"2279","line":19,"column":58,"nodeType":"2280","messageId":"2281","endLine":19,"endColumn":61},{"ruleId":"2278","severity":1,"message":"2279","line":34,"column":13,"nodeType":"2280","messageId":"2281","endLine":34,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":64,"column":13,"nodeType":"2280","messageId":"2281","endLine":64,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":87,"column":15,"nodeType":"2280","messageId":"2281","endLine":87,"endColumn":18},{"ruleId":"2282","severity":1,"message":"2308","line":11,"column":3,"nodeType":"2284","endLine":11,"endColumn":23},{"ruleId":"2278","severity":1,"message":"2279","line":217,"column":30,"nodeType":"2280","messageId":"2281","endLine":217,"endColumn":33},{"ruleId":"2278","severity":1,"message":"2279","line":250,"column":28,"nodeType":"2280","messageId":"2281","endLine":250,"endColumn":31},{"ruleId":"2278","severity":1,"message":"2279","line":16,"column":62,"nodeType":"2280","messageId":"2281","endLine":16,"endColumn":65},{"ruleId":"2278","severity":1,"message":"2279","line":27,"column":22,"nodeType":"2280","messageId":"2281","endLine":27,"endColumn":25},{"ruleId":"2278","severity":1,"message":"2279","line":72,"column":22,"nodeType":"2280","messageId":"2281","endLine":72,"endColumn":25},{"ruleId":"2278","severity":1,"message":"2279","line":73,"column":38,"nodeType":"2280","messageId":"2281","endLine":73,"endColumn":41},{"ruleId":"2278","severity":1,"message":"2279","line":119,"column":22,"nodeType":"2280","messageId":"2281","endLine":119,"endColumn":25},{"ruleId":"2278","severity":1,"message":"2279","line":133,"column":38,"nodeType":"2280","messageId":"2281","endLine":133,"endColumn":41},{"ruleId":"2278","severity":1,"message":"2279","line":6,"column":16,"nodeType":"2280","messageId":"2281","endLine":6,"endColumn":19},{"ruleId":"2282","severity":1,"message":"2309","line":30,"column":3,"nodeType":"2284","endLine":30,"endColumn":38},{"ruleId":"2278","severity":1,"message":"2279","line":66,"column":28,"nodeType":"2280","messageId":"2281","endLine":66,"endColumn":31},{"ruleId":"2285","severity":1,"message":"2286","line":116,"column":54,"nodeType":"2287","messageId":"2288","endLine":116,"endColumn":62},{"ruleId":"2295","severity":1,"message":"2310","line":171,"column":41,"nodeType":"2297","messageId":"2298"},{"ruleId":"2285","severity":1,"message":"2286","line":182,"column":21,"nodeType":"2287","messageId":"2288","endLine":182,"endColumn":34},{"ruleId":"2278","severity":1,"message":"2279","line":143,"column":14,"nodeType":"2280","messageId":"2281","endLine":143,"endColumn":17},{"ruleId":"2285","severity":1,"message":"2286","line":206,"column":31,"nodeType":"2287","messageId":"2288","endLine":206,"endColumn":43},{"ruleId":"2285","severity":1,"message":"2286","line":231,"column":35,"nodeType":"2287","messageId":"2288","endLine":231,"endColumn":56},{"ruleId":"2285","severity":1,"message":"2286","line":244,"column":34,"nodeType":"2287","messageId":"2288","endLine":244,"endColumn":46},{"ruleId":"2278","severity":1,"message":"2279","line":388,"column":39,"nodeType":"2280","messageId":"2281","endLine":388,"endColumn":42},{"ruleId":"2285","severity":1,"message":"2286","line":546,"column":10,"nodeType":"2287","messageId":"2288","endLine":546,"endColumn":38},{"ruleId":"2278","severity":1,"message":"2279","line":3,"column":42,"nodeType":"2280","messageId":"2281","endLine":3,"endColumn":45},{"ruleId":"2278","severity":1,"message":"2279","line":34,"column":71,"nodeType":"2280","messageId":"2281","endLine":34,"endColumn":74},{"ruleId":"2282","severity":1,"message":"2311","line":546,"column":38,"nodeType":"2284","endLine":546,"endColumn":44},{"ruleId":"2282","severity":1,"message":"2311","line":858,"column":38,"nodeType":"2284","endLine":858,"endColumn":44},{"ruleId":"2278","severity":1,"message":"2279","line":972,"column":34,"nodeType":"2280","messageId":"2281","endLine":972,"endColumn":37},{"ruleId":"2278","severity":1,"message":"2279","line":4,"column":28,"nodeType":"2280","messageId":"2281","endLine":4,"endColumn":31},{"ruleId":"2282","severity":1,"message":"2312","line":12,"column":3,"nodeType":"2284","endLine":12,"endColumn":20},{"ruleId":"2278","severity":1,"message":"2279","line":92,"column":44,"nodeType":"2280","messageId":"2281","endLine":92,"endColumn":47},{"ruleId":"2278","severity":1,"message":"2279","line":110,"column":38,"nodeType":"2280","messageId":"2281","endLine":110,"endColumn":41},{"ruleId":"2285","severity":1,"message":"2286","line":144,"column":26,"nodeType":"2287","messageId":"2288","endLine":144,"endColumn":39},{"ruleId":"2285","severity":1,"message":"2286","line":168,"column":26,"nodeType":"2287","messageId":"2288","endLine":168,"endColumn":39},{"ruleId":"2282","severity":1,"message":"2313","line":1,"column":8,"nodeType":"2284","endLine":1,"endColumn":17},{"ruleId":"2282","severity":1,"message":"2314","line":2,"column":10,"nodeType":"2284","endLine":2,"endColumn":26},{"ruleId":"2282","severity":1,"message":"2315","line":5,"column":3,"nodeType":"2284","endLine":5,"endColumn":70},{"ruleId":"2282","severity":1,"message":"2316","line":19,"column":3,"nodeType":"2284","endLine":19,"endColumn":64},{"ruleId":"2278","severity":1,"message":"2279","line":24,"column":40,"nodeType":"2280","messageId":"2281","endLine":24,"endColumn":43},{"ruleId":"2278","severity":1,"message":"2279","line":22,"column":20,"nodeType":"2280","messageId":"2281","endLine":22,"endColumn":23},{"ruleId":"2278","severity":1,"message":"2279","line":108,"column":38,"nodeType":"2280","messageId":"2281","endLine":108,"endColumn":41},{"ruleId":"2278","severity":1,"message":"2279","line":150,"column":46,"nodeType":"2280","messageId":"2281","endLine":150,"endColumn":49},{"ruleId":"2282","severity":1,"message":"2317","line":13,"column":10,"nodeType":"2284","endLine":13,"endColumn":26},{"ruleId":"2282","severity":1,"message":"2318","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":46},{"ruleId":"2282","severity":1,"message":"2319","line":21,"column":3,"nodeType":"2284","endLine":21,"endColumn":20},{"ruleId":"2278","severity":1,"message":"2279","line":232,"column":53,"nodeType":"2280","messageId":"2281","endLine":232,"endColumn":56},{"ruleId":"2320","severity":1,"message":"2321","line":349,"column":35,"nodeType":"2305","messageId":"2322"},{"ruleId":"2282","severity":1,"message":"2323","line":3,"column":3,"nodeType":"2284","endLine":3,"endColumn":34},{"ruleId":"2282","severity":1,"message":"2324","line":20,"column":10,"nodeType":"2284","endLine":20,"endColumn":59},{"ruleId":"2282","severity":1,"message":"2325","line":53,"column":3,"nodeType":"2284","endLine":53,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":180,"column":62,"nodeType":"2280","messageId":"2281","endLine":180,"endColumn":65},{"ruleId":"2278","severity":1,"message":"2279","line":195,"column":45,"nodeType":"2280","messageId":"2281","endLine":195,"endColumn":48},{"ruleId":"2278","severity":1,"message":"2279","line":293,"column":9,"nodeType":"2280","messageId":"2281","endLine":293,"endColumn":12},{"ruleId":"2278","severity":1,"message":"2279","line":508,"column":58,"nodeType":"2280","messageId":"2281","endLine":508,"endColumn":61},{"ruleId":"2278","severity":1,"message":"2279","line":101,"column":30,"nodeType":"2280","messageId":"2281","endLine":101,"endColumn":33},{"ruleId":"2278","severity":1,"message":"2279","line":39,"column":20,"nodeType":"2280","messageId":"2281","endLine":39,"endColumn":23},{"ruleId":"2282","severity":1,"message":"2324","line":12,"column":3,"nodeType":"2284","endLine":12,"endColumn":52},{"ruleId":"2278","severity":1,"message":"2279","line":23,"column":64,"nodeType":"2280","messageId":"2281","endLine":23,"endColumn":67},{"ruleId":"2278","severity":1,"message":"2279","line":69,"column":46,"nodeType":"2280","messageId":"2281","endLine":69,"endColumn":49},{"ruleId":"2278","severity":1,"message":"2279","line":86,"column":13,"nodeType":"2280","messageId":"2281","endLine":86,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":99,"column":13,"nodeType":"2280","messageId":"2281","endLine":99,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":152,"column":13,"nodeType":"2280","messageId":"2281","endLine":152,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":165,"column":13,"nodeType":"2280","messageId":"2281","endLine":165,"endColumn":16},{"ruleId":"2278","severity":1,"message":"2279","line":249,"column":20,"nodeType":"2280","messageId":"2281","endLine":249,"endColumn":23},{"ruleId":"2278","severity":1,"message":"2279","line":161,"column":33,"nodeType":"2280","messageId":"2281","endLine":161,"endColumn":36},{"ruleId":"2282","severity":1,"message":"2326","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":31},{"ruleId":"2278","severity":1,"message":"2279","line":54,"column":67,"nodeType":"2280","messageId":"2281","endLine":54,"endColumn":70},{"ruleId":"2278","severity":1,"message":"2279","line":305,"column":62,"nodeType":"2280","messageId":"2281","endLine":305,"endColumn":65},{"ruleId":"2285","severity":1,"message":"2286","line":307,"column":24,"nodeType":"2287","messageId":"2288","endLine":307,"endColumn":32},{"ruleId":"2285","severity":1,"message":"2286","line":325,"column":19,"nodeType":"2287","messageId":"2288","endLine":325,"endColumn":28},{"ruleId":"2278","severity":1,"message":"2279","line":328,"column":26,"nodeType":"2280","messageId":"2281","endLine":328,"endColumn":29},{"ruleId":"2278","severity":1,"message":"2279","line":339,"column":12,"nodeType":"2280","messageId":"2281","endLine":339,"endColumn":15},{"ruleId":"2278","severity":1,"message":"2279","line":366,"column":12,"nodeType":"2280","messageId":"2281","endLine":366,"endColumn":15},{"ruleId":"2278","severity":1,"message":"2279","line":503,"column":12,"nodeType":"2280","messageId":"2281","endLine":503,"endColumn":15},{"ruleId":"2285","severity":1,"message":"2286","line":615,"column":26,"nodeType":"2287","messageId":"2288","endLine":615,"endColumn":34},{"ruleId":"2278","severity":1,"message":"2279","line":41,"column":5,"nodeType":"2280","messageId":"2281","endLine":41,"endColumn":8},{"ruleId":"2278","severity":1,"message":"2279","line":43,"column":5,"nodeType":"2280","messageId":"2281","endLine":43,"endColumn":8},{"ruleId":"2278","severity":1,"message":"2279","line":85,"column":11,"nodeType":"2280","messageId":"2281","endLine":85,"endColumn":14},{"ruleId":"2285","severity":1,"message":"2286","line":95,"column":23,"nodeType":"2287","messageId":"2288","endLine":95,"endColumn":32},{"ruleId":"2285","severity":1,"message":"2286","line":101,"column":27,"nodeType":"2287","messageId":"2288","endLine":101,"endColumn":36},{"ruleId":"2278","severity":1,"message":"2279","line":101,"column":40,"nodeType":"2280","messageId":"2281","endLine":101,"endColumn":43},{"ruleId":"2282","severity":1,"message":"2327","line":4,"column":10,"nodeType":"2284","endLine":4,"endColumn":23},{"ruleId":"2295","severity":1,"message":"2328","line":163,"column":23,"nodeType":"2297","messageId":"2298"},{"ruleId":"2282","severity":1,"message":"2327","line":36,"column":10,"nodeType":"2284","endLine":36,"endColumn":23},{"ruleId":"2278","severity":1,"message":"2279","line":79,"column":24,"nodeType":"2280","messageId":"2281","endLine":79,"endColumn":27},{"ruleId":"2278","severity":1,"message":"2279","line":99,"column":40,"nodeType":"2280","messageId":"2281","endLine":99,"endColumn":43},{"ruleId":"2278","severity":1,"message":"2279","line":99,"column":50,"nodeType":"2280","messageId":"2281","endLine":99,"endColumn":53},{"ruleId":"2278","severity":1,"message":"2279","line":277,"column":22,"nodeType":"2280","messageId":"2281","endLine":277,"endColumn":25},{"ruleId":"2278","severity":1,"message":"2279","line":292,"column":42,"nodeType":"2280","messageId":"2281","endLine":292,"endColumn":45},{"ruleId":"2278","severity":1,"message":"2279","line":1060,"column":5,"nodeType":"2280","messageId":"2281","endLine":1060,"endColumn":8},{"ruleId":"2278","severity":1,"message":"2279","line":15,"column":6,"nodeType":"2280","messageId":"2281","endLine":15,"endColumn":9},{"ruleId":"2278","severity":1,"message":"2279","line":25,"column":48,"nodeType":"2280","messageId":"2281","endLine":25,"endColumn":51},{"ruleId":"2278","severity":1,"message":"2279","line":27,"column":34,"nodeType":"2280","messageId":"2281","endLine":27,"endColumn":37},{"ruleId":"2278","severity":1,"message":"2279","line":8,"column":23,"nodeType":"2280","messageId":"2281","endLine":8,"endColumn":26},{"ruleId":"2278","severity":1,"message":"2279","line":15,"column":23,"nodeType":"2280","messageId":"2281","endLine":15,"endColumn":26},{"ruleId":"2278","severity":1,"message":"2279","line":16,"column":21,"nodeType":"2280","messageId":"2281","endLine":16,"endColumn":24},{"ruleId":"2278","severity":1,"message":"2279","line":40,"column":25,"nodeType":"2280","messageId":"2281","endLine":40,"endColumn":28},{"ruleId":"2278","severity":1,"message":"2279","line":48,"column":18,"nodeType":"2280","messageId":"2281","endLine":48,"endColumn":21},{"ruleId":"2278","severity":1,"message":"2279","line":123,"column":16,"nodeType":"2280","messageId":"2281","endLine":123,"endColumn":19},{"ruleId":"2278","severity":1,"message":"2279","line":124,"column":18,"nodeType":"2280","messageId":"2281","endLine":124,"endColumn":21},{"ruleId":"2278","severity":1,"message":"2279","line":1,"column":33,"nodeType":"2280","messageId":"2281","endLine":1,"endColumn":36},{"ruleId":"2278","severity":1,"message":"2279","line":4,"column":37,"nodeType":"2280","messageId":"2281","endLine":4,"endColumn":40},{"ruleId":"2278","severity":1,"message":"2279","line":8,"column":34,"nodeType":"2280","messageId":"2281","endLine":8,"endColumn":37},{"ruleId":"2278","severity":1,"message":"2279","line":28,"column":46,"nodeType":"2280","messageId":"2281","endLine":28,"endColumn":49},{"ruleId":"2278","severity":1,"message":"2279","line":28,"column":74,"nodeType":"2280","messageId":"2281","endLine":28,"endColumn":77},{"ruleId":"2282","severity":1,"message":"2329","line":23,"column":3,"nodeType":"2284","endLine":23,"endColumn":8},{"ruleId":"2282","severity":1,"message":"2330","line":24,"column":3,"nodeType":"2284","endLine":24,"endColumn":9},{"ruleId":"2278","severity":1,"message":"2279","line":32,"column":8,"nodeType":"2280","messageId":"2281","endLine":32,"endColumn":11},{"ruleId":"2278","severity":1,"message":"2279","line":4,"column":14,"nodeType":"2280","messageId":"2281","endLine":4,"endColumn":17},{"ruleId":"2282","severity":1,"message":"2331","line":13,"column":3,"nodeType":"2284","endLine":13,"endColumn":20},{"ruleId":"2282","severity":1,"message":"2332","line":4,"column":3,"nodeType":"2284","endLine":4,"endColumn":21},{"ruleId":"2278","severity":1,"message":"2279","line":10,"column":41,"nodeType":"2280","messageId":"2281","endLine":10,"endColumn":44},{"ruleId":"2278","severity":1,"message":"2279","line":14,"column":41,"nodeType":"2280","messageId":"2281","endLine":14,"endColumn":44},{"ruleId":"2278","severity":1,"message":"2279","line":20,"column":44,"nodeType":"2280","messageId":"2281","endLine":20,"endColumn":47},{"ruleId":"2278","severity":1,"message":"2279","line":24,"column":43,"nodeType":"2280","messageId":"2281","endLine":24,"endColumn":46},{"ruleId":"2278","severity":1,"message":"2279","line":28,"column":47,"nodeType":"2280","messageId":"2281","endLine":28,"endColumn":50},{"ruleId":"2278","severity":1,"message":"2279","line":24,"column":32,"nodeType":"2280","messageId":"2281","endLine":24,"endColumn":35},{"ruleId":"2278","severity":1,"message":"2279","line":26,"column":42,"nodeType":"2280","messageId":"2281","endLine":26,"endColumn":45},{"ruleId":"2278","severity":1,"message":"2279","line":46,"column":48,"nodeType":"2280","messageId":"2281","endLine":46,"endColumn":51},{"ruleId":"2278","severity":1,"message":"2279","line":50,"column":50,"nodeType":"2280","messageId":"2281","endLine":50,"endColumn":53},{"ruleId":"2278","severity":1,"message":"2279","line":55,"column":14,"nodeType":"2280","messageId":"2281","endLine":55,"endColumn":17},{"ruleId":"2278","severity":1,"message":"2279","line":61,"column":14,"nodeType":"2280","messageId":"2281","endLine":61,"endColumn":17},{"ruleId":"2278","severity":1,"message":"2279","line":66,"column":58,"nodeType":"2280","messageId":"2281","endLine":66,"endColumn":61},{"ruleId":"2278","severity":1,"message":"2279","line":99,"column":8,"nodeType":"2280","messageId":"2281","endLine":99,"endColumn":11},{"ruleId":"2278","severity":1,"message":"2279","line":122,"column":36,"nodeType":"2280","messageId":"2281","endLine":122,"endColumn":39},{"ruleId":"2278","severity":1,"message":"2279","line":125,"column":35,"nodeType":"2280","messageId":"2281","endLine":125,"endColumn":38},{"ruleId":"2282","severity":1,"message":"2333","line":15,"column":24,"nodeType":"2284","endLine":15,"endColumn":33},{"ruleId":"2278","severity":1,"message":"2279","line":23,"column":8,"nodeType":"2280","messageId":"2281","endLine":23,"endColumn":11},{"ruleId":"2285","severity":1,"message":"2286","line":24,"column":18,"nodeType":"2287","messageId":"2288","endLine":24,"endColumn":24},{"ruleId":"2282","severity":1,"message":"2334","line":3,"column":3,"nodeType":"2284","endLine":3,"endColumn":68},{"ruleId":"2282","severity":1,"message":"2335","line":12,"column":3,"nodeType":"2284","endLine":12,"endColumn":33},{"ruleId":"2282","severity":1,"message":"2336","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":38},{"ruleId":"2282","severity":1,"message":"2337","line":2,"column":10,"nodeType":"2284","endLine":2,"endColumn":22},{"ruleId":"2278","severity":1,"message":"2279","line":7,"column":66,"nodeType":"2280","messageId":"2281","endLine":7,"endColumn":69},{"ruleId":"2278","severity":1,"message":"2279","line":25,"column":57,"nodeType":"2280","messageId":"2281","endLine":25,"endColumn":60},{"ruleId":"2278","severity":1,"message":"2279","line":35,"column":10,"nodeType":"2280","messageId":"2281","endLine":35,"endColumn":13},{"ruleId":"2285","severity":1,"message":"2286","line":112,"column":36,"nodeType":"2287","messageId":"2288","endLine":112,"endColumn":45},{"ruleId":"2285","severity":1,"message":"2286","line":157,"column":33,"nodeType":"2287","messageId":"2288","endLine":157,"endColumn":38},{"ruleId":"2282","severity":1,"message":"2338","line":232,"column":12,"nodeType":"2284","endLine":232,"endColumn":19},{"ruleId":"2282","severity":1,"message":"2339","line":232,"column":21,"nodeType":"2284","endLine":232,"endColumn":27},{"ruleId":"2282","severity":1,"message":"2340","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":29},{"ruleId":"2278","severity":1,"message":"2279","line":47,"column":17,"nodeType":"2280","messageId":"2281","endLine":47,"endColumn":20},{"ruleId":"2278","severity":1,"message":"2279","line":42,"column":36,"nodeType":"2280","messageId":"2281","endLine":42,"endColumn":39},{"ruleId":"2282","severity":1,"message":"2341","line":2,"column":10,"nodeType":"2284","endLine":2,"endColumn":26},{"ruleId":"2282","severity":1,"message":"2342","line":4,"column":10,"nodeType":"2284","endLine":4,"endColumn":30},{"ruleId":"2282","severity":1,"message":"2343","line":2,"column":10,"nodeType":"2284","endLine":2,"endColumn":37},{"ruleId":"2282","severity":1,"message":"2344","line":5,"column":3,"nodeType":"2284","endLine":5,"endColumn":20},{"ruleId":"2345","severity":1,"message":"2346","line":122,"column":9,"nodeType":"2347","endLine":127,"endColumn":10},{"ruleId":"2282","severity":1,"message":"2348","line":1,"column":10,"nodeType":"2284","endLine":1,"endColumn":38},{"ruleId":"2282","severity":1,"message":"2340","line":3,"column":10,"nodeType":"2284","endLine":3,"endColumn":29},{"ruleId":"2282","severity":1,"message":"2349","line":4,"column":10,"nodeType":"2284","endLine":4,"endColumn":38},{"ruleId":"2282","severity":1,"message":"2350","line":10,"column":8,"nodeType":"2284","endLine":10,"endColumn":12},{"ruleId":"2295","severity":1,"message":"2351","line":43,"column":24,"nodeType":"2297","messageId":"2298"},{"ruleId":"2278","severity":1,"message":"2279","line":22,"column":35,"nodeType":"2280","messageId":"2281","endLine":22,"endColumn":38},{"ruleId":"2278","severity":1,"message":"2279","line":60,"column":43,"nodeType":"2280","messageId":"2281","endLine":60,"endColumn":46},{"ruleId":"2278","severity":1,"message":"2279","line":36,"column":31,"nodeType":"2280","messageId":"2281","endLine":36,"endColumn":34},{"ruleId":"2278","severity":1,"message":"2279","line":37,"column":33,"nodeType":"2280","messageId":"2281","endLine":37,"endColumn":36},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/central-authority-identity.test/central-authority-identity.utils.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.shared.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/data-sign-test.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/encryption-test.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/error-extended-class-test.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/mocha-chai-initialize.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/swarm-message-store-test/swarm-message-store-test.const.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/swarrm-message-constructor.test/index.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/swarrm-message-constructor.test/swarrm-message-constructor.const.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/swarrm-message-constructor.test/swarrm-message-constructor.shared.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: __test__/validation-messaging.test/validate-messaging-timestamps-test.ts.\nThe file must be included in at least one of the projects provided.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-unused-vars","'any' is defined but never used.","Identifier","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'signInResult' is assigned a value but never used.","'CA_CONNECTION_STATUS' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'ISensitiveDataSessionStorageOptions' is defined but never used.","Unexpected empty method 'setOptionsSwarmConnection'.","'status' is assigned a value but never used.","'exportPasswordKey' is defined but never used.","'Multiaddr' is defined but never used.","'getLibPeerToPeer' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS' is defined but never used.","'CentralAuthority' is defined but never used.","'ISwarmMessageSubclassFieldsValidator' is defined but never used.","'ISwarmMessageBody' is defined but never used.","array-callback-return","Expected to return a value at the end of arrow function.","expectedAtEnd","'TSwarmMessageSignatureAlgorithm' is defined but never used.","'ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer' is defined but never used.","'ISwarmMessage' is defined but never used.","'ESwarmStoreEventNames' is defined but never used.","'SecretStorage' is defined but never used.","Unexpected empty async method 'load'.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'dataSignExportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'exportKey' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used.","'nothing' is assigned a value but never used.","'prefix' is assigned a value but never used.","'IFileStorageService' is defined but never used.","'FileStoreAddFile' is defined but never used.","'SensitiveDataStorage' is defined but never used.","'FILE_STORAGE_SERVICE_STATUS' is defined but never used.","'downloadFileByUrl' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FileStorageClassProviderIPFS' is defined but never used.","'FileStorageClassProviderHTTP' is defined but never used.","'path' is defined but never used.","Unexpected empty async method 'close'."]