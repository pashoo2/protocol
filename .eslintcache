[{"/home/paul/projects/protocol/docs/assets/js/main.js":"1","/home/paul/projects/protocol/docs/assets/js/search.js":"2","/home/paul/projects/protocol/module-build/index.js":"3","/home/paul/projects/protocol/module-build/module-build.js":"4","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"5","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"6","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"7","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"8","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/index.ts":"9","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts":"10","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts":"11","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts":"12","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts":"13","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts":"14","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"15","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts":"16","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts":"17","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"18","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"19","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts":"20","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"21","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"22","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"23","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"24","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"25","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"26","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"27","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"28","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts":"29","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts":"30","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"31","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"32","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts":"33","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"34","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"35","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"36","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts":"37","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts":"38","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts":"39","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/index.ts":"40","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"41","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"42","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"43","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"44","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts":"45","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"46","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts":"47","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"48","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"49","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"50","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"51","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts":"52","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"53","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts":"54","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"55","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"56","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts":"57","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"58","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"59","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"60","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"61","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts":"62","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"63","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"64","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts":"65","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"66","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"67","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts":"68","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"69","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"70","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"71","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"72","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts":"73","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"74","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts":"75","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"76","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts":"77","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"78","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"79","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"80","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"81","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts":"82","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"83","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"84","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"85","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts":"86","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts":"87","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.ts":"88","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts":"89","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.const.ts":"90","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"91","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.types.ts":"92","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts":"93","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"94","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts":"95","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"96","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"97","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"98","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts":"99","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"100","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"101","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts":"102","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"103","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"104","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts":"105","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts":"106","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts":"107","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"108","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"109","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"110","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts":"111","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"112","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"113","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts":"114","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"115","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"116","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"117","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts":"118","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"119","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"120","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts":"121","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"122","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"123","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"124","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"125","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"126","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts":"127","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"128","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"129","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts":"130","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"131","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"132","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"133","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts":"134","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts":"135","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"136","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"137","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"138","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts":"139","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts":"140","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts":"141","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"142","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"143","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts":"144","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"145","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"146","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"147","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"148","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"149","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"150","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts":"151","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts":"152","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts":"153","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"154","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts":"155","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts":"156","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"157","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts":"158","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"159","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"160","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts":"161","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"162","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"163","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts":"164","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts":"165","/home/paul/projects/protocol/src/classes/central-authority-class/index.ts":"166","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts":"167","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.ts":"168","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts":"169","/home/paul/projects/protocol/src/classes/connection-bridge/index.ts":"170","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts":"171","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts":"172","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts":"173","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts":"174","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts":"175","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts":"176","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts":"177","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts":"178","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts":"179","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts":"180","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.ts":"181","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts":"182","/home/paul/projects/protocol/src/classes/filestorage-class/index.ts":"183","/home/paul/projects/protocol/src/classes/index.ts":"184","/home/paul/projects/protocol/src/classes/open-storage/index.ts":"185","/home/paul/projects/protocol/src/classes/open-storage/open-storage.const.ts":"186","/home/paul/projects/protocol/src/classes/open-storage/open-storage.ts":"187","/home/paul/projects/protocol/src/classes/open-storage/open-storage.types.ts":"188","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/index.ts":"189","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"190","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"191","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"192","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"193","/home/paul/projects/protocol/src/classes/safe-storage-class/index.ts":"194","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"195","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts":"196","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"197","/home/paul/projects/protocol/src/classes/secret-storage-class/index.ts":"198","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts":"199","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts":"200","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"201","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"202","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts":"203","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"204","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts":"205","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"206","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"207","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts":"208","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"209","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/index.ts":"210","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts":"211","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts":"212","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts":"213","/home/paul/projects/protocol/src/classes/storage-providers/index.ts":"214","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts":"215","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"216","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"217","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts":"218","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"219","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"220","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts":"221","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"222","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.const.ts":"223","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.ts":"224","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.types.ts":"225","/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts":"226","/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"227","/home/paul/projects/protocol/src/classes/swarm-message/index.ts":"228","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts":"229","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts":"230","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts":"231","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts":"232","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts":"233","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts":"234","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts":"235","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts":"236","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts":"237","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts":"238","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts":"239","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts":"240","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts":"241","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts":"242","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts":"243","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts":"244","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts":"245","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts":"246","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts":"247","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts":"248","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts":"249","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"250","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"251","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts":"252","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"253","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"254","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts":"255","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"256","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"257","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"258","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts":"259","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"260","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"261","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"262","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts":"263","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"264","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"265","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts":"266","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"267","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"268","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"269","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"270","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts":"271","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts":"272","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts":"273","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts":"274","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts":"275","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts":"276","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts":"277","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts":"278","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts":"279","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts":"280","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts":"281","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts":"282","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts":"283","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts":"284","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts":"285","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts":"286","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts":"287","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts":"288","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts":"289","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts":"290","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts":"291","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts":"292","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts":"293","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts":"294","/home/paul/projects/protocol/src/classes/swarm-message-store/index.ts":"295","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts":"296","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts":"297","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts":"298","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts":"299","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts":"300","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts":"301","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts":"302","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts":"303","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/index.ts":"304","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-message-encrypted-cache.utils.ts":"305","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.const.ts":"306","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts":"307","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts":"308","/home/paul/projects/protocol/src/classes/swarm-store-class/index.ts":"309","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts":"310","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts":"311","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"312","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts":"313","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts":"314","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts":"315","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts":"316","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"317","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"318","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"319","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts":"320","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"321","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"322","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"323","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts":"324","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"325","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"326","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts":"327","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"328","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"329","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"330","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts":"331","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"332","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts":"333","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"334","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"335","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts":"336","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"337","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"338","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"339","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"340","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"341","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"342","/home/paul/projects/protocol/src/components/app-render.tsx":"343","/home/paul/projects/protocol/src/components/app.tsx":"344","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts":"345","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx":"346","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts":"347","/home/paul/projects/protocol/src/components/connect-to-swarm/index.ts":"348","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx":"349","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts":"350","/home/paul/projects/protocol/src/components/filestore-add-file/index.ts":"351","/home/paul/projects/protocol/src/components/sensitive-data-storage/index.ts":"352","/home/paul/projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx":"353","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-main.ts":"354","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"355","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"356","/home/paul/projects/protocol/src/const/common-date-time/index.ts":"357","/home/paul/projects/protocol/src/const/common-values/common-values-env.ts":"358","/home/paul/projects/protocol/src/const/common-values/common-values.ts":"359","/home/paul/projects/protocol/src/const/common-values/index.ts":"360","/home/paul/projects/protocol/src/const/const-api-conf.ts":"361","/home/paul/projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"362","/home/paul/projects/protocol/src/const/const-crypto-keys/index.ts":"363","/home/paul/projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"364","/home/paul/projects/protocol/src/const/const-validation-regex/index.ts":"365","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"366","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"367","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"368","/home/paul/projects/protocol/src/const/const-validation-schemes/index.ts":"369","/home/paul/projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"370","/home/paul/projects/protocol/src/const/const-validation-values/index.ts":"371","/home/paul/projects/protocol/src/const/const-values-restrictions-common.ts":"372","/home/paul/projects/protocol/src/dev.ts":"373","/home/paul/projects/protocol/src/index.ts":"374","/home/paul/projects/protocol/src/prod.ts":"375","/home/paul/projects/protocol/src/react-app-env.d.ts":"376","/home/paul/projects/protocol/src/types/channels.types.ts":"377","/home/paul/projects/protocol/src/types/common.types.ts":"378","/home/paul/projects/protocol/src/types/encryption-keys.types.ts":"379","/home/paul/projects/protocol/src/types/helper.types.ts":"380","/home/paul/projects/protocol/src/types/index.d.ts":"381","/home/paul/projects/protocol/src/types/ipfs.d.ts":"382","/home/paul/projects/protocol/src/types/ipfs.types.d.ts":"383","/home/paul/projects/protocol/src/types/libp2p-bootstrap.d.ts":"384","/home/paul/projects/protocol/src/types/libp2p-delegated-content-routing.d.ts":"385","/home/paul/projects/protocol/src/types/libp2p-delegated-peer-routing.d.ts":"386","/home/paul/projects/protocol/src/types/libp2p-gossipsub.d.ts":"387","/home/paul/projects/protocol/src/types/libp2p-kad-dht.d.ts":"388","/home/paul/projects/protocol/src/types/libp2p-mdns.d.ts":"389","/home/paul/projects/protocol/src/types/libp2p-secio.d.ts":"390","/home/paul/projects/protocol/src/types/libp2p-spdy.d.ts":"391","/home/paul/projects/protocol/src/types/libp2p-stardust.d.ts":"392","/home/paul/projects/protocol/src/types/libp2p-tcp.d.ts":"393","/home/paul/projects/protocol/src/types/libp2p-webrtc-direct.d.ts":"394","/home/paul/projects/protocol/src/types/libp2p-webrtc-star.d.ts":"395","/home/paul/projects/protocol/src/types/libp2p-websocket-star.d.ts":"396","/home/paul/projects/protocol/src/types/libp2p-websockets.d.ts":"397","/home/paul/projects/protocol/src/types/libp2p.d.ts":"398","/home/paul/projects/protocol/src/types/main.types.ts":"399","/home/paul/projects/protocol/src/types/multiaddr.d.ts":"400","/home/paul/projects/protocol/src/types/orbit-db-cache.d.ts":"401","/home/paul/projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts":"402","/home/paul/projects/protocol/src/types/orbit-db-keystore.d.ts":"403","/home/paul/projects/protocol/src/types/orbit-db-storage-adapter.d.ts":"404","/home/paul/projects/protocol/src/types/pull-mplex.d.ts":"405","/home/paul/projects/protocol/src/types/storage.types.ts":"406","/home/paul/projects/protocol/src/types/users.types.ts":"407","/home/paul/projects/protocol/src/utils/common-utils/common-utils-array.ts":"408","/home/paul/projects/protocol/src/utils/common-utils/common-utils-check-value.ts":"409","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"410","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time.ts":"411","/home/paul/projects/protocol/src/utils/common-utils/common-utils-main.ts":"412","/home/paul/projects/protocol/src/utils/common-utils/common-utils-number.ts":"413","/home/paul/projects/protocol/src/utils/common-utils/common-utils-objects.ts":"414","/home/paul/projects/protocol/src/utils/common-utils/common-utils-timer.ts":"415","/home/paul/projects/protocol/src/utils/common-utils/common-utils-url.ts":"416","/home/paul/projects/protocol/src/utils/common-utils/common-utils.ts":"417","/home/paul/projects/protocol/src/utils/common-utils/index.ts":"418","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"419","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"420","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"421","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts":"422","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts":"423","/home/paul/projects/protocol/src/utils/data-cache-utils/index.ts":"424","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"425","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"426","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts":"427","/home/paul/projects/protocol/src/utils/data-compression-utils/index.ts":"428","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"429","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts":"430","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"431","/home/paul/projects/protocol/src/utils/data-sign-utils/index.ts":"432","/home/paul/projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"433","/home/paul/projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"434","/home/paul/projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"435","/home/paul/projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"436","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"437","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts":"438","/home/paul/projects/protocol/src/utils/data-validators-utils/index.ts":"439","/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"440","/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"441","/home/paul/projects/protocol/src/utils/encryption-keys-utils/index.ts":"442","/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts":"443","/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts":"444","/home/paul/projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"445","/home/paul/projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"446","/home/paul/projects/protocol/src/utils/encryption-utils/encryption-utils.ts":"447","/home/paul/projects/protocol/src/utils/encryption-utils/index.ts":"448","/home/paul/projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"449","/home/paul/projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"450","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.const.ts":"451","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.ts":"452","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.types.ts":"453","/home/paul/projects/protocol/src/utils/files-utils/files-utils-download.ts":"454","/home/paul/projects/protocol/src/utils/files-utils/files-utils-size.ts":"455","/home/paul/projects/protocol/src/utils/files-utils/index.ts":"456","/home/paul/projects/protocol/src/utils/firebase-utils/firebase-utils.ts":"457","/home/paul/projects/protocol/src/utils/firebase-utils/index.ts":"458","/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"459","/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"460","/home/paul/projects/protocol/src/utils/hash-calculation-utils/index.ts":"461","/home/paul/projects/protocol/src/utils/identity-utils/identity-utils.ts":"462","/home/paul/projects/protocol/src/utils/identity-utils/index.ts":"463","/home/paul/projects/protocol/src/utils/index.ts":"464","/home/paul/projects/protocol/src/utils/ipfs-utils/index.ts":"465","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/index.js":"466","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.const.ts":"467","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.ts":"468","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts":"469","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts":"470","/home/paul/projects/protocol/src/utils/lazy-loading-utils/index.ts":"471","/home/paul/projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"472","/home/paul/projects/protocol/src/utils/main-utils.ts":"473","/home/paul/projects/protocol/src/utils/password-utils/decrypt.password-utils.ts":"474","/home/paul/projects/protocol/src/utils/password-utils/derive-key.password-utils.ts":"475","/home/paul/projects/protocol/src/utils/password-utils/encrypt.password-utils.ts":"476","/home/paul/projects/protocol/src/utils/password-utils/index.ts":"477","/home/paul/projects/protocol/src/utils/password-utils/password-utils.const.ts":"478","/home/paul/projects/protocol/src/utils/password-utils/password-utils.types.ts":"479","/home/paul/projects/protocol/src/utils/string-encoding-utils.ts":"480","/home/paul/projects/protocol/src/utils/string-utilities.ts":"481","/home/paul/projects/protocol/src/utils/typed-array-utils.ts":"482","/home/paul/projects/protocol/src/utils/validation-utils/index.ts":"483","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"484","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts":"485","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils.ts":"486","/home/paul/projects/protocol/src/components/database-component/database-component.tsx":"487","/home/paul/projects/protocol/src/components/database-component/index.ts":"488","/home/paul/projects/protocol/src/components/database-component/message-component/index.ts":"489","/home/paul/projects/protocol/src/components/database-component/message-component/message-component.tsx":"490"},{"size":315454,"mtime":1596130938122,"results":"491","hashOfConfig":"492"},{"size":3256798,"mtime":1596130938134,"results":"493","hashOfConfig":"492"},{"size":44,"mtime":1594985692484,"results":"494","hashOfConfig":"492"},{"size":2379,"mtime":1594985692484,"results":"495","hashOfConfig":"492"},{"size":33,"mtime":1596228865129,"results":"496","hashOfConfig":"497"},{"size":602,"mtime":1596228865129,"results":"498","hashOfConfig":"497"},{"size":43,"mtime":1596228865129,"results":"499","hashOfConfig":"497"},{"size":163,"mtime":1596228865129,"results":"500","hashOfConfig":"497"},{"size":93,"mtime":1596228865129,"results":"501","hashOfConfig":"497"},{"size":216,"mtime":1596228865129,"results":"502","hashOfConfig":"497"},{"size":3259,"mtime":1596228865129,"results":"503","hashOfConfig":"497"},{"size":1937,"mtime":1596228865129,"results":"504","hashOfConfig":"497"},{"size":561,"mtime":1596228865129,"results":"505","hashOfConfig":"497"},{"size":140,"mtime":1596228865129,"results":"506","hashOfConfig":"497"},{"size":615,"mtime":1596228865129,"results":"507","hashOfConfig":"497"},{"size":606,"mtime":1596228865129,"results":"508","hashOfConfig":"497"},{"size":52,"mtime":1596228865129,"results":"509","hashOfConfig":"497"},{"size":235,"mtime":1596228865129,"results":"510","hashOfConfig":"497"},{"size":1329,"mtime":1596228865129,"results":"511","hashOfConfig":"497"},{"size":95,"mtime":1596228865129,"results":"512","hashOfConfig":"497"},{"size":2819,"mtime":1596228865129,"results":"513","hashOfConfig":"497"},{"size":1636,"mtime":1596228865129,"results":"514","hashOfConfig":"497"},{"size":4314,"mtime":1596228865129,"results":"515","hashOfConfig":"497"},{"size":4372,"mtime":1596228865129,"results":"516","hashOfConfig":"497"},{"size":1314,"mtime":1596228865129,"results":"517","hashOfConfig":"497"},{"size":8094,"mtime":1596228865129,"results":"518","hashOfConfig":"497"},{"size":1874,"mtime":1596228865129,"results":"519","hashOfConfig":"497"},{"size":2614,"mtime":1596228865129,"results":"520","hashOfConfig":"497"},{"size":193,"mtime":1596228865129,"results":"521","hashOfConfig":"497"},{"size":89,"mtime":1596228865129,"results":"522","hashOfConfig":"497"},{"size":728,"mtime":1596228865129,"results":"523","hashOfConfig":"497"},{"size":1648,"mtime":1596228865129,"results":"524","hashOfConfig":"497"},{"size":146,"mtime":1596228865129,"results":"525","hashOfConfig":"497"},{"size":191,"mtime":1596228865129,"results":"526","hashOfConfig":"497"},{"size":2582,"mtime":1596228865129,"results":"527","hashOfConfig":"497"},{"size":978,"mtime":1596228865129,"results":"528","hashOfConfig":"497"},{"size":103,"mtime":1596228865129,"results":"529","hashOfConfig":"497"},{"size":4922,"mtime":1596228865129,"results":"530","hashOfConfig":"497"},{"size":2663,"mtime":1596228865129,"results":"531","hashOfConfig":"497"},{"size":125,"mtime":1596228865129,"results":"532","hashOfConfig":"497"},{"size":58,"mtime":1596228865129,"results":"533","hashOfConfig":"497"},{"size":2081,"mtime":1596228865129,"results":"534","hashOfConfig":"497"},{"size":216,"mtime":1596228865129,"results":"535","hashOfConfig":"497"},{"size":2025,"mtime":1596228865129,"results":"536","hashOfConfig":"497"},{"size":785,"mtime":1596228865129,"results":"537","hashOfConfig":"497"},{"size":66,"mtime":1596228865129,"results":"538","hashOfConfig":"497"},{"size":185,"mtime":1596228865129,"results":"539","hashOfConfig":"497"},{"size":3031,"mtime":1596228865129,"results":"540","hashOfConfig":"497"},{"size":900,"mtime":1596228865129,"results":"541","hashOfConfig":"497"},{"size":881,"mtime":1596228865129,"results":"542","hashOfConfig":"497"},{"size":187,"mtime":1596228865129,"results":"543","hashOfConfig":"497"},{"size":237,"mtime":1596228865129,"results":"544","hashOfConfig":"497"},{"size":1579,"mtime":1596228865129,"results":"545","hashOfConfig":"497"},{"size":81,"mtime":1596228865129,"results":"546","hashOfConfig":"497"},{"size":360,"mtime":1596228865129,"results":"547","hashOfConfig":"497"},{"size":1786,"mtime":1596228865129,"results":"548","hashOfConfig":"497"},{"size":169,"mtime":1596228865129,"results":"549","hashOfConfig":"497"},{"size":738,"mtime":1596228865129,"results":"550","hashOfConfig":"497"},{"size":224,"mtime":1596228865129,"results":"551","hashOfConfig":"497"},{"size":379,"mtime":1596228865129,"results":"552","hashOfConfig":"497"},{"size":2670,"mtime":1596228865129,"results":"553","hashOfConfig":"497"},{"size":293,"mtime":1596228865129,"results":"554","hashOfConfig":"497"},{"size":781,"mtime":1596228865129,"results":"555","hashOfConfig":"497"},{"size":1934,"mtime":1596228865129,"results":"556","hashOfConfig":"497"},{"size":157,"mtime":1596228865129,"results":"557","hashOfConfig":"497"},{"size":1081,"mtime":1596228865129,"results":"558","hashOfConfig":"497"},{"size":1962,"mtime":1596228865129,"results":"559","hashOfConfig":"497"},{"size":157,"mtime":1596228865129,"results":"560","hashOfConfig":"497"},{"size":671,"mtime":1596228865129,"results":"561","hashOfConfig":"497"},{"size":215,"mtime":1596228865129,"results":"562","hashOfConfig":"497"},{"size":340,"mtime":1596228865129,"results":"563","hashOfConfig":"497"},{"size":3790,"mtime":1596228865129,"results":"564","hashOfConfig":"497"},{"size":281,"mtime":1596228865129,"results":"565","hashOfConfig":"497"},{"size":1720,"mtime":1596228865129,"results":"566","hashOfConfig":"497"},{"size":70,"mtime":1596228865129,"results":"567","hashOfConfig":"497"},{"size":1742,"mtime":1596228865129,"results":"568","hashOfConfig":"497"},{"size":70,"mtime":1596228865129,"results":"569","hashOfConfig":"497"},{"size":684,"mtime":1596228865129,"results":"570","hashOfConfig":"497"},{"size":224,"mtime":1596228865129,"results":"571","hashOfConfig":"497"},{"size":76,"mtime":1596228865129,"results":"572","hashOfConfig":"497"},{"size":3995,"mtime":1596228865129,"results":"573","hashOfConfig":"497"},{"size":293,"mtime":1596228865129,"results":"574","hashOfConfig":"497"},{"size":1035,"mtime":1596228865129,"results":"575","hashOfConfig":"497"},{"size":7347,"mtime":1596228865129,"results":"576","hashOfConfig":"497"},{"size":2890,"mtime":1596228865129,"results":"577","hashOfConfig":"497"},{"size":185,"mtime":1596228865129,"results":"578","hashOfConfig":"497"},{"size":2194,"mtime":1596228865129,"results":"579","hashOfConfig":"497"},{"size":31632,"mtime":1596228865129,"results":"580","hashOfConfig":"497"},{"size":6538,"mtime":1596228865129,"results":"581","hashOfConfig":"497"},{"size":132,"mtime":1596228865129,"results":"582","hashOfConfig":"497"},{"size":36457,"mtime":1596228865129,"results":"583","hashOfConfig":"497"},{"size":261,"mtime":1596228865129,"results":"584","hashOfConfig":"497"},{"size":62,"mtime":1596228865129,"results":"585","hashOfConfig":"497"},{"size":20633,"mtime":1596228865129,"results":"586","hashOfConfig":"497"},{"size":83,"mtime":1596228865129,"results":"587","hashOfConfig":"497"},{"size":311,"mtime":1596228865129,"results":"588","hashOfConfig":"497"},{"size":14817,"mtime":1596228865129,"results":"589","hashOfConfig":"497"},{"size":1182,"mtime":1596228865129,"results":"590","hashOfConfig":"497"},{"size":263,"mtime":1596228865129,"results":"591","hashOfConfig":"497"},{"size":145,"mtime":1596228865129,"results":"592","hashOfConfig":"497"},{"size":4334,"mtime":1596228865133,"results":"593","hashOfConfig":"497"},{"size":151,"mtime":1596228865133,"results":"594","hashOfConfig":"497"},{"size":651,"mtime":1596228865133,"results":"595","hashOfConfig":"497"},{"size":756,"mtime":1596228865133,"results":"596","hashOfConfig":"497"},{"size":155,"mtime":1596228865133,"results":"597","hashOfConfig":"497"},{"size":231,"mtime":1596228865133,"results":"598","hashOfConfig":"497"},{"size":79,"mtime":1596228865133,"results":"599","hashOfConfig":"497"},{"size":110,"mtime":1596228865133,"results":"600","hashOfConfig":"497"},{"size":77,"mtime":1596228865133,"results":"601","hashOfConfig":"497"},{"size":75,"mtime":1596228865133,"results":"602","hashOfConfig":"497"},{"size":285,"mtime":1596228865133,"results":"603","hashOfConfig":"497"},{"size":717,"mtime":1596228865133,"results":"604","hashOfConfig":"497"},{"size":306,"mtime":1596228865133,"results":"605","hashOfConfig":"497"},{"size":346,"mtime":1596228865133,"results":"606","hashOfConfig":"497"},{"size":385,"mtime":1596228865133,"results":"607","hashOfConfig":"497"},{"size":333,"mtime":1596228865133,"results":"608","hashOfConfig":"497"},{"size":130,"mtime":1596228865133,"results":"609","hashOfConfig":"497"},{"size":186,"mtime":1596228865133,"results":"610","hashOfConfig":"497"},{"size":26103,"mtime":1596228865133,"results":"611","hashOfConfig":"497"},{"size":3760,"mtime":1596228865133,"results":"612","hashOfConfig":"497"},{"size":115,"mtime":1596228865133,"results":"613","hashOfConfig":"497"},{"size":758,"mtime":1596228865133,"results":"614","hashOfConfig":"497"},{"size":868,"mtime":1596228865133,"results":"615","hashOfConfig":"497"},{"size":181,"mtime":1596228865133,"results":"616","hashOfConfig":"497"},{"size":192,"mtime":1596228865133,"results":"617","hashOfConfig":"497"},{"size":1300,"mtime":1596228865133,"results":"618","hashOfConfig":"497"},{"size":123,"mtime":1596228865133,"results":"619","hashOfConfig":"497"},{"size":579,"mtime":1596228865133,"results":"620","hashOfConfig":"497"},{"size":4415,"mtime":1596228865133,"results":"621","hashOfConfig":"497"},{"size":111,"mtime":1596228865133,"results":"622","hashOfConfig":"497"},{"size":900,"mtime":1596228865133,"results":"623","hashOfConfig":"497"},{"size":19491,"mtime":1596228865133,"results":"624","hashOfConfig":"497"},{"size":2065,"mtime":1596228865133,"results":"625","hashOfConfig":"497"},{"size":224,"mtime":1596228865133,"results":"626","hashOfConfig":"497"},{"size":70,"mtime":1596228865133,"results":"627","hashOfConfig":"497"},{"size":1588,"mtime":1596228865133,"results":"628","hashOfConfig":"497"},{"size":15836,"mtime":1596228865133,"results":"629","hashOfConfig":"497"},{"size":3718,"mtime":1596228865133,"results":"630","hashOfConfig":"497"},{"size":248,"mtime":1596228865133,"results":"631","hashOfConfig":"497"},{"size":78,"mtime":1596228865133,"results":"632","hashOfConfig":"497"},{"size":126,"mtime":1596228865133,"results":"633","hashOfConfig":"497"},{"size":16199,"mtime":1596228865133,"results":"634","hashOfConfig":"497"},{"size":1944,"mtime":1596228865133,"results":"635","hashOfConfig":"497"},{"size":135,"mtime":1596228865133,"results":"636","hashOfConfig":"497"},{"size":3963,"mtime":1596228865133,"results":"637","hashOfConfig":"497"},{"size":3616,"mtime":1596228865133,"results":"638","hashOfConfig":"497"},{"size":7635,"mtime":1596228865133,"results":"639","hashOfConfig":"497"},{"size":4936,"mtime":1596228865133,"results":"640","hashOfConfig":"497"},{"size":453,"mtime":1596228865133,"results":"641","hashOfConfig":"497"},{"size":310,"mtime":1596228865133,"results":"642","hashOfConfig":"497"},{"size":365,"mtime":1596228865133,"results":"643","hashOfConfig":"497"},{"size":3256,"mtime":1596228865133,"results":"644","hashOfConfig":"497"},{"size":255,"mtime":1596228865133,"results":"645","hashOfConfig":"497"},{"size":14855,"mtime":1596228865133,"results":"646","hashOfConfig":"497"},{"size":206,"mtime":1596228865133,"results":"647","hashOfConfig":"497"},{"size":117,"mtime":1596228865133,"results":"648","hashOfConfig":"497"},{"size":3800,"mtime":1596228865133,"results":"649","hashOfConfig":"497"},{"size":65,"mtime":1596228865133,"results":"650","hashOfConfig":"497"},{"size":665,"mtime":1596228865133,"results":"651","hashOfConfig":"497"},{"size":4724,"mtime":1596228865133,"results":"652","hashOfConfig":"497"},{"size":129,"mtime":1596228865133,"results":"653","hashOfConfig":"497"},{"size":1589,"mtime":1596228865133,"results":"654","hashOfConfig":"497"},{"size":504,"mtime":1596228865133,"results":"655","hashOfConfig":"497"},{"size":115,"mtime":1596228865133,"results":"656","hashOfConfig":"497"},{"size":180,"mtime":1596228865133,"results":"657","hashOfConfig":"497"},{"size":243,"mtime":1596228865133,"results":"658","hashOfConfig":"497"},{"size":2291,"mtime":1596229427362,"results":"659","hashOfConfig":"497"},{"size":17959,"mtime":1596229427362,"results":"660","hashOfConfig":"497"},{"size":5611,"mtime":1596229427362,"results":"661","hashOfConfig":"497"},{"size":37,"mtime":1596228865133,"results":"662","hashOfConfig":"497"},{"size":252,"mtime":1596228865133,"results":"663","hashOfConfig":"497"},{"size":2827,"mtime":1596228865133,"results":"664","hashOfConfig":"497"},{"size":403,"mtime":1596228865133,"results":"665","hashOfConfig":"497"},{"size":296,"mtime":1596228865133,"results":"666","hashOfConfig":"497"},{"size":352,"mtime":1596228865133,"results":"667","hashOfConfig":"497"},{"size":7138,"mtime":1596228865133,"results":"668","hashOfConfig":"497"},{"size":1533,"mtime":1596228865133,"results":"669","hashOfConfig":"497"},{"size":296,"mtime":1596228865133,"results":"670","hashOfConfig":"497"},{"size":51,"mtime":1596228865133,"results":"671","hashOfConfig":"497"},{"size":1371,"mtime":1596228865133,"results":"672","hashOfConfig":"497"},{"size":5084,"mtime":1596228865133,"results":"673","hashOfConfig":"497"},{"size":8365,"mtime":1596228865133,"results":"674","hashOfConfig":"497"},{"size":125,"mtime":1596228865133,"results":"675","hashOfConfig":"497"},{"size":381,"mtime":1596228865133,"results":"676","hashOfConfig":"497"},{"size":110,"mtime":1596228865133,"results":"677","hashOfConfig":"497"},{"size":46,"mtime":1596228865133,"results":"678","hashOfConfig":"497"},{"size":5218,"mtime":1596228865133,"results":"679","hashOfConfig":"497"},{"size":1237,"mtime":1596229427362,"results":"680","hashOfConfig":"497"},{"size":165,"mtime":1596228865133,"results":"681","hashOfConfig":"497"},{"size":839,"mtime":1596228865133,"results":"682","hashOfConfig":"497"},{"size":15598,"mtime":1596228865133,"results":"683","hashOfConfig":"497"},{"size":3120,"mtime":1596228865133,"results":"684","hashOfConfig":"497"},{"size":514,"mtime":1596228865133,"results":"685","hashOfConfig":"497"},{"size":128,"mtime":1596228865133,"results":"686","hashOfConfig":"497"},{"size":1490,"mtime":1596228865133,"results":"687","hashOfConfig":"497"},{"size":32729,"mtime":1596228865133,"results":"688","hashOfConfig":"497"},{"size":1469,"mtime":1596228865133,"results":"689","hashOfConfig":"497"},{"size":181,"mtime":1596228865133,"results":"690","hashOfConfig":"497"},{"size":160,"mtime":1596228865133,"results":"691","hashOfConfig":"497"},{"size":111,"mtime":1596228865137,"results":"692","hashOfConfig":"497"},{"size":298,"mtime":1596228865137,"results":"693","hashOfConfig":"497"},{"size":1497,"mtime":1596228865137,"results":"694","hashOfConfig":"497"},{"size":51,"mtime":1596228865137,"results":"695","hashOfConfig":"497"},{"size":1440,"mtime":1596228865137,"results":"696","hashOfConfig":"497"},{"size":55,"mtime":1596228865137,"results":"697","hashOfConfig":"497"},{"size":563,"mtime":1596228865137,"results":"698","hashOfConfig":"497"},{"size":363,"mtime":1596228865137,"results":"699","hashOfConfig":"497"},{"size":31210,"mtime":1596228865137,"results":"700","hashOfConfig":"497"},{"size":4225,"mtime":1596229427362,"results":"701","hashOfConfig":"497"},{"size":50,"mtime":1596228865137,"results":"702","hashOfConfig":"497"},{"size":198,"mtime":1596228865137,"results":"703","hashOfConfig":"497"},{"size":4903,"mtime":1596228865137,"results":"704","hashOfConfig":"497"},{"size":1186,"mtime":1596228865137,"results":"705","hashOfConfig":"497"},{"size":325,"mtime":1596228865137,"results":"706","hashOfConfig":"497"},{"size":111,"mtime":1596228865137,"results":"707","hashOfConfig":"497"},{"size":80,"mtime":1596228865137,"results":"708","hashOfConfig":"497"},{"size":6259,"mtime":1596228865137,"results":"709","hashOfConfig":"497"},{"size":119,"mtime":1596228865137,"results":"710","hashOfConfig":"497"},{"size":216,"mtime":1596228865137,"results":"711","hashOfConfig":"497"},{"size":7065,"mtime":1596228865137,"results":"712","hashOfConfig":"497"},{"size":57,"mtime":1596228865137,"results":"713","hashOfConfig":"497"},{"size":3103,"mtime":1596228865137,"results":"714","hashOfConfig":"497"},{"size":1153,"mtime":1596228865137,"results":"715","hashOfConfig":"497"},{"size":643,"mtime":1596228865137,"results":"716","hashOfConfig":"497"},{"size":2034,"mtime":1596229427362,"results":"717","hashOfConfig":"497"},{"size":59,"mtime":1596228865137,"results":"718","hashOfConfig":"497"},{"size":3122,"mtime":1596228865137,"results":"719","hashOfConfig":"497"},{"size":234,"mtime":1596228865137,"results":"720","hashOfConfig":"497"},{"size":2057,"mtime":1596228865137,"results":"721","hashOfConfig":"497"},{"size":14053,"mtime":1596228865137,"results":"722","hashOfConfig":"497"},{"size":8959,"mtime":1596228865137,"results":"723","hashOfConfig":"497"},{"size":157,"mtime":1596228865137,"results":"724","hashOfConfig":"497"},{"size":105,"mtime":1596228865137,"results":"725","hashOfConfig":"497"},{"size":7139,"mtime":1596228865137,"results":"726","hashOfConfig":"497"},{"size":2532,"mtime":1596228865137,"results":"727","hashOfConfig":"497"},{"size":173,"mtime":1596228865137,"results":"728","hashOfConfig":"497"},{"size":76,"mtime":1596228865137,"results":"729","hashOfConfig":"497"},{"size":11327,"mtime":1596228865137,"results":"730","hashOfConfig":"497"},{"size":4943,"mtime":1596228865137,"results":"731","hashOfConfig":"497"},{"size":313,"mtime":1596228865137,"results":"732","hashOfConfig":"497"},{"size":226,"mtime":1596228865137,"results":"733","hashOfConfig":"497"},{"size":714,"mtime":1596228865137,"results":"734","hashOfConfig":"497"},{"size":163,"mtime":1596228865137,"results":"735","hashOfConfig":"497"},{"size":308,"mtime":1596228865137,"results":"736","hashOfConfig":"497"},{"size":773,"mtime":1596228865137,"results":"737","hashOfConfig":"497"},{"size":165,"mtime":1596228865137,"results":"738","hashOfConfig":"497"},{"size":129,"mtime":1596228865137,"results":"739","hashOfConfig":"497"},{"size":832,"mtime":1596228865137,"results":"740","hashOfConfig":"497"},{"size":203,"mtime":1596228865137,"results":"741","hashOfConfig":"497"},{"size":551,"mtime":1596228865137,"results":"742","hashOfConfig":"497"},{"size":54,"mtime":1596228865137,"results":"743","hashOfConfig":"497"},{"size":201,"mtime":1596228865137,"results":"744","hashOfConfig":"497"},{"size":552,"mtime":1596228865137,"results":"745","hashOfConfig":"497"},{"size":53,"mtime":1596228865137,"results":"746","hashOfConfig":"497"},{"size":275,"mtime":1596228865137,"results":"747","hashOfConfig":"497"},{"size":494,"mtime":1596228865137,"results":"748","hashOfConfig":"497"},{"size":2310,"mtime":1596228865137,"results":"749","hashOfConfig":"497"},{"size":249,"mtime":1596228865137,"results":"750","hashOfConfig":"497"},{"size":281,"mtime":1596228865137,"results":"751","hashOfConfig":"497"},{"size":803,"mtime":1596228865137,"results":"752","hashOfConfig":"497"},{"size":1917,"mtime":1596228865137,"results":"753","hashOfConfig":"497"},{"size":214,"mtime":1596228865137,"results":"754","hashOfConfig":"497"},{"size":175,"mtime":1596228865137,"results":"755","hashOfConfig":"497"},{"size":890,"mtime":1596228865137,"results":"756","hashOfConfig":"497"},{"size":49,"mtime":1596228865137,"results":"757","hashOfConfig":"497"},{"size":299,"mtime":1596228865137,"results":"758","hashOfConfig":"497"},{"size":260,"mtime":1596228865137,"results":"759","hashOfConfig":"497"},{"size":1914,"mtime":1596228865137,"results":"760","hashOfConfig":"497"},{"size":60,"mtime":1596228865137,"results":"761","hashOfConfig":"497"},{"size":13939,"mtime":1596228865137,"results":"762","hashOfConfig":"497"},{"size":3837,"mtime":1596228865137,"results":"763","hashOfConfig":"497"},{"size":151,"mtime":1596228865137,"results":"764","hashOfConfig":"497"},{"size":6686,"mtime":1596228865137,"results":"765","hashOfConfig":"497"},{"size":1544,"mtime":1596228865137,"results":"766","hashOfConfig":"497"},{"size":760,"mtime":1596228865137,"results":"767","hashOfConfig":"497"},{"size":3561,"mtime":1596228865137,"results":"768","hashOfConfig":"497"},{"size":2165,"mtime":1596228865137,"results":"769","hashOfConfig":"497"},{"size":271,"mtime":1596228865137,"results":"770","hashOfConfig":"497"},{"size":109,"mtime":1596228865137,"results":"771","hashOfConfig":"497"},{"size":189,"mtime":1596228865137,"results":"772","hashOfConfig":"497"},{"size":206,"mtime":1596228865137,"results":"773","hashOfConfig":"497"},{"size":117,"mtime":1596228865137,"results":"774","hashOfConfig":"497"},{"size":209,"mtime":1596228865137,"results":"775","hashOfConfig":"497"},{"size":210,"mtime":1596228865137,"results":"776","hashOfConfig":"497"},{"size":115,"mtime":1596228865137,"results":"777","hashOfConfig":"497"},{"size":201,"mtime":1596228865137,"results":"778","hashOfConfig":"497"},{"size":212,"mtime":1596228865137,"results":"779","hashOfConfig":"497"},{"size":123,"mtime":1596228865137,"results":"780","hashOfConfig":"497"},{"size":221,"mtime":1596228865137,"results":"781","hashOfConfig":"497"},{"size":216,"mtime":1596228865137,"results":"782","hashOfConfig":"497"},{"size":159,"mtime":1596228865141,"results":"783","hashOfConfig":"497"},{"size":99,"mtime":1596228865141,"results":"784","hashOfConfig":"497"},{"size":713,"mtime":1596228865141,"results":"785","hashOfConfig":"497"},{"size":199,"mtime":1596228865141,"results":"786","hashOfConfig":"497"},{"size":177,"mtime":1596228865137,"results":"787","hashOfConfig":"497"},{"size":125,"mtime":1596228865137,"results":"788","hashOfConfig":"497"},{"size":52,"mtime":1596228865137,"results":"789","hashOfConfig":"497"},{"size":3511,"mtime":1596228865137,"results":"790","hashOfConfig":"497"},{"size":72,"mtime":1596228865137,"results":"791","hashOfConfig":"497"},{"size":4724,"mtime":1596228865137,"results":"792","hashOfConfig":"497"},{"size":1566,"mtime":1596230527577,"results":"793","hashOfConfig":"497"},{"size":19412,"mtime":1596233084046,"results":"794","hashOfConfig":"497"},{"size":7675,"mtime":1596229427362,"results":"795","hashOfConfig":"497"},{"size":105,"mtime":1596228865141,"results":"796","hashOfConfig":"497"},{"size":2914,"mtime":1596228865141,"results":"797","hashOfConfig":"497"},{"size":316,"mtime":1596228865141,"results":"798","hashOfConfig":"497"},{"size":6539,"mtime":1596229427362,"results":"799","hashOfConfig":"497"},{"size":4123,"mtime":1596229427362,"results":"800","hashOfConfig":"497"},{"size":168,"mtime":1596228865141,"results":"801","hashOfConfig":"497"},{"size":3630,"mtime":1596232458553,"results":"802","hashOfConfig":"497"},{"size":23162,"mtime":1596229427362,"results":"803","hashOfConfig":"497"},{"size":10823,"mtime":1596229427362,"results":"804","hashOfConfig":"497"},{"size":50,"mtime":1596228865141,"results":"805","hashOfConfig":"497"},{"size":226,"mtime":1596228865141,"results":"806","hashOfConfig":"497"},{"size":534,"mtime":1596228865141,"results":"807","hashOfConfig":"497"},{"size":245,"mtime":1596228865141,"results":"808","hashOfConfig":"497"},{"size":270,"mtime":1596228865141,"results":"809","hashOfConfig":"497"},{"size":7024,"mtime":1596228865141,"results":"810","hashOfConfig":"497"},{"size":2057,"mtime":1596228865141,"results":"811","hashOfConfig":"497"},{"size":218,"mtime":1596228865141,"results":"812","hashOfConfig":"497"},{"size":1238,"mtime":1596229427362,"results":"813","hashOfConfig":"497"},{"size":28207,"mtime":1596233084358,"results":"814","hashOfConfig":"497"},{"size":4818,"mtime":1596233084418,"results":"815","hashOfConfig":"497"},{"size":161,"mtime":1596228865141,"results":"816","hashOfConfig":"497"},{"size":126,"mtime":1596228865141,"results":"817","hashOfConfig":"497"},{"size":2905,"mtime":1596228865141,"results":"818","hashOfConfig":"497"},{"size":218,"mtime":1596228865141,"results":"819","hashOfConfig":"497"},{"size":157,"mtime":1596228865141,"results":"820","hashOfConfig":"497"},{"size":677,"mtime":1596228865141,"results":"821","hashOfConfig":"497"},{"size":1470,"mtime":1596228865141,"results":"822","hashOfConfig":"497"},{"size":73,"mtime":1596228865141,"results":"823","hashOfConfig":"497"},{"size":792,"mtime":1596228865141,"results":"824","hashOfConfig":"497"},{"size":155,"mtime":1596228865141,"results":"825","hashOfConfig":"497"},{"size":3803,"mtime":1596228865141,"results":"826","hashOfConfig":"497"},{"size":205,"mtime":1596228865141,"results":"827","hashOfConfig":"497"},{"size":287,"mtime":1596228865141,"results":"828","hashOfConfig":"497"},{"size":542,"mtime":1596228865141,"results":"829","hashOfConfig":"497"},{"size":9243,"mtime":1596228865141,"results":"830","hashOfConfig":"497"},{"size":286,"mtime":1596228865141,"results":"831","hashOfConfig":"497"},{"size":1178,"mtime":1596228865141,"results":"832","hashOfConfig":"497"},{"size":38686,"mtime":1596233084714,"results":"833","hashOfConfig":"497"},{"size":1740,"mtime":1596228865141,"results":"834","hashOfConfig":"497"},{"size":260,"mtime":1596228865141,"results":"835","hashOfConfig":"497"},{"size":439,"mtime":1596228865141,"results":"836","hashOfConfig":"497"},{"size":2568,"mtime":1596231902358,"results":"837","hashOfConfig":"497"},{"size":10801,"mtime":1596233084849,"results":"838","hashOfConfig":"497"},{"size":709,"mtime":1596228865141,"results":"839","hashOfConfig":"497"},{"size":122,"mtime":1596228865141,"results":"840","hashOfConfig":"497"},{"size":4077,"mtime":1596228865141,"results":"841","hashOfConfig":"497"},{"size":1044,"mtime":1596228865141,"results":"842","hashOfConfig":"497"},{"size":38,"mtime":1596228865141,"results":"843","hashOfConfig":"497"},{"size":42,"mtime":1596228865141,"results":"844","hashOfConfig":"497"},{"size":1397,"mtime":1596228865141,"results":"845","hashOfConfig":"497"},{"size":72,"mtime":1596228865141,"results":"846","hashOfConfig":"497"},{"size":434,"mtime":1596228865141,"results":"847","hashOfConfig":"497"},{"size":54,"mtime":1596228865141,"results":"848","hashOfConfig":"497"},{"size":148,"mtime":1596228865141,"results":"849","hashOfConfig":"497"},{"size":27,"mtime":1596228865141,"results":"850","hashOfConfig":"497"},{"size":228,"mtime":1596228865141,"results":"851","hashOfConfig":"497"},{"size":71,"mtime":1596228865141,"results":"852","hashOfConfig":"497"},{"size":78,"mtime":1596228865141,"results":"853","hashOfConfig":"497"},{"size":206,"mtime":1596228865141,"results":"854","hashOfConfig":"497"},{"size":37,"mtime":1596228865141,"results":"855","hashOfConfig":"497"},{"size":1749,"mtime":1596228865141,"results":"856","hashOfConfig":"497"},{"size":49,"mtime":1596228865141,"results":"857","hashOfConfig":"497"},{"size":1713,"mtime":1596228865141,"results":"858","hashOfConfig":"497"},{"size":480,"mtime":1596228865141,"results":"859","hashOfConfig":"497"},{"size":56,"mtime":1596228865141,"results":"860","hashOfConfig":"497"},{"size":153,"mtime":1596228865141,"results":"861","hashOfConfig":"497"},{"size":1262,"mtime":1596228865141,"results":"862","hashOfConfig":"497"},{"size":58,"mtime":1596228865141,"results":"863","hashOfConfig":"497"},{"size":592,"mtime":1596228865141,"results":"864","hashOfConfig":"497"},{"size":113,"mtime":1596228865141,"results":"865","hashOfConfig":"497"},{"size":113,"mtime":1596232195468,"results":"866","hashOfConfig":"497"},{"size":27,"mtime":1596228865141,"results":"867","hashOfConfig":"497"},{"size":40,"mtime":1596228865141,"results":"868","hashOfConfig":"497"},{"size":534,"mtime":1596228865141,"results":"869","hashOfConfig":"497"},{"size":163,"mtime":1596228865141,"results":"870","hashOfConfig":"497"},{"size":215,"mtime":1596228865141,"results":"871","hashOfConfig":"497"},{"size":838,"mtime":1596228865141,"results":"872","hashOfConfig":"497"},{"size":385,"mtime":1596228865141,"results":"873","hashOfConfig":"497"},{"size":23,"mtime":1596228865141,"results":"874","hashOfConfig":"497"},{"size":11616,"mtime":1596228865141,"results":"875","hashOfConfig":"497"},{"size":35,"mtime":1596228865141,"results":"876","hashOfConfig":"497"},{"size":51,"mtime":1596228865141,"results":"877","hashOfConfig":"497"},{"size":48,"mtime":1596228865141,"results":"878","hashOfConfig":"497"},{"size":35,"mtime":1596228865141,"results":"879","hashOfConfig":"497"},{"size":33,"mtime":1596228865141,"results":"880","hashOfConfig":"497"},{"size":1466,"mtime":1596229427366,"results":"881","hashOfConfig":"497"},{"size":31,"mtime":1596228865141,"results":"882","hashOfConfig":"497"},{"size":30,"mtime":1596228865141,"results":"883","hashOfConfig":"497"},{"size":256,"mtime":1596228865141,"results":"884","hashOfConfig":"497"},{"size":237,"mtime":1596228865141,"results":"885","hashOfConfig":"497"},{"size":88,"mtime":1596228865141,"results":"886","hashOfConfig":"497"},{"size":37,"mtime":1596228865141,"results":"887","hashOfConfig":"497"},{"size":40,"mtime":1596228865141,"results":"888","hashOfConfig":"497"},{"size":274,"mtime":1596228865141,"results":"889","hashOfConfig":"497"},{"size":25,"mtime":1596228865141,"results":"890","hashOfConfig":"497"},{"size":393,"mtime":1596228865141,"results":"891","hashOfConfig":"497"},{"size":28,"mtime":1596228865141,"results":"892","hashOfConfig":"497"},{"size":2965,"mtime":1596228865145,"results":"893","hashOfConfig":"497"},{"size":261,"mtime":1596228865145,"results":"894","hashOfConfig":"497"},{"size":1233,"mtime":1596228865145,"results":"895","hashOfConfig":"497"},{"size":43,"mtime":1596228865145,"results":"896","hashOfConfig":"497"},{"size":29,"mtime":1596228865145,"results":"897","hashOfConfig":"497"},{"size":199,"mtime":1596229427366,"results":"898","hashOfConfig":"497"},{"size":338,"mtime":1596228865145,"results":"899","hashOfConfig":"497"},{"size":3371,"mtime":1596228865145,"results":"900","hashOfConfig":"497"},{"size":72,"mtime":1596228865145,"results":"901","hashOfConfig":"497"},{"size":2441,"mtime":1596228865145,"results":"902","hashOfConfig":"497"},{"size":266,"mtime":1596228865145,"results":"903","hashOfConfig":"497"},{"size":70,"mtime":1596228865145,"results":"904","hashOfConfig":"497"},{"size":453,"mtime":1596228865145,"results":"905","hashOfConfig":"497"},{"size":1540,"mtime":1596228865145,"results":"906","hashOfConfig":"497"},{"size":345,"mtime":1596228865145,"results":"907","hashOfConfig":"497"},{"size":527,"mtime":1596228865145,"results":"908","hashOfConfig":"497"},{"size":38,"mtime":1596228865145,"results":"909","hashOfConfig":"497"},{"size":404,"mtime":1596228865145,"results":"910","hashOfConfig":"497"},{"size":66,"mtime":1596228865145,"results":"911","hashOfConfig":"497"},{"size":3866,"mtime":1596228865145,"results":"912","hashOfConfig":"497"},{"size":178,"mtime":1596228865145,"results":"913","hashOfConfig":"497"},{"size":176,"mtime":1596228865145,"results":"914","hashOfConfig":"497"},{"size":89,"mtime":1596228865145,"results":"915","hashOfConfig":"497"},{"size":91,"mtime":1596228865145,"results":"916","hashOfConfig":"497"},{"size":532,"mtime":1596228865145,"results":"917","hashOfConfig":"497"},{"size":63,"mtime":1596228865145,"results":"918","hashOfConfig":"497"},{"size":50,"mtime":1596228865145,"results":"919","hashOfConfig":"497"},{"size":142,"mtime":1596228865145,"results":"920","hashOfConfig":"497"},{"size":1750,"mtime":1596228865145,"results":"921","hashOfConfig":"497"},{"size":136,"mtime":1596228865145,"results":"922","hashOfConfig":"497"},{"size":2250,"mtime":1596228865145,"results":"923","hashOfConfig":"497"},{"size":303,"mtime":1596228865145,"results":"924","hashOfConfig":"497"},{"size":13200,"mtime":1596228865145,"results":"925","hashOfConfig":"497"},{"size":497,"mtime":1596228865145,"results":"926","hashOfConfig":"497"},{"size":1992,"mtime":1596228865145,"results":"927","hashOfConfig":"497"},{"size":2317,"mtime":1596228865145,"results":"928","hashOfConfig":"497"},{"size":986,"mtime":1596228865145,"results":"929","hashOfConfig":"497"},{"size":48,"mtime":1596228865145,"results":"930","hashOfConfig":"497"},{"size":90,"mtime":1596228865145,"results":"931","hashOfConfig":"497"},{"size":281,"mtime":1596228865145,"results":"932","hashOfConfig":"497"},{"size":6713,"mtime":1596228865145,"results":"933","hashOfConfig":"497"},{"size":89,"mtime":1596228865145,"results":"934","hashOfConfig":"497"},{"size":1920,"mtime":1596228865145,"results":"935","hashOfConfig":"497"},{"size":2301,"mtime":1596228865145,"results":"936","hashOfConfig":"497"},{"size":2307,"mtime":1596228865145,"results":"937","hashOfConfig":"497"},{"size":4384,"mtime":1596228865145,"results":"938","hashOfConfig":"497"},{"size":141,"mtime":1596228865145,"results":"939","hashOfConfig":"497"},{"size":405,"mtime":1596228865145,"results":"940","hashOfConfig":"497"},{"size":10164,"mtime":1596228865145,"results":"941","hashOfConfig":"497"},{"size":153,"mtime":1596228865145,"results":"942","hashOfConfig":"497"},{"size":186,"mtime":1596228865145,"results":"943","hashOfConfig":"497"},{"size":3133,"mtime":1596228865145,"results":"944","hashOfConfig":"497"},{"size":132,"mtime":1596228865145,"results":"945","hashOfConfig":"497"},{"size":778,"mtime":1596228865145,"results":"946","hashOfConfig":"497"},{"size":633,"mtime":1596228865145,"results":"947","hashOfConfig":"497"},{"size":77,"mtime":1596228865145,"results":"948","hashOfConfig":"497"},{"size":547,"mtime":1596228865145,"results":"949","hashOfConfig":"497"},{"size":34,"mtime":1596228865145,"results":"950","hashOfConfig":"497"},{"size":400,"mtime":1596228865145,"results":"951","hashOfConfig":"497"},{"size":1478,"mtime":1596228865145,"results":"952","hashOfConfig":"497"},{"size":91,"mtime":1596228865145,"results":"953","hashOfConfig":"497"},{"size":75,"mtime":1596228865145,"results":"954","hashOfConfig":"497"},{"size":34,"mtime":1596228865145,"results":"955","hashOfConfig":"497"},{"size":672,"mtime":1596228865145,"results":"956","hashOfConfig":"497"},{"size":67,"mtime":1596142287416,"results":"957","hashOfConfig":"958"},{"size":81,"mtime":1596142634503,"results":"959","hashOfConfig":"958"},{"size":348,"mtime":1596142287416,"results":"960","hashOfConfig":"958"},{"size":8741,"mtime":1596142287416,"results":"961","hashOfConfig":"958"},{"size":1986,"mtime":1596142287416,"results":"962","hashOfConfig":"958"},{"size":799,"mtime":1596142287416,"results":"963","hashOfConfig":"958"},{"size":38,"mtime":1596228865145,"results":"964","hashOfConfig":"497"},{"size":560,"mtime":1596228865145,"results":"965","hashOfConfig":"497"},{"size":718,"mtime":1596228865145,"results":"966","hashOfConfig":"497"},{"size":3088,"mtime":1596228865145,"results":"967","hashOfConfig":"497"},{"size":5878,"mtime":1596228865145,"results":"968","hashOfConfig":"497"},{"size":2876,"mtime":1596228865145,"results":"969","hashOfConfig":"497"},{"size":213,"mtime":1596228865145,"results":"970","hashOfConfig":"497"},{"size":2246,"mtime":1596228865145,"results":"971","hashOfConfig":"497"},{"size":473,"mtime":1596228865145,"results":"972","hashOfConfig":"497"},{"size":575,"mtime":1596228865145,"results":"973","hashOfConfig":"497"},{"size":462,"mtime":1596228865145,"results":"974","hashOfConfig":"497"},{"size":3985,"mtime":1596228865145,"results":"975","hashOfConfig":"497"},{"size":137,"mtime":1596228865145,"results":"976","hashOfConfig":"497"},{"size":1042,"mtime":1596228865145,"results":"977","hashOfConfig":"497"},{"size":564,"mtime":1596228865145,"results":"978","hashOfConfig":"497"},{"size":1175,"mtime":1596228865145,"results":"979","hashOfConfig":"497"},{"size":4425,"mtime":1596233084901,"results":"980","hashOfConfig":"497"},{"size":38,"mtime":1596229427366,"results":"981","hashOfConfig":"497"},{"size":37,"mtime":1596229427366,"results":"982","hashOfConfig":"497"},{"size":743,"mtime":1596233084933,"results":"983","hashOfConfig":"497"},{"filePath":"984","messages":"985","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"5wmogl",{"filePath":"986","messages":"987","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"988","messages":"989","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"990","messages":"991","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xi6z5p",{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1006"},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043"},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1089"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1116"},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1123","messages":"1124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156"},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159"},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1166"},{"filePath":"1167","messages":"1168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1169","messages":"1170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1171","messages":"1172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1173","messages":"1174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1175"},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1182"},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1189"},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1194","messages":"1195","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196"},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1199"},{"filePath":"1200","messages":"1201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206"},{"filePath":"1207","messages":"1208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1209","messages":"1210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1211","messages":"1212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1213"},{"filePath":"1214","messages":"1215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1216","messages":"1217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1218","messages":"1219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1220","messages":"1221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1224","messages":"1225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1226","messages":"1227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1230","messages":"1231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1232","messages":"1233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1234","messages":"1235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1236","messages":"1237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1238","messages":"1239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1242","messages":"1243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1244"},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1247"},{"filePath":"1248","messages":"1249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1250","messages":"1251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1252","messages":"1253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1254","messages":"1255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1256","messages":"1257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1258","messages":"1259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1260"},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1263","messages":"1264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1265","messages":"1266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1269","messages":"1270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1271","messages":"1272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1273","messages":"1274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1275","messages":"1276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1277","messages":"1278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1279","messages":"1280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1281","messages":"1282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1283","messages":"1284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1285","messages":"1286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1287","messages":"1288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1289","messages":"1290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1291","messages":"1292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1293","messages":"1294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1295","messages":"1296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1297","messages":"1298","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1299"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302"},{"filePath":"1303","messages":"1304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1305","messages":"1306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1307","messages":"1308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1309","messages":"1310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1311","messages":"1312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1313","messages":"1314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1315","messages":"1316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1317","messages":"1318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1319"},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1328","messages":"1329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1330","messages":"1331","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1332"},{"filePath":"1333","messages":"1334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1335","messages":"1336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1337","messages":"1338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1339"},{"filePath":"1340","messages":"1341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1342","messages":"1343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1344","messages":"1345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1346","messages":"1347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1348","messages":"1349","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1350","messages":"1351","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1352","messages":"1353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1354","messages":"1355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1356","messages":"1357","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1358"},{"filePath":"1359","messages":"1360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1361","messages":"1362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1363","messages":"1364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1365","messages":"1366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1367"},{"filePath":"1368","messages":"1369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1370","messages":"1371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1372","messages":"1373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1374","messages":"1375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1376"},{"filePath":"1377","messages":"1378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1379","messages":"1380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1381"},{"filePath":"1382","messages":"1383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1384","messages":"1385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1386","messages":"1387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1388","messages":"1389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1390","messages":"1391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1392","messages":"1393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1394","messages":"1395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1396","messages":"1397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1398","messages":"1399","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1400"},{"filePath":"1401","messages":"1402","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1403"},{"filePath":"1404","messages":"1405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1406","messages":"1407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1408","messages":"1409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1410","messages":"1411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1412"},{"filePath":"1413","messages":"1414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1415","messages":"1416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1417","messages":"1418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1419","messages":"1420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1421","messages":"1422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1423","messages":"1424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1425","messages":"1426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1429"},{"filePath":"1430","messages":"1431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1432","messages":"1433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1434","messages":"1435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1436","messages":"1437","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1438"},{"filePath":"1439","messages":"1440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1441","messages":"1442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1443","messages":"1444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1445","messages":"1446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1447"},{"filePath":"1448","messages":"1449","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1450"},{"filePath":"1451","messages":"1452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1453","messages":"1454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1455","messages":"1456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1457","messages":"1458","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1459"},{"filePath":"1460","messages":"1461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1462","messages":"1463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1464","messages":"1465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1466","messages":"1467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1468","messages":"1469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1470","messages":"1471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1472","messages":"1473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1474","messages":"1475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1476","messages":"1477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1478","messages":"1479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1480","messages":"1481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1482","messages":"1483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1484","messages":"1485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1486","messages":"1487","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1488"},{"filePath":"1489","messages":"1490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1491","messages":"1492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1493","messages":"1494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1495"},{"filePath":"1496","messages":"1497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1498"},{"filePath":"1499","messages":"1500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1501","messages":"1502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1503","messages":"1504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1505","messages":"1506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1507"},{"filePath":"1508","messages":"1509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1510","messages":"1511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1512","messages":"1513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1514","messages":"1515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1516","messages":"1517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1518","messages":"1519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1520","messages":"1521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1522","messages":"1523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1524","messages":"1525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1526","messages":"1527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1528","messages":"1529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1530","messages":"1531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1532","messages":"1533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1534","messages":"1535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1536","messages":"1537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1538","messages":"1539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1540","messages":"1541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1542","messages":"1543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1544","messages":"1545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1546","messages":"1547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1548","messages":"1549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1550","messages":"1551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1552","messages":"1553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1554","messages":"1555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1556","messages":"1557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1558","messages":"1559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1560","messages":"1561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1562","messages":"1563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1564","messages":"1565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1566","messages":"1567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1568","messages":"1569","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1570"},{"filePath":"1571","messages":"1572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1573","messages":"1574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1575","messages":"1576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1577","messages":"1578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1579","messages":"1580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1581","messages":"1582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1583","messages":"1584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1585","messages":"1586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1587","messages":"1588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1589","messages":"1590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1591","messages":"1592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1593","messages":"1594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1595","messages":"1596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1597","messages":"1598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1599","messages":"1600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1601","messages":"1602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1603","messages":"1604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1605","messages":"1606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1607","messages":"1608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1609","messages":"1610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1611","messages":"1612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1613","messages":"1614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1615","messages":"1616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1617"},{"filePath":"1618","messages":"1619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1620","messages":"1621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1622","messages":"1623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1624","messages":"1625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1626","messages":"1627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1628","messages":"1629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1630","messages":"1631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1632","messages":"1633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1634","messages":"1635","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1636","messages":"1637","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1638","messages":"1639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1640","messages":"1641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1642","messages":"1643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1644","messages":"1645","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1646","messages":"1647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1648","messages":"1649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1650","messages":"1651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1652","messages":"1653","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1654","messages":"1655","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1656","messages":"1657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1658","messages":"1659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1660","messages":"1661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1662","messages":"1663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1664","messages":"1665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1666","messages":"1667","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1668"},{"filePath":"1669","messages":"1670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1671","messages":"1672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1673","messages":"1674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1675","messages":"1676","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1677","messages":"1678","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1679","messages":"1680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1681","messages":"1682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1683","messages":"1684","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1685"},{"filePath":"1686","messages":"1687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1688","messages":"1689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1690","messages":"1691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1692","messages":"1693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1694","messages":"1695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1696","messages":"1697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1698","messages":"1699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1700","messages":"1701","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1702"},{"filePath":"1703","messages":"1704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1705","messages":"1706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1707","messages":"1708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1709","messages":"1710","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1711"},{"filePath":"1712","messages":"1713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1714","messages":"1715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1716","messages":"1717","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1718","messages":"1719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1720","messages":"1721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1722","messages":"1723","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1724"},{"filePath":"1725","messages":"1726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1727","messages":"1728","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1729","messages":"1730","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1731"},{"filePath":"1732","messages":"1733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1734","messages":"1735","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1736"},{"filePath":"1737","messages":"1738","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1739"},{"filePath":"1740","messages":"1741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1742","messages":"1743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1744","messages":"1745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1746","messages":"1747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1748","messages":"1749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1750","messages":"1751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1752","messages":"1753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1754","messages":"1755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1756","messages":"1757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1758","messages":"1759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1760","messages":"1761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1762","messages":"1763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1764","messages":"1765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1766","messages":"1767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1768","messages":"1769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1770","messages":"1771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1772","messages":"1773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1774","messages":"1775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1776","messages":"1777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1778","messages":"1779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1780","messages":"1781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1782","messages":"1783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1784","messages":"1785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1786","messages":"1787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1788","messages":"1789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1790","messages":"1791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1792","messages":"1793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1794","messages":"1795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1796","messages":"1797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1798","messages":"1799","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1800"},{"filePath":"1801","messages":"1802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1803","messages":"1804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1805","messages":"1806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1807","messages":"1808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1809","messages":"1810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1811","messages":"1812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1815","messages":"1816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1817","messages":"1818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1819","messages":"1820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1821","messages":"1822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1823","messages":"1824","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1825"},{"filePath":"1826","messages":"1827","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1828"},{"filePath":"1829","messages":"1830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1831","messages":"1832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1833","messages":"1834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1835","messages":"1836","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1837"},{"filePath":"1838","messages":"1839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1840","messages":"1841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1842","messages":"1843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1844","messages":"1845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1846","messages":"1847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1848","messages":"1849","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1850"},{"filePath":"1851","messages":"1852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1853","messages":"1854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1855","messages":"1856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1857","messages":"1858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1859","messages":"1860","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1861"},{"filePath":"1862","messages":"1863","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1864"},{"filePath":"1865","messages":"1866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1867","messages":"1868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1869","messages":"1870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1871","messages":"1872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1873","messages":"1874","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1875"},{"filePath":"1876","messages":"1877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1878","messages":"1879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1880","messages":"1881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1882","messages":"1883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1884","messages":"1885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1886","messages":"1887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1888","messages":"1889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1890","messages":"1891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1892","messages":"1893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1894","messages":"1895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1896","messages":"1897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1898","messages":"1899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1900","messages":"1901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1902","messages":"1903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1904","messages":"1905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1906","messages":"1907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1908","messages":"1909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1910","messages":"1911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1912","messages":"1913","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1914"},{"filePath":"1915","messages":"1916","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1917"},{"filePath":"1918","messages":"1919","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1920"},{"filePath":"1921","messages":"1922","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1923"},{"filePath":"1924","messages":"1925","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1926"},{"filePath":"1927","messages":"1928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1929","messages":"1930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1931","messages":"1932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1933","messages":"1934","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1935"},{"filePath":"1936","messages":"1937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1938","messages":"1939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1940","messages":"1941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1942","messages":"1943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1944","messages":"1945","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1946"},{"filePath":"1947","messages":"1948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1949","messages":"1950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1951","messages":"1952","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1953"},{"filePath":"1954","messages":"1955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1956","messages":"1957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1958","messages":"1959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1960","messages":"1961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1962","messages":"1963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1964","messages":"1965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1966","messages":"1967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1968","messages":"1969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1970","messages":"1971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1972","messages":"1973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1974","messages":"1975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1976","messages":"1977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1978","messages":"1979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1980","messages":"1981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1982","messages":"1983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1984","messages":"1985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"slcij1",{"filePath":"1986","messages":"1987","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1988","messages":"1989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1990","messages":"1991","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1992"},{"filePath":"1993","messages":"1994","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1995"},{"filePath":"1996","messages":"1997","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1998"},{"filePath":"1999","messages":"2000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2001","messages":"2002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2003","messages":"2004","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2005","messages":"2006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2007","messages":"2008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2009","messages":"2010","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2011"},{"filePath":"2012","messages":"2013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2014","messages":"2015","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2016"},{"filePath":"2017","messages":"2018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2019","messages":"2020","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2021"},{"filePath":"2022","messages":"2023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2024","messages":"2025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2026","messages":"2027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2028","messages":"2029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2030","messages":"2031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2032","messages":"2033","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2034"},{"filePath":"2035","messages":"2036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2037","messages":"2038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2039","messages":"2040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2041","messages":"2042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/protocol/docs/assets/js/main.js",["2043"],"/home/paul/projects/protocol/docs/assets/js/search.js",["2044"],"/home/paul/projects/protocol/module-build/index.js",["2045"],"/home/paul/projects/protocol/module-build/module-build.js",["2046"],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts",["2047","2048","2049","2050","2051","2052","2053"],"import { ASYNC_QUEUE_BASE_CLASS_OPTIONS } from './async-queue-class-base.const';\nimport { extend } from '../../../utils/common-utils/common-utils-objects';\nimport {\n  TAsyncQueueBaseClassPromiseProviderPending,\n  TAsyncQueueBaseClassPromiseProvider,\n} from './async-queue-class-base.types';\nimport {\n  TAsyncQueueBaseClass,\n  IAsyncQueueBaseClassOptions,\n} from './async-queue-class-base.types';\nimport { getRun } from './async-queue-class-base.utils';\nimport { delay } from '../../../utils/common-utils/common-utils-timer';\nimport { TAsyncQueueBaseClassPromiseProviderBatch } from './async-queue-class-base.types';\n\nexport class AsyncQueueClassBase extends TAsyncQueueBaseClass {\n  protected queue: TAsyncQueueBaseClassPromiseProvider<any>[] = [];\n\n  protected batch: Promise<any[]> | void = undefined;\n\n  protected runPromiseProvider?: ReturnType<typeof getRun>;\n\n  constructor(options?: Partial<IAsyncQueueBaseClassOptions>) {\n    super(\n      extend(\n        options || {},\n        ASYNC_QUEUE_BASE_CLASS_OPTIONS\n      ) as IAsyncQueueBaseClassOptions\n    );\n    this.runPromiseProvider = getRun(this.options.promiseTimeout);\n  }\n\n  public do = async <T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | (T extends any[] ? Array<T | Error> : never)> => {\n    return new Promise((res) => {\n      this.queue.push(() => {\n        return this.createPromise<T>(promiseProvider)\n          .then(res)\n          .catch(res);\n      });\n      this.start();\n    });\n  };\n\n  protected async createBatch(): Promise<any[]> {\n    if (!this.queue.length) {\n      return [];\n    }\n\n    const { options } = this;\n    const promisePendingBatch = this.queue.splice(0, options.batchSize);\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    return Promise.all(\n      promisePendingBatch.map(this.runPromiseProvider)\n    ).catch((err) => new Array(promisePendingBatch.length).fill(err)); // fill with an error if the batch was rejected\n  }\n\n  protected start = async () => {\n    if (this.batch) {\n      return;\n    }\n    if (!this.queue.length) {\n      return;\n    }\n    this.batch = this.createBatch();\n    try {\n      await this.batch;\n    } catch (err) {\n      console.error('AsyncQueueClassBase::error');\n      console.error(err);\n    }\n\n    const { delayMs } = this.options;\n\n    await delay(delayMs);\n    this.batch = undefined;\n    this.start();\n  };\n\n  protected isBatch<T>(\n    promiseProvider: any\n  ): promiseProvider is TAsyncQueueBaseClassPromiseProviderBatch<T> {\n    return promiseProvider instanceof Array;\n  }\n  protected createPromise<T>(promiseProvider: any): Promise<T | Error>;\n  protected createPromise<T>(promiseProvider: any[]): Promise<Array<T | Error>>;\n  protected createPromise<T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<Array<T | Error> | T | Error> {\n    let result;\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    if (this.isBatch<T>(promiseProvider)) {\n      result = Promise.all(promiseProvider.map(this.runPromiseProvider));\n    } else {\n      result = this.runPromiseProvider(promiseProvider);\n    }\n    this.start();\n    return result;\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts",["2054","2055"],"export interface IAsyncQueueBaseClassOptions {\n  /**\n   * a number of promises in one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  batchSize: number;\n  /**\n   * timeout for a one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  promiseTimeout: number;\n  /**\n   * a delay between executing of a two batches\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  delayMs: number;\n}\n\nexport type TAsyncQueueBaseClassPromiseProvider<T> = () => Promise<T>;\n\nexport type TAsyncQueueBaseClassPromiseProviderBatch<\n  T\n> = TAsyncQueueBaseClassPromiseProvider<T>[];\n\nexport type TAsyncQueueBaseClassPromiseProviderPending<T> =\n  | TAsyncQueueBaseClassPromiseProvider<T>\n  | TAsyncQueueBaseClassPromiseProviderBatch<T>;\n\nexport interface IAsyncQueueBaseClass {\n  /**\n   * resolve promises provided in queue\n   *\n   * @template T\n   * @param {Promise<T>[]} pending\n   * @returns {(Promise<T | Error>)}\n   * @memberof IAsyncQueueBaseClass\n   */\n  do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderBatch<T>\n  ): Promise<Array<T | Error> | Error>;\n  do<T>(pending: TAsyncQueueBaseClassPromiseProvider<T>): Promise<T | Error>;\n}\n\nexport abstract class TAsyncQueueBaseClass implements IAsyncQueueBaseClass {\n  /**\n   * queue of promises pending\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract queue: TAsyncQueueBaseClassPromiseProvider<any>[];\n\n  /**\n   * the currently executing batch of a promises\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract batch: Promise<any[]> | void;\n\n  constructor(protected options: IAsyncQueueBaseClassOptions) {}\n\n  public abstract async do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | Array<T | Error>>;\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts",["2056"],"import { TAsyncQueueBaseClassPromiseProvider } from './async-queue-class-base.types';\nimport { timeout } from '../../../utils/common-utils/common-utils-timer';\n\nconst returnError = (res: any) => {\n  return res instanceof Error ? res : new Error(String(res));\n};\n\nexport const getRun = (timeoutMs: number) => <T>(\n  promiseProvider: TAsyncQueueBaseClassPromiseProvider<T>\n): Promise<T | Error> => {\n  try {\n    return Promise.race([promiseProvider(), timeout(timeoutMs)]).catch(\n      returnError\n    );\n  } catch (err) {\n    return Promise.resolve(err);\n  }\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["2057","2058","2059"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["2060"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["2061"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\nimport { getFilenameByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected getHeader(name: string) {\n    return this.response.headers.get(name);\n  }\n\n  protected getFileNameByResponse(extension?: string | null) {\n    const contentDisposition = this.getHeader('content-disposition');\n    let fileName = '' as string | undefined;\n\n    if (contentDisposition) {\n      const fileNameMatch = /filename=\"(.+)\"/.exec(contentDisposition);\n\n      if (fileNameMatch?.length === 2) fileName = fileNameMatch[1];\n    }\n    if (!fileName) {\n      fileName = getFilenameByUrl(this.response.url);\n    }\n\n    if (extension) {\n      return fileName && fileName.endsWith(extension)\n        ? fileName\n        : `${fileName}.${extension}`;\n    }\n    return fileName;\n  }\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File(\n          [result],\n          this.getFileNameByResponse(extension) || 'unknown',\n          {\n            type: mimeType || undefined,\n          }\n        );\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["2062","2063"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["2064","2065"],"import validator from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!validator.isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!validator.isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!validator.isURL(url)) {\n      this.baseUrl = '';\n      try {\n        new URL(url); // maybe it's data url\n      } catch (err) {\n        return new Error('The url is not valid');\n      }\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["2066"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  if (urlTrimmed.startsWith('data:')) {\n    return urlTrimmed;\n  }\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["2067","2068"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\nimport { ISensitiveDataSessionStorage } from 'classes/sensitive-data-session-storage/sensitive-data-session-storage.types';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport type TCentralAuthorityUserLogin = string;\n\nexport type TCentralAuthorityUserPassword = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: TCentralAuthorityUserLogin;\n  password?: TCentralAuthorityUserPassword;\n  session?: ISensitiveDataSessionStorage;\n}\n\nexport type TCentralAuthorityUserAuthCredentialsWithPwd = Required<\n  Pick<ICentralAuthorityUserAuthCredentials, 'login' | 'password'>\n>;\n\n/**\n * this credentials used to authorize the user on a central authority\n * provider service and getting access to a local data encrypted.\n * The secret login property used to encrypt some part of a local data\n * and may be empty. If it's empty then user identity value will be used\n * for encryption. But it may take no effect cause it is public value\n * in most cases.\n */\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME]?: string;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor() {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["2069"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["2070"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["2071"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["2072","2073","2074"],"import { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from './../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const {\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authorityProviderURI,\n  } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["2075"],"import {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n  ICAIdentityCommonInstance,\n  TUserIdentityVersion,\n  TCAUserIdentityRawTypes,\n} from './central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from '../central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentitySilent } from '../central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { parseIdentity } from './central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers';\nimport { serializeIdentity } from './central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n  CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER,\n} from './central-authority-class-user-identity.const';\nimport { CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME } from '../central-authority-class-const/central-authority-class-const';\n\nexport class CentralAuthorityIdentity implements ICAIdentityCommonInstance {\n  protected _userIdentitySerialized?: Error | TCentralAuthorityUserIdentity;\n\n  protected _userIdentityParsed?: Error | ICAUserUniqueIdentifierDescription;\n\n  public isValid?: boolean;\n\n  constructor(protected _userIdentity: TCAUserIdentityRawTypes) {\n    if (_userIdentity instanceof CentralAuthorityIdentity) {\n      return _userIdentity;\n    }\n    if (!_userIdentity) {\n      return;\n    }\n\n    let identity = _userIdentity;\n\n    if (typeof _userIdentity === 'object') {\n      //check may be it is a crypto credentials object\n      const identityVal = ((_userIdentity as unknown) as any)[\n        CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME\n      ];\n\n      if (typeof identityVal === 'string') {\n        identity = identityVal;\n      }\n    }\n    if (validateUserIdentitySilent(identity)) {\n      this.parseUserIdentity(identity);\n    } else {\n      const userIdentityDescription = this.extendDescriptionWithVersion(\n        identity as ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n      );\n\n      this.serializeUserIdentityDescription(userIdentityDescription);\n    }\n  }\n\n  protected extendDescriptionWithVersion(\n    _userIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ): ICAUserUniqueIdentifierDescription {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = _userIdentityDescription;\n\n    if (!version) {\n      // extend the description with the\n      // current version\n      const result = {\n        ..._userIdentityDescription,\n        [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSION_CURRENT,\n      };\n\n      this._userIdentity = result;\n      return result as ICAUserUniqueIdentifierDescription;\n    }\n    return _userIdentityDescription as ICAUserUniqueIdentifierDescription;\n  }\n\n  public get identityDescription(): ICAUserUniqueIdentifierDescription | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentityParsed } = this;\n\n    if (!_userIdentityParsed) {\n      return new Error('Failed to parse the user identity');\n    }\n    return _userIdentityParsed;\n  }\n\n  public get identityDescritptionSerialized():\n    | TCentralAuthorityUserIdentity\n    | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentitySerialized } = this;\n\n    if (!_userIdentitySerialized) {\n      return new Error('Failed to serialize the user identity');\n    }\n    return _userIdentitySerialized;\n  }\n\n  /**\n   * uniquely identifies the user\n   */\n  public get id(): string | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { authorityProviderURI, userUniqueIdentifier } = this\n      .identityDescription as ICAUserUniqueIdentifierDescription;\n\n    return `${authorityProviderURI}${CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER}${userUniqueIdentifier}`;\n  }\n\n  public get version(): TUserIdentityVersion | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    return (((this.identityDescription as ICAUserUniqueIdentifierDescription)\n      .version ||\n      CA_USER_IDENTITY_VERSION_CURRENT) as unknown) as TUserIdentityVersion;\n  }\n\n  public toString(): TCentralAuthorityUserIdentity {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return '';\n    }\n    return this.identityDescritptionSerialized as string;\n  }\n\n  protected checkUserIdentityDescriptionIsValid = (): Error | void => {\n    const { _userIdentitySerialized, isValid, _userIdentityParsed } = this;\n    let err: Error | void;\n\n    if (!isValid) {\n      err = new Error('The identity is not valid');\n    }\n    if (!_userIdentityParsed) {\n      err = new Error('There is no user identity parsed');\n    }\n    if (_userIdentityParsed instanceof Error) {\n      err = _userIdentityParsed;\n    }\n    if (!_userIdentitySerialized) {\n      err = new Error('The identity description serialized is not defined');\n    }\n    if (_userIdentitySerialized instanceof Error) {\n      err = _userIdentitySerialized;\n    }\n    if (err instanceof Error) {\n      console.error(err);\n      return err;\n    }\n  };\n\n  protected setIdentityIsValid(): void {\n    if (this.isValid !== false) {\n      this.isValid = true;\n    }\n  }\n\n  protected parseUserIdentity(\n    userIdentity: TCentralAuthorityUserIdentity\n  ): void {\n    if (userIdentity) {\n      const parsedUserIdentity = parseIdentity(userIdentity);\n      if (parsedUserIdentity instanceof Error) {\n        console.error(parsedUserIdentity);\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = new Error(\n          'Failed to parse the user identity'\n        );\n      } else {\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = userIdentity;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identity serialized is not defined');\n\n      this._userIdentityParsed = err;\n      this._userIdentitySerialized = err;\n    }\n    this.isValid = false;\n  }\n\n  protected serializeUserIdentityDescription(\n    userIdentityDescription: ICAUserUniqueIdentifierDescription\n  ) {\n    if (userIdentityDescription) {\n      const serializedDescription = serializeIdentity(userIdentityDescription);\n\n      if (serializedDescription instanceof Error) {\n        this._userIdentityParsed = new Error(\n          'Failed to serialize the user identity description'\n        );\n        this._userIdentitySerialized = serializedDescription;\n      } else {\n        this._userIdentityParsed = userIdentityDescription;\n        this._userIdentitySerialized = serializedDescription;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identifier description is not defined');\n\n      this._userIdentitySerialized = err;\n      this._userIdentityParsed = err;\n    }\n    this.isValid = false;\n  }\n}\n\nexport default CentralAuthorityIdentity;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.ts",["2076"],"import { checkIsError } from '../../utils/common-utils/common-utils-check-value';\nimport { dataCachingUtilsCachingDecorator } from '../../utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator';\nimport { validateVerboseBySchema } from './../../utils/validation-utils/validation-utils';\nimport { getErrorScopedClass } from './../basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base';\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserIdentity,\n} from './central-authority-class-types/central-authority-class-types-common';\nimport { TCentralAuthorityUserCryptoCredentials } from './central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  TCAUserIdentityRawTypes,\n  TCAuthProviderIdentifier,\n} from './central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport {\n  CENTRAL_AUTHORITY_CLASS_ERRORS_PREFIX,\n  CENTRAL_AUTHORITY_CLASS_OPTIONS_SCHEMA,\n  CENTRAL_AUTHORITY_CLASS_SWARM_CREDENTIALS_STORAGE_DB_NAME,\n  CENTRAL_AUTHORITY_CLASS_SWARM_CREDENTIALS_SWARM_USERS_CREDENTIALS_CACHE_CAPACITY,\n} from './central-authority-class.const';\nimport {\n  ICentralAuthority,\n  ICentralAuthorityAuthProvidersOptions,\n  ICentralAuthorityOptions,\n  ICentralAuthorityUser,\n} from './central-authority-class.types';\nimport { CAConnectionsPool } from './central-authority-connections/central-authority-connections-pool/central-authority-connections-pool';\nimport {\n  ICAConnectionPool,\n  ICAConnectionPoolAuthResult,\n  ICAConnectionsPoolOptions,\n} from './central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types';\nimport {\n  ICAConnectionSignUpCredentials,\n  TCAAuthProviderIdentity,\n} from './central-authority-connections/central-authority-connections.types';\nimport { CentralAuthorityStorageCurrentUserCredentials } from './central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials';\nimport {\n  ICAStorageCurrentUserCredentials,\n  ICAStorageCurrentUserCredentialsOptions,\n} from './central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types';\nimport { CASwarmCredentialsProvider } from './central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider';\nimport {\n  ICASwarmCredentialsProvider,\n  ICASwarmCredentialsProviderOptions,\n} from './central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types';\nimport {\n  compareCryptoCredentials,\n  exportCryptoCredentialsToString,\n} from './central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  getDataEncryptionKeyPairByCryptoCredentials,\n  getDataEncryptionPubKeyByCryptoCredentials,\n  getDataSignKeyPairByCryptoCredentials,\n  getDataSignPubKeyByCryptoCredentials,\n  getUserIdentityFromCryptoCredentials,\n} from './central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys';\nimport { checkIsValidCryptoCredentials } from './central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\nconst CAError = getErrorScopedClass(CENTRAL_AUTHORITY_CLASS_ERRORS_PREFIX);\n\n/**\n * Used to get and approve the\n * user's credentials stored by\n * an authorization provider.\n * It's necessary to allow each user\n * can connect and get info from\n * all authorization providers.\n * This class used to authorize the user\n * in the SWARM. User must register on one of\n * authority providers services with a\n * public credentials which used by another\n * to authorize the user and approve him\n * to access on the data.\n *\n * @export\n * @class CentralAuthority\n */\nexport class CentralAuthority implements ICentralAuthority {\n  public get isRunning(): boolean {\n    return this.isRunningInstance;\n  }\n\n  protected isRunningInstance: boolean = false;\n  /**\n   * an identity of auth provider the user is authorized on\n   *\n   * @protected\n   * @type {TCAuthProviderIdentifier}\n   * @memberof CentralAuthority\n   */\n  protected authProviderId?: TCAuthProviderIdentifier;\n  /**\n   * crypto credentials of the user, for the auth provider\n   * the user is authorized on\n   *\n   * @protected\n   * @type {TCentralAuthorityUserCryptoCredentials}\n   * @memberof CentralAuthority\n   */\n  protected remoteProvidedUserCryptoCredntials?: TCentralAuthorityUserCryptoCredentials;\n  protected locallyStoredUserCryptoCredntials?: TCentralAuthorityUserCryptoCredentials;\n  protected userProfileOnAuthService?: ICentralAuthorityUserProfile;\n  protected authProvidersPoolConfiguration?: ICentralAuthorityAuthProvidersOptions;\n  protected connectionAuthProvidersPool?: ICAConnectionPool;\n  protected connectionStorageCurrentUserCrdentials?: ICAStorageCurrentUserCredentials;\n  protected connectionSwarmCredentialsProvider?: ICASwarmCredentialsProvider;\n\n  protected get errorNotRunning() {\n    return new CAError('The instance is not running');\n  }\n\n  public async connect(\n    options: ICentralAuthorityOptions\n  ): Promise<Error | void> {\n    if (this.isRunning) {\n      console.warn('This instance is already running');\n    }\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      return setOptionsResult;\n    }\n    // TODO - it's necessary to user credentials by getByAuthProvider\n    // and compare it with credentials provided in options\n    // and compare it by credentials provided from connection to\n    // auth provider\n    const [\n      resultUserCredentialsStorage,\n      resultCAAuthProvidersConnectionsPool,\n    ] = await Promise.all([\n      this.connectToUserCredentialsStorage(options.user),\n      this.connectToAuthProvidersPool(options.authProvidersPool, options.user),\n    ]);\n    let isError = false;\n\n    if (resultUserCredentialsStorage instanceof Error) {\n      console.error(resultUserCredentialsStorage);\n      isError = true;\n    }\n    if (resultCAAuthProvidersConnectionsPool instanceof Error) {\n      // TODO - this is important to preserve this error, to\n      // notify the users with the error same as returned by the\n      // central authority. Cause the user may need to verify\n      // his email address or make another action.\n      return this.handleFailAndClose(resultCAAuthProvidersConnectionsPool);\n    }\n    if (isError) {\n      return this.handleFailAndClose(\n        'There is an error occurred while connecting to the providers'\n      );\n    }\n\n    const setLocallyStoredCredentialsResult = await this.readAndSetLocallyStoredUserCredentials();\n\n    if (setLocallyStoredCredentialsResult instanceof Error) {\n      console.error(setLocallyStoredCredentialsResult);\n      return this.handleFailAndClose(\n        'Failed to read the locally stored credentials for the current user'\n      );\n    }\n\n    const checkUserCredentialsResult = await this.compareLocalAndRemoteCredentials();\n\n    if (checkUserCredentialsResult instanceof Error) {\n      console.error(checkUserCredentialsResult);\n      return this.handleFailAndClose(\n        'The user credentials stored locally and provided by the auth provided are not same'\n      );\n    }\n\n    const storeCredentialsLocallyResult = await this.storeCryptoCredentialsFromAuthProvider();\n\n    if (storeCredentialsLocallyResult instanceof Error) {\n      console.error(storeCredentialsLocallyResult);\n      return this.handleFailAndClose(\n        'Failed to store the credentials for the user locally'\n      );\n    }\n\n    const createConnectionToSwarmCredentialsStorageResult = await this.connectToSwarmCredentialsStorage();\n\n    if (createConnectionToSwarmCredentialsStorageResult instanceof Error) {\n      console.error(createConnectionToSwarmCredentialsStorageResult);\n      return this.handleFailAndClose(\n        'Failed to connect to the swarm credentials storage provider'\n      );\n    }\n    this.setIsRunning();\n  }\n\n  /**\n   * close all existings connections and unset all\n   * options\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  public async disconnect(): Promise<Error | void> {\n    this.unsetOptions();\n    if (!this.isRunning) {\n      console.warn(\n        'The user is already not connected to the central authority'\n      );\n      return;\n    }\n\n    const result = await this.disconnectAll();\n\n    if (result instanceof Error) {\n      console.error(result);\n      return new CAError('Failed to close all the connections');\n    }\n  }\n\n  /**\n   * read credentials of the user connected to the swarm\n   * from a local cache or, if it's not found, in the local\n   * cache, from the swarm auth provider.\n   *\n   * @param {TCAUserIdentityRawTypes} identity\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | Error | null>)}\n   * @memberof CentralAuthority\n   */\n  public async getSwarmUserCredentials(\n    identity: TCAUserIdentityRawTypes\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    if (!this.isRunning) {\n      return this.errorNotRunning;\n    }\n    return this.readSwarmUserCredentials(identity);\n  }\n\n  /**\n   * return crypto key of the swarm user if exists\n   * in the local cache or in the swarm providers\n   * the current user is connected to\n   *\n   * @param {TCAUserIdentityRawTypes} identity\n   * @returns {(Promise<Error | null | CryptoKey>)}\n   * @memberof CentralAuthority\n   */\n  public async getSwarmUserEncryptionPubKey(\n    identity: TCAUserIdentityRawTypes\n  ): Promise<Error | null | CryptoKey> {\n    if (!this.isRunning) {\n      return this.errorNotRunning;\n    }\n\n    const swarmUserCredentials = await this.readSwarmUserCredentials(identity);\n\n    if (swarmUserCredentials instanceof Error) {\n      console.error(swarmUserCredentials);\n      return new CAError('Failed to get a credentials of the swarm user');\n    }\n    return getDataEncryptionPubKeyByCryptoCredentials(swarmUserCredentials);\n  }\n\n  /**\n   * return crypto key of the swarm user if exists\n   * in the local cache or in the swarm providers\n   * the current user is connected to\n   *\n   * @param {TCAUserIdentityRawTypes} identity\n   * @returns {(Promise<Error | null | CryptoKey>)}\n   * @memberof CentralAuthority\n   */\n  public async getSwarmUserSignPubKey(\n    identity: TCAUserIdentityRawTypes\n  ): Promise<Error | null | CryptoKey> {\n    if (!this.isRunning) {\n      return this.errorNotRunning;\n    }\n\n    const swarmUserCredentials = await this.readSwarmUserCredentials(identity);\n\n    if (swarmUserCredentials instanceof Error) {\n      console.error(swarmUserCredentials);\n      return new CAError('Failed to get a credentials of the swarm user');\n    }\n    return getDataSignPubKeyByCryptoCredentials(swarmUserCredentials);\n  }\n\n  /**\n   * return the identity of the current user\n   *\n   * @returns {(Promise<Error | TCentralAuthorityUserIdentity>)}\n   * @memberof ICentralAuthority\n   */\n  public getUserIdentity(): Error | TCentralAuthorityUserIdentity {\n    const userCryptoCredentials = this.getCurrentUserCryptoCredentials();\n\n    if (userCryptoCredentials instanceof Error) {\n      return userCryptoCredentials;\n    }\n    return (\n      getUserIdentityFromCryptoCredentials(userCryptoCredentials) ||\n      new CAError('there is no credentials of the current user')\n    );\n  }\n  /**\n   * retutn a crypto key pair of the current user\n   * for a data encryption\n   *\n   * @returns\n   * @memberof CentralAuthority\n   */\n  public getUserEncryptionKeyPair(): Error | CryptoKeyPair {\n    const userCryptoCredentials = this.getCurrentUserCryptoCredentials();\n\n    if (userCryptoCredentials instanceof Error) {\n      return userCryptoCredentials;\n    }\n    return (\n      getDataEncryptionKeyPairByCryptoCredentials(userCryptoCredentials) ||\n      new CAError('there is no credentials of the current user')\n    );\n  }\n\n  /**\n   * retutn a crypto key pair of the current user\n   * for a data encryption\n   *\n   * @returns\n   * @memberof CentralAuthority\n   */\n  public getUserDataSignKeyPair(): Error | CryptoKeyPair {\n    const userCryptoCredentials = this.getCurrentUserCryptoCredentials();\n\n    if (userCryptoCredentials instanceof Error) {\n      return userCryptoCredentials;\n    }\n    return (\n      getDataSignKeyPairByCryptoCredentials(userCryptoCredentials) ||\n      new CAError('there is no credentials of the current user')\n    );\n  }\n\n  /**\n   * export crypto credentials of the current user\n   *\n   * @returns {(Promise<string | Error>)}\n   * @memberof CentralAuthority\n   */\n  public async exportCryptoCredentials(): Promise<string | Error> {\n    const userCryptoCredentials = this.getCurrentUserCryptoCredentials();\n\n    if (userCryptoCredentials instanceof Error) {\n      return userCryptoCredentials;\n    }\n    return exportCryptoCredentialsToString(userCryptoCredentials);\n  }\n\n  protected validateOptions(options: ICentralAuthorityOptions): Error | void {\n    if (!options) {\n      return new CAError('Options must be provided');\n    }\n\n    const validationResult = validateVerboseBySchema(\n      CENTRAL_AUTHORITY_CLASS_OPTIONS_SCHEMA,\n      options\n    );\n\n    if (validationResult instanceof Error) {\n      return new CAError(validationResult);\n    }\n  }\n\n  protected setOptions(options: ICentralAuthorityOptions): Error | void {\n    const optionsValidationResult = this.validateOptions(options);\n\n    if (optionsValidationResult) {\n      return optionsValidationResult;\n    }\n    this.authProvidersPoolConfiguration = options.authProvidersPool;\n    if (options.user.credentials.cryptoCredentials) {\n      this.remoteProvidedUserCryptoCredntials =\n        options.user.credentials.cryptoCredentials;\n    }\n  }\n\n  protected unsetOptions() {\n    this.authProvidersPoolConfiguration = undefined;\n    this.remoteProvidedUserCryptoCredntials = undefined;\n  }\n\n  protected setIsRunning() {\n    this.isRunningInstance = true;\n  }\n\n  protected unsetIsRunning() {\n    this.isRunningInstance = false;\n  }\n\n  protected async closeConnectionToAuthProvidersPool(): Promise<Error | void> {\n    const { connectionAuthProvidersPool } = this;\n\n    this.unsetConnectionToAuthProvidersPool();\n    if (connectionAuthProvidersPool) {\n      const res = await connectionAuthProvidersPool.close();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new CAError('Failed to disconnect from auth providers pool');\n      }\n    }\n  }\n\n  protected async closeConnectionToCurrentUserCredentialsStorage(): Promise<Error | void> {\n    const { connectionStorageCurrentUserCrdentials } = this;\n\n    this.unsetConnectionToCurrentUserCredentialsStorage();\n    if (connectionStorageCurrentUserCrdentials) {\n      const res = await connectionStorageCurrentUserCrdentials.disconnect();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new CAError(\n          'Failed to disconnect from current user credentials storage'\n        );\n      }\n    }\n  }\n\n  protected async closeConnectionSwarmCredentialsProvider(): Promise<Error | void> {\n    const { connectionSwarmCredentialsProvider } = this;\n\n    this.unsetConnectionToSwarmCredentialsStorage();\n    if (connectionSwarmCredentialsProvider) {\n      const res = await connectionSwarmCredentialsProvider.disconnect();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new CAError(\n          'Failed to disconnect from swarm credentials provider'\n        );\n      }\n    }\n  }\n\n  /**\n   * close all the existing connections\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  protected async closeAllConnections(): Promise<Error | void> {\n    const results = await Promise.all([\n      this.closeConnectionToAuthProvidersPool(),\n      this.closeConnectionToCurrentUserCredentialsStorage(),\n      this.closeConnectionSwarmCredentialsProvider(),\n    ]);\n    const isErrorExists = results.some(checkIsError);\n\n    if (isErrorExists) {\n      return new CAError('Failed to close one of the exising connections');\n    }\n  }\n\n  protected unsetPropsOnClose() {\n    this.unsetIsRunning();\n    this.unsetLocallyStoredCredentials();\n    this.unsetUserOnAuthResult();\n  }\n\n  /**\n   * close and unset all connections\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  protected async disconnectAll(): Promise<Error | void> {\n    this.unsetPropsOnClose();\n\n    const closeConnectionsResult = await this.closeAllConnections();\n\n    if (closeConnectionsResult instanceof Error) {\n      console.error(closeConnectionsResult);\n      return closeConnectionsResult;\n    }\n  }\n\n  /**\n   * close the instance and emit an error\n   *\n   * @protected\n   * @param {(string | Error)} [error]\n   * @returns {Promise<Error>}\n   * @memberof CentralAuthority\n   */\n  protected async handleFailAndClose(error?: string | Error): Promise<Error> {\n    const closeConnectionsResult = await this.disconnectAll();\n\n    if (closeConnectionsResult instanceof Error) {\n      console.error(closeConnectionsResult);\n      console.error(\n        new CAError('handleFailAndClose::failed to close the instance')\n      );\n    }\n    return new CAError(\n      error || 'handleFailAndClose::an unknown error caused the instance close'\n    );\n  }\n\n  protected getOptionsForAuthProvidersConnectionsPool(\n    options: ICentralAuthorityAuthProvidersOptions\n  ): ICAConnectionsPoolOptions {\n    return {\n      providers: options.providersConfigurations,\n    };\n  }\n\n  protected getOptionsToAuthorizeUserOnAuthConnection(\n    optionsUserCredentials: ICentralAuthorityUser\n  ): [\n    TCAAuthProviderIdentity,\n    ICAConnectionSignUpCredentials,\n    Partial<ICentralAuthorityUserProfile> | undefined\n  ] {\n    return [\n      optionsUserCredentials.authProviderUrl,\n      optionsUserCredentials.credentials,\n      optionsUserCredentials.profile,\n    ];\n  }\n\n  /**\n   * set the user profile and crypto keys after he was authorized\n   * on the auth provider service.\n   *\n   * @protected\n   * @param {ICAConnectionUserAuthorizedResult} caSwarmConnectionsPoolAuthResult\n   * @memberof CentralAuthority\n   */\n  protected setUserOnAuthResult(\n    caSwarmConnectionsPoolAuthResult: ICAConnectionPoolAuthResult\n  ) {\n    this.remoteProvidedUserCryptoCredntials =\n      caSwarmConnectionsPoolAuthResult.cryptoCredentials;\n    this.userProfileOnAuthService = caSwarmConnectionsPoolAuthResult.profile;\n    this.authProviderId = caSwarmConnectionsPoolAuthResult.authProviderId;\n  }\n\n  protected unsetUserOnAuthResult() {\n    this.remoteProvidedUserCryptoCredntials = undefined;\n    this.userProfileOnAuthService = undefined;\n  }\n\n  protected setConnectionToAuthProvidersPool(\n    connectionSwarmPool: ICAConnectionPool\n  ) {\n    this.connectionAuthProvidersPool = connectionSwarmPool;\n  }\n\n  protected unsetConnectionToAuthProvidersPool() {\n    this.connectionAuthProvidersPool = undefined;\n  }\n\n  /**\n   * create connection of the CAConnectionsPool and authorize\n   * on auth provider specified by the user.\n   *\n   * @protected\n   * @param {ICentralAuthorityAuthProvidersOptions} optionsConnectionPool\n   * @param {ICentralAuthorityUser} optionsUserCredentials\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  protected async connectToAuthProvidersPool(\n    optionsConnectionPool: ICentralAuthorityAuthProvidersOptions,\n    optionsUserCredentials: ICentralAuthorityUser\n  ): Promise<Error | void> {\n    const optionsAuthProvidersPool = this.getOptionsForAuthProvidersConnectionsPool(\n      optionsConnectionPool\n    );\n    let connectionToAuthProvidersPool: CAConnectionsPool;\n\n    try {\n      connectionToAuthProvidersPool = new CAConnectionsPool(\n        optionsAuthProvidersPool\n      );\n    } catch (err) {\n      console.error(err);\n      return new CAError('Failed to create an instance of CAConnectionsPool');\n    }\n\n    const authorizationResult = await connectionToAuthProvidersPool.authorize(\n      ...this.getOptionsToAuthorizeUserOnAuthConnection(optionsUserCredentials)\n    );\n\n    if (authorizationResult instanceof Error) {\n      console.error(authorizationResult);\n      return authorizationResult;\n    }\n\n    const { userAuthResult } = connectionToAuthProvidersPool;\n\n    if (!userAuthResult) {\n      return new CAError(\n        'There is no user credntials and profile provided after authorization on auth service'\n      );\n    }\n    if (\n      userAuthResult.authProviderId !== optionsUserCredentials.authProviderUrl\n    ) {\n      return new Error(\n        `The auth provider id ${userAuthResult.authProviderId} returned in the crypto credentials is not equals to the auth provider url user want to authorized on ${optionsUserCredentials.authProviderUrl}`\n      );\n    }\n    this.setConnectionToAuthProvidersPool(connectionToAuthProvidersPool);\n    this.setUserOnAuthResult(userAuthResult);\n  }\n\n  protected getOptionsForCAStorageCurrentUserCredentials(\n    optionsUser: ICentralAuthorityUser\n  ): ICAStorageCurrentUserCredentialsOptions {\n    const { credentials } = optionsUser;\n\n    return {\n      credentials: {\n        login: credentials.login,\n        // TODO - may be add validation\n        password: credentials.password!,\n        session: credentials.session,\n      },\n    };\n  }\n\n  protected setConnectionToCurrentUserCredentialsStorage(\n    connection: CentralAuthorityStorageCurrentUserCredentials\n  ) {\n    this.connectionStorageCurrentUserCrdentials = connection;\n  }\n\n  protected unsetConnectionToCurrentUserCredentialsStorage() {\n    this.connectionStorageCurrentUserCrdentials = undefined;\n  }\n\n  protected async connectToUserCredentialsStorage(\n    optionsUser: ICentralAuthorityUser\n  ): Promise<Error | void> {\n    const caStorageCurrentUserCredentials = new CentralAuthorityStorageCurrentUserCredentials();\n    const optionsCAStorageCurrentUserCredentials = this.getOptionsForCAStorageCurrentUserCredentials(\n      optionsUser\n    );\n    const caStorageCurrentUserCredentialsConnectionResult = await caStorageCurrentUserCredentials.connect(\n      optionsCAStorageCurrentUserCredentials\n    );\n\n    if (caStorageCurrentUserCredentialsConnectionResult instanceof Error) {\n      console.error(caStorageCurrentUserCredentialsConnectionResult);\n      return new CAError(\n        'Failed to connect to the storage of the user credentials'\n      );\n    }\n    this.setConnectionToCurrentUserCredentialsStorage(\n      caStorageCurrentUserCredentials\n    );\n  }\n\n  /**\n   *\n   *\n   * @param {*} cryptoCredentials\n   * @returns {<void | Error>}\n   * @memberof CentralAuthority\n   */\n  protected setLocallyStoredCredentials(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): void | Error {\n    const validateResult = checkIsValidCryptoCredentials(cryptoCredentials);\n\n    if (!validateResult) {\n      return new CAError('The locally stored crypto credentials is not valid');\n    }\n    this.locallyStoredUserCryptoCredntials = cryptoCredentials;\n  }\n\n  protected unsetLocallyStoredCredentials() {\n    this.locallyStoredUserCryptoCredntials = undefined;\n  }\n\n  /**\n   * Set a locally stored credentials of the user by the credentials\n   * got from the swarm auth provider connected to.\n   *\n   * @protected\n   * @memberof CentralAuthority\n   * @returns {(Promise<void | Error>)}\n   */\n  protected async readAndSetLocallyStoredUserCredentials(): Promise<Error | void> {\n    if (!this.connectionStorageCurrentUserCrdentials) {\n      return new CAError(\n        'There is no connection to the storage of the user credntials'\n      );\n    }\n    if (!this.authProviderId) {\n      return new CAError(\n        \"The auth provider's identifier, the user was authorized on, is not defined to check the user's crypto credntials for it\"\n      );\n    }\n    if (!this.remoteProvidedUserCryptoCredntials) {\n      return new CAError(\n        'The user crypto credentials returned by the auth provider are not defined'\n      );\n    }\n\n    let cryptoCredentials = await this.connectionStorageCurrentUserCrdentials.get(\n      this.remoteProvidedUserCryptoCredntials.userIdentity\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      console.error(\n        new CAError(\n          `Failed to read credentials for the user identity ${this.remoteProvidedUserCryptoCredntials.userIdentity}. Try to read it for the auth provider identity ${this.authProviderId}`\n        )\n      );\n      cryptoCredentials = undefined;\n    }\n    if (!cryptoCredentials) {\n      cryptoCredentials = await this.connectionStorageCurrentUserCrdentials.getByAuthProvider(\n        this.authProviderId\n      );\n      if (cryptoCredentials instanceof Error) {\n        console.error(cryptoCredentials);\n        return new CAError(\n          `Failed to read crypto credentials for the auth provider ${this.authProviderId}`\n        );\n      }\n    }\n    if (!cryptoCredentials) {\n      console.warn(\n        'There is no credentials stored locally for the current user'\n      );\n      return;\n    }\n    return this.setLocallyStoredCredentials(cryptoCredentials);\n  }\n\n  /**\n   * compare the user's credentials got from the user\n   * credentials storage and the swarm provider\n   * user is authorized on.\n   *\n   * @protected\n   * @memberof CentralAuthority\n   */\n  protected async compareLocalAndRemoteCredentials(): Promise<Error | void> {\n    if (!this.remoteProvidedUserCryptoCredntials) {\n      return new CAError(\n        'There is no credntials for the user provided by the auth provider the user is authentificated on'\n      );\n    }\n    if (!this.locallyStoredUserCryptoCredntials) {\n      console.warn(\n        'There is no crypto credentials stored for the user identity and the current auth provider id. Nothing to check.'\n      );\n      return;\n    }\n\n    const comparationResult = await compareCryptoCredentials(\n      this.locallyStoredUserCryptoCredntials,\n      this.remoteProvidedUserCryptoCredntials\n    );\n\n    if (comparationResult instanceof Error) {\n      console.error(comparationResult);\n      return new CAError(\n        'Failed to compare crypto credentials stored locally and got by the auth provider'\n      );\n    }\n    if (comparationResult !== true) {\n      return new CAError(\n        'The crypto credentials stored in the credentials storage does not equals to the credentials provided be the auth provider'\n      );\n    }\n  }\n\n  /**\n   * Stores the crypto credentials to the current user credentials storage\n   * connection.\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  protected async storeCryptoCredentialsFromAuthProvider(): Promise<Error | void> {\n    const {\n      connectionStorageCurrentUserCrdentials,\n      locallyStoredUserCryptoCredntials,\n      remoteProvidedUserCryptoCredntials,\n    } = this;\n\n    if (locallyStoredUserCryptoCredntials) {\n      console.warn(\n        'storeCryptoCredentialsFromAuthProvider:: locally stored credentials for the current user is already exists'\n      );\n      return;\n    }\n    if (!remoteProvidedUserCryptoCredntials) {\n      return new CAError(\n        'There was no credentials provided by the auth provider the user is authorized on'\n      );\n    }\n    if (!connectionStorageCurrentUserCrdentials) {\n      return new CAError(\n        'There is no connection to the storage of the current user credentials'\n      );\n    }\n\n    const setRemoteCredentialsResult = await connectionStorageCurrentUserCrdentials.set(\n      remoteProvidedUserCryptoCredntials\n    );\n\n    if (setRemoteCredentialsResult instanceof Error) {\n      console.error(setRemoteCredentialsResult);\n      return new CAError(\n        'Failed to store locally the current user credentials provided by the auth provided'\n      );\n    }\n  }\n\n  /**\n   * create instance\n   *\n   * @protected\n   * @returns {(Error | ICASwarmCredentialsProvider)}\n   * @memberof CentralAuthority\n   */\n  protected createConnectionToSwarmCredentialsStorage():\n    | Error\n    | ICASwarmCredentialsProvider {\n    try {\n      return new CASwarmCredentialsProvider();\n    } catch (err) {\n      console.error(err);\n      return new CAError(\n        'Failed to create instance of the Swarm credentials storage'\n      );\n    }\n  }\n\n  /**\n   * get options to establish a new connection to the\n   * swarm credentials storage\n   *\n   * @protected\n   * @returns {(Error\n   *     | ICASwarmCredentialsProviderOptions)}\n   * @memberof CentralAuthority\n   */\n  protected getOptionsForSwarmCredentialsStorageConnection():\n    | Error\n    | ICASwarmCredentialsProviderOptions {\n    if (!this.connectionAuthProvidersPool) {\n      return new CAError(\n        'A connection to the swarm pool must be provided for the swarm credentials storage'\n      );\n    }\n    return {\n      connections: {\n        swarmConnectionPool: this.connectionAuthProvidersPool,\n      },\n      storageDb: CENTRAL_AUTHORITY_CLASS_SWARM_CREDENTIALS_STORAGE_DB_NAME,\n    };\n  }\n\n  protected setConnectionToSwarmCredentialsStorage(\n    connection: ICASwarmCredentialsProvider\n  ) {\n    this.connectionSwarmCredentialsProvider = connection;\n  }\n\n  protected unsetConnectionToSwarmCredentialsStorage() {\n    this.connectionSwarmCredentialsProvider = undefined;\n  }\n\n  /**\n   * establish connection to the swarm storage credentials provider\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CentralAuthority\n   */\n  protected async connectToSwarmCredentialsStorage(): Promise<Error | void> {\n    const connectionToSwarmCredentialsStorage = this.createConnectionToSwarmCredentialsStorage();\n\n    if (connectionToSwarmCredentialsStorage instanceof Error) {\n      console.error(connectionToSwarmCredentialsStorage);\n      return connectionToSwarmCredentialsStorage;\n    }\n\n    const options = this.getOptionsForSwarmCredentialsStorageConnection();\n\n    if (options instanceof Error) {\n      console.error(options);\n      return options;\n    }\n\n    const connectionResult = await connectionToSwarmCredentialsStorage.connect(\n      options\n    );\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      return new CAError('Failed to connect to the swarm credentials storage');\n    }\n    return this.setConnectionToSwarmCredentialsStorage(\n      connectionToSwarmCredentialsStorage\n    );\n  }\n\n  /**\n   * read credentials of the user connected to the swarm\n   * from a local cache or, if not found in the local\n   * cache, from the swarm auth provider.\n   *\n   * @param {TCAUserIdentityRawTypes} identity\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | Error | null>)}\n   * @memberof CentralAuthority\n   */\n  @dataCachingUtilsCachingDecorator(\n    CENTRAL_AUTHORITY_CLASS_SWARM_CREDENTIALS_SWARM_USERS_CREDENTIALS_CACHE_CAPACITY\n  )\n  protected async readSwarmUserCredentials(\n    identity: TCAUserIdentityRawTypes\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    const { connectionSwarmCredentialsProvider } = this;\n\n    if (!connectionSwarmCredentialsProvider) {\n      return new CAError(\n        'There is no connection to the swarm credentials provider'\n      );\n    }\n    return connectionSwarmCredentialsProvider.get(identity);\n  }\n\n  protected getCurrentUserCryptoCredentials():\n    | Error\n    | TCentralAuthorityUserCryptoCredentials {\n    if (!this.isRunning) {\n      return this.errorNotRunning;\n    }\n    if (!this.remoteProvidedUserCryptoCredntials) {\n      return new CAError('There is no user crypyo credentials');\n    }\n    return this.remoteProvidedUserCryptoCredntials;\n  }\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["2077"],"/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport {\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport {\n  ICAConnectionConfigurationFirebase,\n  ICAConnectionFirebaseUserProfile,\n} from '../central-authority-connection-firebase.types.configuration';\nimport {\n  ICentralAuthorityUserAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n  ICentralAuthorityUserProfile,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport { validateUserProfileData } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user';\nimport {\n  dataValidatorUtilEmail,\n  dataValidatorUtilURL,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { generateCryptoCredentialsWithUserIdentityV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { CAConnectionFirestoreUtilsCredentialsStrorage } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS } from '../central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions';\nimport { validatePassword } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport {\n  CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE,\n  CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE,\n} from '../../central-authority-connections-const/central-authority-connections-const';\nimport { valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators';\nimport { timeout } from 'utils';\nimport { CA_CONNECTION_FIREBASE_AUTH_WITH_SESSION_TOKEN_TIMEOUT_MS } from '../central-authority-connection-firebase.const';\nimport { ISensitiveDataSessionStorage } from '../../../../sensitive-data-session-storage/sensitive-data-session-storage.types';\nimport { CENTRAL_AUTHORITY_CONNECTION_FIREBASE_BASE_SESSION_KEY } from './central-authority-connection-firebase-base.const';\nimport { ICAConnectionFirebaseBaseSessionData } from './central-authority-connection-firebase-base.types';\nimport assert from 'assert';\nimport {\n  importCryptoCredentialsFromAString,\n  exportCryptoCredentialsToString,\n} from '../../../central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\n/**\n *\n * This is the class realized the basic functions\n * allows to connect with the Firebase.\n *\n * @export\n * @class CAConnectionWithFirebase\n */\nexport class CAConnectionWithFirebaseBase {\n  public static validateConfiguration = valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration;\n\n  // if the application is connected with the remote Firebase\n  public isConnected: boolean = false;\n\n  public get isUserSignedIn(): boolean {\n    const { isConnected, isVerifiedAccount } = this;\n\n    if (!isConnected) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return isVerifiedAccount;\n  }\n\n  public get isAuthorized(): boolean {\n    const {\n      isUserSignedIn,\n      valueofCredentialsSignUpOnAuthorizedSuccess: credentialsAuthorizedSuccess,\n    } = this;\n\n    if (!isUserSignedIn) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return !!credentialsAuthorizedSuccess;\n  }\n\n  public get authResult(): ICAConnectionUserAuthorizedResult | void {\n    return this.valueofCredentialsSignUpOnAuthorizedSuccess;\n  }\n\n  protected configuration?: ICAConnectionConfigurationFirebase;\n\n  protected isAuthorizedWithCredentials: boolean = false;\n\n  protected valueofCredentialsSignUpOnAuthorizedSuccess?: ICAConnectionUserAuthorizedResult;\n\n  protected connectionWithCredentialsStorage?: CAConnectionFirestoreUtilsCredentialsStrorage;\n\n  protected get currentUser(): firebase.User | null {\n    const { isConnected } = this;\n\n    return isConnected ? this.app?.auth().currentUser : null;\n  }\n\n  protected get isVerifiedAccount(): boolean {\n    const { isConnected, currentUser: currentUserData } = this;\n    if (!isConnected) {\n      return false;\n    }\n    if (!currentUserData) {\n      return false;\n    }\n    if (!currentUserData.emailVerified) {\n      return false;\n    }\n    return true;\n  }\n\n  protected get databaseURL(): Error | string {\n    const { configuration } = this;\n\n    if (!configuration) {\n      return new Error(\n        'There is no url specified for the Firebase authority provided'\n      );\n    }\n\n    const { databaseURL } = configuration;\n\n    if (dataValidatorUtilURL(databaseURL)) {\n      return databaseURL;\n    }\n    return new Error(\n      'An invalid URL provided for the Firebase authority provider'\n    );\n  }\n\n  protected get app(): firebase.app.App {\n    return firebase.app(this.databaseURL as string);\n  }\n\n  // return the firebase application\n  public getApp(): void | firebase.app.App {\n    return this.app;\n  }\n\n  /**\n   * sign out if authorized before\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async signOut(): Promise<boolean | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    // disconnect the strage cause it's necessary\n    // that the user was authorized\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n    try {\n      await this.app.auth().signOut();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to sign out');\n    }\n    this.handleUnauthorized();\n\n    return true;\n  }\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @param {string} name - name of the application,\n   * it's necessary to provide a name string if more than one Firebase\n   * applications will be used simultaneousely. But at the first time\n   * no name must be provided, cause it means that the DEFAULT application\n   * will be created, which is required by the Firebase.\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase,\n    name?: string\n  ): Promise<boolean | Error> {\n    let app;\n\n    try {\n      const appName = name || configuration.databaseURL;\n      const existingApp = firebase.apps.find((app) => app.name);\n\n      app = existingApp || firebase.initializeApp(configuration, appName);\n      this.configuration = configuration;\n    } catch (err) {\n      console.error(err);\n      this.setConnectedStatus(false);\n      return new Error(\n        'Failed to initialize the application with the given configuration'\n      );\n    }\n    this.setConnectedStatus(app);\n    return true;\n  }\n\n  /**\n   * This method may be substituted by firebase\n   * connection implementation to be compilant\n   * to an CA identifier version.\n   * When call the method createOrSetCredentialsInDB\n   * functions to generate credentials and store\n   * it in the database may be substitudet by\n   * an implementation of it compolant to the\n   * identifier version.\n   * Thi version is compilant to the identity v1.\n   *\n   * @param signUpCredentials\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    return this.createOrSetCredentialsInDB(signUpCredentials);\n  }\n\n  protected setConnectedStatus(isConnected: false | firebase.app.App) {\n    this.isConnected = !!isConnected;\n  }\n\n  protected setAuthorizedStatus(isAuthorized: boolean) {\n    this.isAuthorizedWithCredentials = isAuthorized;\n  }\n\n  protected checkIfConnected(): boolean | Error {\n    const { isConnected, connectionWithCredentialsStorage } = this;\n\n    if (\n      !connectionWithCredentialsStorage ||\n      !connectionWithCredentialsStorage.isConnected\n    ) {\n      return false;\n    }\n    return !isConnected\n      ? new Error('There is no active connection with the Firebase')\n      : true;\n  }\n\n  protected checkSignUpCredentials(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): boolean | Error {\n    if (!signUpCredentials) {\n      return new Error('Sign up credentials must be provided');\n    }\n    if (typeof signUpCredentials !== 'object') {\n      return new Error('Sign up credentials must be an object');\n    }\n\n    const {\n      cryptoCredentials: credentialsGiven,\n      login,\n      password,\n    } = signUpCredentials;\n\n    if (credentialsGiven) {\n      const resultCheckCredentialsGiven = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsGiven\n      );\n\n      if (resultCheckCredentialsGiven instanceof Error) {\n        console.error(resultCheckCredentialsGiven);\n        return new Error(\n          'Credentials given is not valid for the Firebase auth provider'\n        );\n      }\n    }\n    if (!dataValidatorUtilEmail(login)) {\n      return new Error('The login must be an email valid');\n    }\n    if (!validatePassword(password)) {\n      return new Error('The password provided is not valid');\n    }\n    return true;\n  }\n\n  protected setConnectionWithCredentialsStorage(\n    connectionWithCredentialsStorage: CAConnectionFirestoreUtilsCredentialsStrorage\n  ) {\n    this.connectionWithCredentialsStorage = connectionWithCredentialsStorage;\n  }\n\n  protected async startConnectionWithCredentialsStorage(): Promise<\n    boolean | Error\n  > {\n    if (this.connectionWithCredentialsStorage) {\n      // if already connected with the credentials storage\n      return true;\n    }\n\n    const connectionWithCredentialsStorage = new CAConnectionFirestoreUtilsCredentialsStrorage(\n      this\n    );\n    const storageConnectionResult = await connectionWithCredentialsStorage.connect();\n\n    if (storageConnectionResult instanceof Error) {\n      console.error(storageConnectionResult);\n      return new Error('Failed connect to the Firebase credentials storage');\n    }\n    if (!connectionWithCredentialsStorage.isConnected) {\n      return new Error(\n        'Connection to the Firebase credentials storage was not succeed'\n      );\n    }\n    this.setConnectionWithCredentialsStorage(connectionWithCredentialsStorage);\n    return true;\n  }\n\n  protected async waitingUserInit(): Promise<void | firebase.User | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return new Error('The connection is not established');\n    }\n    if (!this.app) {\n      return new Error('The Firebase app is not defined');\n    }\n    return new Promise((res) => {\n      this.app.auth().onAuthStateChanged((user) => {\n        if (user && user.email) {\n          res(user);\n        }\n      });\n    });\n  }\n\n  protected handleUnauthorized() {\n    this.setAuthorizedStatus(false);\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  // handle an authorization attemp failed\n  protected onAuthorizationFailed(error: Error | string): Error {\n    const err = error instanceof Error ? error : new Error(String(error));\n\n    console.error(err);\n    console.error('Authorization failed on remote Firebase server');\n    this.handleUnauthorized();\n    return err;\n  }\n\n  protected async singUpWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      authCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    const { login, password } = authCredentials;\n\n    try {\n      await this.app\n        .auth()\n        .createUserWithEmailAndPassword(login, password as string);\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  /**\n   * sign in under the login\n   * provided by the user\n   * @param authCredentials\n   * @param {string} authCredentials.login\n   * @param {string} authCredentials.password\n   */\n  protected async singInWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    let signInResult;\n    const { login, password } = authCredentials;\n\n    try {\n      if (password) {\n        signInResult = await this.app\n          .auth()\n          .signInWithEmailAndPassword(login, password);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  /**\n   * firebase.auth.Auth.Persistence.SESSION\t'session'\tIndicates that the state will only persist in the current session or tab, and will be cleared when the tab or window in which the user authenticated is closed. Applies only to web apps.\n   * firebase.auth.Auth.Persistence.LOCAL\t'local'\tIndicates that the state will be persisted even when the browser window is closed or the activity is destroyed in React Native. An explicit sign out is needed to clear that state. Note that Firebase Auth web sessions are single host origin and will be persisted for a single domain only.\n   * firebase.auth.Auth.Persistence.NONE\t'none'\tIndicates that the state will only be stored in memory and will be cleared when the window or activity is refreshed.\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  protected async setSessionPersistance() {\n    try {\n      await this.app\n        .auth()\n        .setPersistence(firebase.auth.Auth.Persistence.SESSION);\n    } catch (err) {\n      console.error('Failed to set Session persistance for the Firebase');\n    }\n  }\n\n  // TODO - add to the CentralAuthrotity methods\n  // the ability to get swarm users profiles data\n  protected async getUserProfileData(): Promise<\n    Error | ICentralAuthorityUserProfile\n  > {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser: currentUserData } = this;\n\n    // current user is instance\n    // of the firebase current user\n    if (!currentUserData) {\n      // if there is no profile data\n      return {};\n    }\n\n    const { displayName, photoURL, phoneNumber, email } = currentUserData;\n\n    return {\n      name: displayName || null,\n      email: email || null,\n      phone: phoneNumber || null,\n      photoURL: photoURL || null,\n    };\n  }\n\n  protected async returnOnAuthorizedResult(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const userProfile = await this.getUserProfileData();\n\n    if (userProfile instanceof Error) {\n      console.error(userProfile);\n      return new Error('Failed to get profile data');\n    }\n    return {\n      cryptoCredentials,\n      profile: userProfile,\n    };\n  }\n\n  protected mapAppProfileToFirebaseProfileWithoutEmail(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): ICAConnectionFirebaseUserProfile {\n    return {\n      displayName: (profile && profile.name) || null,\n      photoURL: (profile && profile.photoURL) || null,\n    };\n  }\n\n  protected async setProfileDataEmail(email: string): Promise<Error | boolean> {\n    const checkIsConnectedResult = this.checkIfConnected();\n\n    if (checkIsConnectedResult instanceof Error) {\n      return checkIsConnectedResult;\n    }\n    if (!dataValidatorUtilEmail(email)) {\n      return new Error('The email is not valid');\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('Failed to get the user profile data');\n    }\n    if (currentUser.email !== email) {\n      try {\n        await currentUser.updateEmail(email);\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to update the email address');\n      }\n\n      const sendEmailVerificationResult = await this.handleAuthEmailNotVerified();\n\n      if (sendEmailVerificationResult instanceof Error) {\n        console.error(sendEmailVerificationResult);\n        return new Error('Failed to update the email address');\n      }\n      // TODO - if the user was authentificated by OAuth\n      // it is necessary to invoke the reauthentificate method\n      // of the Firebase\n      const logOutResult = await this.signOut();\n\n      if (logOutResult instanceof Error) {\n        console.error(logOutResult);\n        return new Error('Failed to log out');\n      }\n      return true;\n    }\n    return true;\n  }\n\n  /**\n   * At no a phone number can't be updated\n   * @param profileDataPartialWithoutPhoneNumber\n   */\n  protected async setProfileDataWithFirebase(\n    profileDataPartialWithoutPhoneNumber: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('There is no current user profile');\n    }\n\n    const profileMappedForFirebaseWithoutEmail = this.mapAppProfileToFirebaseProfileWithoutEmail(\n      profileDataPartialWithoutPhoneNumber\n    );\n\n    try {\n      await currentUser.updateProfile(profileMappedForFirebaseWithoutEmail);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to set the Firebase profile data');\n    }\n    // TODO - what to do with a phone number\n    return true;\n  }\n\n  // TODO - test it and change to private method\n  protected async setProfileData(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICentralAuthorityUserProfile> {\n    if (isEmptyObject(profile)) {\n      return await this.getUserProfileData();\n    }\n    if (!validateUserProfileData(profile)) {\n      return new Error('The profile is not valid');\n    }\n\n    const resultUpdateProfile = await this.setProfileDataWithFirebase(profile);\n\n    if (resultUpdateProfile instanceof Error) {\n      return resultUpdateProfile;\n    }\n\n    const updatedProfile = await this.getUserProfileData();\n\n    if (updatedProfile instanceof Error) {\n      console.error(updatedProfile);\n      return new Error('Failed to read the updated profile data');\n    }\n\n    const { email } = profile;\n\n    if (email) {\n      // if it is necessary to update email value\n      // it will cause that user must authentificate\n      // once again\n      const updateEmailResult = await this.setProfileDataEmail(email);\n\n      if (updateEmailResult instanceof Error) {\n        return updateEmailResult;\n      }\n      return {\n        ...updatedProfile,\n        email,\n      };\n    }\n    return updatedProfile;\n  }\n\n  protected async handleAuthEmailNotVerified(): Promise<boolean | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('There is no user authorized');\n    }\n\n    try {\n      await currentUser.sendEmailVerification();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to send the email verification link');\n    }\n    return true;\n  }\n\n  /**\n   * check if an account of the user\n   * was verified or not.\n   * If it wasn't, then send an email\n   * to verify it.\n   * @protected\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebase\n   */\n  protected async chekIfVerifiedAccount(): Promise<boolean | Error> {\n    // if the account was validated by email\n    if (this.isVerifiedAccount) {\n      return true;\n    }\n\n    // if the account was not validated by email\n    // send the verification email\n    const sendVerificationEmailResult = await this.handleAuthEmailNotVerified();\n\n    if (sendVerificationEmailResult instanceof Error) {\n      console.error(sendVerificationEmailResult);\n      return new Error('Failed to send the email verification');\n    }\n    return new ErrorExtendedBaseClass(\n      'Please verify the email address',\n      CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n    );\n  }\n\n  protected generateNewCryptoCredentialsForConfigurationProvided = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV1(\n      {\n        authorityProviderURI: databaseURL,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  protected checkUserIdentityIsValidForConfigurationProvided(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Error | TCentralAuthorityUserCryptoCredentials {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n    if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n      return new Error('The crypto credentials value is not valid');\n    }\n\n    const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n    if (!caUserIdentity.isValid) {\n      return new Error('User identity is not valid');\n    }\n\n    const { identityDescription: identityDescriptionParsed } = caUserIdentity;\n\n    if (identityDescriptionParsed instanceof Error) {\n      console.error(identityDescriptionParsed);\n      return new Error('Failed to get description by identity string');\n    }\n    if (\n      identityDescriptionParsed[\n        CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n      ] !== databaseURL\n    ) {\n      return new Error(\n        'Wrong authority provider url got from the identity string'\n      );\n    }\n    return cryptoCredentials;\n  }\n\n  protected async readCryptoCredentialsForTheUserFromDatabase(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials | null> {\n    const isConnected = this.checkIfConnected();\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n\n    const { connectionWithCredentialsStorage } = this;\n    const credentialsForTheCurrentUser = await connectionWithCredentialsStorage!!.getCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (credentialsForTheCurrentUser instanceof Error) {\n      console.error(credentialsForTheCurrentUser);\n      return new Error('Failed to read credentials of the current user');\n    }\n    return credentialsForTheCurrentUser;\n  }\n\n  protected setCryptoCredentialsForTheUserToDatabase = async (\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n    const isConnected = this.checkIfConnected();\n    const { connectionWithCredentialsStorage } = this;\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n    // set the new generated credentials forcely\n    // and rewrite the existing\n    // cause it is not valid\n    const setCredentialsResult = await connectionWithCredentialsStorage!!.setUserCredentials(\n      cryptoCredentials,\n      signUpCredentials\n    );\n\n    if (setCredentialsResult instanceof Error) {\n      return setCredentialsResult;\n    }\n    // if not an error then return\n    // a crypto credentials\n    return setCredentialsResult;\n  };\n\n  protected async createOrSetCredentialsInDB(\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    generateNewCryptoCredentialsForConfigurationProvided: () => Promise<\n      Error | TCentralAuthorityUserCryptoCredentials\n    > = this.generateNewCryptoCredentialsForConfigurationProvided,\n    setCryptoCredentialsForTheUserToDatabase: (\n      cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n      signUpCredentials: ICAConnectionSignUpCredentials\n    ) => Promise<Error | TCentralAuthorityUserCryptoCredentials> = this\n      .setCryptoCredentialsForTheUserToDatabase\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    let attempt = 0;\n    let cryptoCredentials:\n      | TCentralAuthorityUserCryptoCredentials\n      | Error = new Error(\n      'Failed to generate and set a crypto credentials for the user because of unknown reason'\n    );\n    let isSuccess: boolean = false;\n\n    if (\n      typeof generateNewCryptoCredentialsForConfigurationProvided !== 'function'\n    ) {\n      return new Error(\n        'The generateNewCryptoCredentialsForConfigurationProvided argument must be a function'\n      );\n    }\n    if (typeof setCryptoCredentialsForTheUserToDatabase !== 'function') {\n      return new Error(\n        'The setCryptoCredentialsForTheUserToDatabase argument must be a function'\n      );\n    }\n    const credentialsGiven = signUpCredentials.cryptoCredentials;\n\n    // try a multiple times cause may be\n    // a network errors or user id\n    // is already exists in the database\n    while (\n      attempt < CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS &&\n      !isSuccess\n    ) {\n      cryptoCredentials = credentialsGiven\n        ? // if a credentials provided, then use it\n          credentialsGiven\n        : // if a credentials not provided, generate a new one\n          await generateNewCryptoCredentialsForConfigurationProvided();\n\n      if (cryptoCredentials instanceof Error) {\n        // fialed to generate a new crypto credentials\n        console.error(cryptoCredentials);\n      } else {\n        const setCredentialsResult = await setCryptoCredentialsForTheUserToDatabase(\n          cryptoCredentials,\n          signUpCredentials\n        );\n\n        if (setCredentialsResult instanceof Error) {\n          console.error(setCredentialsResult);\n          cryptoCredentials = new Error(\n            'Failed to store credentials for the user in the database'\n          );\n        } else {\n          cryptoCredentials = setCredentialsResult;\n          isSuccess = true;\n        }\n      }\n      attempt += 1;\n    }\n    return cryptoCredentials;\n  }\n\n  /**\n   * check if a credentials are already exists\n   * in the remote storage for the user.\n   *\n   * @protected\n   * @returns\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  protected async checkIfCredentialsExistsForTheUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | void | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsExistingForTheCurrentUser = await this.readCryptoCredentialsForTheUserFromDatabase(\n      signUpCredentials\n    );\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      // if something was going wrong when reading\n      // a credentials for the current user\n      // return an Error, because if ignore\n      // and set a new credentials in storage\n      // the data may become inconsistent, cause\n      // credentials is already exists in the database\n      // but an error has occurred once for a some reason.\n      console.error(credentialsExistingForTheCurrentUser);\n      return new Error(\n        'Failed to read credentials for the user from the Firebase database'\n      );\n    }\n\n    if (credentialsExistingForTheCurrentUser) {\n      const credentialsValidationResult = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsExistingForTheCurrentUser\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        console.error('The credentials stored for the user is not valid');\n        // if credentials exists for the user but invalid at now\n        // return an error to inform that the user can't user\n        // this account for authorization.\n        // Credentials was already read by another users\n        // and if we set a new one in the storage it may\n        // cause inconsistency.\n        return new ErrorExtendedBaseClass(\n          \"Sorry, you can't use this account anymore, cause a credentials existing for the account exists and not valid\",\n          CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE\n        );\n      }\n\n      // if the credentials read from the\n      // Firebase storage is valid\n      // for the current configuration return it\n      return credentialsExistingForTheCurrentUser;\n    }\n  }\n\n  protected async setSessionData(\n    session: ISensitiveDataSessionStorage,\n    sessionData: object\n  ): Promise<Error | undefined> {\n    try {\n      assert(sessionData, 'A session data must not be empty');\n      assert(typeof sessionData === 'object', 'A session data must an object');\n      await session.setItem(\n        CENTRAL_AUTHORITY_CONNECTION_FIREBASE_BASE_SESSION_KEY,\n        sessionData\n      );\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected async setCurrentUserCryptoCredentialsInSession(\n    session: ISensitiveDataSessionStorage,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | undefined> {\n    try {\n      assert(cryptoCredentials, 'Crypto credenitials must be provided');\n      assert(\n        typeof cryptoCredentials === 'object',\n        'Crypto credentials must be an object'\n      );\n\n      const credentialsExported = await exportCryptoCredentialsToString(\n        cryptoCredentials\n      );\n\n      if (credentialsExported instanceof Error) {\n        throw credentialsExported;\n      }\n      return await this.setSessionData(session, {\n        credentials: credentialsExported,\n      });\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected async readSessionData(\n    session: ISensitiveDataSessionStorage\n  ): Promise<Error | undefined | ICAConnectionFirebaseBaseSessionData> {\n    try {\n      const sessionData = await session.getItem(\n        CENTRAL_AUTHORITY_CONNECTION_FIREBASE_BASE_SESSION_KEY\n      );\n\n      if (sessionData) {\n        assert(\n          typeof sessionData === 'object',\n          'session data is not an object'\n        );\n        return sessionData;\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected async readCryptoCrdentialsFromSession(\n    session: ISensitiveDataSessionStorage\n  ): Promise<undefined | Error | TCentralAuthorityUserCryptoCredentials> {\n    const sessionData = await this.readSessionData(session);\n\n    if (!sessionData) {\n      return;\n    }\n    if (sessionData instanceof Error) {\n      return sessionData;\n    }\n\n    const { credentials } = sessionData;\n\n    if (credentials) {\n      try {\n        if (typeof credentials !== 'string') {\n          return new Error('Credentials stored in session have a wrong format');\n        }\n        return await importCryptoCredentialsFromAString(credentials);\n      } catch (err) {\n        return err;\n      }\n    }\n  }\n\n  protected async createOrReturnExistingCredentialsForUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsExistingForTheCurrentUser = await this.checkIfCredentialsExistsForTheUser(\n      signUpCredentials\n    );\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      return credentialsExistingForTheCurrentUser;\n    }\n    if (credentialsExistingForTheCurrentUser != null) {\n      // if an existing credentials returned\n      return credentialsExistingForTheCurrentUser;\n    }\n    // if there is no credentials stored for the user\n\n    // generate a new credentials for the user and\n    // set it in the storage. If a credentials was\n    // provided into signUpCredentials and valid, it will be used\n    // instead of generating a new one.\n    const newCredentialsGenerated = await this.generateAndSetCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (newCredentialsGenerated instanceof Error) {\n      console.error(newCredentialsGenerated);\n      return new Error(\n        'Failed to generate or set a crypto credentials for the user'\n      );\n    }\n    return newCredentialsGenerated;\n  }\n\n  /**\n   * try to authorize with session saved in session storage\n   *\n   * @protected\n   * @returns\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  protected async signInWithSessionPersisted() {\n    try {\n      await Promise.race([\n        timeout(CA_CONNECTION_FIREBASE_AUTH_WITH_SESSION_TOKEN_TIMEOUT_MS),\n        new Promise((res, rej) => {\n          this.app.auth().onAuthStateChanged(function(user) {\n            if (user) {\n              res(user);\n            } else {\n              rej(user);\n            }\n          });\n        }),\n      ]);\n      return true;\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  protected async signIn(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<boolean | Error> {\n    if (!firebaseCredentials.password && firebaseCredentials.session) {\n      return this.signInWithSessionPersisted();\n    }\n\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      firebaseCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    // try to sign in with the credentials, then try to sign up\n    const authResult = await this.singInWithAuthCredentials(\n      firebaseCredentials\n    );\n\n    if (authResult === true && firebaseCredentials.session) {\n      await this.setSessionPersistance();\n    }\n    return authResult;\n  }\n\n  protected async signUp(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    // if failed to sign in with the\n    // credentials, then try to\n    // sign up\n    const signUpResult = await this.singUpWithAuthCredentials(\n      signUpCredentials\n    );\n\n    if (signUpResult instanceof Error) {\n      // if sign up failed then return\n      // error that the authorization\n      // failed\n      return this.onAuthorizationFailed(\n        'Failed to authorize on Firebase remote server with the credentials'\n      );\n    }\n    return true;\n  }\n\n  protected async disconnectCredentialsStorage(): Promise<Error | boolean> {\n    const { connectionWithCredentialsStorage } = this;\n\n    if (\n      connectionWithCredentialsStorage &&\n      connectionWithCredentialsStorage.isConnected\n    ) {\n      const res = await connectionWithCredentialsStorage.disconnect();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new Error(\n          'Failed to disconnect from the Firebase credentials storage'\n        );\n      }\n    }\n\n    this.connectionWithCredentialsStorage = undefined;\n    return true;\n  }\n}\n\nexport default CAConnectionWithFirebaseBase;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["2078","2079","2080","2081"],"import firebase from 'firebase';\nimport 'firebase/auth';\nimport memoize from 'lodash.memoize';\nimport CAConnectionWithFirebaseBase from '../central-authority-connection-firebase-base/central-authority-connection-firebase-base';\nimport {\n  ICAConnection,\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { getVersionOfCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_USER_IDENTITY_VERSIONS,\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentityVersion } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase.types.configuration';\nimport { CA_CONNECTION_STATUS } from '../../central-authority-connections-const/central-authority-connections-const';\n\n/**\n *\n * This is the class realized connection with the Firebase.\n * It allows to sign up and authorize on it, set a crypto credentials\n * for the user and read credentials for another users.\n * The versions of a connections to the Firebase must\n * extends this class. This implementation is compilant\n * to the V1 and V2 of the user identity.\n *\n * @export\n * @class CAConnectionWithFirebase\n * @implements {ICAConnection}\n */\nexport class CAConnectionWithFirebaseImplementation\n  extends CAConnectionWithFirebaseBase\n  implements ICAConnection {\n  public get cryptoCredentials():\n    | TCentralAuthorityUserCryptoCredentials\n    | undefined {\n    const { valueofCredentialsSignUpOnAuthorizedSuccess } = this;\n\n    if (valueofCredentialsSignUpOnAuthorizedSuccess) {\n      const { cryptoCredentials } = valueofCredentialsSignUpOnAuthorizedSuccess;\n\n      return cryptoCredentials;\n    }\n  }\n\n  public get authProviderURL() {\n    const { databaseURL } = this;\n\n    return databaseURL instanceof Error ? undefined : databaseURL;\n  }\n\n  /**\n   * the current status of the connection\n   * to the Firebase remote database\n   *\n   * @readonly\n   * @type {CA_CONNECTION_STATUS}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public get status(): CA_CONNECTION_STATUS {\n    const { isConnected, isAuthorized, isAnonymousely } = this;\n\n    if (!isConnected) {\n      return CA_CONNECTION_STATUS.DISCONNECTED;\n    }\n    if (isAuthorized) {\n      return CA_CONNECTION_STATUS.AUTHORIZED;\n    }\n    if (isAnonymousely) {\n      return CA_CONNECTION_STATUS.CONNECTED;\n    }\n    return CA_CONNECTION_STATUS.DISCONNECTED;\n  }\n\n  /**\n   * whether the user is connected anonymousely\n   * or not. User must be authorized or connected\n   * anonymousely\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected isAnonymousely = false;\n\n  protected userLogin?: string;\n\n  /**\n   * list with identity versions supported by the connection\n   *\n   * @type {Array<TUserIdentityVersion>}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected readonly supportedVersions: Array<TUserIdentityVersion> = [\n    CA_USER_IDENTITY_VERSIONS['01'],\n    CA_USER_IDENTITY_VERSIONS['02'],\n  ];\n\n  /**\n   * checks whether the identity version\n   * is supported by the connection\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public isVersionSupported = memoize(\n    (version: TUserIdentityVersion): boolean =>\n      this.supportedVersions.includes(version)\n  );\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   * To read credentials of another user authorization is not\n   * necessary.\n   * Connection will be established in the anonymous mode\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase\n  ): Promise<boolean | Error> {\n    // if there is an active apps exists then it is necessary\n    // to provide the app name, elswere the Firebase will throw\n    // an error.\n    const appName = firebase.apps.length\n      ? configuration.databaseURL\n      : undefined;\n    const resultConnection = await super.connect(configuration, appName);\n\n    if (resultConnection instanceof Error) {\n      return resultConnection;\n    }\n    return true;\n  }\n\n  public async signInAnonymousely(): Promise<Error | void> {\n    try {\n      // may be authentificated with session\n      //await this.signInWithSessionPersisted();\n      const connectAnonymouselyResult = await this.app\n        .auth()\n        .signInAnonymously();\n      if (connectAnonymouselyResult instanceof Error) {\n        return connectAnonymouselyResult;\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect anonymousely');\n    }\n\n    const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n    if (connectWithStorageResult instanceof Error) {\n      console.error(connectWithStorageResult);\n      return new Error('Failed to connect to the credentials storage');\n    }\n    this.setIsAnonymousely();\n  }\n\n  /**\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login/email/uuid.\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const { status } = this;\n\n    if (status !== CA_CONNECTION_STATUS.DISCONNECTED) {\n      const { connectionWithCredentialsStorage } = this;\n\n      return connectionWithCredentialsStorage!.getUserCredentials(userId);\n    }\n    return new Error('Not connected to the Firebase');\n  }\n\n  /**\n   * @param {ICAConnectionSignUpCredentials} firebaseCredentials\n   * @param firebaseCredentials.login - there must be an email to authorize with a Firebase account\n   * @param firebaseCredentials.password - password used for encrypt a sensitive data and authorize\n   * in the Firebase account\n   * @param profile - if provided then the user profile will be set in firebase\n   */\n  public async authorize(\n    firebaseCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return this.onAuthorizationFailed(isConnected);\n    }\n\n    let authHandleResult;\n    const { isAuthorized } = this;\n\n    if (isAuthorized) {\n      authHandleResult = this.valueofCredentialsSignUpOnAuthorizedSuccess!!;\n    } else {\n      // try to sign in with the credentials, then try to sign up\n      // const userLoggedPromise = this.waitingUserInit();\n      const signInResult = await this.signIn(firebaseCredentials);\n\n      if (signInResult instanceof Error) {\n        console.warn('Failed to sign in with the credentials given');\n\n        if (!firebaseCredentials.password) {\n          // if there is no password provided, return the error\n          return signInResult;\n        }\n\n        // if failed to sign in with the credentials\n        // try to sign up\n        const signUpResult = await this.signUp(firebaseCredentials);\n\n        if (signUpResult instanceof Error) {\n          console.error('The user was failed to sign up');\n          return this.onAuthorizationFailed(signUpResult);\n        }\n      }\n      // const user = await userLoggedPromise;\n      // if (!user) {\n      //   return new Error('Failed to get the user authorized');\n      // }\n      // if (user instanceof Error) {\n      //   return new Error('Error on login');\n      // }\n      // if (!user.emailVerified) {\n\n      // check if the account was verfied by the user\n      const isVerifiedResult = await this.chekIfVerifiedAccount();\n\n      if (isVerifiedResult instanceof Error) {\n        console.error('The account is not verified');\n        return this.onAuthorizationFailed(isVerifiedResult);\n      }\n      //}\n\n      const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n      if (connectWithStorageResult instanceof Error) {\n        console.error(connectWithStorageResult);\n        return new Error('Failed to connect to the credentials storage');\n      }\n      // set the user login to use it to generate\n      // crypto credentials\n      this.setUserLogin(firebaseCredentials.login);\n\n      let cryptoCredentials:\n        | TCentralAuthorityUserCryptoCredentials\n        | Error\n        | undefined;\n\n      if (firebaseCredentials.session) {\n        const sessionCryptoCredentials = await this.readCryptoCrdentialsFromSession(\n          firebaseCredentials.session\n        );\n\n        if (sessionCryptoCredentials instanceof Error) {\n          console.error(\n            'Failed to get credentials from the session cause the error',\n            sessionCryptoCredentials\n          );\n        }\n        cryptoCredentials = sessionCryptoCredentials;\n      }\n      // create a new credentnials for the user or return\n      // an existing.\n      // if a crytpto credentials provided in signUpCredentials\n      // it will be used to set in the Firebase credentials\n      // storage\n      if (!cryptoCredentials || cryptoCredentials instanceof Error) {\n        cryptoCredentials = await this.createOrReturnExistingCredentialsForUser(\n          firebaseCredentials\n        );\n      }\n      if (cryptoCredentials instanceof Error) {\n        console.error('Failed to get a crypto credentials valid for the user');\n        return this.onAuthorizationFailed(cryptoCredentials);\n      }\n\n      // give user's profile\n      // with a credentials\n      authHandleResult = await this.returnOnAuthorizedResult(cryptoCredentials);\n      if (firebaseCredentials.session) {\n        const setCredentialsInSessionResult = await this.setCurrentUserCryptoCredentialsInSession(\n          firebaseCredentials.session,\n          cryptoCredentials\n        );\n\n        if (setCredentialsInSessionResult instanceof Error) {\n          console.error(\n            'Failed to set the credentials in the user session',\n            setCredentialsInSessionResult\n          );\n        }\n      }\n    }\n\n    if (authHandleResult instanceof Error) {\n      return this.onAuthorizationFailed(authHandleResult);\n    }\n    // if a profile data is necessary to be set\n    // by a profile data from the arguments given\n    if (profile && !isEmptyObject(profile)) {\n      const setProfileResult = await this.setProfileData(profile);\n\n      if (setProfileResult instanceof Error) {\n        console.error(setProfileResult);\n        return this.onAuthorizationFailed('Failed to set the profile data');\n      }\n\n      // set porofile is the user's profile\n      // data stored in the firebase\n      authHandleResult = {\n        profile: setProfileResult,\n        // TODO it is necessry to set this credentials in the database\n        cryptoCredentials: authHandleResult.cryptoCredentials,\n      };\n    }\n    // set the authentification success\n    // result. To return it on the second authorization\n    // request\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authHandleResult;\n    this.setValueofCredentialsSignUpOnAuthorizedSuccess(authHandleResult);\n    this.unsetIsAnonymousely();\n    return authHandleResult;\n  }\n\n  /**\n   * disconnect from the app and sign out\n   * if authorized\n   *\n   * @returns\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public async disconnect() {\n    const { app } = this;\n    if (!app) {\n      return;\n    }\n    if ((app as any).isDeleted_) {\n      return;\n    }\n    if (this.status === CA_CONNECTION_STATUS.AUTHORIZED) {\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        return signOutResult;\n      }\n      if (signOutResult !== true) {\n        return new Error('An unknown error has occurred while sign out');\n      }\n    }\n    return this.disconnectFromTheApp();\n  }\n\n  public async delete(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (currentUser instanceof Error) {\n      console.error(currentUser);\n      return new Error('Failed to read the current user');\n    }\n    if (currentUser == null) {\n      return new Error('There is no current user');\n    }\n\n    // try to sign in with the credentials.\n    // it is required by the firebase to sign in before\n    // delete the user.\n    const signInResult = await this.signIn(firebaseCredentials);\n\n    if (signInResult instanceof Error) {\n      console.error('Failed to sign in before the user deletion');\n      return signInResult;\n    }\n\n    try {\n      const result = (await currentUser.delete()) as unknown; // or maybe deleteWithCompletion method\n\n      if (result instanceof Error) {\n        console.error(result);\n        return new Error('Failed to delete the user from the firebase');\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to delete the user from the authority');\n    }\n\n    // disconnection from the firebase\n    // is not necessry cause the firebase\n    // disconnects automatically if the user\n    // delete himself\n    return true;\n  }\n\n  /**\n   * set that connected anonymousely\n   * to the Firebase\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setIsAnonymousely() {\n    this.isAnonymousely = true;\n  }\n\n  /**\n   * unset that connected to the Firebase\n   * anonymousely\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected unsetIsAnonymousely() {\n    this.isAnonymousely = false;\n  }\n\n  protected setValueofCredentialsSignUpOnAuthorizedSuccess(\n    authResult: ICAConnectionUserAuthorizedResult\n  ) {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authResult;\n  }\n\n  protected unsetValueofCredentialsSignUpOnAuthorizedSuccess() {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  /**\n   * set identity versions which are\n   * supported by the connection\n   * instance\n   *\n   * @protected\n   * @param {Array<TUserIdentityVersion>} [supportedVersions]\n   * @returns {(Error | void)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setVersionsSupported(\n    supportedVersions?: Array<TUserIdentityVersion>\n  ): Error | void {\n    if (supportedVersions instanceof Array) {\n      const len = supportedVersions.length;\n      let idx = 0;\n      let version;\n\n      for (; idx++; len < idx) {\n        version = supportedVersions[idx];\n        if (validateUserIdentityVersion(version)) {\n          this.supportedVersions.push(version);\n        }\n        return new Error('The version is not supproted');\n      }\n    }\n    return new Error('The argument must be an Array');\n  }\n\n  protected setUserLogin(login: string) {\n    this.userLogin = login;\n  }\n\n  /**\n   * this method generates credentials compilant to the version\n   * version 2 of the user identity. The firebase app user uid\n   * is used as the user id.\n   *\n   * @protected\n   * @returns {(Promise<\n   *     Error | TCentralAuthorityUserCryptoCredentials\n   *   >)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected generateNewCryptoCredentialsForConfigurationProvidedV2 = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL, currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('The user is not defined');\n    }\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV2(\n      {\n        [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: databaseURL,\n        [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: currentUser.uid,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  /**\n   * substitute the method to support v2 identity\n   *\n   * @protected\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @returns {(Promise<Error | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    const { cryptoCredentials } = signUpCredentials;\n    const V1 = CA_USER_IDENTITY_VERSIONS['01'];\n    let credentialsForV1 = false;\n\n    if (this.isVersionSupported(V1)) {\n      credentialsForV1 =\n        CA_USER_IDENTITY_VERSION_CURRENT === CA_USER_IDENTITY_VERSIONS['01'];\n\n      if (cryptoCredentials) {\n        // check a version of the credentials\n        // to decide what to do next\n        const cryptoCredentialsVersion = getVersionOfCryptoCredentials(\n          cryptoCredentials\n        );\n\n        if (cryptoCredentialsVersion instanceof Error) {\n          console.error(cryptoCredentialsVersion);\n          return new Error(\n            'Failed to define a version of the crypto credentials'\n          );\n        }\n        if (cryptoCredentialsVersion === CA_USER_IDENTITY_VERSIONS['01']) {\n          // if the credentials version is 01 we may use the\n          // current implementation cause it is fully\n          // compilant to that version\n          credentialsForV1 = true;\n        } else {\n          credentialsForV1 = false;\n        }\n      }\n      // if a credentials for the V1 must be generated and set\n      if (credentialsForV1 === true) {\n        return this.createOrSetCredentialsInDB(signUpCredentials);\n      }\n    }\n    // if the version is not 01, then provide another implementations\n    // of the methods to generate and set the crypto credentials\n    return this.createOrSetCredentialsInDB(\n      signUpCredentials,\n      this.generateNewCryptoCredentialsForConfigurationProvidedV2\n    );\n  }\n\n  /**\n   * disconnect from the Firebase app\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async disconnectFromTheApp(): Promise<Error | void> {\n    this.unsetIsAnonymousely();\n    this.unsetValueofCredentialsSignUpOnAuthorizedSuccess();\n\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    if (app) {\n      try {\n        // delete the application to allow connect to the Firebase with the same settings\n        await app.delete();\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to disconnect from the Firebase app');\n      }\n    } else {\n      return new Error('There is no active Firebase App instance to close');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseImplementation;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["2082","2083","2084","2085","2086"],"import { CAConnectionWithFirebaseUtilDatabase } from '../central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport {\n  getUserIdentityByCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK,\n} from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport {\n  ICAConnectionFirebase,\n  ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure,\n} from './central-authority-connection-firebase-utils.credentials-storage.types';\nimport { encodeForFirebaseKey } from 'utils/firebase-utils/firebase-utils';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsValidExportedCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { ICAConnectionSignUpCredentials } from '../../../central-authority-connections.types';\n\n/**\n * This class is used for storing\n * and reading the user's credentials.\n * It also used for reading\n * credentials of another user from the\n * Firebase remote database.\n * @export\n * @class CAConnectionFirestoreUtilsCredentialsStrorage\n * @extends {CAConnectionWithFirebaseUtilDatabase}\n */\nexport class CAConnectionFirestoreUtilsCredentialsStrorage extends CAConnectionWithFirebaseUtilDatabase {\n  protected connectionToFirebase?: ICAConnectionFirebase;\n\n  protected get firebaseUserData(): firebase.User | null | Error {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { app } = this;\n\n    try {\n      return app!!.auth().currentUser;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected get firebaseUserId(): string | Error {\n    const { firebaseUserData: userData } = this;\n\n    if (userData instanceof Error) {\n      console.error(userData);\n      return new Error('Failed to read the user data from a firebase');\n    }\n    if (userData == null) {\n      return new Error('There is no user data');\n    }\n    try {\n      return userData.uid;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  constructor(connectionToFirebase: ICAConnectionFirebase) {\n    super();\n\n    this.setUpConnection(connectionToFirebase);\n  }\n\n  /**\n   * returns a string will used to store/read value of\n   * the user credentials\n   * @protected\n   * @param {string} userId\n   * @returns {string}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected getCredentialsKeyByUserId(userId: string): string {\n    return `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${encodeForFirebaseKey(\n      userId\n    )}`;\n  }\n\n  protected checkIsConnected(): boolean | Error {\n    const isConnectedToDatabase = super.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { app, connectionToFirebase } = this;\n\n    if (!connectionToFirebase) {\n      return new Error(\n        'There is no instance implements a connection to the Firebase application'\n      );\n    }\n    if (!connectionToFirebase.isConnected) {\n      return new Error(\n        'There is no active connection to the firebase appliction'\n      );\n    }\n    if (!app) {\n      return new Error('There is no app connection');\n    }\n    return true;\n  }\n\n  protected checkIsAuthorized(): boolean | Error {\n    const isConnectedToDatabase = this.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { firebaseUserId, connectionToFirebase } = this;\n\n    if (!connectionToFirebase || !connectionToFirebase.isUserSignedIn) {\n      return new Error(\n        'The user is not authorized in the Firebase application'\n      );\n    }\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('The user is not authorized');\n    }\n    return true;\n  }\n\n  protected setUpConnection(connectionToFirebase: ICAConnectionFirebase) {\n    this.connectionToFirebase = connectionToFirebase;\n\n    const app = connectionToFirebase.getApp();\n\n    if (!app) {\n      throw new Error(\n        'There is no insatnce which implements a connection to the Firebase app'\n      );\n    }\n    this.app = app;\n  }\n\n  /**\n   *\n   * check if a credentials set in the storage\n   * are in the valid format\n   * @protected\n   * @param {*} storedCredentialsValue\n   * @returns {storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected checkStoredCredentialsFormat(\n    storedCredentialsValue: any\n  ): storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n    if (storedCredentialsValue instanceof Error) {\n      console.error(storedCredentialsValue);\n      return false;\n    }\n    if (storedCredentialsValue && typeof storedCredentialsValue === 'object') {\n      const {\n        credentials,\n        [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseId,\n      } = storedCredentialsValue;\n\n      // an id set for the user by the Firebase\n      if (typeof firebaseId === 'string') {\n        if (checkIsValidExportedCryptoCredentialsToString(credentials)) {\n          return true;\n        }\n        console.error(\n          \"Credentials are't exists or invalid in the stored credentials\"\n        );\n      } else {\n        console.error(\n          'Firebase user id is not valid in the stored credentials'\n        );\n      }\n    }\n    return false;\n  }\n\n  protected async getCredentialsByValueStored(\n    storedCredentialsValue: any,\n    signUpCredentials?: ICAConnectionSignUpCredentials\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (storedCredentialsValue == null) {\n      return null;\n    }\n    if (storedCredentialsValue instanceof Error) {\n      return storedCredentialsValue;\n    }\n    if (!this.checkStoredCredentialsFormat(storedCredentialsValue)) {\n      return new Error('the value stored have an unknown format');\n    }\n\n    const { credentials: exportedCredentials } = storedCredentialsValue;\n    const importedCredentials = await importCryptoCredentialsFromAString(\n      exportedCredentials,\n      signUpCredentials?.password\n    );\n\n    if (importedCredentials instanceof Error) {\n      console.error(importedCredentials);\n      return new Error('Failed to import credentials value stored');\n    }\n    return importedCredentials;\n  }\n\n  /**\n   *\n   * filter a value stored for the user key\n   * to get a value of the credentials\n   * for the user\n   * @protected\n   * @param {{\n   *     [key: string]: any;\n   *   }} [valueStored]\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | null | Error>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected async filterCredentialsValues(\n    valueStored: Record<string, any>,\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (!valueStored) {\n      return null;\n    }\n    if (valueStored instanceof Error) {\n      return valueStored;\n    }\n\n    const keys = Object.keys(valueStored);\n\n    // if an empty object\n    if (keys.length === 0) {\n      return null;\n    }\n\n    const len = Math.min(\n      keys.length,\n      CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK\n    );\n    let idx = 0;\n    let keyValueStored;\n    let valueValueStored;\n    let credentialsImported;\n\n    // for each property of the value stored\n    // check wherether it is a valid\n    // crypto credentials\n    for (; idx < len; idx++) {\n      keyValueStored = keys[idx];\n      valueValueStored = valueStored[keyValueStored];\n      credentialsImported = await this.getCredentialsByValueStored(\n        valueValueStored,\n        signUpCredentials\n      );\n\n      if (!(credentialsImported instanceof Error)) {\n        return credentialsImported;\n      }\n    }\n    return null;\n  }\n\n  // check if there is a credentials for the current user is exists\n  // and return it if exists\n  public async getCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no connection to the database server');\n    }\n    try {\n      // read a value storerd as user's\n      // credentials in the database\n      const snapshot = await database\n        .ref(CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX)\n        .orderByChild(\n          CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY\n        )\n        .equalTo(firebaseUserId)\n        .once('value');\n      if (snapshot.exists()) {\n        const valueStored = snapshot.val();\n        return this.filterCredentialsValues(valueStored, signUpCredentials);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the user data from the database');\n    }\n    return null;\n  }\n\n  // store the credentials value\n  // for the current user\n  public async setUserCredentials(\n    credentials: TCentralAuthorityUserCryptoCredentials,\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    // check if a credentials value is\n    // already exists for the user\n    const credentialsForTheCurrentUser = await this.getCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (\n      credentialsForTheCurrentUser != null &&\n      !(credentialsForTheCurrentUser instanceof Error)\n    ) {\n      // if a credentials are already stored for the user\n      // return it\n      return credentialsForTheCurrentUser;\n    }\n\n    const userId = getUserIdentityByCryptoCredentials(credentials);\n\n    if (userId instanceof Error) {\n      console.error(userId);\n      return new Error(\"Failed to get a user's identity from the credentials\");\n    }\n    if (!signUpCredentials.password) {\n      return new Error('The password is required to encrypt the private keys');\n    }\n\n    const exportedCryptoCredentials = await exportCryptoCredentialsToString(\n      credentials,\n      undefined,\n      signUpCredentials.password\n    );\n\n    if (exportedCryptoCredentials instanceof Error) {\n      console.error(exportedCryptoCredentials);\n      return new Error('Failed to export the crypto credentials value');\n    }\n\n    // check if the user id is not exists in the database\n    // user id is a user identity\n    // TODO - it's necessary to implement on the Firebase server to check whether the user can update credentials for the userid\n    const credentialsForTheUserId = await this.getUserCredentials(userId);\n\n    if (\n      credentialsForTheUserId != null &&\n      !(credentialsForTheUserId instanceof Error)\n    ) {\n      return new Error(\n        'A crypto credentials is already exists for the user id'\n      );\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storeResult = await this.setValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue, {\n      credentials: exportedCryptoCredentials,\n      [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseUserId,\n    });\n\n    if (storeResult instanceof Error) {\n      console.error(storeResult);\n      return new Error('Failed to store the credentials in the database');\n    }\n    return credentials;\n  }\n\n  /**\n   *\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login(email)\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    if (!this.checkIsConnected()) {\n      return new Error('There is no active connection to the Firebase');\n    }\n    if (!validateUserIdentity(userId)) {\n      return new Error('The user identity is not valid');\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storedCredentialsValue = await this.getValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue);\n\n    return this.getCredentialsByValueStored(storedCredentialsValue);\n  }\n\n  // disconnect from the database\n  public async disconnect(): Promise<Error | boolean> {\n    const isConnected = this.checkIsConnected();\n\n    if (!isConnected) {\n      return true;\n    }\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no active database connection');\n    }\n    try {\n      await database.goOffline();\n    } catch (err) {\n      console.error();\n      return new Error('Failed to disconnect from the databases');\n    }\n    return true;\n  }\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["2087"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["2088","2089","2090","2091","2092","2093","2094"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["2095"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport validator from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return validator.isURL(configuration.databaseURL);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["2096","2097"],"import { normalizeUrl } from 'utils/common-utils/common-utils-url';\nimport {\n  ICAConnectionsPoolOptions,\n  ICAConnectionsPoolConnections,\n  IAuthProviderConnectionConfiguration,\n  ICAConnectionsPoolCurrentConnections,\n  ICAConnectionPool,\n} from './central-authority-connections-pool.types';\nimport {\n  normalizeCAConnectionAuthProviderURL,\n  validateCAConnectionAuthProviderType,\n  validateCAConnectionAuthProviderConnectionConfiguration,\n  validateCAConnectionAuthProviderUrl,\n} from '../central-authority-connections-utils/central-authority-connections-utils';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { getConnectionConstructorAuthProviderType } from '../central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from '../central-authority-connections-const/central-authority-connections-const';\nimport { ICAConnectionUserAuthorizedResult } from '../central-authority-connections.types';\nimport { TCAuthProviderIdentifier } from '../../central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionPoolAuthResult } from './central-authority-connections-pool.types';\nimport { checkIsValidCryptoCredentials } from '../../central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from '../../central-authority-class-user-identity/central-authority-class-user-identity';\nimport { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from '../../central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { compareAuthProvidersIdentities } from '../../central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\n/**\n * This is used to establish connections\n * with auth providers to collect a\n * crypto keys of swarm users.\n *\n * @export\n * @class CAConnectionsPool\n */\nexport class CAConnectionsPool implements ICAConnectionPool {\n  public userAuthResult?: ICAConnectionPoolAuthResult;\n\n  /**\n   * States of connections to auth\n   * providers\n   *\n   * @protected\n   * @type {ICAConnectionsPoolConnections}\n   * @memberof CAConnectionsPool\n   */\n  protected providersConnectionState: ICAConnectionsPoolConnections = {};\n\n  /**\n   * connection throught which the user\n   * is authorized on auth provider service.\n   * Search trought all the connections\n   * connection with the auth flag.\n   *\n   * @readonly\n   * @protected\n   * @type {(ICAConnection | void)}\n   * @memberof CAConnectionsPool\n   */\n  protected get authConnection(): {\n    connection: ICAConnection;\n    authProviderId: TCAuthProviderIdentifier;\n  } | void {\n    const { providersConnectionState } = this;\n    const providersConnectionsStates = Object.values(providersConnectionState);\n    let idx = 0;\n    let authProviderConnection;\n    let authProviderUrl;\n    const len = providersConnectionsStates.length;\n\n    while (idx < len) {\n      ({\n        connection: authProviderConnection,\n        caProviderUrl: authProviderUrl,\n      } = providersConnectionsStates[idx++]);\n      if (\n        authProviderConnection &&\n        authProviderConnection.status === CA_CONNECTION_STATUS.AUTHORIZED\n      ) {\n        return {\n          connection: authProviderConnection,\n          authProviderId:\n            authProviderUrl ||\n            (authProviderConnection.authProviderURL as string),\n        };\n      }\n    }\n  }\n\n  /**\n   * Creates an instance of CAConnectionsPool.\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  constructor(options: ICAConnectionsPoolOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * at now it is alias for the connect method\n   *\n   * @param {TCAAuthProviderIdentity} authProvider\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  public getConnection(authProvider: TCAAuthProviderIdentity) {\n    return this.connect(authProvider);\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider or returns an existing connection\n   * if it is active(status !== DISCONNECTED)\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<ICAConnection | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async connect(\n    authProviderUrl: TCAAuthProviderIdentity,\n    isAuthentificateAnonymousely: boolean = true\n  ): Promise<ICAConnection | Error> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n\n    const currentConnectionWithAuthProvider = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      console.error(currentConnectionWithAuthProvider);\n      return new Error(\n        `Failed to resolve an active connection with the provider ${authProviderUrl}`\n      );\n    }\n    if (currentConnectionWithAuthProvider) {\n      return currentConnectionWithAuthProvider;\n    }\n\n    const connectionWithAuthProvider = await this.connectWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (connectionWithAuthProvider instanceof Error) {\n      return connectionWithAuthProvider;\n    }\n    if (isAuthentificateAnonymousely) {\n      const ananymousResult = await connectionWithAuthProvider.signInAnonymousely();\n\n      if (ananymousResult instanceof Error) {\n        return ananymousResult;\n      }\n      return this.addConectionWithProvider(\n        authProviderUrl,\n        connectionWithAuthProvider\n      );\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * authorize on the service or return an existing\n   * connection which is the user authorized through\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @param {Partial<ICentralAuthorityUserProfile>} [profile]\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  public async authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n    if (this.userAuthResult) {\n      // if the user is already authorized on auth provider service\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        console.error(signOutResult);\n        return new Error(\n          'The user is already authorized on the auth provider service, and failed to sign out from it'\n        );\n      }\n    }\n\n    const currentConnectionWithProviderAuthOn = this.authConnection;\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('Failed to normalize the url of the auth provider');\n    }\n    if (currentConnectionWithProviderAuthOn) {\n      const {\n        authProviderId: currentAuthProviderUrl,\n        connection,\n      } = currentConnectionWithProviderAuthOn;\n      const normalizedUrlAuthProviderCurrent = normalizeUrl(\n        currentAuthProviderUrl\n      );\n\n      if (normalizedUrlAuthProviderCurrent !== normalizedUrl) {\n        return new Error(\n          `Already authorized on the ${normalizedUrlAuthProviderCurrent} service, differ from the requested ${authProviderUrl}`\n        );\n      }\n      return connection;\n    }\n\n    const connectionWithAuthProvider = await this.connect(\n      authProviderUrl,\n      false\n    );\n\n    if (connectionWithAuthProvider instanceof Error) {\n      console.error(connectionWithAuthProvider);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n\n    const authResult = await connectionWithAuthProvider.authorize(\n      signUpCredentials,\n      profile\n    );\n\n    if (authResult instanceof Error) {\n      const disconnectFromTheConnectionResult = await connectionWithAuthProvider.disconnect();\n\n      if (disconnectFromTheConnectionResult instanceof Error) {\n        console.error(disconnectFromTheConnectionResult);\n        console.error(\n          new Error(\n            'Failed to disconnect form the auth provider which failed to authorize on'\n          )\n        );\n      }\n      console.error(\n        `Failed to authorize with the auth provider ${authProviderUrl}`\n      );\n      return authResult;\n    }\n\n    const addConnectionResult = await this.addConectionWithProvider(\n      authProviderUrl,\n      connectionWithAuthProvider\n    );\n\n    if (addConnectionResult instanceof Error) {\n      try {\n        await connectionWithAuthProvider.disconnect();\n      } catch (err) {\n        console.error('Failed to disconnect', err);\n      }\n      return addConnectionResult;\n    }\n    this.setAuthResult(authProviderUrl, authResult);\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * disconnect from the auth provider.\n   * succed even if not connected to.\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<void | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async disconnect(\n    authProviderUrl: TCAuthProviderIdentifier\n  ): Promise<void | Error> {\n    const currentConnectionWithAuthProvider = this.getConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      return currentConnectionWithAuthProvider;\n    }\n    if (currentConnectionWithAuthProvider) {\n      const disconnectionResult = await currentConnectionWithAuthProvider.disconnect();\n\n      if (disconnectionResult instanceof Error) {\n        console.error(disconnectionResult);\n        return new Error(\n          `Failed to disconnect from the auth provider ${authProviderUrl}`\n        );\n      }\n    }\n    return this.unsetConnectionWithAuthProvider(authProviderUrl);\n  }\n\n  /**\n   * disconnect from all the active connections\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async close(): Promise<Error | void> {\n    const { providersConnectionState } = this;\n    const providerConnectionStateValues = Object.values(\n      providersConnectionState\n    );\n    const disconnectResults = [];\n    const len = providerConnectionStateValues.length;\n    let idx = 0;\n    let connectionToAuthProviderStateDesc;\n    let connectionToAuthProvider;\n    let errorMessage = '';\n\n    while (idx < len) {\n      connectionToAuthProviderStateDesc = providerConnectionStateValues[idx++];\n      ({\n        connection: connectionToAuthProvider,\n      } = connectionToAuthProviderStateDesc);\n      idx += 1;\n      if (connectionToAuthProvider) {\n        const connectionToAuthProviderUrl =\n          connectionToAuthProviderStateDesc.caProviderUrl;\n\n        if (\n          connectionToAuthProvider.status !== CA_CONNECTION_STATUS.DISCONNECTED\n        ) {\n          disconnectResults.push(\n            connectionToAuthProvider\n              .disconnect()\n              .then((result) => {\n                if (result instanceof Error) {\n                  console.error(result);\n                  errorMessage += `/nThe error has occured when disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n                } else {\n                  this.unsetConnectionWithAuthProvider(\n                    connectionToAuthProviderUrl\n                  );\n                }\n              })\n              .catch((err) => {\n                console.error(err);\n                errorMessage += `/nCrashed while disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n              })\n          );\n        }\n        this.unsetConnectionWithAuthProvider(connectionToAuthProviderUrl);\n      }\n    }\n    // wait till all connections will be pro\n    await Promise.all(disconnectResults);\n    if (errorMessage) {\n      return new Error(errorMessage);\n    }\n  }\n\n  /**\n   * sign out from the auth provider service\n   * which is currently authorized on and close the connection\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async signOut(): Promise<Error | void> {\n    const { authConnection } = this;\n\n    this.unsetAuthResult();\n    if (authConnection) {\n      const { connection, authProviderId: authProviderUrl } = authConnection;\n\n      if (connection) {\n        const disconnectResult = await this.disconnect(authProviderUrl);\n\n        if (disconnectResult instanceof Error) {\n          console.error(disconnectResult);\n          return new Error(\n            `Failed to disconnect from the auth procider ${authProviderUrl} on sign out from it`\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * set the auth result and check the auth provider\n   * in the result is equals to the auth provider id.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderId\n   * @param {ICAConnectionUserAuthorizedResult} authResult\n   * @returns {(Error | void)}\n   * @memberof CAConnectionsPool\n   */\n  protected setAuthResult(\n    authProviderId: TCAAuthProviderIdentity,\n    authResult: ICAConnectionUserAuthorizedResult\n  ): Error | void {\n    const { cryptoCredentials } = authResult;\n    const validationResult = checkIsValidCryptoCredentials(cryptoCredentials);\n\n    if (!validationResult) {\n      return new Error('The crypto credentials are not valid');\n    }\n\n    const userIdentity = new CentralAuthorityIdentity(\n      cryptoCredentials.userIdentity\n    );\n\n    if (userIdentity.identityDescription instanceof Error) {\n      return new Error('The user identity is not valid');\n    }\n    if (\n      !compareAuthProvidersIdentities(\n        userIdentity.identityDescription[\n          CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n        ],\n        authProviderId\n      )\n    ) {\n      return new Error(`\n        The auth provider url from the auth crdentials ${userIdentity.identityDescription[CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]} is not equals to the provider the user authorized on ${authProviderId}\n      `);\n    }\n\n    this.userAuthResult = {\n      ...authResult,\n      authProviderId,\n    };\n  }\n\n  protected unsetAuthResult() {\n    this.userAuthResult = undefined;\n  }\n\n  /**\n   * returns the current state of a connection\n   * to the auth provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnectionsPoolCurrentConnections | undefined | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getAuthProviderStateDesc(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnectionsPoolCurrentConnections | undefined | Error {\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('The url is not valid');\n    }\n\n    const { providersConnectionState } = this;\n\n    return providersConnectionState[normalizedUrl];\n  }\n\n  protected async addConectionWithProvider(\n    authProviderUrl: string,\n    connectionWithAuthProvider: ICAConnection\n  ): Promise<ICAConnection | Error> {\n    const setConnectionInAuhProviderConnectionStatesStore = this.setConnectionWithAuthProvider(\n      authProviderUrl,\n      connectionWithAuthProvider\n    );\n\n    if (setConnectionInAuhProviderConnectionStatesStore instanceof Error) {\n      console.error(setConnectionInAuhProviderConnectionStatesStore);\n\n      const disconnectResult = await connectionWithAuthProvider.disconnect();\n\n      if (disconnectResult instanceof Error) {\n        console.error(disconnectResult);\n      }\n      return new Error('Failed to set connection with auth provider');\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * returns connection which is active\n   * and the status !== DISCONNECTED\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getActiveConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      const { connection } = authProviderState;\n\n      if (\n        connection &&\n        connection.status !== CA_CONNECTION_STATUS.DISCONNECTED\n      ) {\n        return connection;\n      }\n    }\n  }\n\n  /**\n   * returns any connection\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      return authProviderState.connection;\n    }\n  }\n\n  /**\n   * updates the current state of connection\n   * with the auth provider.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolCurrentConnections} authProviderConnectionState\n   * @memberof CAConnectionsPool\n   */\n  protected updateStateAuthProvider(\n    authProviderConnectionState: Partial<\n      ICAConnectionsPoolCurrentConnections\n    > & { caProviderUrl: ICAConnectionsPoolCurrentConnections['caProviderUrl'] }\n  ) {\n    const { caProviderUrl } = authProviderConnectionState;\n\n    if (!caProviderUrl) {\n      return new Error('An url of the auth provider must be specified');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n\n    if (authProviderUrlNormalized instanceof Error) {\n      return authProviderUrlNormalized;\n    }\n\n    const { providersConnectionState } = this;\n    const existingState = providersConnectionState[authProviderUrlNormalized];\n\n    if (!existingState) {\n      providersConnectionState[\n        caProviderUrl\n      ] = authProviderConnectionState as ICAConnectionsPoolCurrentConnections;\n    } else {\n      Object.assign(existingState, authProviderConnectionState);\n    }\n  }\n\n  /**\n   * set an active connection with an\n   * auth provider in the auth\n   * providers state.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnection} connection\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  protected setConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity,\n    connection: ICAConnection\n  ) {\n    const authProviderUrlNormalized = normalizeUrl(authProviderUrl);\n\n    if (authProviderUrlNormalized instanceof Error) {\n      console.error(authProviderUrlNormalized);\n      return new Error('The url is not valid');\n    }\n\n    if (!connection) {\n      return new Error(\n        `Connection with the auth provider ${authProviderUrl} must be specified`\n      );\n    }\n    if (\n      typeof connection.authorize !== 'function' ||\n      typeof connection.connect !== 'function'\n    ) {\n      return new Error('The instance of the CAConnection is not valid');\n    }\n    if (connection.status === CA_CONNECTION_STATUS.DISCONNECTED) {\n      return new Error('The connection must be in active state');\n    }\n\n    const existingConnection = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (existingConnection instanceof Error) {\n      return existingConnection;\n    }\n    if (existingConnection) {\n      return new Error(\n        `Connection with the ${authProviderUrl} is already exists`\n      );\n    }\n    return this.updateStateAuthProvider({\n      connection,\n      caProviderUrl: authProviderUrl,\n    });\n  }\n\n  /**\n   * unset the current connection in the auth provider\n   * connections states store\n   *\n   * @protected\n   * @memberof CAConnectionsPool\n   */\n  protected unsetConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Error | void {\n    return this.updateStateAuthProvider({\n      caProviderUrl: authProviderUrl,\n      connection: undefined,\n    });\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  protected async connectWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection> {\n    const normalizedAuthProviderUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedAuthProviderUrl instanceof Error) {\n      console.error(normalizedAuthProviderUrl);\n      return new Error('The url provided for the auth provider is not valid');\n    }\n\n    const stateOfAuthProvider = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (stateOfAuthProvider instanceof Error) {\n      console.error(stateOfAuthProvider);\n      return new Error(\n        `The configuration for the ${authProviderUrl} is not valid`\n      );\n    }\n    if (!stateOfAuthProvider) {\n      return new Error(`The url provided ${authProviderUrl} is not known`);\n    }\n\n    const { options, caProvider } = stateOfAuthProvider;\n\n    if (!options) {\n      return new Error(\n        `Connection options is not specified for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (caProvider == null) {\n      return new Error(\n        'Auth provider type is not specified in the current state'\n      );\n    }\n\n    const ConnectionConstructor = getConnectionConstructorAuthProviderType(\n      caProvider\n    );\n\n    if (!ConnectionConstructor) {\n      return new Error(\n        `There is no constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (ConnectionConstructor instanceof Error) {\n      console.error(ConnectionConstructor);\n      return new Error(\n        `An error has occurred on define constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n\n    let connectionWithAuthProvider;\n    try {\n      connectionWithAuthProvider = new ConnectionConstructor();\n    } catch (err) {\n      console.error(err);\n      return new Error('The error has occurred when construct the connection');\n    }\n\n    const connectionResult = await connectionWithAuthProvider.connect(options);\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * add auth provider in the description\n   * of a state of connections\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration} authProviderConnectionConfiguration\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected addAuthProvider = (\n    authProviderConnectionConfiguration: IAuthProviderConnectionConfiguration\n  ): void => {\n    if (!authProviderConnectionConfiguration) {\n      throw new Error('Configuration for the auth provider is not defined');\n    }\n    if (typeof authProviderConnectionConfiguration !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n\n    const {\n      caProvider,\n      caProviderUrl,\n      options,\n    } = authProviderConnectionConfiguration;\n\n    if (caProvider == null) {\n      throw new Error('Provider type must be defined');\n    }\n    if (!validateCAConnectionAuthProviderType(caProvider)) {\n      throw new Error('The auth provider type is wrong');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n    const { providersConnectionState } = this;\n\n    if (authProviderUrlNormalized instanceof Error) {\n      throw authProviderUrlNormalized;\n    }\n    if (providersConnectionState[authProviderUrlNormalized]) {\n      throw new Error(\n        `Configuration was already set for the auth provider ${authProviderUrlNormalized}`\n      );\n    }\n    if (!options) {\n      throw new Error(\n        `Configuration for the auth provider ${authProviderUrlNormalized} is not specified`\n      );\n    }\n    if (\n      !validateCAConnectionAuthProviderConnectionConfiguration(\n        caProvider,\n        options\n      )\n    ) {\n      throw new Error(\n        `The configuration for the auth provider ${authProviderUrlNormalized} is not valid`\n      );\n    }\n\n    const setAuthProviderConnectionStateResult = this.updateStateAuthProvider({\n      caProvider,\n      caProviderUrl,\n      options,\n    });\n\n    if (setAuthProviderConnectionStateResult instanceof Error) {\n      throw setAuthProviderConnectionStateResult;\n    }\n  };\n\n  /**\n   * set options for auth providers connections constructors\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration[]} providers\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptionsOfAuthProviders(\n    providers: IAuthProviderConnectionConfiguration[]\n  ): void {\n    if (!providers) {\n      throw new Error('Providers property must be specified');\n    }\n    if (!(providers instanceof Array)) {\n      throw new Error('Providers must be an instance of Array');\n    }\n    if (!providers.length) {\n      throw new Error('Providers property must not be an empty array');\n    }\n    // add each auth provider configuration\n    // to connect on in a feature\n    providers.forEach(this.addAuthProvider);\n  }\n\n  /**\n   * set options for the instance.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptions(options: ICAConnectionsPoolOptions): void {\n    const { providers } = options;\n\n    this.setOptionsOfAuthProviders(providers);\n  }\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["2098"],"import { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase/central-authority-connection-firebase.types.configuration';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  TCAConnectionsAuthProviderConnectionOptions,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { CA_CONNECTION_AUTH_PROVIDERS } from '../central-authority-connections.const';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAConnectionUserAuthorizedResult } from '../central-authority-connections.types';\nimport { TCAuthProviderIdentifier } from '../../central-authority-class-user-identity/central-authority-class-user-identity.types';\n\n/**\n * options to connect with\n * auth provider extended by the provider type\n */\nexport type TAuthProviderConnectionOptions = TCAConnectionsAuthProviderConnectionOptions;\n\n/**\n * configuration to establish connectoin\n * with an auth provider\n */\nexport interface IAuthProviderConnectionConfiguration {\n  options: TAuthProviderConnectionOptions;\n  caProviderUrl: TCAAuthProviderIdentity;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n}\n\n/**\n * options for all known auth\n * providers, to establish connection\n * with any provider is necessary to\n * read swarm user's crypro credentials\n *\n * @export\n * @interface ICAConnectionsPoolOptions\n */\nexport interface ICAConnectionsPoolOptions {\n  providers: IAuthProviderConnectionConfiguration[];\n}\n\n/**\n * description of a connection which is currently\n * established or not.\n * If connection is defined than it means active.\n *\n * @export\n * @interface ICAConnectionsPoolCurrentConnections\n */\nexport interface ICAConnectionsPoolCurrentConnections {\n  options: TAuthProviderConnectionOptions;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n  caProviderUrl: TCAAuthProviderIdentity;\n  connection?: ICAConnection;\n}\n\n/**\n * States of a connections are in here.\n * If connection is established then\n * it's not necessary to establish a new\n * one.\n *\n * @export\n * @interface ICAConnectionsPoolConnections\n */\nexport interface ICAConnectionsPoolConnections {\n  [key: string]: ICAConnectionsPoolCurrentConnections;\n}\n\nexport interface ICAConnectionPoolAuthResult\n  extends ICAConnectionUserAuthorizedResult {\n  authProviderId: TCAuthProviderIdentifier;\n}\n\nexport interface ICAConnectionPool {\n  // will be defined if the user is authorized\n  // on auth provider service, otherwise\n  // it will be undefined.\n  userAuthResult?: ICAConnectionUserAuthorizedResult;\n  // establish a new connection with the auth provider or returns an existing\n  getConnection(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection>;\n  /**\n   *\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {boolean} [isAuthentificateAnonymousely = true] - authentificate without credentials\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof ICAConnectionPool\n   */\n  connect(\n    authProviderUrl: TCAAuthProviderIdentity,\n\n    isAuthentificateAnonymousely?: boolean\n  ): Promise<Error | ICAConnection>;\n  // authorize on the auth provider service or return an existing connection authorized on\n  authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection>;\n  // disconnect from the auth provider service\n  disconnect(authProviderUrl: TCAAuthProviderIdentity): Promise<Error | void>;\n  // disconnect from all the connected providers\n  close(): Promise<Error | void>;\n  // sign out from the service currently authorized throught\n  signOut(): Promise<Error | void>;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["2099","2100"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport validator from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return validator.isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["2101","2102","2103","2104"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any,\n  checkPrivateKeys: boolean = true\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair, checkPrivateKeys)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair, checkPrivateKeys)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["2105"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  dataSignExportKeyPairAsString as exportKeyPairDataSignAsString,\n  dataSignExportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs,\n  password?: string\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs, !!password)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair, password),\n    exportKeyPairDataSignAsString(signDataKeyPair, password),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["2106","2107"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { calcCryptoKeyPairHash } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections/central-authority-connections.types';\nimport { normalizeUrl } from '../../../../utils/common-utils/common-utils-url';\nimport { CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS } from './central-authority-utils-crypto-credentials.const';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  withoutIdentityVersion: boolean = false,\n  password?: string\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials, !!password)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys, password);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n  if (withoutIdentityVersion) {\n    const userCAIdentity = new CentralAuthorityIdentity(userIdentity);\n    const { id } = userCAIdentity;\n\n    if (id instanceof Error) {\n      return new Error('The identity is not valid');\n    }\n    cryptoCredentialsExported[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME] = id;\n  }\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\n// allow to absent for a private keys in a pairs\nexport const exportCryptoCredentialsToStringWithoutTheCAIdentityVersion = (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> =>\n  exportCryptoCredentialsToString(userCryptoCredentials, true);\n\nexport const compareAuthProvidersIdentities = (\n  ...authProvidersIds: TCAAuthProviderIdentity[]\n): boolean => {\n  const { length: len } = authProvidersIds;\n\n  if (len < 2) {\n    return true;\n  }\n\n  const firstAuthProviderId = normalizeUrl(\n    authProvidersIds[0],\n    CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n  );\n  let idx = 0;\n\n  while (++idx < len) {\n    if (\n      firstAuthProviderId !==\n      normalizeUrl(\n        authProvidersIds[idx],\n        CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const cryptoCredentialsBase = credentials[0];\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsBase)) {\n    return new Error('The crypto credentials on index 0 is not valid');\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  const userIdentityBase = new CentralAuthorityIdentity(\n    cryptoCredentialsBase[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n  );\n\n  if (!userIdentityBase.isValid) {\n    return new Error(\n      'The user identity is not valid in the crypto credentials base'\n    );\n  }\n\n  const cryptoCredentialsKeysBase =\n    cryptoCredentialsBase[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n  const cryptoCredentialsEncryptKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.encryptionKeyPair\n  );\n\n  if (cryptoCredentialsEncryptKeyPairHashBase instanceof Error) {\n    return new Error('Failed to calculate hash of the encrypt key pairs base');\n  }\n\n  const cryptoCredentialsSignKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.signDataKeyPair\n  );\n\n  if (cryptoCredentialsSignKeyPairHashBase instanceof Error) {\n    return new Error(\n      'Failed to calculate hash of the data sign key pairs base'\n    );\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let nextCryptoCredentials = null;\n  let keyPairs = null;\n  let userIdentity = null;\n  let encryptionKeyPairsHash = null;\n  let signPairsHash = null;\n\n  for (; idx < length; idx += 1) {\n    nextCryptoCredentials = credentials[idx];\n\n    if (!checkIsValidCryptoCredentials(nextCryptoCredentials)) {\n      return new Error(`The crypto credentials on index ${idx} is not valid`);\n    }\n\n    userIdentity = new CentralAuthorityIdentity(\n      nextCryptoCredentials[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n    );\n\n    if (!userIdentity.isValid) {\n      return new Error(\n        `The user identity is not valid in the crypto credentials on index ${idx}`\n      );\n    }\n    if (userIdentity.id !== userIdentityBase.id) {\n      return new Error(`The user identity are different on index ${idx}`);\n    }\n\n    keyPairs = nextCryptoCredentials[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n    encryptionKeyPairsHash = await calcCryptoKeyPairHash(\n      keyPairs.encryptionKeyPair\n    );\n\n    if (cryptoCredentialsEncryptKeyPairHashBase !== encryptionKeyPairsHash) {\n      return new Error(\n        `The encryption key pairs are different on index ${idx}`\n      );\n    }\n\n    signPairsHash = await calcCryptoKeyPairHash(keyPairs.signDataKeyPair);\n\n    if (cryptoCredentialsSignKeyPairHashBase !== signPairsHash) {\n      return new Error(`The data sign key pairs are different on index ${idx}`);\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any,\n  password?: string\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(\n    cryptoKeysExported,\n    password\n  );\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials, !!password)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any,\n  password?: string\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(\n    cryptoCredentialsExported,\n    password\n  );\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs, checkPrivateKey)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials, checkPrivateKey)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs, checkPrivateKey)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs,\n      checkPrivateKey\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity | string,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Promise<Error | string> => {\n  if (caIdentity instanceof CentralAuthorityIdentity) {\n    if (caIdentity.isValid) {\n      return getExportedAsStringCryptoCredentials(\n        String(caIdentity), // conver it to identity\n        cryptoCredentialsKeyPairs,\n        checkPrivateKey\n      );\n    }\n    return new Error('The CA identity is wrong');\n  }\n  return new Error('The CA identity must be an instance of caIdentity');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity,\n  checkPrivateKey: boolean = true\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials, checkPrivateKey)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  checkPrivateKey: boolean = true\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs, checkPrivateKey)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n\nexport const getUserIdentityVersion = (\n  userIdentity: TCentralAuthorityUserIdentity | CentralAuthorityIdentity\n): TUserIdentityVersion | Error => {\n  if (\n    !(userIdentity instanceof CentralAuthorityIdentity) &&\n    typeof userIdentity !== 'string'\n  ) {\n    return new Error(\n      'The userIdentity must be a string or an instance of the CentralAuthorityIdentity class'\n    );\n  }\n\n  const userIdentityObj = new CentralAuthorityIdentity(userIdentity);\n\n  if (!userIdentityObj.isValid) {\n    return new Error('The user identity is not valid');\n  }\n  return userIdentityObj.version;\n};\n\nexport const getVersionOfCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): TUserIdentityVersion | Error => {\n  const userIdentity = getUserIdentityByCryptoCredentials(cryptoCredentials);\n\n  if (userIdentity instanceof Error) {\n    return userIdentity;\n  }\n  return getUserIdentityVersion(userIdentity);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["2108","2109","2110","2111","2112","2113"],"import {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserCryptoCredentialsExported,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsCryptoKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any,\n  checkPrivateKey: boolean = true\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys, checkPrivateKey)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair by a function provided\n * and user's identity\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsWithFunc = (\n  cryptoCredentials: any,\n  credentialsValidationFunction: (c: any) => boolean\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!credentialsValidationFunction(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (\n    !checkIsValidCryptoCredentialsWithFunc(\n      cryptoCredentials,\n      checkIsValidExportedCryptoCredentialsToString\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["2114"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/index.ts",[],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts",[],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.ts",["2115","2116","2117","2118","2119","2120","2121","2122","2123","2124","2125","2126","2127","2128"],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts",["2129","2130"],"/home/paul/projects/protocol/src/classes/connection-bridge/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts",["2131","2132"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport path from 'path';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_PROVIDER_HTTP_TYPE,\n  FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER,\n} from './filestorage-class-provider-http.const';\nimport { HTTP_REQUEST_MODE } from 'classes/basic-classes/http-request-class-base';\nimport { downloadFileByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class FileStorageClassProviderHTTP\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.HTTP> {\n  public type = FILE_STORAGE_PROVIDER_HTTP_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n\n  public get status() {\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/http') || this.isBlobAddr(addr);\n  }\n\n  public async connect(options: {}) {\n    return FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n  }\n\n  public async close() {}\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: {}\n  ): Promise<TFileStorageFileAddress> => {\n    throw new Error('The HTTP provider does not supports files uploading');\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileGetOptions\n  ): Promise<File> => {\n    const urlNormalized = this.getFileURL(addr);\n    const req = new HttpRequest({\n      credentials: 'include',\n      mode: HTTP_REQUEST_MODE.CORS,\n      ...options,\n      url: urlNormalized,\n    });\n\n    return await req.send();\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileAddOptions\n  ) => {\n    const urlNormalized = this.getFileURL(addr);\n\n    downloadFileByUrl(urlNormalized);\n  };\n\n  protected isBlobAddr(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/data:');\n  }\n\n  protected getFileURL(addr: TFileStorageFileAddress): string {\n    if (this.isBlobAddr(addr)) {\n      return addr.slice(1);\n    }\n\n    const isHttps = addr.startsWith('/https');\n    const protocol = isHttps ? 'https://' : 'http://';\n    const addrWithoutPrefix = (isHttps ? addr.slice(6) : addr.slice(5)).replace(\n      /^\\W+/,\n      ''\n    );\n    const resultedUrl = `${protocol}${addrWithoutPrefix}`;\n\n    return String(new URL(resultedUrl));\n  }\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts",["2133","2134","2135","2136"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport {\n  IFileStorageClassProviderIPFSOptions,\n  IFileStorageClassProviderIPFSFileAddOptions,\n} from './filestorage-class-provider-ipfs.types';\nimport {\n  FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER,\n  FILE_STORAGE_PROVIDER_IPFS_TYPE,\n} from './filestorage-class-provider-ipfs.const';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport { extend } from 'utils';\nimport { getFileSize } from 'utils/files-utils';\nimport assert from 'assert';\nimport path from 'path';\nimport { FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS } from './filestorage-class-provider-ipfs.const';\nimport { IPFS, FileObject, IPFSFile } from 'types/ipfs.types';\nimport BufferList from 'bl';\nimport { FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT } from './filestorage-class-provider-ipfs.const';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport { UnixTime } from 'types/ipfs.types';\nimport { downloadFile } from '../../../../utils/files-utils/files-utils-download';\nimport {\n  IFileStorageClassProviderIPFSFileGetOptions,\n  IFileStorageClassProviderIPFSFileDownloadOptions,\n} from './filestorage-class-provider-ipfs.types';\n\nexport class FileStorageClassProviderIPFS\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.IPFS> {\n  public type = FILE_STORAGE_PROVIDER_IPFS_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n\n  public get status() {\n    const { _ipfs: ipfs } = this;\n\n    if (!ipfs || !ipfs.isOnline()) {\n      return FILE_STORAGE_SERVICE_STATUS.NOT_READY;\n    }\n    if (!ipfs.files || this._error) {\n      return FILE_STORAGE_SERVICE_STATUS.ERROR;\n    }\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  /**\n   * this is the prefix for path\n   * of each file uploaded\n   *\n   * @protected\n   * @type {string}\n   * @memberof FileStorageClassProviderIPFS\n   */\n  protected _rootPath: string = FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n\n  protected _ipfs?: IPFS;\n\n  protected _error?: Error;\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/ipfs');\n  }\n\n  public async connect(options: IFileStorageClassProviderIPFSOptions) {\n    try {\n      this.setOptions(options);\n      await this._ipfs?.ready;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n    return FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n  }\n\n  public async close() {\n    this._ipfs = undefined;\n  }\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageClassProviderIPFSFileAddOptions\n  ): Promise<TFileStorageFileAddress> => {\n    const ipfs = this._ipfs;\n    const fileSize = getFileSize(file);\n\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(fileSize, 'Failed to get a size of the file');\n    let files: IPFSFile[] | Error | undefined;\n    const progressCallback = options?.progress;\n    let resolve: undefined | Function;\n    const pending = new Promise((res, rej) => {\n      resolve = res;\n    });\n    const opts = extend(\n      options || {},\n      {\n        pin: false,\n        cidVersion: 1,\n        progress: (bytes: number) => {\n          const percent = (bytes / fileSize!) * 100;\n\n          if (progressCallback) {\n            progressCallback(percent);\n          }\n          if (resolve && percent >= 100) {\n            resolve();\n          }\n        },\n      },\n      true\n    );\n\n    try {\n      files = await Promise.race([\n        ipfs?.add(this.getFileObject(filename, file), opts),\n        timeout(FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS),\n      ]);\n      await pending;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n\n    if (!files) {\n      throw new Error('Failed to upload for an unknown reason');\n    }\n    if (files instanceof Error) {\n      throw files;\n    }\n    return this.getMultiaddr(files[0]);\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileGetOptions\n  ): Promise<File> => {\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(this.isFileServed(addr), 'The file is not supported by the service');\n\n    const ipfs = this._ipfs;\n    const fileDesc = this.getFileDescription(addr);\n    const filesOrChunks = await ipfs!.get(fileDesc.cid);\n    const content = new BufferList();\n    let lastModified = 0;\n    let fileBlob: ArrayBuffer | Blob[];\n\n    if (!filesOrChunks) {\n      throw new Error('Failed to read the file');\n    }\n    if (filesOrChunks instanceof Array) {\n      const chunksLen = filesOrChunks.length;\n      let idx = 0;\n\n      while (idx < chunksLen) {\n        const chunk = filesOrChunks[idx++];\n        content.append(chunk.content);\n        lastModified = this.getMSByUnix(chunk.mtime);\n      }\n      const buff = content.slice();\n      fileBlob = buff.buffer.slice(\n        buff.byteOffset,\n        buff.byteOffset + buff.byteLength\n      );\n    } else {\n      if (!filesOrChunks.content) {\n        throw new Error(\"Failed to read the file's content\");\n      }\n      if (filesOrChunks.content instanceof Blob) {\n        fileBlob = [filesOrChunks.content];\n        if (filesOrChunks.mtime) {\n          lastModified = this.getMSByUnix(filesOrChunks.mtime);\n        }\n      } else if (typeof filesOrChunks.content === 'string') {\n        content.append(filesOrChunks.content);\n      }\n      throw new Error('Unknown content type');\n    }\n    return new File([fileBlob], fileDesc.path, {\n      lastModified: lastModified ? lastModified : undefined,\n    });\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileDownloadOptions\n  ) => {\n    const file = await this.get(addr, options);\n\n    downloadFile(file);\n  };\n\n  protected setOptions(options: IFileStorageClassProviderIPFSOptions) {\n    assert(options.ipfs, 'An instance of IPFS must be provided in the options');\n    this._ipfs = options.ipfs;\n    this._rootPath =\n      options.rootPath || FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n  }\n\n  protected getFileObject(\n    filename: string,\n    file: TFileStorageFile\n  ): FileObject {\n    const filePath = path.join('/', this._rootPath, filename);\n\n    return {\n      path: filePath,\n      content: file,\n      mtime: file instanceof File ? new Date(file.lastModified) : undefined,\n    };\n  }\n\n  protected getMultiaddr(file: IPFSFile): TFileStorageFileAddress {\n    return path.join('/ipfs/', file.hash, file.path);\n  }\n\n  protected getFileDescription(addr: TFileStorageFileAddress) {\n    const [nothing, prefix, cid, path] = addr.split('/');\n\n    assert(cid, 'Failed to get CID by the address');\n    assert(path, 'Failed to get file path by the address');\n    return {\n      cid,\n      path,\n    };\n  }\n\n  protected getMSByUnix(unix?: UnixTime): number {\n    return unix && unix.secs ? unix.secs : Date.now();\n  }\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts",["2137","2138"],"import { IFileStorageService } from './filestorage-class.types';\n/**\n * status of a service\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_STATUS {\n  /**\n   * ready to use\n   */\n  READY = 'READY',\n  /**\n   * connecting to the service\n   */\n  CONNECTING = 'CONNECTING',\n  /**\n   * not ready - may be disconnected or still not connected to\n   */\n  NOT_READY = 'NOT_READY',\n  /**\n   * fault on connecting or file uploading\n   * and means that the service can't be used\n   * anymore\n   */\n  ERROR = 'ERROR',\n}\n\n/**\n * service type\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_TYPE {\n  IPFS = 'IPFS',\n  HTTP = 'HTTP',\n  // will be added in the feature\n  // AMAZONS3 = 'AMAZONS3',\n  // AZUREBLOB = 'AZUREBLOB',\n}\n\n// implementations of the services.\n// will be loaded only if required\nexport const FILE_STORAGE_SERVICES_IMPLEMENTATIONS: Record<\n  FILE_STORAGE_SERVICE_TYPE,\n  () => Promise<any> // Promise<new () => IFileStorageService<any>>\n> = {\n  [FILE_STORAGE_SERVICE_TYPE.IPFS]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-ipfs'),\n  [FILE_STORAGE_SERVICE_TYPE.HTTP]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-http'),\n};\n\nexport const FILE_STORAGE_SERVICE_PREFIX = '/file';\n\nexport const FILE_STORAGE_SERVICE_PREFIX_LENGTH =\n  FILE_STORAGE_SERVICE_PREFIX.length;\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts",["2139"],"import { IFileStorageClassProviderIPFSOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs';\nimport {\n  IFileStorageClassProviderHTTPFileDownloadOptions,\n  IFileStorageClassProviderHTTPOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport { IFileStorageClassProviderIPFSFileDownloadOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport { FILE_STORAGE_SERVICE_TYPE } from './filestorage-class.const';\nimport {\n  IFileStorageClassProviderIPFSFileAddOptions,\n  IFileStorageClassProviderIPFSFileGetOptions,\n} from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_SERVICE_TYPE as FileStorageServiceType,\n  FILE_STORAGE_SERVICE_STATUS as FileStorageServiceStatus,\n} from './filestorage-class.const';\n\nexport type TFileStorageServiceOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> = T extends FILE_STORAGE_SERVICE_TYPE.IPFS\n  ? IFileStorageClassProviderIPFSOptions\n  : T extends FILE_STORAGE_SERVICE_TYPE.HTTP\n  ? IFileStorageClassProviderHTTPOptions\n  : never;\n\nexport type TFileStorageServiceFileAddOptions =\n  | IFileStorageClassProviderIPFSFileAddOptions\n  | IFileStorageClassProviderHTTPFileAddOptions;\n\nexport type TFileStorageServiceFileGetOptions =\n  | IFileStorageClassProviderIPFSFileGetOptions\n  | IFileStorageClassProviderHTTPFileGetOptions;\n\nexport type TFileStorageServiceFileDownloadOptions =\n  | IFileStorageClassProviderHTTPFileDownloadOptions\n  | IFileStorageClassProviderIPFSFileDownloadOptions;\n\nexport interface IFileStorageServiceFileAddCommonOptions {\n  progress?: (progress: number) => any;\n}\n\nexport type TFileStorageFile = ArrayBuffer | Buffer | Blob | File;\n\n/**\n * multiaddr or address in the ipfs:\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66',\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66/a.txt'\n * or if http file:\n * '/http/server.com:3000/download/file.pdf',\n * '/https/upload.com/?d=f'\n */\nexport type TFileStorageFileAddress = string;\n\n/**\n * unique identifier of the service connected to,\n * may be an url or another string\n */\nexport type TFileStorageServiceIdentifier = string;\n\nexport interface IFileStorageService<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * the current status of the service\n   *\n   * @type {FileStorageServiceStatus}\n   * @memberof IFileStorageService\n   */\n  status: FileStorageServiceStatus;\n  /**\n   * type of the service\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageService\n   */\n  type: FileStorageServiceType;\n  /**\n   * unique name of the service, maybe url\n   *\n   * @type {TFileStorageServiceIdentifier}\n   * @memberof IFileStorageService\n   */\n  identifier: TFileStorageServiceIdentifier;\n  /**\n   * is only the one implementation is allowed\n   *\n   * @type {boolean}\n   * @memberof IFileStorageService\n   */\n  isSingleton: boolean;\n  /**\n   * initialize connection with the service\n   *\n   * @param {TFileStorageServiceOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorageService\n   */\n  connect(\n    options: TFileStorageServiceOptions<T>\n  ): Promise<TFileStorageServiceIdentifier>;\n  /**\n   * close connection to the service\n   *\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  close(): Promise<void>;\n  /**\n   * check whether a file with the address\n   * is served by the service.\n   *\n   * @param {TFileStorageFileAddress} addr\n   * @returns {boolean}\n   * @memberof IFileStorageService\n   */\n  isFileServed(addr: TFileStorageFileAddress): boolean;\n  /**\n   * add the file to the service\n   *\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorageService\n   */\n  add(\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageServiceFileAddCommonOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file\n   * TODO - add download progress callback\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file itself\n   * @memberof IFileStorageService\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   * @param {TFileStorageFileAddress} addr\n   * @param {TFileStorageServiceFileDownloadOptions} [options]\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n\nexport interface IFileStorageServiceConnectOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> {\n  /**\n   * type of the service provider\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  type: FileStorageServiceType;\n  /**\n   * options used be the service provider to\n   * connect to the service\n   *\n   * @type {TFileStorageServiceOptions}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  options: TFileStorageServiceOptions<T>;\n}\n\nexport interface IFileStorage<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * connect to the file upload service\n   *\n   * @param {IFileStorageServiceConnectOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorage\n   */\n  connect(\n    configurations: IFileStorageServiceConnectOptions<T>[]\n  ): Promise<TFileStorageServiceIdentifier[]>;\n  /**\n   * close the existing connection with the service\n   * have the identifier provided\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  close(serviceId: TFileStorageServiceIdentifier): Promise<void>;\n  /**\n   * add the file to the service\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier connected to,\n   * on which to upload the file\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorage\n   */\n  add(\n    service: TFileStorageServiceIdentifier | T,\n    filename: string,\n    file: TFileStorageFile,\n    options?: TFileStorageServiceFileAddOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file from the service\n   *\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [TFileStorageServiceIdentifier] service - service identifier connected to,\n   * from which to download the file. If the identifier is not provided, then\n   * it will be identified by a services connected to by the address provided.\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file donwloaded from the service\n   * @memberof IFileStorage\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   *\n   * @param {TFileStorageFileAddress} addr - file address supported by services\n   * connected to\n   * @param {TFileStorageServiceFileDownloadOptions} [options] - options which used\n   * by the service to download the file\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/index.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/index.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["2140","2141","2142","2143","2144","2145"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["2146","2147"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts",["2148","2149","2150"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SafeStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data || undefined);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["2151"],"import { ISecretStoreCredentialsCryptoKey } from './../../secret-storage-class.types';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkIsStorageProviderInstance = (\n  storageProviderInstance: any\n): Error | boolean => {\n  if (!storageProviderInstance || typeof storageProviderInstance !== 'object') {\n    return new Error('Storage provider must be an object');\n  }\n\n  const { connect, get, set, disconnect } = storageProviderInstance;\n\n  if (\n    typeof connect !== 'function' ||\n    typeof get !== 'function' ||\n    typeof set !== 'function' ||\n    typeof disconnect !== 'function'\n  ) {\n    return new Error(\n      'The instance has a wrong implemntation of a StorageProvider interface'\n    );\n  }\n  return true;\n};\n\nexport const validateCryptoKeyCredentials = (\n  credentials?: ISecretStoreCredentialsCryptoKey\n): void | Error => {\n  if (!credentials) {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must not be empty'\n    );\n  }\n  if (typeof credentials !== 'object') {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must be an object'\n    );\n  }\n\n  const { key } = credentials;\n\n  if (!key) {\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be provided to authorize'\n    );\n  }\n  if (key instanceof CryptoKey) {\n    return;\n  }\n  return new Error(\n    'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n  );\n};\n","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts",["2152","2153","2154","2155","2156"],"import {\n  ISecretStoreConfiguration,\n  ISecretStorageSessionInfo,\n  ISecretStorageSessionInfoStored,\n  ISecretStoreCredentialsSession,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { ownValueOf } from 'types/helper.types';\nimport {\n  importPasswordKey,\n  exportPasswordKeyAsString,\n  importPasswordKeyFromString,\n  exportPasswordKey,\n} from 'utils/password-utils/derive-key.password-utils';\nimport { TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES } from 'utils/password-utils/password-utils.types';\nimport {\n  decryptDataWithKey,\n  decryptDataWithKeyFromUint8Array,\n} from 'utils/password-utils/decrypt.password-utils';\nimport {\n  encryptDataToString,\n  encryptDataToUInt8Array,\n} from 'utils/password-utils/encrypt.password-utils';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport {\n  STORAGE_PROVIDERS,\n  STORAGE_PROVIDERS_NAME,\n  STORAGE_PROVIDERS_NAMES,\n} from 'classes/storage-providers/storage-providers.const';\nimport { SecretStorageProviderLocalStorage } from 'classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider';\nimport { calcCryptoKeyHash } from './../../utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  checkIsStorageProviderInstance,\n  validateCryptoKeyCredentials,\n} from './secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  decryptValueByLogin,\n  encryptValueByLogin,\n} from './secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login';\nimport {\n  generatePasswordKeyByPasswordSalt,\n  generateSaltForPassword,\n} from './secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password';\nimport {\n  TInstanceofStorageProvider,\n  IStorageProvider,\n  ISecretStoreCredentials,\n  ISecretStorage,\n  ISecretStoreCredentialsCryptoKey,\n} from './secret-storage-class.types';\nimport {\n  SECRET_STORAGE_STATUS,\n  SECRET_STORAGE_PASSWORD_MIN_LENGTH,\n  SECRET_STORAGE_SESSION_KEY,\n} from './secret-storage-class.const';\nimport { getLoginHash } from './secret-storage-class-utils/secret-storage-class-utils-login';\nimport {\n  SECRET_STORAGE_LOGIN_MIN_LENGTH,\n  SECRET_STORAGE_UNSET_MAX_ATTEMPTS,\n} from './secret-storage-class.const';\nimport { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { ISensitiveDataSessionStorage } from 'classes/sensitive-data-session-storage/sensitive-data-session-storage.types';\nimport { isCryptoKeyDataEncryption } from '../../utils/encryption-keys-utils/encryption-keys-utils';\n\n/**\n * this classed used to store value in a\n * persistent storage locally on client side\n * in encrypted format. Each key for a value is unique\n * for the user which is authorized withing database.\n * Therefore another user authorized can't to unset values\n * which were set before by another user.\n *\n * @export\n * @class SecretStorage\n * @extends {getStatusClass<typeof SECRET_STORAGE_STATUS>({\n *     errorStatus: SECRET_STORAGE_STATUS.ERROR,\n *     instanceName: 'SecretStorage',\n *   })}\n * @implements {ISecretStorage}\n */\nexport class SecretStorage\n  extends getStatusClass<typeof SECRET_STORAGE_STATUS>({\n    errorStatus: SECRET_STORAGE_STATUS.ERROR,\n    instanceName: 'SecretStorage',\n  })\n  implements ISecretStorage {\n  private static AuthStorageProvider: IStorageProvider =\n    STORAGE_PROVIDERS[STORAGE_PROVIDERS_NAME.SESSION_STORAGE];\n\n  private static PREFIX_KEY_IN_SECRET_STORAGE = '__SecretStorage__';\n\n  private static PREFIX_FOR_SALT_VALUE = '__SecretStorage__s_uk';\n\n  public static validatePassword(password: any) {\n    if (typeof password !== 'string') {\n      return new Error(\n        'validateCredentials::A password string must be provided to authorize'\n      );\n    }\n    if (!password) {\n      return new Error(\n        'validateCredentials::A password non-empty string must be provided to authorize'\n      );\n    }\n    if (password.length < SECRET_STORAGE_PASSWORD_MIN_LENGTH) {\n      return new Error(\n        `validateCredentials::The password string must be a ${SECRET_STORAGE_PASSWORD_MIN_LENGTH} characters ar least`\n      );\n    }\n  }\n\n  public static validateLogin(login: any) {\n    if (typeof login !== 'string') {\n      return new Error(\n        'validateCredentials::A login string must be provided to authorize'\n      );\n    }\n    if (!login) {\n      return new Error(\n        'validateCredentials::A login non-empty string must be provided to authorize'\n      );\n    }\n    if (login.length < SECRET_STORAGE_LOGIN_MIN_LENGTH) {\n      return new Error(\n        `validateCredentials::The login string must be a ${SECRET_STORAGE_LOGIN_MIN_LENGTH} characters ar least`\n      );\n    }\n  }\n\n  public static validateCredentials(\n    credentials?: ISecretStoreCredentials\n  ): void | Error {\n    if (!credentials) {\n      return new Error('validateCredentials::Credentials must not be empty');\n    }\n    if (typeof credentials !== 'object') {\n      return new Error('validateCredentials::Credentials must be an object');\n    }\n    return (\n      SecretStorage.validateLogin(credentials.login) ??\n      SecretStorage.validatePassword(credentials.password)\n    );\n  }\n\n  private static async saltKey(credentials: ISecretStoreCredentials) {\n    const loginHash = await getLoginHash(credentials.login);\n\n    if (loginHash instanceof Error) {\n      console.error(loginHash);\n      return new Error('Failed to calculate hash by a login string');\n    }\n    return `${SecretStorage.PREFIX_FOR_SALT_VALUE}__${loginHash}`;\n  }\n\n  private keyHash: string = '';\n\n  private k?: CryptoKey;\n\n  private storageProvider?: TInstanceofStorageProvider;\n\n  /**\n   * check whether the storage provider\n   * is support operations on\n   * UInt8Array values\n   *\n   * @private\n   * @type {boolean}\n   * @memberof SecretStorage\n   */\n  private isStorageProviderSupportUInt8Array: boolean = false;\n\n  private authStorageProvider?: TInstanceofStorageProvider;\n\n  private storageProviderName?: ownValueOf<typeof STORAGE_PROVIDERS_NAME>;\n\n  /**\n   * options for the instance\n   *\n   * @private\n   * @type {IStorageProviderOptions}\n   * @memberof SecretStorage\n   */\n  private options?: IStorageProviderOptions;\n\n  /**\n   * name of the database\n   *\n   * @private\n   * @type {string}\n   * @memberof SecretStorage\n   */\n  private dbName?: string;\n\n  /**\n   * Hash of the user login will be used as the prefix for the key\n   *\n   * @private\n   * @type {string}\n   * @memberof SecretStorage\n   */\n  private userHash?: string;\n\n  /**\n   * returns true if connected succesfully to\n   * a storage and have a vaild crypto key\n   */\n  protected get isRunning() {\n    const { status } = this;\n\n    return status === SECRET_STORAGE_STATUS.RUNNING;\n  }\n\n  public get isActive() {\n    return !!this.isRunning;\n  }\n\n  /**\n   * @param {object} configuration\n   * @param {strig} [SECRET_STORAGE_PROVIDERS_NAME.LOCAL_STORAGE] configuration.storageProviderName\n   * - provider name use to store a secret data\n   */\n  constructor(\n    protected configuration: Partial<ISecretStoreConfiguration> = {}\n  ) {\n    super();\n  }\n\n  public connect = async (\n    options?: IStorageProviderOptions\n  ): Promise<boolean | Error> => {\n    this.clearState();\n    this.setStatus(SECRET_STORAGE_STATUS.CONNECTING);\n    this.setOptions(options);\n\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const isStorageProviderStarted = await this.runStorageProvider();\n\n    if (isStorageProviderStarted instanceof Error) {\n      this.setErrorStatus(isStorageProviderStarted);\n      return isStorageProviderStarted;\n    }\n    this.setStatus(SECRET_STORAGE_STATUS.RUNNING);\n    return true;\n  };\n\n  public async disconnect(): Promise<boolean | Error> {\n    const resultDisconnectFromStorageProvider = await this.storageProviderDisconnect();\n\n    if (resultDisconnectFromStorageProvider instanceof Error) {\n      console.error(resultDisconnectFromStorageProvider);\n      return new Error('Failed to disconnect from the storage provider');\n    }\n    this.reset();\n    this.setStatus(SECRET_STORAGE_STATUS.STOPPED);\n    return true;\n  }\n\n  /**\n   * generate a new crypto key with salt provided\n   *\n   * @param {ISecretStoreCredentials} credentials\n   * @returns {(Promise<CryptoKey | Error>)}\n   * @memberof SecretStorage\n   */\n  public async generateCryptoKey(\n    credentialsOrSession:\n      | ISecretStoreCredentials\n      | ISecretStoreCredentialsSession\n  ): Promise<CryptoKey | Error> {\n    const session = (credentialsOrSession as ISecretStoreCredentialsSession)\n      .session;\n    if (session) {\n      const sessionInfo = await this.readLoginAndKeyFromSession(session);\n\n      if (sessionInfo && !(sessionInfo instanceof Error) && sessionInfo.key) {\n        return sessionInfo.key;\n      }\n    }\n\n    const credentials = credentialsOrSession as ISecretStoreCredentials;\n    const credentialsValidationResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (credentialsValidationResult instanceof Error) {\n      this.setErrorStatus(credentialsValidationResult);\n      return credentialsValidationResult;\n    }\n\n    const salt = await this.getSaltValue(credentials);\n\n    if (salt instanceof Error) {\n      this.setErrorStatus(salt);\n      return new Error('Failed to generate salt value');\n    }\n\n    const cryptoKey = await generatePasswordKeyByPasswordSalt(\n      credentials.password,\n      salt\n    );\n\n    if (cryptoKey instanceof Error) {\n      this.setErrorStatus(cryptoKey);\n      return cryptoKey;\n    }\n    return cryptoKey;\n  }\n\n  public async authorize(\n    credentials:\n      | ISecretStoreCredentials\n      | ISecretStoreCredentialsSession\n      | ISecretStoreCredentialsCryptoKey,\n    options?: IStorageProviderOptions\n  ): Promise<boolean | Error> {\n    const credentialsWithKey = credentials as ISecretStoreCredentialsCryptoKey;\n\n    if (\n      credentialsWithKey.key &&\n      isCryptoKeyDataEncryption(credentialsWithKey.key) &&\n      isCryptoKeyDataEncryption(credentialsWithKey.key)\n    ) {\n      return this.authorizeByKey(credentialsWithKey, options);\n    }\n\n    const credentialsWithSession = credentials as ISecretStoreCredentialsSession;\n\n    if (credentialsWithSession && credentialsWithSession.session) {\n      const sessionInfo = await this.readLoginAndKeyFromSession(\n        credentialsWithSession.session\n      );\n\n      if (sessionInfo && !(sessionInfo instanceof Error)) {\n        return this.authorizeByKey(\n          {\n            key: sessionInfo.key,\n          },\n          options\n        );\n      }\n    }\n\n    const cred = credentials as ISecretStoreCredentials;\n    const cryptoKey = await this.generateCryptoKey(cred);\n\n    if (cryptoKey instanceof Error) {\n      console.error(cryptoKey);\n      return new Error('Failed to generate a crypto key to encrypt local data');\n    }\n\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const setKeyResult = await this.setEncryptionKey(cryptoKey);\n\n    if (setKeyResult instanceof Error) {\n      this.setErrorStatus(setKeyResult);\n      return setKeyResult;\n    }\n    if (credentialsWithSession.session) {\n      await this.saveLoginAndKeyToSession(\n        credentialsWithSession.session,\n        cred.login,\n        cryptoKey\n      );\n    }\n    return this.connect(options);\n  }\n\n  public async authorizeByKey(\n    credentials: ISecretStoreCredentialsCryptoKey,\n    options?: IStorageProviderOptions\n  ): Promise<boolean | Error> {\n    const credentialsValidationResult = validateCryptoKeyCredentials(\n      credentials\n    );\n\n    if (credentialsValidationResult instanceof Error) {\n      this.setErrorStatus(credentialsValidationResult);\n      return credentialsValidationResult;\n    }\n\n    const { key: cryptoKey } = credentials;\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const setKeyResult = await this.setEncryptionKey(cryptoKey);\n\n    if (setKeyResult instanceof Error) {\n      this.setErrorStatus(setKeyResult);\n      return setKeyResult;\n    }\n    return this.connect(options);\n  }\n\n  public has = async (key: string): Promise<boolean | Error> => {\n    const valueEncrypted = await this.readValueForKey(key);\n\n    if (valueEncrypted instanceof Error) {\n      return valueEncrypted;\n    }\n    return this.isValueDefined(valueEncrypted);\n  };\n\n  public get = async (\n    key: string\n  ): Promise<string | Error | undefined | null> => {\n    const valueEncrypted = await this.readValueForKey(key);\n\n    if (!valueEncrypted) {\n      return valueEncrypted;\n    }\n    if (valueEncrypted instanceof Error) {\n      return SecretStorage.error(valueEncrypted);\n    }\n    if (this.isNullishValue(valueEncrypted)) {\n      return null;\n    }\n\n    const decryptResult = await (valueEncrypted instanceof Uint8Array\n      ? this.decryptValueFromUInt8Array(valueEncrypted)\n      : this.decryptValue(valueEncrypted));\n\n    if (decryptResult instanceof Error) {\n      return decryptResult;\n    }\n    return decryptResult || undefined;\n  };\n\n  public async set(\n    keyForValue: string,\n    value: string | null\n  ): Promise<boolean | Error> {\n    let encryptedValue: Uint8Array | Error | string;\n\n    if (!this.isRunning) {\n      return SecretStorage.error(\n        'The instance of SecretStorage is not connected to the storage provider or there is no an encryption key'\n      );\n    }\n    if (value === null) {\n      encryptedValue = this.isStorageProviderSupportUInt8Array\n        ? new Uint8Array()\n        : '';\n    } else {\n      //value - must be an escaped sctring\n      encryptedValue = this.isStorageProviderSupportUInt8Array\n        ? await this.encryptValueAsInt8Array(value)\n        : await this.encryptValue(value);\n    }\n    if (encryptedValue instanceof Error) {\n      return SecretStorage.error(encryptedValue);\n    }\n\n    const key = this.storageKey(keyForValue);\n    const storeValueResult = await (encryptedValue instanceof Uint8Array\n      ? this.setWithStorageProviderUInt8Array(key, encryptedValue)\n      : this.setWithStorageProvider(key, encryptedValue));\n\n    if (storeValueResult instanceof Error) {\n      return SecretStorage.error(storeValueResult);\n    }\n    return storeValueResult;\n  }\n\n  public async insert(\n    keyForValue: string,\n    value: string | null\n  ): Promise<boolean | Error> {\n    if (await this.has(keyForValue)) {\n      return false;\n    }\n    return this.set(keyForValue, value);\n  }\n\n  public async unset(\n    key: string | string[],\n    maxAttempts: number = SECRET_STORAGE_UNSET_MAX_ATTEMPTS\n  ): Promise<Error | void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let promisePending: Promise<any>[] = [];\n    let attempt = 1;\n    const isKeyString = typeof key === 'string';\n\n    if (key instanceof Array) {\n      promisePending = key.map(this.unsetWithStorageProvider);\n    } else if (isKeyString) {\n      promisePending = [this.unsetWithStorageProvider(key)];\n    } else {\n      return new Error('Key must be a string or an array of strings');\n    }\n    while (promisePending.length && attempt++ < maxAttempts) {\n      const results = await Promise.all(promisePending);\n      const len = results.length;\n      let idx = 0;\n\n      promisePending = [];\n      for (; idx < len; idx++) {\n        if (results[idx] instanceof Error) {\n          promisePending.push(\n            this.unsetWithStorageProvider(\n              isKeyString ? (key as string) : key[idx]\n            )\n          );\n        }\n      }\n    }\n  }\n\n  public async clearDb() {\n    if (!this.isRunning) {\n      return SecretStorage.error(\n        'The instance of SecretStorage is not connected to the storage provider or there is no an encryption key'\n      );\n    }\n    const result = await this.storageProvider?.clearDb();\n\n    if (result instanceof Error) {\n      console.error(result);\n      return SecretStorage.error(\n        'Failed to clear the database with the storage provider'\n      );\n    }\n    return true;\n  }\n\n  private setStorageProviderName(\n    storageProviderName: string = STORAGE_PROVIDERS_NAME.LOCAL_STORAGE\n  ): boolean {\n    if (STORAGE_PROVIDERS_NAMES.includes(storageProviderName)) {\n      this.storageProviderName = storageProviderName;\n      return true;\n    }\n    return false;\n  }\n\n  private createInstanceOfStorageProvider(\n    StorageProviderConstructor: IStorageProvider\n  ): TInstanceofStorageProvider | Error {\n    try {\n      const storageProvider = new StorageProviderConstructor();\n      const checkResult = checkIsStorageProviderInstance(storageProvider);\n\n      if (checkResult instanceof Error) {\n        return checkResult;\n      }\n      return storageProvider;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  private setSupportForUInt8Array(\n    StorageProviderConstructor: IStorageProvider\n  ): void {\n    this.isStorageProviderSupportUInt8Array = !!StorageProviderConstructor.isBufferSupported;\n  }\n\n  private async runAuthStorageProvider(): Promise<boolean | Error> {\n    const { authStorageProvider: runningAuthStorageProvider } = this;\n    const checkIsRunning = checkIsStorageProviderInstance(\n      runningAuthStorageProvider\n    );\n\n    /**\n     * if running already\n     */\n    if (checkIsRunning === true) {\n      return true;\n    }\n\n    const { AuthStorageProvider } = SecretStorage;\n\n    if (!AuthStorageProvider) {\n      return new Error('There is no provider for the auth storage is defined');\n    }\n\n    const authStorageProvider = this.createInstanceOfStorageProvider(\n      AuthStorageProvider\n    );\n\n    if (authStorageProvider instanceof Error) {\n      return authStorageProvider;\n    }\n\n    const { dbName } = this;\n    const connectResult = await authStorageProvider.connect({\n      dbName,\n    });\n\n    if (connectResult instanceof Error) {\n      return connectResult;\n    }\n    if (connectResult !== true) {\n      return new Error(\n        'There is a wrong result was returned by auth storage provider'\n      );\n    }\n    this.authStorageProvider = authStorageProvider;\n    return true;\n  }\n\n  protected async runStorageProvider(): Promise<Error | boolean> {\n    const { configuration } = this;\n\n    if (configuration) {\n      const { storageProviderName } = configuration;\n\n      if (this.setStorageProviderName(storageProviderName)) {\n        const { storageProviderName: storageProviderChosenName } = this;\n\n        if (!storageProviderChosenName) {\n          return new Error('There is no storage provider was choosed');\n        }\n\n        const storageProviderConstructor =\n          STORAGE_PROVIDERS[storageProviderChosenName];\n\n        this.setSupportForUInt8Array(storageProviderConstructor);\n        if (storageProviderConstructor) {\n          const storageProvider = this.createInstanceOfStorageProvider(\n            storageProviderConstructor\n          );\n\n          if (storageProvider instanceof Error) {\n            return storageProvider;\n          }\n\n          const { dbName } = this;\n          const storageProviderIsRunning = await storageProvider.connect({\n            dbName,\n          });\n\n          if (storageProviderIsRunning instanceof Error) {\n            return storageProviderIsRunning;\n          }\n          this.storageProvider = storageProvider;\n          return true;\n        }\n      }\n      throw new Error('Failed to set the name of the storage provider');\n    }\n    throw new Error('There is no storage provider configuration was defined');\n  }\n\n  protected storageKey(key: string) {\n    return `${SecretStorage.PREFIX_KEY_IN_SECRET_STORAGE}_${this.keyHash}_${key}`;\n  }\n\n  protected async setEncryptionKey(\n    key: TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES | CryptoKey\n  ): Promise<boolean | Error> {\n    let k;\n\n    if (key instanceof CryptoKey) {\n      k = key;\n    } else {\n      const importedKey = await importPasswordKey(key);\n\n      if (importedKey instanceof Error) {\n        return importedKey;\n      }\n    }\n    if (!(k instanceof CryptoKey)) {\n      return new Error('Unknown type of the key');\n    }\n\n    const keyString = await exportPasswordKeyAsString(k);\n\n    if (keyString instanceof Error) {\n      return new Error(\"Can't convert the key to exported format\");\n    }\n\n    const keyHash = await calcCryptoKeyHash(k);\n\n    if (keyHash instanceof Error) {\n      console.error(keyHash);\n      return new Error('Failed to calculate hash value for the CryptoKey');\n    }\n    this.k = k;\n    this.keyHash = keyHash;\n    return true;\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected isNullishValue(value: any): boolean {\n    return (\n      (typeof value === 'string' && value === '') ||\n      (value instanceof Uint8Array && value.byteLength === 0)\n    );\n  }\n\n  protected reset() {\n    this.clearError();\n    this.clearStatus();\n    this.clearState();\n    this.k = undefined;\n    this.authStorageProvider = undefined;\n  }\n\n  protected storageProviderDisconnect = async (): Promise<boolean | Error> => {\n    const { authStorageProvider } = this;\n\n    if (authStorageProvider) {\n      return authStorageProvider.disconnect();\n    }\n    return new Error('There is no Auth storage provider defined');\n  };\n\n  protected async getSaltValue(\n    credentials: ISecretStoreCredentials\n  ): Promise<Error | string> {\n    const key = await SecretStorage.saltKey(credentials);\n\n    if (key instanceof Error) {\n      console.error(key);\n      return new Error('Failed to get key for a salt value');\n    }\n\n    const saltStorageProvider = new SecretStorageProviderLocalStorage();\n    const saltStorageProviderConnectResult = await saltStorageProvider.connect();\n\n    if (saltStorageProviderConnectResult instanceof Error) {\n      console.error(saltStorageProviderConnectResult);\n      return new Error('Failed to connect to the salt storage provider');\n    }\n\n    const saltEncrypted = await saltStorageProvider.get(key);\n\n    if (saltEncrypted instanceof Error) {\n      console.error(saltEncrypted);\n      return new Error('Failed to read salt value');\n    }\n    if (!saltEncrypted) {\n      console.log('A salt value was not found a new one will be generated');\n\n      const newSalt = generateSaltForPassword();\n\n      if (newSalt instanceof Error) {\n        console.error(newSalt);\n        return new Error('Failed to generate a new salt value');\n      }\n\n      const newSaltEncrypted = await encryptValueByLogin(\n        credentials.login,\n        newSalt\n      );\n\n      if (newSaltEncrypted instanceof Error) {\n        console.error(newSaltEncrypted);\n        return new Error('Failed to encrypt the salt value');\n      }\n\n      const saltValueSetInStorageResult = await saltStorageProvider.set(\n        key,\n        newSaltEncrypted\n      );\n\n      if (saltValueSetInStorageResult instanceof Error) {\n        console.error(saltValueSetInStorageResult);\n        return new Error(\n          'Failed to store the salt value in the persistant storage'\n        );\n      }\n      return newSalt;\n    }\n    return decryptValueByLogin(credentials.login, saltEncrypted);\n  }\n\n  protected async getWithStorageProvider(\n    key: string\n  ): Promise<string | Error | undefined> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error('There is no connection with a storage provider');\n    }\n\n    const value = await storageProvider.get(key);\n\n    if (value instanceof Error) {\n      return SecretStorage.error(value);\n    }\n    if (!value) {\n      return value;\n    }\n    if (typeof value !== 'string' || !value.length) {\n      return SecretStorage.error(\n        'There is a wrong value type returned by the storage provider. A string must be returned'\n      );\n    }\n    return value;\n  }\n\n  protected async getWithStorageProviderUint8Array(\n    key: string\n  ): Promise<Uint8Array | Error | undefined> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error('There is no connection with a storage provider');\n    }\n\n    if (typeof storageProvider.getUInt8Array !== 'function') {\n      return new Error(\n        'The storage provider which support Uint8Array must provide the method called getUInt8Array'\n      );\n    }\n\n    const value = await storageProvider.getUInt8Array(key);\n\n    if (!value) {\n      return undefined;\n    }\n    if (value instanceof Error) {\n      return SecretStorage.error(value);\n    }\n    if (!(value instanceof Uint8Array) || !value.length) {\n      return SecretStorage.error(\n        'There is a wrong value type returned by the storage provider. An instance of Uint8Array must be returned'\n      );\n    }\n    return value;\n  }\n\n  protected async decryptValue(value: string): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return SecretStorage.error(\n        'There is no a valid key to decrypt the value'\n      );\n    }\n\n    const decryptedValue = await decryptDataWithKey(k, value);\n\n    if (decryptedValue instanceof Error) {\n      return SecretStorage.error(decryptedValue);\n    }\n    if (typeof decryptedValue !== 'string') {\n      return SecretStorage.error('A wrong value decrypted');\n    }\n    return decryptedValue;\n  }\n\n  protected async decryptValueFromUInt8Array(\n    value: Uint8Array\n  ): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return SecretStorage.error(\n        'There is no a valid key to decrypt the value'\n      );\n    }\n    if (!value.length) {\n      return SecretStorage.error('The value must not be empty');\n    }\n\n    const decryptedValue = await decryptDataWithKeyFromUint8Array(k, value);\n\n    if (decryptedValue instanceof Error) {\n      return SecretStorage.error(decryptedValue);\n    }\n    if (typeof decryptedValue !== 'string') {\n      return SecretStorage.error('A wrong value decrypted');\n    }\n    return decryptedValue;\n  }\n\n  protected async setWithStorageProvider(\n    key: string,\n    value: string\n  ): Promise<boolean | Error> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error(\n        'There is no an active connection with storage provider'\n      );\n    }\n\n    const result = await storageProvider.set(key, value);\n\n    if (result instanceof Error) {\n      return result;\n    }\n    if (result !== true) {\n      return new Error(\n        'A wrong result on set the value into the storage provider'\n      );\n    }\n    return true;\n  }\n\n  protected unsetWithStorageProvider = async (\n    key: string\n  ): Promise<boolean | Error> => {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error(\n        'There is no an active connection with storage provider'\n      );\n    }\n\n    const result = await storageProvider.set(this.storageKey(key), undefined);\n\n    if (result instanceof Error) {\n      return result;\n    }\n    return true;\n  };\n\n  protected async setWithStorageProviderUInt8Array(\n    key: string,\n    value: Uint8Array\n  ): Promise<boolean | Error> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error(\n        'There is no an active connection with storage provider'\n      );\n    }\n    if (typeof storageProvider.setUInt8Array !== 'function') {\n      return new Error(\n        \"The storage provider doesn't have the method setUInt8Array\"\n      );\n    }\n\n    const result = await storageProvider.setUInt8Array(key, value);\n\n    if (result instanceof Error) {\n      return result;\n    }\n    if (result !== true) {\n      return new Error(\n        'A wrong result on set the value into the storage provider'\n      );\n    }\n    return true;\n  }\n\n  protected async encryptValue(value: string): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return new Error('There is no key to encrypt the value');\n    }\n\n    const encryptedValue = await encryptDataToString(k, value);\n\n    if (encryptedValue instanceof Error) {\n      return encryptedValue;\n    }\n    if (typeof encryptedValue !== 'string' || !encryptedValue.length) {\n      return new Error('A wrong encryption result for the value');\n    }\n    return encryptedValue;\n  }\n\n  /**\n   * encrypts string to the UInt8Array\n   *\n   * @protected\n   * @param {string} value\n   * @returns {(Promise<Uint8Array | Error>)}\n   * @memberof SecretStorage\n   */\n  protected async encryptValueAsInt8Array(\n    value: string | Uint8Array\n  ): Promise<Uint8Array | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return new Error('There is no key to encrypt the value');\n    }\n\n    const encryptedValue = await encryptDataToUInt8Array(k, value);\n\n    if (encryptedValue instanceof Error) {\n      return encryptedValue;\n    }\n    if (!(encryptedValue instanceof Uint8Array) || !encryptedValue.length) {\n      return new Error('A wrong encryption result for the value');\n    }\n    return encryptedValue;\n  }\n\n  protected async readLoginAndKeyFromSession(\n    session: ISensitiveDataSessionStorage\n  ): Promise<ISecretStorageSessionInfo | Error | undefined> {\n    try {\n      const sessionInfo:\n        | ISecretStorageSessionInfoStored\n        | undefined = await session.getItem(SECRET_STORAGE_SESSION_KEY);\n\n      if (sessionInfo) {\n        const cryptoKey = await importPasswordKeyFromString(sessionInfo.key);\n\n        if (cryptoKey instanceof Error) {\n          return cryptoKey;\n        }\n        return {\n          key: cryptoKey,\n          login: sessionInfo.login,\n        };\n      }\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  protected async saveLoginAndKeyToSession(\n    session: ISensitiveDataSessionStorage,\n    login: string,\n    key: CryptoKey\n  ): Promise<Error | undefined> {\n    const keyExported = await exportPasswordKeyAsString(key);\n\n    if (keyExported instanceof Error) {\n      return keyExported;\n    }\n\n    const sessionInfo: ISecretStorageSessionInfoStored = {\n      login,\n      key: keyExported,\n    };\n\n    try {\n      await session.setItem(SECRET_STORAGE_SESSION_KEY, sessionInfo);\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  protected readValueForKey = async (key: string) => {\n    if (!this.isRunning) {\n      return new Error('There is no connection with storage or not authorized');\n    }\n\n    const k = this.storageKey(key);\n    const { isStorageProviderSupportUInt8Array } = this;\n\n    return isStorageProviderSupportUInt8Array\n      ? this.getWithStorageProviderUint8Array(k)\n      : this.getWithStorageProvider(k);\n  };\n\n  protected isValueDefined(valueEncrypted: any): boolean {\n    if (this.isNullishValue(valueEncrypted)) {\n      return true;\n    }\n    if (!valueEncrypted) {\n      return false;\n    }\n    return true;\n  }\n}\n","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts",["2157","2158"],"import {\n  ISensitiveDataSessionStorage,\n  ISensitiveDataSessionStorageOptions,\n} from './sensitive-data-session-storage.types';\nimport {\n  SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY,\n  SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY_SALT,\n} from './sensitive-data-session-storage.const';\nimport assert from 'assert';\nimport {\n  generatePasswordKeyByPasswordSalt,\n  generateSaltForPassword,\n} from 'classes/secret-storage-class';\nimport { encryptDataToString, decryptDataByPassword } from 'utils';\n\nexport class SensitiveDataSessionStorage\n  implements ISensitiveDataSessionStorage {\n  protected isConnected: boolean = false;\n\n  protected connectingPromise: undefined | Promise<void> = undefined;\n\n  protected _temp: Record<string, any> = {};\n\n  private _tempStringified: string | undefined = undefined;\n\n  private k?: CryptoKey;\n\n  private storagePrefix: string = '';\n\n  private get storageKeyValue() {\n    return `${this.storagePrefix}//${SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY}`;\n  }\n\n  private get storageKeySalt() {\n    return `${this.storagePrefix}//${SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY_SALT}`;\n  }\n\n  public async connect(options?: ISensitiveDataSessionStorageOptions) {\n    if (this.isConnected) {\n      return;\n    }\n    if (options) {\n      const { storagePrefix } = options;\n\n      if (storagePrefix) {\n        this.storagePrefix = storagePrefix;\n      }\n    }\n    if (!this.connectingPromise) {\n      this.connectingPromise = this.connectToStorage(options);\n    }\n    await this.connectingPromise;\n  }\n\n  public getItem = async (key: string) => {\n    assert(typeof key === 'string', 'Key must be a string');\n    return this._temp[key];\n  };\n\n  public setItem = async (key: string, v: any) => {\n    assert(typeof key === 'string', 'Key must be a string');\n    if (v == null) {\n      delete this._temp[key];\n    } else {\n      this._temp[key] = v;\n    }\n    this.stringifyTemp();\n  };\n\n  private async connectToStorage(\n    options?: ISensitiveDataSessionStorageOptions\n  ) {\n    let error: Error | undefined;\n    try {\n      let k: CryptoKey | undefined;\n      const pinCode = options?.pinCode;\n\n      try {\n        this._temp = (await this.readFromStorage(pinCode)) ?? {};\n      } catch (err) {\n        error = err;\n      }\n      this.subscribeOnWindowUnload();\n      if (pinCode) {\n        assert(typeof pinCode === 'string', 'Pin code must be a string');\n        const pinCodeNewCryptoKey = await generatePasswordKeyByPasswordSalt(\n          pinCode,\n          this.generateSalt()\n        );\n\n        if (pinCodeNewCryptoKey instanceof Error) {\n          throw pinCodeNewCryptoKey;\n        }\n        k = pinCodeNewCryptoKey;\n      }\n      this.k = k;\n      this.stringifyTemp();\n    } catch (err) {\n      this.reset();\n      console.error(err);\n      throw err;\n    } finally {\n      if (options?.clearStorageAfterConnect !== false) {\n        this.clearValueStorage();\n      }\n      this.isConnected = true;\n    }\n    if (error) {\n      throw error;\n    }\n  }\n\n  private readSalt() {\n    const salt = sessionStorage.getItem(this.storageKeySalt);\n\n    return salt;\n  }\n\n  private generateSalt() {\n    const newSalt = generateSaltForPassword();\n\n    if (typeof newSalt !== 'string') {\n      throw new Error('Failed to generate a salt value');\n    }\n    sessionStorage.setItem(this.storageKeySalt, newSalt);\n    return newSalt;\n  }\n\n  public toString() {\n    return this._tempStringified ?? '';\n  }\n\n  private subscribeOnWindowUnload() {\n    window.addEventListener('beforeunload', () => {\n      const v = this._tempStringified;\n      if (v && typeof v === 'string') {\n        sessionStorage.setItem(this.storageKeyValue, v);\n      }\n    });\n  }\n\n  private async readFromStorage(pinCode?: string) {\n    const v = sessionStorage.getItem(this.storageKeyValue);\n\n    if (!v) {\n      return;\n    }\n    const salt = !!pinCode && this.readSalt();\n    const decrypted =\n      salt && pinCode ? await decryptDataByPassword(pinCode, salt, v) : v;\n\n    if (decrypted instanceof Error) {\n      throw decrypted;\n    }\n    return JSON.parse(decrypted);\n  }\n\n  protected clearSaltStorage() {\n    sessionStorage.removeItem(this.storageKeySalt);\n  }\n\n  protected clearValueStorage() {\n    sessionStorage.removeItem(this.storageKeyValue);\n  }\n\n  protected reset() {\n    this.clearSaltStorage();\n    this.clearValueStorage();\n    this.k = undefined;\n    this._temp = {};\n    this._tempStringified = undefined;\n  }\n\n  private stringifyTemp = async () => {\n    const k = this.k;\n    const v = this._temp;\n    let stringified = undefined as string | undefined;\n\n    if (!Object.keys(v).length) {\n      stringified = undefined;\n    } else if (k) {\n      const encrypted = await encryptDataToString(k, v);\n\n      if (encrypted instanceof Error) {\n        return;\n      }\n      stringified = encrypted;\n    } else {\n      stringified = JSON.stringify(v);\n    }\n    this._tempStringified = stringified;\n  };\n}\n","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts",["2159","2160"],"export interface ISensitiveDataSessionStorageOptions {\n  /**\n   * pincode value used to encrypt and decrypt a sensitive information\n   *\n   * @type {string}\n   * @memberof ISensitiveDataSessionStorageOptions\n   */\n  pinCode?: string;\n  storagePrefix?: string;\n  /**\n   * clear values in the session storage\n   * after connection to it.\n   *\n   * @type {boolean}\n   * @memberof ISensitiveDataSessionStorageOptions\n   */\n  clearStorageAfterConnect?: boolean;\n}\n/**\n * used to store data in the session storage.\n * A data may be secured with a pin code value.\n *\n * @export\n * @interface ISensitiveDataSessionStorage\n */\nexport interface ISensitiveDataSessionStorage {\n  /**\n   * connect to the storage\n   *\n   * @param {ISensitiveDataSessionStorageOptions} options\n   * @returns {Promise<void>}\n   * @memberof ISensitiveDataSessionStorage\n   * @throws\n   */\n  connect(options: ISensitiveDataSessionStorageOptions): Promise<void>;\n  /**\n   * add item to the storage\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {Promise<void>}\n   * @memberof ISensitiveDataSessionStorage\n   */\n  setItem(key: string, value: any): Promise<void>;\n  getItem(key: string): Promise<any>;\n}\n","/home/paul/projects/protocol/src/classes/storage-providers/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["2161","2162","2163","2164"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../storage-providers.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n      }\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        return this.unset(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async unset(key: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      await levelStorage.del(key);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async clearDb(): Promise<Error | boolean> {\n    try {\n      const isDisconnected = this.checkIsReady();\n      const { levelStorage } = this;\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n      if (!levelStorage) {\n        return new Error('There is no connection to the local forage');\n      }\n      if (this.dbName === SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME) {\n        return new Error(\"The DEFAULT database can't be removed\");\n      }\n      if (!(levelStorage as any).clear) {\n        return new Error(\n          'The version of the library does not supports for a db clearing'\n        );\n      }\n      await (levelStorage as any).clear();\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        return this.unset(key);\n      }\n      await levelStorage.put(key, value);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const levelStorage = levelup(leveljs(dbName));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelStorage;\n  }\n}\n","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts",["2165"],"import { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ownKeyOf } from 'types/helper.types';\nimport {\n  ISwarmMessageSubclassParserUtils,\n  ISwarmMessageSubclassParser,\n} from './swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types';\nimport {\n  ISwarmMessageSerializerUtils,\n  ISwarmMessageSerializer,\n} from './swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types';\nimport { IMessageSignatureValidatorOptionsUtils } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types';\nimport { ICentralAuthority } from '../central-authority-class/central-authority-class.types';\nimport { CentralAuthority } from '../central-authority-class/central-authority-class';\nimport { ISwarmMessgaeEncryptedCache } from '../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport {\n  IMessageValidatorOptions,\n  ISwarmMessageSubclassValidator,\n} from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types';\n\nexport enum ESwarmMessageSignatureAlgorithms {\n  'ep256' = 'ep256',\n}\n\nexport enum ESwarmMessageSignatureAlgorithmsDescription {\n  'ep256' = 'ECDSA_P-256',\n}\n\nexport const SwarmMessageSignatureSupprotedAlgorithms = Object.keys(\n  ESwarmMessageSignatureAlgorithmsDescription\n);\n\nexport interface ISwarmMessageReceiver {\n  receiverId: TSwarmMessageUserIdentifierSerialized;\n}\n\nexport type TSwarmMessageSignatureAlgorithm = ownKeyOf<\n  typeof ESwarmMessageSignatureAlgorithmsDescription\n>;\n\n/**\n * message serizlized and ready to send\n * into the swarm.\n */\nexport type TSwarmMessageSerialized = string;\n\n/**\n * message payload deserialized\n */\nexport type TSwarmMessagePayloadDeserialized = string;\n\n/**\n * message for sending an information in\n * the peer to peer decentralized system.\n * This interface describes deserialized\n * message body.\n *\n * @export\n * @interface ISwarmMessage\n * @property {string} typ - a type of the message.\n * @property {string | ArrayBuffer} pld - payload of the message is a buffer or a string\n * @property {string} uid - an identity of the user which post the message\n * @property {string} tss - UNIX timestamp in UTC when the message was posted. In seconds\n * @property {string} iss - the service in which the message was generated\n *\n * The signature must sign all the fields, including\n * the algorithm it used.\n */\nexport interface ISwarmMessageBodyDeserialized {\n  typ: string | number;\n  pld: TSwarmMessagePayloadDeserialized | ArrayBuffer;\n  ts: number;\n  iss: string;\n}\n\n/**\n * This is type of the message's body\n * serialized.\n */\nexport type TSwarmMessageBodyRaw = string;\n\n/**\n * body encrypted with a private of the user,\n * who will be receiver of the message\n */\nexport type TSwarmMessageBodyRawEncrypted = string;\n\n/**\n * this is message body of a private body\n * which is encrypted for the receiver user.\n */\nexport type TSwarmMessageBodyEncrypted = string;\n\n/**\n * This interface represents a message\n * incoming.\n *\n * @export\n * @interface ISwarmMessageRaw\n */\nexport interface ISwarmMessageRaw {\n  /**\n   * body of the message serialized\n   *\n   * @type {TSwarmMessageBodyRaw}\n   * @memberof ISwarmMessageRaw\n   */\n  bdy: TSwarmMessageBodyRaw;\n  /**\n   * sender identifier serialized\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  uid: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * signature of the message body\n   * and sender of the message\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  sig: string;\n  /**\n   * the algorythm used for the signature\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  alg: ownKeyOf<typeof ESwarmMessageSignatureAlgorithmsDescription>;\n  /**\n   * is this is private message, may be for this user\n   *\n   * @type {boolean}\n   * @memberof ISwarmMessageRaw\n   */\n  isPrivate?: boolean;\n}\n\n// this is for a private messages construction. Message body will be encrypted\n// with the public key of the user with id = receiverId\nexport type TSwarmMessageConstructorArgumentBodyPrivate = TSwarmMessageConstructorArgumentBody &\n  ISwarmMessageReceiver;\n\nexport type TSwarmMessageSeriazlized = string;\n\n/**\n * body of a swarm message\n *\n * @export\n * @interface ISwarmMessageBody\n * @extends {Omit<ISwarmMessageBodyDeserialized, 'pld'>}\n */\nexport interface ISwarmMessageBody\n  extends Omit<ISwarmMessageBodyDeserialized, 'pld'>,\n    Partial<ISwarmMessageReceiver> {\n  pld: TSwarmMessagePayloadDeserialized;\n}\n\n/**\n * this is representation of a message deserialized\n * and fully decrypted.\n *\n * @export\n * @interface ISwarmMessage\n * @extends {ISwarmMessageBodyDeserialized}\n */\nexport interface ISwarmMessageDecrypted extends Omit<ISwarmMessageRaw, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\n/**\n * this is representation of a message deserialized\n * and private with encrypted body.\n *\n * @export\n * @interface ISwarmMessage\n * @extends {ISwarmMessageBodyDeserialized}\n */\nexport interface ISwarmMessageEncrypted extends Omit<ISwarmMessageRaw, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\nexport type TSwarmMessage = ISwarmMessageEncrypted | ISwarmMessageDecrypted;\n\nexport interface ISwarmMessageInstanceBase\n  extends Omit<ISwarmMessageRaw, 'bdy'> {\n  toString(): TSwarmMessageSeriazlized;\n}\n\nexport interface ISwarmMessageInstanceDecrypted\n  extends Omit<ISwarmMessageInstanceBase, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\nexport interface ISwarmMessageInstanceEncrypted\n  extends Omit<ISwarmMessageInstanceBase, 'bdy'> {\n  bdy: TSwarmMessageBodyEncrypted;\n}\n\nexport type TSwarmMessageInstance =\n  | ISwarmMessageInstanceDecrypted\n  | ISwarmMessageInstanceEncrypted;\n\n/**\n * utilities used for messages parsing,\n * serizlization and validation\n *\n * @export\n * @interface ISwarmMessageConstructorUtils\n * @extends {ISwarmMessageSubclassParserUtils}\n * @extends {ISwarmMessageSerializerUtils}\n * @extends {IMessageSignatureValidatorOptionsUtils}\n */\nexport interface ISwarmMessageConstructorUtils\n  extends ISwarmMessageSubclassParserUtils,\n    ISwarmMessageSerializerUtils,\n    IMessageSignatureValidatorOptionsUtils {}\n\nexport interface ISwarmMessageConstructorOptionsInstances {\n  parser: ISwarmMessageSubclassParser;\n  serizlizer: ISwarmMessageSerializer;\n  validator: ISwarmMessageSubclassValidator;\n  /**\n   * used to store private messages\n   * in decrypted form, cause there is\n   * no way to decrypt private message\n   * which was sent to another user.\n   *\n   * @type {ISwarmMessgaeEncryptedCache}\n   * @memberof ISwarmMessageConstructorOptionsInstances\n   */\n  encryptedCache: ISwarmMessgaeEncryptedCache;\n}\n\nexport interface ISwarmMessageConstructorOptionsRequired {\n  utils: ISwarmMessageConstructorUtils;\n  caConnection: ICentralAuthority;\n  validation: IMessageValidatorOptions & {\n    signatureValidationOpts: Omit<\n      IMessageValidatorOptions['signatureValidationOpts'],\n      'caConnection'\n    >;\n  };\n  instances: Partial<ISwarmMessageConstructorOptionsInstances>;\n}\n\n/**\n * options used for swarm messages construction.\n *\n * @export\n * @interface ISwarmMessageConstructorOptions\n */\nexport type TSwarmMessageConstructorOptions = Omit<\n  ISwarmMessageConstructorOptionsRequired,\n  'utils' | 'validation'\n> & {\n  utils?: Partial<ISwarmMessageConstructorOptionsRequired['utils']>;\n  validation?: Partial<ISwarmMessageConstructorOptionsRequired['validation']>;\n};\n\n// construct message from a serialized\nexport interface ISwarmMessageConstructor {\n  readonly caConnection?: ICentralAuthority;\n  readonly encryptedCache?: ISwarmMessgaeEncryptedCache;\n  construct(message: TSwarmMessageSeriazlized): Promise<TSwarmMessageInstance>;\n}\n\nexport type TSwarmMessageConstructorArgumentBody = Omit<\n  ISwarmMessageBodyDeserialized,\n  'ts'\n> &\n  Partial<ISwarmMessageBodyDeserialized>;\n\nexport type TSwarmMessageConstructorBodyMessage =\n  | TSwarmMessageConstructorArgumentBodyPrivate\n  | TSwarmMessageConstructorArgumentBody;\n\n// construct message from an object which represents message's body\nexport interface ISwarmMessageConstructor {\n  construct(\n    messageBody: TSwarmMessageConstructorArgumentBody\n  ): Promise<TSwarmMessageInstance>;\n}\n\n/**\n * This signature constructs a private message for the user with\n * id === receiverId. The message's body will be encrypted\n * with a public key of the receiver.\n *\n * @export\n * @interface ISwarmMessageConstructor\n */\nexport interface ISwarmMessageConstructor {\n  construct(\n    messageBody: TSwarmMessageConstructorArgumentBodyPrivate\n  ): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts",["2166"],"import assert from 'assert';\nimport {\n  TSwarmMessageInstance,\n  TSwarmMessageBodyRaw,\n  TSwarmMessageBodyRawEncrypted,\n} from '../../swarm-message-constructor.types';\nimport { isCryptoKeyDataDecryption } from '../../../../utils/encryption-keys-utils/encryption-keys-utils';\nimport { QueuedEncryptionClassBase } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base';\nimport { ISwarmMessgaeEncryptedCache } from '../../../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport { ISwarmMessageBody } from '../../swarm-message-constructor.types';\nimport {\n  IQueuedEncrypyionClassBaseOptions,\n  IQueuedEncrypyionClassBase,\n} from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport {\n  ISwarmMessageRaw,\n  TSwarmMessage,\n  TSwarmMessageSeriazlized,\n} from '../../swarm-message-constructor.types';\nimport {\n  ISwarmMessageSubclassParserOptions,\n  ISwarmMessageSubclassParser,\n} from './swarm-message-subclass-parser.types';\n\nexport class SwarmMessageSubclassParser implements ISwarmMessageSubclassParser {\n  protected constructorOptions?: ISwarmMessageSubclassParserOptions;\n\n  protected msgDecryptQueue?: IQueuedEncrypyionClassBase;\n\n  protected encryptedCache?: ISwarmMessgaeEncryptedCache;\n\n  protected get options(): ISwarmMessageSubclassParserOptions {\n    if (!this.constructorOptions) {\n      throw new Error('The options is not defined for the instance');\n    }\n    return this.constructorOptions;\n  }\n\n  /**\n   * returns an options for messages signing\n   * queue\n   *\n   * @readonly\n   * @protected\n   * @type {IQueuedEncrypyionClassBaseOptions}\n   * @memberof SwarmMessageSerializer\n   */\n  protected get messageDecryptQueueOptions(): IQueuedEncrypyionClassBaseOptions {\n    return {\n      ...this.options.queueOptions,\n      keys: {\n        decryptKey: this.options.decryptionKey,\n      },\n    };\n  }\n\n  constructor(options: ISwarmMessageSubclassParserOptions) {\n    this.setOptions(options);\n    this.startMessageDecryptQueue();\n  }\n\n  /**\n   * parses the message serialized to a\n   * deserizlized message object\n   *\n   * @memberof SwarmMessageSubclassParser\n   */\n  public parse = async (\n    message: TSwarmMessageSeriazlized\n  ): Promise<TSwarmMessageInstance> => {\n    const messageRaw = await this.parseMessageToRaw(message);\n    const messageParsed = await this.parseMessageRaw(messageRaw);\n\n    return this.getSwarmMessageInstance(messageParsed, message);\n  };\n\n  protected validateOptions(options: ISwarmMessageSubclassParserOptions): void {\n    assert(options, 'Options must be provided');\n    assert(\n      typeof options === 'object',\n      'The options provided must be an object'\n    );\n\n    const { utils, validator, decryptionKey } = options;\n\n    assert(utils, 'Utils must be provided');\n    assert(typeof utils === 'object', 'Utils must be an object');\n    assert(\n      typeof utils.messageBodyRawParser === 'function',\n      'messageBodyRawParser utility must be a function'\n    );\n    assert(\n      typeof utils.messageParser === 'function',\n      'messageParser utility must be a function'\n    );\n    assert(validator, 'Validator is not provided');\n    assert(\n      typeof validator.valiadateSwarmMessageRaw === 'function',\n      'Validator incorrectly implements the interface, cause the valiadateSwarmMessageRaw method is absent'\n    );\n    assert(\n      typeof validator.valiadateSwarmMessage === 'function',\n      'Validator incorrectly implements the interface, cause the valiadateSwarmMessage method is absent'\n    );\n    if (!decryptionKey) {\n      console.warn(\n        'There is no key for private messages decryption provided in options'\n      );\n    } else {\n      assert(\n        isCryptoKeyDataDecryption(decryptionKey),\n        \"The key provided can't be used for data decryption\"\n      );\n    }\n  }\n\n  protected setOptions(options: ISwarmMessageSubclassParserOptions): void {\n    this.validateOptions(options);\n    this.constructorOptions = options;\n    this.encryptedCache = options.encryptedCache;\n  }\n\n  protected startMessageDecryptQueue() {\n    this.msgDecryptQueue = new QueuedEncryptionClassBase(\n      this.messageDecryptQueueOptions\n    );\n  }\n\n  /**\n   * parses the messgae to the raw message format\n   * and validates it.\n   *\n   * @protected\n   * @param {TSwarmMessageSeriazlized} mesage\n   * @returns {ISwarmMessageRaw}\n   * @memberof SwarmMessageSubclassParser\n   * @throws\n   */\n  protected async parseMessageToRaw(\n    mesage: TSwarmMessageSeriazlized\n  ): Promise<ISwarmMessageRaw> {\n    const { utils, validator } = this.options;\n    const { messageParser } = utils;\n    const messageRaw = messageParser(mesage);\n\n    await validator.valiadateSwarmMessageRaw(messageRaw);\n    return messageRaw;\n  }\n\n  /**\n   * parses a swarm message form the raw format\n   * and validates it.\n   *\n   * @protected\n   * @param {ISwarmMessageRaw} messageRaw\n   * @returns {TSwarmMessage}\n   * @memberof SwarmMessageSubclassParser\n   * @throws\n   */\n  protected async parseMessageRaw(\n    messageRaw: ISwarmMessageRaw\n  ): Promise<TSwarmMessage> {\n    const { utils, validator } = this.options;\n    const { messageBodyRawParser } = utils;\n    const { bdy: bodyRaw, isPrivate } = messageRaw;\n    let bodyRawDecrypted;\n\n    if (isPrivate) {\n      validator.validateMessageBodyEncrypted(messageRaw.bdy);\n\n      const msgBody = await this.readMessgeBodyFromCache(messageRaw.sig);\n\n      if (typeof msgBody === 'string') {\n        // if the message's body decrypted found\n        bodyRawDecrypted = msgBody;\n      }\n    }\n    if (!bodyRawDecrypted) {\n      bodyRawDecrypted = isPrivate\n        ? await this.decryptMessageBodyRaw(bodyRaw)\n        : bodyRaw;\n    }\n\n    const bodyRawParsed = messageBodyRawParser(bodyRawDecrypted);\n\n    const swarmMessage: TSwarmMessage = {\n      ...messageRaw,\n      bdy: bodyRawParsed,\n    };\n\n    validator.valiadateSwarmMessage(swarmMessage);\n\n    return swarmMessage;\n  }\n\n  protected async decryptMessageBodyRaw(\n    bodyRaw: TSwarmMessageBodyRawEncrypted\n  ): Promise<TSwarmMessageBodyRaw> {\n    if (!this.msgDecryptQueue) {\n      throw new Error(\n        'Message decrypt queue must be started to read private messgaes'\n      );\n    }\n    const decryptedBody = await this.msgDecryptQueue.decryptData(bodyRaw);\n\n    if (decryptedBody instanceof Error) {\n      console.error('Failed to decrypt the private message');\n      throw decryptedBody;\n    }\n    if (!decryptedBody) {\n      throw new Error('No data got after message was decrypted');\n    }\n    return decryptedBody;\n  }\n\n  protected getSwarmMessageInstance(\n    msg: TSwarmMessage,\n    msgSerizlized: TSwarmMessageSeriazlized\n  ): TSwarmMessageInstance {\n    return {\n      ...msg,\n      toString: function(a: TSwarmMessageSeriazlized) {\n        return a;\n      }.bind(undefined, msgSerizlized),\n    };\n  }\n\n  /**\n   * read a message's body decrypted.\n   *\n   * @protected\n   * @param {string} sig\n   * @returns\n   * @memberof SwarmMessageSubclassParser\n   */\n  protected async readMessgeBodyFromCache(sig: string) {\n    if (this.encryptedCache) {\n      return this.encryptedCache.get(sig);\n    }\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts",["2167"],"import { ISwarmMessageSubclassValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator.types';\nimport { ISwarmMessageUtilsMessageParser } from '../../swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types';\nimport { ISwarmMessageUtilsBodyParser } from '../../swarm-message-utils/swarm-message-utils-body-parser';\nimport { IQueuedEncrypyionClassBaseOptions } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport { ISwarmMessgaeEncryptedCache } from '../../../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport {\n  TSwarmMessageSeriazlized,\n  TSwarmMessageInstance,\n} from '../../swarm-message-constructor.types';\n\nexport interface ISwarmMessageSubclassParserUtils {\n  messageParser: ISwarmMessageUtilsMessageParser;\n  messageBodyRawParser: ISwarmMessageUtilsBodyParser;\n}\n\nexport interface ISwarmMessageSubclassParserOptions {\n  validator: ISwarmMessageSubclassValidator;\n  utils: ISwarmMessageSubclassParserUtils;\n  queueOptions?: IQueuedEncrypyionClassBaseOptions['queueOptions'];\n  /**\n   * this is a key used to decrypt private messages\n   */\n  decryptionKey?: CryptoKey;\n  /**\n   * if provided, then:\n   * 1) For private messages, before decrypt it's body, parser will try to\n   * read it's body from the cache provided before;\n   * 2) For all messages, parser will try to read sign mark before\n   * validation of a message signature. If there is no mark stored,\n   * then it will be validated.\n   *\n   * @type {ISwarmMessgaeEncryptedCache}\n   * @memberof ISwarmMessageSubclassParserOptions\n   */\n  encryptedCache?: ISwarmMessgaeEncryptedCache;\n}\n\n/**\n * parses and validates swarm message serizlized\n *\n * @export\n * @interface ISwarmMessageSubclassParser\n */\nexport interface ISwarmMessageSubclassParser {\n  /**\n   * deserialize and validate the swarm message\n   *\n   * @param {TSwarmMessageSeriazlized} message - swarm message serialized\n   * @returns {Promise<ISwarmMessage>}\n   * @memberof ISwarmMessageSubclassParser\n   * @throws\n   */\n  parse(message: TSwarmMessageSeriazlized): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts",["2168"],"import { ISwarmMessageSubclassFieldsValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from '../../swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types';\nimport { ICentralAuthority } from '../../../central-authority-class/central-authority-class.types';\nimport { IQueuedEncrypyionClassBaseOptions } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport { ISwarmMessageUtilsBodySerializer } from '../../swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types';\nimport { ISwarmMessageUtilsMessageSerializer } from '../../swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types';\nimport { ISwarmMessageSubclassValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator.types';\nimport { TSwarmMessageInstance } from '../../swarm-message-constructor.types';\nimport { TSwarmMessageSignatureAlgorithm } from '../../swarm-message-constructor.types';\nimport { ISwarmMessageBodyDeserialized } from '../../swarm-message-constructor.types';\n\nexport interface ISwarmMessageSerializerUtils {\n  getDataToSignBySwarmMsg: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw;\n  swarmMessageBodySerializer: ISwarmMessageUtilsBodySerializer;\n  swarmMessageSerializer: ISwarmMessageUtilsMessageSerializer;\n}\n\n/**\n * data about the user who will create\n * messages.\n *\n * @export\n * @interface ISwarmMessageSerializerUser\n */\nexport interface ISwarmMessageSerializerUser {\n  /**\n   * identity of the user who will be a creator of\n   * swarm messages.\n   *\n   * @type {TSwarmMessageUserIdentifierSerialized}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  userId: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * A crypto key which will be used for\n   * messages signing.\n   *\n   * @type {CryptoKey}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  dataSignKey: CryptoKey;\n}\n\n/**\n * User for messages creation\n *\n * @export\n * @interface ISwarmMessageSerializerConstructorOptions\n */\nexport interface ISwarmMessageSerializerConstructorOptions {\n  /**\n   * options used for the message signing queue\n   *\n   * @type {Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  queueOptions?: Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>;\n  /**\n   * instance implemented connection to the CentralAuthority\n   * to get information described in ISwarmMessageSerializerUser\n   *\n   * @type {ICentralAuthority}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  caConnection: ICentralAuthority;\n  /**\n   * utils used for a message signing\n   *\n   * @type {ISwarmMessageSerializerUtils}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  utils: ISwarmMessageSerializerUtils;\n  /**\n   * instance of the SwarmMessageFieldsValidator subclass\n   *\n   * @type {ISwarmMessageSubclassFieldsValidator}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  messageValidator: ISwarmMessageSubclassValidator;\n  /**\n   * the algorithm used for messages signing\n   *\n   * @type {ESwarmMessageSignatureAlgorithmsDescription}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  alg: TSwarmMessageSignatureAlgorithm;\n}\n\n/**\n * this class used for messages serizlization\n * before sending it to the swarm users.\n *\n * @export\n * @interface ISwarmMessageSerializer\n */\nexport interface ISwarmMessageSerializer {\n  /**\n   * serialize the message into a type\n   * which can be used for sending of\n   * a message into the swarm.\n   * If a message's data is not valid\n   * the method throws.\n   *\n   * @param {ISwarmMessageBodyDeserialized} msgBody\n   * @returns {TSwarmMessageSerialized}\n   * @memberof ISwarmMessageSerializer\n   * @throws\n   */\n  serialize(\n    msgBody: ISwarmMessageBodyDeserialized\n  ): Promise<TSwarmMessageInstance>;\n  /**\n   * serialize the message as a private and\n   * encrypt it's body with the key provided.\n   *\n   * @param {ISwarmMessageBodyDeserialized} msgBody\n   * @param {CryptoKey} encryptWithKey - user's public key to encrypt\n   * the message as a private\n   * @returns {Promise<TSwarmMessageInstance>}\n   * @memberof ISwarmMessageSerializer\n   */\n  serialize(\n    msgBody: ISwarmMessageBodyDeserialized,\n    encryptWithKey?: CryptoKey\n  ): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",["2169","2170","2171"],"import assert from 'assert';\nimport {\n  commonUtilsArrayDeleteFromArray,\n  commonUtilsArrayDoCallbackTillNoError,\n} from 'utils/common-utils/common-utils';\nimport { TSwarmMessageUserIdentifierVersion } from '../swarm-message-subclass-validator.types';\nimport { validateIssuerDesirizlizedFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied';\nimport validateIssuerSerializedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized';\nimport { TSwarmMessageIssuerDeserialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types';\nimport validateTypeFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type';\nimport { validateUserIdentifier } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier';\nimport { createValidatePayload } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload';\nimport { createValidateTimestamp } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp';\nimport { TSwarmMessageType } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types';\nimport { ISwarmMessagePayloadValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { ISwarmMessageTimestampValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types';\nimport { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { CA_USER_IDENTITY_VERSIONS_LIST } from '../../../../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport {\n  TSwarmMessage,\n  ISwarmMessageBody,\n  TSwarmMessageBodyEncrypted,\n} from '../../../swarm-message-constructor.types';\nimport { validateMessageBodyRawFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw';\nimport { validateMessageSignatureFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature';\nimport {\n  IMessageFieldsValidatorOptions,\n  ISwarmMessageSubclassFieldsValidator,\n} from './swarm-message-subclass-validator-fields-validator.types';\nimport {\n  ISwarmMessageBodyDeserialized,\n  ISwarmMessageRaw,\n} from '../../../swarm-message-constructor.types';\nimport {\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MAX_LENGTH_BYTES,\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MIN_LENGTH_BYTES,\n} from '../swarm-message-subclass-validator.const';\n\nexport class SwarmMessageSubclassFieldsValidator\n  implements ISwarmMessageSubclassFieldsValidator {\n  /**\n   * list of a valid issuers.\n   * If it is empty then any issuer will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected issuersList: TSwarmMessageIssuerDeserialized[] = [];\n\n  /**\n   * list of a valid user identifier versions.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected supportedUserIdentifierVer: TSwarmMessageUserIdentifierVersion[] = CA_USER_IDENTITY_VERSIONS_LIST;\n\n  /**\n   * list of a valid message types.\n   * If it is empty then any type will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {Array<string | number>}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected typesList: TSwarmMessageType[] = [];\n\n  protected payloadValidationOptions?: ISwarmMessagePayloadValidationOptions;\n\n  protected timestampValidationOptions?: ISwarmMessageTimestampValidationOptions;\n\n  protected validatePayload = createValidatePayload(\n    this.payloadValidationOptions\n  );\n\n  protected validateTimestamp = createValidateTimestamp(\n    this.timestampValidationOptions\n  );\n\n  /**\n   * Creates an instance of SwarmMessageSubclassValidator.\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  constructor(options?: IMessageFieldsValidatorOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * validate message's deserialized body object\n   *\n   * @param {ISwarmMessageBodyDeserialized} messageBody\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessageBody(messageBody: ISwarmMessageBodyDeserialized): void {\n    assert(!!messageBody, 'Message body must be defined');\n    assert(typeof messageBody === 'object', 'Message body must be an object');\n    const { iss, pld, ts, typ } = messageBody;\n\n    this.validateType(typ);\n    this.validateIssuer(iss);\n    this.validatePayload(pld);\n    this.validateTimestamp(ts);\n  }\n\n  public validateMessageBodyEncrypted(\n    messsageBodyEncrypted: TSwarmMessageBodyEncrypted\n  ): void {\n    assert(!!messsageBodyEncrypted, 'Message body must be specefied');\n    assert(\n      typeof messsageBodyEncrypted === 'string',\n      'Message body must be a string for a private messages'\n    );\n    assert(\n      messsageBodyEncrypted.length <\n        SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MAX_LENGTH_BYTES,\n      'Private message body is increased the maximum length'\n    );\n    assert(\n      messsageBodyEncrypted.length >\n        SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MIN_LENGTH_BYTES,\n      'Private message body is less then the minimal length'\n    );\n  }\n\n  /**\n   * validate swarm message object\n   * throw an error if the message\n   * is not valid\n   *\n   * @param {TSwarmMessage} message\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessage(message: TSwarmMessage): void {\n    assert(!!message, 'Message must be defined');\n    assert(typeof message === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig, isPrivate } = message;\n\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n    this.validateIsPrivateField(isPrivate);\n    this.validateMessageBody(bdy as ISwarmMessageBodyDeserialized);\n  }\n\n  /**\n   * validate the message's in format\n   * when the body is serizlized\n   *\n   * @param {ISwarmMessageRaw} messageRaw\n   * @memberof SwarmMessageSubclassFieldsValidator\n   */\n  public validateMessageRaw(messageRaw: ISwarmMessageRaw): void {\n    assert(!!messageRaw, 'Message must be defined');\n    assert(typeof messageRaw === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig } = messageRaw;\n\n    validateMessageBodyRawFormat(bdy);\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n  }\n\n  /**\n   * add an issuer string in the list\n   * as a valid issuer.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  public addIssuerToValidList = (issuer: string): void => {\n    const { issuersList } = this;\n\n    validateIssuerDesirizlizedFormat(issuer);\n    if (!issuersList.includes(issuer)) {\n      issuersList.push(issuer);\n    }\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   */\n  public removeIssuerFromValidList(issuer: string): boolean | Error {\n    const { issuersList } = this;\n\n    if (typeof issuer !== 'string') {\n      return new Error('The issuer must be a string');\n    }\n    commonUtilsArrayDeleteFromArray(issuersList, issuer);\n    return true;\n  }\n\n  /**\n   * checks whether the issuer is in the\n   * list of the valid issuers. If the\n   * list of the valid issuers is empty\n   * then returns true\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkIssuerIsInList(issuer: string): void {\n    const { issuersList } = this;\n\n    assert(\n      !issuersList.length || issuersList.includes(issuer),\n      'The issuer is not into the list of the valid issuers'\n    );\n  }\n\n  protected validateIsPrivateField(isPrivateField?: any) {\n    if (isPrivateField != null) {\n      assert(isPrivateField === true, 'Is private value must be a \"true\"');\n    }\n  }\n\n  /**\n   * validate the Issuer format and\n   * if it is in the list of the valid\n   * issuers\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateIssuer(issuer: string): void {\n    validateIssuerSerializedFormat(issuer);\n    this.checkIssuerIsInList(issuer);\n  }\n\n  /**\n   * add an type string in the list\n   * as a valid types.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected addType = (type: TSwarmMessageType): void => {\n    const { typesList } = this;\n\n    validateTypeFormat(type, typesList);\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected removeType(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    commonUtilsArrayDeleteFromArray(typesList, type);\n  }\n\n  /**\n   * Checks whether the list of valid types is defined and not empty.\n   * If it is then checks if the type is into the list.\n   *\n   * @param {string| number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkTypeInList(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    assert(\n      !typesList.length || typesList.includes(type),\n      'The type is not into the list of the valid types'\n    );\n  }\n\n  /**\n   * check the Type value format and\n   * if the type is in the list of the\n   * valid types\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateType(type: TSwarmMessageType): void {\n    validateTypeFormat(type);\n    this.checkTypeInList(type);\n  }\n\n  protected validateUserIdentifier = (\n    userId: TSwarmMessageUserIdentifierSerialized\n  ): void => {\n    validateUserIdentifier(userId, this.supportedUserIdentifierVer);\n  };\n\n  /**\n   * set the options\n   *\n   * @protected\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected setOptions(options?: IMessageFieldsValidatorOptions) {\n    if (options != null) {\n      assert(typeof options === 'object', 'The options must be an object');\n\n      const {\n        supportedUserIdentifierVer,\n        payloadValidationOptions,\n        issuersList,\n        typesList,\n        timestampValidationOptions,\n      } = options;\n\n      if (timestampValidationOptions) {\n        this.timestampValidationOptions = timestampValidationOptions; // set time to live in milliseconds\n        this.validateTimestamp = createValidateTimestamp(\n          timestampValidationOptions\n        );\n      }\n      if (payloadValidationOptions) {\n        this.payloadValidationOptions = payloadValidationOptions;\n        this.validatePayload = createValidatePayload(payloadValidationOptions);\n      }\n      if (supportedUserIdentifierVer instanceof Array) {\n        this.supportedUserIdentifierVer = supportedUserIdentifierVer.map(\n          (userIdentifierVersion) => {\n            if (typeof userIdentifierVersion === 'string') {\n              return userIdentifierVersion;\n            }\n            assert.fail(\n              `The version ${userIdentifierVersion} must be a string`\n            );\n          }\n        );\n      }\n      if (issuersList) {\n        if (issuersList instanceof Array) {\n          const setIssuersListResult = commonUtilsArrayDoCallbackTillNoError<\n            string\n          >(issuersList, this.addIssuerToValidList);\n\n          if (setIssuersListResult instanceof Error) {\n            assert.fail(setIssuersListResult);\n          }\n        } else {\n          assert.fail('The value of the \"issuersList\" option must be an Array');\n        }\n      }\n      if (typesList) {\n        if (typesList instanceof Array) {\n          const setTypesListResult = commonUtilsArrayDoCallbackTillNoError<\n            TSwarmMessageType\n          >(typesList, this.addType);\n\n          if (setTypesListResult instanceof Error) {\n            throw setTypesListResult;\n          }\n        } else {\n          assert.fail('The value of the \"typesList\" option must be an Array');\n        }\n      }\n    }\n  }\n}\n\nexport default SwarmMessageSubclassFieldsValidator;\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts",["2172"],"import {\n  ISwarmMessageRaw,\n  TSwarmMessageSignatureAlgorithm,\n} from '../../swarm-message-constructor.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from './swarm-message-utils-signature.types';\nimport { SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER } from './swarm-message-utils-signature.const';\n\nexport const swarmMessageUtilSignatureGetStringForSignByMessageRaw: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw = (\n  msg: Omit<ISwarmMessageRaw, 'sig'>\n) =>\n  `${msg.alg}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.uid}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.bdy}`;\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts",["2173","2174","2175","2176","2177","2178"],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts",["2179"],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-message-encrypted-cache.utils.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts",["2180","2181","2182","2183"],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts",["2184"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",["2185","2186","2187","2188","2189","2190","2191"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["2192"],"import OrbitDB from 'orbit-db';\nimport AccessController from 'orbit-db-access-controllers/src/access-controller-interface';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions,\n  TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback,\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport class SwarmStoreConnectorOrbitDBSubclassAccessController<\n  T\n> extends AccessController {\n  // Returns the type of the access controller\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE;\n  }\n  /**\n   * create and preload an instance\n   * of the SwarmStoreConnectorOrbitDBSubclassAccessController\n   *\n   * @static\n   * @template T\n   * @param {OrbitDB} orbitdb\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>} [options={}]\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public static async create<T>(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ): Promise<SwarmStoreConnectorOrbitDBSubclassAccessController<T>> {\n    return new SwarmStoreConnectorOrbitDBSubclassAccessController<T>(\n      orbitdb,\n      options\n    );\n  }\n\n  // if true then anyone have access\n  // to the database\n  protected _isPublic: boolean = false;\n\n  protected _grantAccessCallback?: TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback<\n    T\n  >;\n\n  protected _orbitdb?: OrbitDB;\n\n  protected _options?: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    T\n  >;\n\n  constructor(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ) {\n    super();\n    this._orbitdb = orbitdb;\n    this.setOptions(options);\n  }\n\n  /**\n   * Called by the databases (the log) to see if entry should\n   * be allowed in the database. Return true if the entry is allowed,\n   * false is not allowed.\n   *\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async canAppend(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      console.warn(\n        `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::entry have an unknown format`\n      );\n      return false;\n    }\n\n    // Write keys and admins keys are allowed\n    const { _options, _isPublic } = this;\n\n    if (_isPublic) {\n      return this.checkAccess(entry, identityProvider);\n    }\n\n    if (!_options) {\n      return false;\n    }\n\n    const { identity } = entry;\n    const { id: userPerformedActionOnEntryId } = identity;\n    const { write: accessListForUsers } = _options;\n\n    // If the ACL contains the writer's public key or it contains '*'\n    if (\n      accessListForUsers &&\n      accessListForUsers.includes(userPerformedActionOnEntryId)\n    ) {\n      return this.checkAccess(entry, identityProvider);\n    }\n    return false;\n  }\n\n  /**\n   *  return manifest params\n   *\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async save(): Promise<\n    ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest\n  > {\n    return {};\n  }\n\n  /**\n   * check if the entry have the common fields\n   * used to verfy the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {entry is LogEntry<T>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyEntryFormat(entry: LogEntry<T>): entry is LogEntry<T> {\n    if (!entry || typeof entry !== 'object') {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n\n    if (!id) {\n      return false;\n    }\n    if (payload === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * validate the identiry provided by the entity\n   *\n   * @protected\n   * @param {IdentityJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyIdentity(\n    identity: IdentityJson,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    return (identityProvider as any).verifyIdentity(identity);\n  }\n\n  /**\n   * validate the entity format and\n   * check the access on it for the\n   * identity provided\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async verifyEntity(entry: LogEntry<T>): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n    const { _grantAccessCallback } = this;\n\n    if (typeof _grantAccessCallback === 'function') {\n      return _grantAccessCallback(payload, id);\n    }\n    return true;\n  }\n\n  /**\n   * validates the enetry and verify the user have\n   * the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async checkAccess(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    try {\n      if (!this.verifyEntryFormat(entry)) {\n        return false;\n      }\n\n      const { identity } = entry;\n      const validateIdentityResult = await this.verifyIdentity(\n        identity,\n        identityProvider\n      );\n\n      if (validateIdentityResult !== true) {\n        return false;\n      }\n      return this.verifyEntity(entry);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  protected setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>\n  ) {\n    if (options) {\n      const { write, grantAccess } = options;\n\n      if (write instanceof Array) {\n        if (write.includes('*')) {\n          this._isPublic = true;\n        }\n      } else {\n        console.warn(\n          `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::Noone have access on the database`\n        );\n      }\n      if (typeof grantAccess === 'function') {\n        if (grantAccess.length !== 2) {\n          console.warn(\n            `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::A grant access callback must receives 2 arguments generally, but receives ${grantAccess.length}`\n          );\n        }\n        this._grantAccessCallback = grantAccess;\n      }\n      this._options = options;\n    }\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",["2207","2208"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["2209","2210","2211","2212"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { IOrbitDBKeystoreStoreCustom } from 'types';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    // TODO - may be verify the identity with central authority\n    const verifyResult = await (KeystoreClass as unknown as IOrbitDBKeystoreStoreCustom).verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",["2213","2214"],"import { IStore } from 'orbit-db-cache';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclass-storage-fabric.types';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from '../swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport Storage from 'orbit-db-storage-adapter';\nimport OrbitDB from 'orbit-db';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStorageFabric\n  implements ISwarmStoreConnectorOrbitDBSubclassStorageFabric {\n  private key?: CryptoKey;\n\n  private ready?: Promise<void>;\n\n  // names of databases which must be encrypted\n  protected secretDatabasesNames: string[] = [];\n\n  protected storage: any;\n\n  constructor(credentials: ISecretStoreCredentials) {\n    this.applyCredentials(credentials);\n    this.storage = Storage();\n  }\n\n  public addSecretDatabaseName = (dbName: string) => {\n    if (!this.secretDatabasesNames.includes(dbName)) {\n      this.secretDatabasesNames.push(dbName);\n    }\n  };\n\n  /**\n   * create an instance of OrbitDB Cache\n   * for a path provided\n   *\n   * @param {string} path\n   * @returns {Cache}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStorageFabric\n   * @throws\n   */\n  public async createStore(path: string): Promise<IStore> {\n    await this.ready;\n    if (!this.isSecretPath(path)) {\n      return this.storage.createStore(path);\n    }\n\n    const { key } = this;\n\n    if (!key) {\n      throw new Error('A CryptoKey is not exists');\n    }\n    if (!(key instanceof CryptoKey)) {\n      throw new Error('The key must be an instance of CryptoKey');\n    }\n\n    const cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n      { key },\n      { dbName: path }\n    );\n\n    await cache.open();\n    return cache;\n  }\n\n  protected getValidPath(path: string): string {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n\n  protected getDBNameByAddress(path: string): undefined | string {\n    try {\n      return (OrbitDB as any).parseAddress(this.getValidPath(path)).path;\n    } catch (err) {\n      console.error('Cant parse the path', err);\n    }\n  }\n\n  protected getDBNameByPath(path: string): undefined | string {\n    const dbName = this.getDBNameByAddress(path);\n\n    if (dbName) {\n      return dbName;\n    }\n\n    let idx = 0;\n    let matches = 0;\n    while (matches < 2 && idx < path.length) {\n      if (path[idx++] === '/') {\n        matches++;\n      }\n      if (matches === 2) {\n        return path.slice(idx);\n      }\n    }\n  }\n\n  protected isSecretPath(path: string): boolean {\n    const dbName = this.getDBNameByPath(path);\n    return !!dbName && this.secretDatabasesNames.includes(dbName);\n  }\n\n  protected applyCredentials(credentials: ISecretStoreCredentials): void {\n    this.ready = this.createKey(credentials);\n  }\n\n  /**\n   *\n   *\n   * @protected\n   * @param {ISecretStoreCredentials} credentials\n   * @returns {Promise<void>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStorageFabric\n   * @throws\n   */\n  protected async createKey(\n    credentials: ISecretStoreCredentials\n  ): Promise<void> {\n    const secretStorage = new SecretStorage();\n    const cryptoKey = await secretStorage.generateCryptoKey(credentials);\n\n    if (cryptoKey instanceof Error) {\n      console.error(`createKey::${cryptoKey}`);\n      throw new Error('Failed to generate a key');\n    }\n    if (!(cryptoKey instanceof CryptoKey)) {\n      throw new Error(\n        'createKey::the key generated by a password string must be a CryptoKey'\n      );\n    }\n    this.key = cryptoKey;\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["2215"],"import { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { validateCryptoKeyCredentials } from './../../../../../secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\nimport { ISecretStorage } from '../../../../../secret-storage-class/secret-storage-class.types';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: IStorageProviderOptions;\n\n  protected secretStorage?: ISecretStorage;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<IStorageProviderOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (!isClose && isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    this.unsetIsClose();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public close = async (cb?: TCallbackError): Promise<void> => {\n    if (!this.isOpen || this.isClose) {\n      return;\n    }\n    this.setIsClose();\n    this.unsetIsOpen();\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    if (this.isClose) {\n      console.error('CLOSED');\n    }\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del = async (key: string, cb?: TCallbackError) => {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.unset(key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public dropDb = async () => {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.clearDb();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw new Error('Failed to drop the database');\n    }\n  };\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    await this.dropDb();\n    await this.close();\n    this.unsetSecretStorage();\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected unsetIsOpen() {\n    this.isOpen = false;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected unsetIsClose() {\n    this.isClose = false;\n  }\n\n  protected getSecretStorage(): Error | ISecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<IStorageProviderOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    }\n    this.credentials = credentials as ISecretStoreCredentials;\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["2216","2217","2218","2219","2220","2221","2222"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/protocol/src/components/app-render.tsx",[],"/home/paul/projects/protocol/src/components/app.tsx",["2223","2224"],"import React from 'react';\nimport { FileStoreAddFile } from 'components/filestore-add-file/filestore-add-file';\nimport { ConnectToSwarm } from 'components/connect-to-swarm';\nimport { SensitiveDataStorage } from 'components/sensitive-data-storage';\n\nexport class App extends React.Component {\n  render() {\n    // return <FileStoreAddFile />;\n    // return <SensitiveDataStorage />;\n    return <ConnectToSwarm />;\n  }\n}\n\nexport default App;\n","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts",[],"/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx",["2225","2226"],"/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts",["2227"],"import { ConnectionBridge } from 'classes';\nimport { CONNECT_TO_SWARM_CONNECTION_OPTIONS } from './connect-to-swarm.const';\n\nexport const connectToSwarmUtil = async (credentials: any) => {\n  const connectionBridge = new ConnectionBridge();\n  const useSessionAuth = await connectionBridge.checkSessionAvailable({\n    ...CONNECT_TO_SWARM_CONNECTION_OPTIONS,\n    auth: {\n      ...CONNECT_TO_SWARM_CONNECTION_OPTIONS.auth,\n      credentials: undefined,\n    },\n  });\n\n  await connectionBridge.connect({\n    ...CONNECT_TO_SWARM_CONNECTION_OPTIONS,\n    auth: {\n      ...CONNECT_TO_SWARM_CONNECTION_OPTIONS.auth,\n      credentials: useSessionAuth ? undefined : credentials,\n    },\n  });\n  return connectionBridge;\n};\n","/home/paul/projects/protocol/src/components/connect-to-swarm/index.ts",[],"/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx",["2228","2229","2230"],"import React, { MouseEvent } from 'react';\nimport { FILE_STORAGE_SERVICE_STATUS } from 'classes/filestorage-class';\nimport {\n  downloadFile,\n  downloadFileByUrl,\n} from '../../utils/files-utils/files-utils-download';\nimport { IFileStorage } from '../../classes/filestorage-class/filestorage-class.types';\nimport { FILE_STORAGE_SERVICE_TYPE } from '../../classes/filestorage-class/filestorage-class.const';\nimport { connectToFileStorage } from './filestore-add-file.utils';\n\nexport class FileStoreAddFile extends React.Component {\n  protected fileStorage:\n    | IFileStorage<\n        FILE_STORAGE_SERVICE_TYPE.HTTP | FILE_STORAGE_SERVICE_TYPE.IPFS\n      >\n    | undefined;\n\n  protected loadingProgress: number | undefined = undefined;\n\n  protected uploadedFiles: string[] = [];\n\n  protected styles = {\n    filesLoadedContainer: {\n      paddingBottom: '10px',\n    },\n  };\n\n  public componentDidMount() {\n    this.createFilestoreInstance();\n  }\n\n  public render() {\n    const { fileStorage: fileStore } = this;\n\n    if (!fileStore) {\n      return <div>Not ready</div>;\n    }\n    return (\n      <>\n        {this.renderFileDownload()}\n        {this.renderFileUpload()}\n      </>\n    );\n  }\n\n  protected async createFilestoreInstance() {\n    this.fileStorage = await connectToFileStorage();\n    this.forceUpdate();\n  }\n\n  protected handleFileChosen = async (\n    ev: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (this.loadingProgress != null) {\n      return;\n    }\n\n    const { target } = ev;\n    const { fileStorage: fileStore } = this;\n\n    if (fileStore && target.files) {\n      const file = target.files[0];\n\n      this.loadingProgress = 0;\n      try {\n        console.dir(file);\n        const [loadedAddr] = await Promise.all([\n          fileStore.add(FILE_STORAGE_SERVICE_TYPE.IPFS, file.name, file, {\n            progress: (progress: number) => {\n              this.loadingProgress = progress;\n              this.forceUpdate();\n            },\n          }),\n          Promise.resolve().then(() => {\n            this.forceUpdate();\n          }),\n        ]);\n        this.uploadedFiles.push(loadedAddr);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        this.loadingProgress = undefined;\n        this.forceUpdate();\n      }\n    }\n  };\n\n  private handleFileDownload = async (ev: MouseEvent<HTMLAnchorElement>) => {\n    const { target } = ev;\n    const { textContent } = target as HTMLAnchorElement;\n\n    ev.preventDefault();\n    if (textContent) {\n      await this.fileStorage?.download(textContent);\n    }\n  };\n\n  protected handleFileDownloadByURL = async () => {\n    const inpEl = document.getElementById('fileDownload');\n    const url = (inpEl as HTMLInputElement)?.value;\n\n    if (url) {\n      try {\n        const result = await this.fileStorage?.get(`/file/${url}`);\n\n        if (!(result instanceof File)) {\n          throw new Error('Failed to get the file');\n        }\n        downloadFile(result);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  };\n\n  protected renderFilesLoadedList() {\n    const { uploadedFiles } = this;\n\n    return uploadedFiles.map((fileAddr, idx) => (\n      <div key={fileAddr}>\n        <pre>{idx}. </pre>\n        <a\n          href=\"#\"\n          role=\"button\"\n          data-name={fileAddr}\n          onClick={this.handleFileDownload}\n        >\n          {fileAddr}\n        </a>\n      </div>\n    ));\n  }\n\n  protected renderFileUpload() {\n    if (this.loadingProgress != null) {\n      return <div>Upload progress: {this.loadingProgress}</div>;\n    }\n    return (\n      <div>\n        <div style={this.styles.filesLoadedContainer}>\n          {this.renderFilesLoadedList()}\n        </div>\n        <label htmlFor=\"fileUpload\">File: </label>\n        <input id=\"fileUpload\" type=\"file\" onChange={this.handleFileChosen} />\n      </div>\n    );\n  }\n\n  protected renderFileDownload() {\n    return (\n      <div>\n        <label htmlFor=\"fileUpload\">Url: </label>\n        <input id=\"fileDownload\" type=\"text\" />\n        <button onClick={this.handleFileDownloadByURL}>Download</button>\n      </div>\n    );\n  }\n}\n","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts",["2231","2232","2233"],"import { FileStorageClassProviderIPFS } from 'classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs';\nimport { ipfsUtilsConnectBasic } from 'utils/ipfs-utils/ipfs-utils';\nimport { IFileStorageService } from '../../classes/filestorage-class/filestorage-class.types';\nimport { FileStorageClassProviderHTTP } from '../../classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http';\nimport {\n  FileStorage,\n  FILE_STORAGE_SERVICE_TYPE,\n} from 'classes/filestorage-class';\n\nexport const connectToFileStorage = async () => {\n  const ipfs = await ipfsUtilsConnectBasic();\n  const optionsIpfs = {\n    ipfs,\n  };\n  const optionsHTTP = {};\n  const fileStoreProvider = new FileStorage();\n\n  await fileStoreProvider.connect([\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.IPFS,\n      options: optionsIpfs,\n    },\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.HTTP,\n      options: optionsHTTP,\n    },\n  ]);\n  return fileStoreProvider;\n};\n","/home/paul/projects/protocol/src/components/filestore-add-file/index.ts",[],"/home/paul/projects/protocol/src/components/sensitive-data-storage/index.ts",[],"/home/paul/projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/index.ts",[],"/home/paul/projects/protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/projects/protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/protocol/src/const/common-values/index.ts",[],"/home/paul/projects/protocol/src/const/const-api-conf.ts",[],"/home/paul/projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/projects/protocol/src/const/const-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/projects/protocol/src/const/const-validation-regex/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/projects/protocol/src/const/const-validation-values/index.ts",[],"/home/paul/projects/protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/protocol/src/dev.ts",[],"/home/paul/projects/protocol/src/index.ts",[],"/home/paul/projects/protocol/src/prod.ts",[],"/home/paul/projects/protocol/src/react-app-env.d.ts",[],"/home/paul/projects/protocol/src/types/channels.types.ts",[],"/home/paul/projects/protocol/src/types/common.types.ts",[],"/home/paul/projects/protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/protocol/src/types/helper.types.ts",["2234","2235","2236"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n\nexport type ArrayFirst<T extends any[]> = T extends Array<infer F> ? F : never;\n\nexport type Defined<T extends {}> = {\n  [k in keyof T]: T[k] extends undefined ? NonNullable<T[k]> : T[k];\n};\n","/home/paul/projects/protocol/src/types/index.d.ts",[],"/home/paul/projects/protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/protocol/src/types/ipfs.types.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-mdns.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-secio.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-spdy.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-stardust.d.ts",["2237","2238","2239"],"/** Declaration file generated by dts-gen */\r\n\r\ndeclare module 'libp2p-stardust' {\r\n  export = libp2p_stardust;\r\n\r\n  function libp2p_stardust(...args: any[]): any;\r\n\r\n  function isstardust(obj: any): void;\r\n\r\n  libp2p_stardust.isstardust = isstardust;\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p-tcp.d.ts",["2240","2241","2242"],"/** Declaration file generated by dts-gen */\r\ndeclare module 'libp2p-tcp' {\r\n  export = libp2p_tcp;\r\n\r\n  declare function libp2p_tcp(...args: any[]): any;\r\n\r\n  declare namespace libp2p_tcp {\r\n    function isTCP(obj: any): void;\r\n  }\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p-webrtc-direct.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-websockets.d.ts",["2243","2244","2245"],"/** Declaration file generated by dts-gen */\r\n\r\ndeclare module 'libp2p-websockets' {\r\n  export = libp2p_websockets;\r\n\r\n  declare function libp2p_websockets(...args: any[]): any;\r\n\r\n  declare namespace libp2p_websockets {\r\n    function isWebSockets(obj: any): void;\r\n  }\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p.d.ts",[],"/home/paul/projects/protocol/src/types/main.types.ts",[],"/home/paul/projects/protocol/src/types/multiaddr.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-keystore.d.ts",["2246","2247","2248","2249","2250","2251"],"import 'orbit-db-keystore';\n\nexport interface IOrbitDBKeystoreStoreCustom {\n  status: string;\n  open(): Promise<void>;\n  close(): Promise<void>;\n  put(k: string, v: any): Promise<void>;\n  get(k: string): string | Uint8Array;\n  verify(\n    publicKeySignature: string,\n    publicKey: string,\n    publicKeyAndId: string\n  ): Promise<boolen>;\n}\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore extends IOrbitDBKeystoreStoreCustom {\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStoreCustom;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n\n  export = class Keystore implements IOrbitDBKeystoreStore {\n    constructor(options: any) { }\n  }\n}\n","/home/paul/projects/protocol/src/types/orbit-db-storage-adapter.d.ts",[],"/home/paul/projects/protocol/src/types/pull-mplex.d.ts",[],"/home/paul/projects/protocol/src/types/storage.types.ts",[],"/home/paul/projects/protocol/src/types/users.types.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-array.ts",["2252","2253","2254","2255"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n\n/**\n * check wherether the array\n * includes all items\n * @param testedArray\n * @param requiredItems\n */\nexport const commonUtilsArrayIncludesAll = (\n  testedArray: any[],\n  requiredItems: any[]\n): boolean => {\n  const len = requiredItems.length;\n  let idx = 0;\n\n  while (idx < len) {\n    if (!testedArray.includes(requiredItems[idx])) {\n      return false;\n    }\n    idx++;\n  }\n  return true;\n};\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-check-value.ts",["2256"],"export const checkIsError = (v: any): v is Error => v instanceof Error;\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-main.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-objects.ts",["2257","2258","2259","2260","2261"],"import { TObjectKeys, TDictionary } from 'types/common.types';\nimport { isDefined } from './common-utils-main';\n\nexport const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n\nexport const getObjectKeys = (o: object): Array<TObjectKeys> =>\n  (Object.keys(o) as Array<TObjectKeys>).concat(\n    Object.getOwnPropertySymbols(o)\n  );\n\nexport const isSimpleObject = (o: any): o is object =>\n  typeof o === 'object' && Object.getPrototypeOf(o) === Object.prototype;\n\n/**\n * extends object with another object if the object\n * have no properties\n *\n * @export\n * @template T\n * @template E\n * @param {T} o\n * @param {E} ext\n * @returns {T}\n */\nexport function extend<T extends TDictionary<any>, E extends TDictionary<any>>(\n  o: T | undefined,\n  ext: E,\n  replaceExisting?: boolean\n): T & E {\n  if (!o) {\n    return ext;\n  }\n  if (!isSimpleObject(o) || !isSimpleObject(ext)) {\n    if (replaceExisting && ext) {\n      return ext;\n    }\n    return (!o || isEmptyObject(o)) && ext ? ext : o;\n  }\n\n  const keys = getObjectKeys(ext);\n  let idx = 0;\n  let k: keyof E;\n  const len = keys.length;\n\n  while (idx < len) {\n    k = keys[idx];\n    idx++;\n    if (!isDefined(ext[k])) {\n      continue;\n    }\n    if (replaceExisting || !isDefined(o[k])) {\n      o[k] = ext[k];\n    } else if (typeof o[k] === 'object' && typeof ext[k] === 'object') {\n      o[k] = extend(o[k], ext[k]);\n    }\n  }\n  return o;\n}\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["2262","2263","2264"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { decryptDataByPassword } from '../password-utils/decrypt.password-utils';\nimport { DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME } from './data-sign-utils.const';\nimport { generateSalt } from '../encryption-utils/salt-utils';\nimport { encryptDataWithPassword } from '../password-utils/encrypt.password-utils';\nimport { TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE } from './data-sign-utils.types';\nimport { typedArrayToString } from '../typed-array-utils';\n\nexport const dataSignIsCryptoKeyPairImported = (\n  key: any,\n  checkPrivateKey: boolean = true\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    (!checkPrivateKey || !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME])\n  );\n};\n\nexport const dataSignGenerateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModuleDataSign.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const dataSignExportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModuleDataSign.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await dataSignExportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return dataSignExportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const dataSignExportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await dataSignExportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPair = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair, !!password)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        password || keyPair.privateKey\n          ? dataSignExportKey(keyPair.privateKey)\n          : Promise.resolve(undefined),\n        dataSignExportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n\n      const result: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE = {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n\n      if (password) {\n        const salt = generateSalt();\n\n        if (salt instanceof Error) {\n          return new Error('Failed to generate a unique salt value');\n        }\n\n        const encryptedPrivateKey = await encryptDataWithPassword(\n          password,\n          salt,\n          privateKey\n        );\n\n        if (encryptedPrivateKey instanceof Error) {\n          return new Error(\n            'Failed to encrypt private key with password provided'\n          );\n        }\n\n        const saltStringified = typedArrayToString(salt);\n\n        if (saltStringified instanceof Error) {\n          return new Error(\n            'Failed to stringify the salt value for the private data sign key'\n          );\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          saltStringified,\n          encryptedPrivateKey\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          return new Error('Failed to decrypt private key for data encryption');\n        }\n        result[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] = saltStringified;\n        result[\n          DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME\n        ] = encryptedPrivateKey;\n      }\n      return result;\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPairAsString = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<string | Error> => {\n  try {\n    const res = await dataSignExportKeyPair(keyPair, password);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKey = async (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModuleDataSign.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, true);\n\nexport const dataSignImportPrivateKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, false);\n\nexport const dataSignImportKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE,\n  checkPrivateKey: boolean = true\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (dataSignIsCryptoKeyPairImported(keyPair, checkPrivateKey)) {\n      const privateKeyToImport =\n        keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME];\n      if (checkPrivateKey && !privateKeyToImport) {\n        return new Error('The private key is empty');\n      }\n      const importResult = await Promise.all([\n        dataSignImportPublicKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]\n        ),\n        checkPrivateKey || privateKeyToImport\n          ? dataSignImportPrivateKey(privateKeyToImport!)\n          : (Promise.resolve(undefined) as any),\n      ]).catch((err) => [err, err]);\n      const publicKey = importResult[0];\n      let privateKey = importResult[1];\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        if (checkPrivateKey) {\n          return privateKey;\n        }\n        privateKey = undefined;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyPairFromString = async (\n  keyPairString: string,\n  password?: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (\n        password &&\n        keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME]\n      ) {\n        if (\n          typeof keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] !==\n          'string'\n        ) {\n          return new Error('A salt value must be a string');\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME],\n          keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          console.error('Failed to decrypt the data sign private key');\n          return decryptedPrivateKey;\n        }\n        try {\n          keyPairObject[\n            DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME\n          ] = JSON.parse(decryptedPrivateKey);\n        } catch (err) {\n          console.error(err);\n          return new Error(\n            'Failed to parse datasign Private key from the string decrypted'\n          );\n        }\n      }\n      if (dataSignIsCryptoKeyPairImported(keyPairObject, !!password)) {\n        return dataSignImportKeyPair(\n          keyPairObject as TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE,\n          !!password\n        );\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return dataSignImportKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, true);\n\nexport const dataSignImportPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, false);\n\nexport const dataSignCheckIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const dataSignGetKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (dataSignCheckIfStringIsKeyPair(key)) {\n      const keyPair = await dataSignImportKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return dataSignGetKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await dataSignImportKeyFromString(\n        key,\n        type === 'public'\n      );\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return dataSignGetKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const dataSignImportEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return dataSignImportKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return dataSignImportKey(jwk);\n    } else if (typeof key === 'string') {\n      return dataSignImportKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const dataSignConvertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await dataSignImportEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return dataSignExportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",["2265"],"if (!window.crypto) {\n  window.CryptoKey = require('@trust/webcrypto/src/keys/CryptoKey');\n  window.CryptoKeyPair = require('@trust/webcrypto/src/keys/CryptoKeyPair');\n  (window as any).JsonWebKey = require('@trust/webcrypto/src/keys/JsonWebKey');\n}\n\nexport const ENCRYPTION_FORMAT_SUPPORTED = !window.crypto ? 'SHA-1' : undefined;\n// TODO - check isomorphic-webcrypto to use\n\nexport const crypto = window.crypto || require('@trust/webcrypto');\n\nexport const cryptoModuleDataSign = crypto.subtle;\n","/home/paul/projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["2266"],"import { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  dataSignGetKeyOfType,\n  dataSignExportKey,\n} from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModuleDataSign.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["2267"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { dataSignGetKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<true | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModuleDataSign.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res !== true\n      ? new Error('The signature for the data is not valid')\n      : true;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyData = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<true | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n  return verifyNative(k, d, s);\n};\n","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["2268","2269","2270","2271","2272"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-validators-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["2273","2274","2275","2276","2277","2278","2279","2280","2281","2282"],"import {\n  CONST_CRYPTO_KEYS_TYPES,\n  CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS,\n} from 'const/const-crypto-keys/const-crypto-keys';\nimport {\n  HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM,\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM,\n} from 'utils/hash-calculation-utils/hash-calculation-utils.const';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\n\nimport { commonUtilsArrayIncludesAll } from '../common-utils/common-utils-array';\nimport { eCRYPTO_UTILS_KEYS_USAGES } from '../encryption-utils/crypto-utils.const';\nimport {\n  calculateHash,\n  calculateHashNative,\n} from './../hash-calculation-utils/hash-calculation-utils';\nimport {\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n} from './encryption-keys-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (\n  keyPair: any,\n  checkPrivateKeys: boolean = true\n): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    isCryptoKey(keyPair.publicKey) &&\n    (!checkPrivateKeys || isCryptoKey(keyPair.privateKey))\n  );\n};\n\nexport const isCryptoKeyIncludesUsages = (\n  cryptoKey: CryptoKey,\n  expectedUsages: eCRYPTO_UTILS_KEYS_USAGES[] | eCRYPTO_UTILS_KEYS_USAGES\n): boolean => {\n  const { usages } = cryptoKey;\n\n  if (typeof expectedUsages === 'string') {\n    return usages.includes(expectedUsages);\n  }\n  return commonUtilsArrayIncludesAll(usages, expectedUsages as string[]);\n};\n\nexport const isCryptoKeyDataSign = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.sign);\n\nexport const isCryptoKeyDataVerify = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.verify);\n\nexport const isCryptoKeyDataEncryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.encrypt);\n\nexport const isCryptoKeyDataDecryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.decrypt);\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n\nexport const exportCryptokeyInFormat = async (\n  key: CryptoKey,\n  format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS\n): Promise<ArrayBuffer | JsonWebKey | Error> => {\n  try {\n    const result = await crypto.subtle.exportKey(format, key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      return new Error(\n        'exportCryptokeyInFormat::error returned from the exportKey'\n      );\n    }\n    return result;\n  } catch (err) {\n    console.error(err);\n    return new Error(\n      'exportCryptokeyInFormat::An error thrown when export the crypto key'\n    );\n  }\n};\n\n/**\n * calculates hash string of the crypto key\n * @param {CryptoKey} key\n */\nexport const calcCryptoKeyHash = async (\n  key: CryptoKey,\n  alg: HASH_CALCULATION_UTILS_HASH_ALHORITHM = HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM\n): Promise<Error | string> => {\n  if (!(key instanceof CryptoKey)) {\n    return new Error('Key os not an instance of CryptoKey');\n  }\n  if (!key.extractable) {\n    return new Error('The crypto key is not extractable');\n  }\n\n  let format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS =\n    CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.RAW;\n  const keyAlgName = key.algorithm.name.toLowerCase();\n\n  if (keyAlgName.includes('rsa-') || keyAlgName.includes('ecdsa')) {\n    if (key.type.includes(CONST_CRYPTO_KEYS_TYPES.PUBLIC)) {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.SPKI;\n    } else {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.PKCS8;\n    }\n  }\n\n  const exportedCryptoKey = await exportCryptokeyInFormat(key, format);\n\n  if (exportedCryptoKey instanceof Error) {\n    console.error(exportedCryptoKey);\n    return new Error('Failed to export the crypto key in the RAW format');\n  }\n\n  const hashCalcResult = await calculateHashNative(\n    exportedCryptoKey as ArrayBuffer,\n    alg\n  );\n\n  if (hashCalcResult instanceof Error) {\n    console.error(hashCalcResult);\n    return new Error('Failed to calculate a hash for the exported crypto key');\n  }\n  return encodeArrayBufferToDOMString(hashCalcResult);\n};\n\n// allow to absent for a private keys in a pairs\nexport const calcCryptoKeyPairHash = async (\n  cryptoPair: CryptoKeyPair,\n  alg?: HASH_CALCULATION_UTILS_HASH_ALHORITHM\n): Promise<Error | string> => {\n  const pending = [calcCryptoKeyHash(cryptoPair.publicKey)];\n\n  if (cryptoPair.privateKey) {\n    pending.push(calcCryptoKeyHash(cryptoPair.privateKey));\n  }\n\n  const results = await Promise.all(pending);\n\n  if (results[0] instanceof Error) {\n    return new Error('Failed to calculate hash of the private key');\n  }\n  if (results[1] instanceof Error) {\n    return new Error('Failed to calculate hash of the puclic key');\n  }\n  return calculateHash(`${results[0]}___${results[1]}`);\n};\n","/home/paul/projects/protocol/src/utils/encryption-keys-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["2283"],"import { cryptoModule } from './main.crypto-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/projects/protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["2284","2285"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\nimport { decryptDataByPassword } from 'utils';\nimport { generateSalt } from './salt-utils';\nimport { CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME } from './crypto-utils.const';\nimport { encryptDataWithPassword } from '../password-utils/encrypt.password-utils';\nimport { encodeArrayBufferToDOMString } from '../string-encoding-utils';\nimport { TCRYPTO_UTIL_KEYPAIR_PREIMPORT_FORMAT_TYPE } from './crypto-utils.types';\nimport { typedArrayToString } from '../typed-array-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any,\n  checkPrivateKey: boolean = true\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    (!checkPrivateKey || !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME])\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair, !!password)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        password || keyPair.privateKey\n          ? exportKey(keyPair.privateKey)\n          : Promise.resolve(undefined),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n\n      const result: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE = {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n\n      if (password) {\n        const salt = generateSalt();\n\n        if (salt instanceof Error) {\n          return new Error('Failed to generate a unique salt value');\n        }\n\n        const encryptedPrivateKey = await encryptDataWithPassword(\n          password,\n          salt,\n          privateKey\n        );\n\n        if (encryptedPrivateKey instanceof Error) {\n          return new Error(\n            'Failed to encrypt private key with password provided'\n          );\n        }\n\n        const saltStringified = typedArrayToString(salt);\n\n        if (saltStringified instanceof Error) {\n          return new Error(\n            'Failed to stringify the salt for the encryption private key'\n          );\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          saltStringified,\n          encryptedPrivateKey\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          return new Error('Failed to decrypt private key for data encryption');\n        }\n        result[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] = saltStringified;\n        result[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME] = encryptedPrivateKey;\n      }\n      return result;\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair, password);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_PREIMPORT_FORMAT_TYPE,\n  checkPrivateKey: boolean = true\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair, checkPrivateKey)) {\n      const importResult = await Promise.all([\n        (async () => {\n          try {\n            return await importPublicKey(\n              keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]\n            );\n          } catch (err) {\n            return err;\n          }\n        })(),\n        (async () => {\n          try {\n            if (\n              checkPrivateKey ||\n              keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n            ) {\n              return await importPrivateKey(\n                keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n              );\n            }\n          } catch (err) {\n            return err;\n          }\n        })(),\n      ]);\n      const publicKey = importResult[0];\n      let privateKey = importResult[1];\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        if (checkPrivateKey) {\n          return privateKey;\n        }\n        privateKey = undefined;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = async (\n  keyPairString: string,\n  password?: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (password && keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME]) {\n        if (\n          typeof keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] !== 'string'\n        ) {\n          return new Error('A salt value must be a string');\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME],\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          console.error('Failed to decrypt the data encryption private key');\n          return decryptedPrivateKey;\n        }\n        try {\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME] = JSON.parse(\n            decryptedPrivateKey\n          );\n        } catch (err) {\n          console.error(err);\n          return new Error(\n            'Failed to parse dataencryption Private key from the string decrypted'\n          );\n        }\n      }\n      return importKeyPair(keyPairObject, !!password);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/files-utils-download.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/files-utils-size.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/protocol/src/utils/firebase-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/projects/protocol/src/utils/identity-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/index.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/index.js",["2286"],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.const.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.ts",["2287","2288","2289","2290"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as TCP from 'libp2p-tcp';\nimport * as WS from 'libp2p-websockets';\n// import * as WRTCDirect from 'libp2p-webrtc-direct';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as SECIO from 'libp2p-secio';\nimport * as WRTCStar from 'libp2p-webrtc-star';\n// import Stardust from 'libp2p-stardust';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport multiaddr from 'multiaddr';\nimport {\n  STARDUST_SERVER,\n  DELEGATE_CONTENT_ROUTER,\n  DELEGATE_PEER_ROUTER,\n  WEB_RTC_STAR_SERVER,\n} from './ipfs-utils-libp2p.const';\n\nconst upgrader = {\n  upgradeInbound: (maConn: any) => maConn,\n  upgradeOutbound: (maConn: any) => maConn,\n};\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebRTC transport and give it our PeerId, straight from the ipfs node\n  peerInfo.multiaddrs.add(\n    multiaddr(\n      `/ip4/${WEB_RTC_STAR_SERVER.host}/tcp/${WEB_RTC_STAR_SERVER.port}/ws/p2p-webrtc-star`\n    )\n  );\n\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(DELEGATE_PEER_ROUTER);\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    DELEGATE_CONTENT_ROUTER\n  );\n\n  // Build and return our libp2p node\n  return new Libp2p(\n    {\n      peerInfo,\n      peerBook,\n      /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n      switch: {\n        denyTTL: 2 * 60 * 1e3, // 2 minute base\n        denyAttempts: 5, // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3,\n      },\n      // Lets limit the connection managers peers and have it check peer health less frequently\n      connectionManager: {\n        minPeers: 25,\n        maxPeers: 100,\n        pollInterval: 5000,\n      },\n      modules: {\n        transport: [\n          TCP,\n          WS,\n          // TODO - WRTCDirect, depending on webrtc nodejs lib which is not necessary\n          WRTCStar,\n          // TODO - when the module will be stable use it\n          // Stardust,\n        ],\n        peerDiscovery: [Bootstrap],\n        streamMuxer: [MPLEX, SPDY],\n        connEncryption: [SECIO],\n        dht: KadDHT,\n        // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n        pubsub: PubSubGossip,\n        contentRouting: [delegateContentRouter],\n        peerRouting: [delegatePeerRouter],\n      },\n      config: {\n        peerDiscovery: {\n          // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n          autoDial: true,\n          bootstrap: {\n            list: bootstrapList,\n          },\n          webRTCStar: {\n            enabled: true,\n          },\n        },\n        transport: {\n          WebRTCStar: {\n            // webrtc-star options\n            interval: 1000, // ms\n            enabled: true,\n            id: peerInfo.id,\n            upgrader,\n          },\n          // TODO - when stabilized use it\n          // stardust: {\n          //   enabled: true,\n          //   upgrader,\n          //   libp2p: Libp2p,\n          //   id: peerInfo.id,\n          // },\n        },\n        // Turn on relay with hop active so we can connect to more peers\n        // implements the circuit-relay mechanism that allows nodes that\n        // don't speak the same protocol to communicate using a third relay node.\n        // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n        // can be forund on here\n        // https://github.com/libp2p/specs/tree/master/relay\n        /**\n         * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n         *\n         * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n         * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n         */\n        relay: {\n          enabled: true,\n          hop: {\n            enabled: true,\n            active: true,\n          },\n        },\n        /**\n         * Create a new KadDHT.\n         *\n         * @param {Switch} sw libp2p-switch instance\n         * @param {object} options DHT options\n         * @param {number} options.kBucketSize k-bucket size (default 20)\n         * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n         * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n         * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n         * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n         * @param {randomWalkOptions} options.randomWalk randomWalk options\n         */\n        /**\n         * Random walk options\n         *\n         * @typedef {Object} randomWalkOptions\n         * @property {boolean} enabled discovery enabled (default: true)\n         * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n         * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n         * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n         * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n         */\n        dht: {\n          enabled: true,\n          kBucketSize: 20,\n          concurrency: 5,\n          randomWalk: {\n            queriesPerPeriod: 2,\n            enabled: true,\n            interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n            timeout: 2e3, // End the query quickly since we're running so frequently\n          },\n        },\n        pubsub: {\n          enabled: true,\n          emitSelf: true,\n          signMessages: false,\n          strictSigning: false,\n        },\n      },\n    },\n    peerInfo\n  );\n};\n","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts",["2291","2292","2293","2294"],"// export const IPFS_UTILS_DEFAULT_OPTIONS = {\n//   config: {\n//     Addresses: {\n//       Swarm: [\n//         '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n//         '/ip4/127.0.0.1/tcp/9090/ws/p2p-webrtc-star',\n//       ],\n//     },\n//   },\n// };\n\nimport { WEB_RTC_STAR_SERVER } from './ipfs-utils-libp2p/ipfs-utils-libp2p.const';\n\nconst API_SERVER = {\n  host: '127.0.0.1',\n  port: '5001',\n};\n\nconst GATEWAY_SERVER = {\n  host: '127.0.0.1',\n  port: '8080',\n};\n\nconst BOOTSTRAP_NODE = {\n  host: '127.0.0.1',\n  port: '4002',\n};\n\nexport const IPFS_UTILS_DEFAULT_OPTIONS = {\n  // TODO - uncomment after server-side integrated\n  // config: {\n  //   Addresses: {\n  //     Swarm: [\n  //       `/ip4/${WEB_RTC_STAR_SERVER.host}/tcp/${WEB_RTC_STAR_SERVER.port}/ws/p2p-webrtc-star`,\n  //     ],\n  //     API: `/ip4/${API_SERVER.host}/tcp/${API_SERVER.port}`,\n  //     Gateway: `/ip4/${GATEWAY_SERVER.host}/tcp/${GATEWAY_SERVER.port}`,\n  //   },\n  //   Bootstrap: [\n  //     `/ip4/${BOOTSTRAP_NODE.host}/tcp/${BOOTSTRAP_NODE.port}/ws/ipfs/Qma6wr1oVavRghh4QDXxx1R1Ngo5ahreRRwkZgeYaUPKXs`,\n  //   ],\n  // },\n  // preload: {\n  //   // TODO - caused errors https://github.com/ipfs/go-ipfs/issues/6204\n  //   enabled: false,\n  //   addresses: [`/ip4/${API_SERVER.host}/tcp/${API_SERVER.port}`],\n  // },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  dht: {\n    enabled: true,\n    kBucketSize: 20,\n    concurrency: 5,\n    randomWalk: {\n      queriesPerPeriod: 2,\n      enabled: true,\n      interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n      timeout: 2e3, // End the query quickly since we're running so frequently\n    },\n  },\n  pubsub: {\n    enabled: true,\n    emitSelf: true,\n    signMessages: false,\n    strictSigning: false,\n  },\n};\n\nexport const IPFS_UTILS_DEFAULT_TIMEOUT_MS = 30000;\n","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts",["2295","2296"],"import IPFS from 'ipfs';\nimport {\n  IPFS_UTILS_DEFAULT_OPTIONS,\n  IPFS_UTILS_DEFAULT_TIMEOUT_MS,\n} from './ipfs-utils.const';\nimport { getLibPeerToPeer } from './ipfs-utils-libp2p/ipfs-utils-libp2p';\n\n/**\n * create a ready to use connection to IPFS with a basis default options\n */\nexport const ipfsUtilsConnectBasic = async (\n  options?: object,\n  timeoutMs: number = IPFS_UTILS_DEFAULT_TIMEOUT_MS\n) => {\n  let timer: NodeJS.Timeout | undefined;\n  try {\n    timer = setTimeout(() => {\n      throw new Error('Connection timed out');\n    }, timeoutMs);\n    return await IPFS.create({\n      ...IPFS_UTILS_DEFAULT_OPTIONS,\n      ...options,\n      // TODO - https://github.com/ipfs/go-ipfs/issues/6204 - try when resolved libp2p: getLibPeerToPeer,\n    });\n  } finally {\n    clearTimeout(timer!);\n  }\n};\n","/home/paul/projects/protocol/src/utils/lazy-loading-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/projects/protocol/src/utils/main-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/encrypt.password-utils.ts",["2297","2298"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n\nexport const encryptDataWithPasswordToArrayBuffer = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n  return encryptDataToArrayBuffer(key, data);\n};\n","/home/paul/projects/protocol/src/utils/password-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/password-utils.const.ts",["2299","2300"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\nimport { HASH_CALCULATION_UTILS_HASH_ALHORITHM } from '../hash-calculation-utils/hash-calculation-utils.const';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM =\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM.SHA256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 128;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/projects/protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/string-encoding-utils.ts",["2301"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/projects/protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/protocol/src/utils/typed-array-utils.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils.ts",["2302","2303"],"import { ValidationError } from './validation-utils-validation-error';\nimport Ajv, { ValidateFunction } from 'ajv';\nimport ajvJSONSchemaDraft6 from 'ajv/lib/refs/json-schema-draft-06.json';\nimport memoize from 'lodash.memoize';\nimport { isDEV } from 'const/common-values/common-values-env';\n\nconst ajv = new Ajv({\n  allErrors: isDEV,\n  verbose: isDEV,\n});\n\najv.addMetaSchema(ajvJSONSchemaDraft6);\n\nconst ajvVerbose = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\najvVerbose.addMetaSchema(ajvJSONSchemaDraft6);\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  return !!getValidatorForJSONSchema(schema)(value);\n};\n\nexport const getVerboseValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajvVerbose.compile(schema)\n);\n\nexport const validateVerboseBySchema = (\n  schema: object,\n  value: any\n): Error | void => {\n  const validator = getVerboseValidatorForJSONSchema(schema);\n  const validationResult = validator(value);\n\n  if (!validationResult) {\n    return new ValidationError(validator.errors);\n  }\n};\n","/home/paul/projects/protocol/src/components/database-component/database-component.tsx",[],"/home/paul/projects/protocol/src/components/database-component/index.ts",[],"/home/paul/projects/protocol/src/components/database-component/message-component/index.ts",[],"/home/paul/projects/protocol/src/components/database-component/message-component/message-component.tsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"2304"},{"ruleId":null,"fatal":true,"severity":2,"message":"2305"},{"ruleId":null,"fatal":true,"severity":2,"message":"2306"},{"ruleId":null,"fatal":true,"severity":2,"message":"2307"},{"ruleId":"2308","severity":1,"message":"2309","line":16,"column":56,"nodeType":"2310","messageId":"2311","endLine":16,"endColumn":59},{"ruleId":"2308","severity":1,"message":"2309","line":18,"column":28,"nodeType":"2310","messageId":"2311","endLine":18,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":34,"column":37,"nodeType":"2310","messageId":"2311","endLine":34,"endColumn":40},{"ruleId":"2308","severity":1,"message":"2309","line":45,"column":42,"nodeType":"2310","messageId":"2311","endLine":45,"endColumn":45},{"ruleId":"2308","severity":1,"message":"2309","line":84,"column":22,"nodeType":"2310","messageId":"2311","endLine":84,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":88,"column":47,"nodeType":"2310","messageId":"2311","endLine":88,"endColumn":50},{"ruleId":"2308","severity":1,"message":"2309","line":89,"column":47,"nodeType":"2310","messageId":"2311","endLine":89,"endColumn":50},{"ruleId":"2308","severity":1,"message":"2309","line":59,"column":65,"nodeType":"2310","messageId":"2311","endLine":59,"endColumn":68},{"ruleId":"2308","severity":1,"message":"2309","line":69,"column":37,"nodeType":"2310","messageId":"2311","endLine":69,"endColumn":40},{"ruleId":"2308","severity":1,"message":"2309","line":4,"column":27,"nodeType":"2310","messageId":"2311","endLine":4,"endColumn":30},{"ruleId":"2312","severity":1,"message":"2313","line":2,"column":10,"nodeType":"2314","endLine":2,"endColumn":13},{"ruleId":"2308","severity":1,"message":"2309","line":9,"column":56,"nodeType":"2310","messageId":"2311","endLine":9,"endColumn":59},{"ruleId":"2308","severity":1,"message":"2309","line":15,"column":55,"nodeType":"2310","messageId":"2311","endLine":15,"endColumn":58},{"ruleId":"2315","severity":1,"message":"2316","line":87,"column":15,"nodeType":"2317","messageId":"2318","endLine":87,"endColumn":27},{"ruleId":"2312","severity":1,"message":"2319","line":58,"column":9,"nodeType":"2314","endLine":58,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":76,"column":27,"nodeType":"2310","messageId":"2311","endLine":76,"endColumn":30},{"ruleId":"2308","severity":1,"message":"2309","line":77,"column":39,"nodeType":"2310","messageId":"2311","endLine":77,"endColumn":42},{"ruleId":"2315","severity":1,"message":"2316","line":98,"column":36,"nodeType":"2317","messageId":"2318","endLine":98,"endColumn":40},{"ruleId":"2308","severity":1,"message":"2309","line":130,"column":38,"nodeType":"2310","messageId":"2311","endLine":130,"endColumn":41},{"ruleId":"2312","severity":1,"message":"2320","line":38,"column":7,"nodeType":"2314","endLine":38,"endColumn":17},{"ruleId":"2321","severity":1,"message":"2322","line":69,"column":3,"nodeType":"2323","endLine":69,"endColumn":19},{"ruleId":"2324","severity":1,"message":"2325","line":69,"column":17,"nodeType":"2326","messageId":"2327"},{"ruleId":"2312","severity":1,"message":"2328","line":3,"column":3,"nodeType":"2314","endLine":3,"endColumn":41},{"ruleId":"2312","severity":1,"message":"2329","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":39},{"ruleId":"2308","severity":1,"message":"2309","line":2,"column":7,"nodeType":"2310","messageId":"2311","endLine":2,"endColumn":10},{"ruleId":"2308","severity":1,"message":"2309","line":13,"column":12,"nodeType":"2310","messageId":"2311","endLine":13,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":47,"column":28,"nodeType":"2310","messageId":"2311","endLine":47,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":67,"column":28,"nodeType":"2310","messageId":"2311","endLine":67,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":38,"column":58,"nodeType":"2310","messageId":"2311","endLine":38,"endColumn":61},{"ruleId":"2315","severity":1,"message":"2316","line":624,"column":19,"nodeType":"2317","messageId":"2318","endLine":624,"endColumn":40},{"ruleId":"2312","severity":1,"message":"2330","line":401,"column":9,"nodeType":"2314","endLine":401,"endColumn":21},{"ruleId":"2315","severity":1,"message":"2316","line":191,"column":14,"nodeType":"2317","messageId":"2318","endLine":191,"endColumn":47},{"ruleId":"2315","severity":1,"message":"2316","line":217,"column":26,"nodeType":"2317","messageId":"2318","endLine":217,"endColumn":76},{"ruleId":"2315","severity":1,"message":"2316","line":217,"column":26,"nodeType":"2317","messageId":"2318","endLine":217,"endColumn":75},{"ruleId":"2308","severity":1,"message":"2309","line":361,"column":17,"nodeType":"2310","messageId":"2311","endLine":361,"endColumn":20},{"ruleId":"2315","severity":1,"message":"2316","line":45,"column":14,"nodeType":"2317","messageId":"2318","endLine":45,"endColumn":19},{"ruleId":"2315","severity":1,"message":"2316","line":45,"column":14,"nodeType":"2317","messageId":"2318","endLine":45,"endColumn":18},{"ruleId":"2308","severity":1,"message":"2309","line":159,"column":29,"nodeType":"2310","messageId":"2311","endLine":159,"endColumn":32},{"ruleId":"2308","severity":1,"message":"2309","line":189,"column":29,"nodeType":"2310","messageId":"2311","endLine":189,"endColumn":32},{"ruleId":"2308","severity":1,"message":"2309","line":228,"column":33,"nodeType":"2310","messageId":"2311","endLine":228,"endColumn":36},{"ruleId":"2312","severity":1,"message":"2331","line":4,"column":10,"nodeType":"2314","endLine":4,"endColumn":30},{"ruleId":"2308","severity":1,"message":"2309","line":37,"column":32,"nodeType":"2310","messageId":"2311","endLine":37,"endColumn":35},{"ruleId":"2315","severity":1,"message":"2316","line":103,"column":13,"nodeType":"2317","messageId":"2318","endLine":103,"endColumn":23},{"ruleId":"2315","severity":1,"message":"2316","line":103,"column":13,"nodeType":"2317","messageId":"2318","endLine":103,"endColumn":22},{"ruleId":"2315","severity":1,"message":"2316","line":134,"column":13,"nodeType":"2317","messageId":"2318","endLine":134,"endColumn":23},{"ruleId":"2315","severity":1,"message":"2316","line":134,"column":13,"nodeType":"2317","messageId":"2318","endLine":134,"endColumn":22},{"ruleId":"2315","severity":1,"message":"2316","line":152,"column":30,"nodeType":"2317","messageId":"2318","endLine":152,"endColumn":40},{"ruleId":"2315","severity":1,"message":"2316","line":152,"column":30,"nodeType":"2317","messageId":"2318","endLine":152,"endColumn":39},{"ruleId":"2308","severity":1,"message":"2309","line":7,"column":18,"nodeType":"2310","messageId":"2311","endLine":7,"endColumn":21},{"ruleId":"2332","severity":1,"message":"2333","line":340,"column":21,"nodeType":"2334","messageId":"2335","endLine":349,"endColumn":16},{"ruleId":"2332","severity":1,"message":"2333","line":350,"column":22,"nodeType":"2334","messageId":"2335","endLine":353,"endColumn":16},{"ruleId":"2312","severity":1,"message":"2336","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":44},{"ruleId":"2308","severity":1,"message":"2309","line":10,"column":19,"nodeType":"2310","messageId":"2311","endLine":10,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2309","line":26,"column":19,"nodeType":"2310","messageId":"2311","endLine":26,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2309","line":19,"column":58,"nodeType":"2310","messageId":"2311","endLine":19,"endColumn":61},{"ruleId":"2308","severity":1,"message":"2309","line":34,"column":13,"nodeType":"2310","messageId":"2311","endLine":34,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":65,"column":13,"nodeType":"2310","messageId":"2311","endLine":65,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":88,"column":15,"nodeType":"2310","messageId":"2311","endLine":88,"endColumn":18},{"ruleId":"2312","severity":1,"message":"2337","line":11,"column":3,"nodeType":"2314","endLine":11,"endColumn":23},{"ruleId":"2308","severity":1,"message":"2309","line":218,"column":30,"nodeType":"2310","messageId":"2311","endLine":218,"endColumn":33},{"ruleId":"2308","severity":1,"message":"2309","line":255,"column":28,"nodeType":"2310","messageId":"2311","endLine":255,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":16,"column":62,"nodeType":"2310","messageId":"2311","endLine":16,"endColumn":65},{"ruleId":"2308","severity":1,"message":"2309","line":27,"column":22,"nodeType":"2310","messageId":"2311","endLine":27,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":73,"column":22,"nodeType":"2310","messageId":"2311","endLine":73,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":74,"column":38,"nodeType":"2310","messageId":"2311","endLine":74,"endColumn":41},{"ruleId":"2308","severity":1,"message":"2309","line":120,"column":22,"nodeType":"2310","messageId":"2311","endLine":120,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":134,"column":38,"nodeType":"2310","messageId":"2311","endLine":134,"endColumn":41},{"ruleId":"2308","severity":1,"message":"2309","line":6,"column":16,"nodeType":"2310","messageId":"2311","endLine":6,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2309","line":70,"column":38,"nodeType":"2310","messageId":"2311","endLine":70,"endColumn":41},{"ruleId":"2308","severity":1,"message":"2309","line":81,"column":28,"nodeType":"2310","messageId":"2311","endLine":81,"endColumn":31},{"ruleId":"2315","severity":1,"message":"2316","line":171,"column":54,"nodeType":"2317","messageId":"2318","endLine":171,"endColumn":62},{"ruleId":"2324","severity":1,"message":"2338","line":229,"column":41,"nodeType":"2326","messageId":"2327"},{"ruleId":"2315","severity":1,"message":"2316","line":242,"column":21,"nodeType":"2317","messageId":"2318","endLine":242,"endColumn":34},{"ruleId":"2315","severity":1,"message":"2316","line":435,"column":19,"nodeType":"2317","messageId":"2318","endLine":435,"endColumn":32},{"ruleId":"2315","severity":1,"message":"2316","line":439,"column":17,"nodeType":"2317","messageId":"2318","endLine":439,"endColumn":57},{"ruleId":"2315","severity":1,"message":"2316","line":439,"column":17,"nodeType":"2317","messageId":"2318","endLine":439,"endColumn":30},{"ruleId":"2315","severity":1,"message":"2316","line":445,"column":19,"nodeType":"2317","messageId":"2318","endLine":445,"endColumn":32},{"ruleId":"2315","severity":1,"message":"2316","line":453,"column":19,"nodeType":"2317","messageId":"2318","endLine":453,"endColumn":32},{"ruleId":"2315","severity":1,"message":"2316","line":458,"column":23,"nodeType":"2317","messageId":"2318","endLine":458,"endColumn":41},{"ruleId":"2315","severity":1,"message":"2316","line":468,"column":19,"nodeType":"2317","messageId":"2318","endLine":468,"endColumn":32},{"ruleId":"2312","severity":1,"message":"2339","line":479,"column":11,"nodeType":"2314","endLine":479,"endColumn":16},{"ruleId":"2315","severity":1,"message":"2316","line":479,"column":19,"nodeType":"2317","messageId":"2318","endLine":479,"endColumn":32},{"ruleId":"2312","severity":1,"message":"2340","line":12,"column":3,"nodeType":"2314","endLine":12,"endColumn":30},{"ruleId":"2308","severity":1,"message":"2309","line":85,"column":11,"nodeType":"2310","messageId":"2311","endLine":85,"endColumn":14},{"ruleId":"2312","severity":1,"message":"2341","line":10,"column":8,"nodeType":"2314","endLine":10,"endColumn":12},{"ruleId":"2324","severity":1,"message":"2342","line":43,"column":24,"nodeType":"2326","messageId":"2327"},{"ruleId":"2315","severity":1,"message":"2316","line":112,"column":36,"nodeType":"2317","messageId":"2318","endLine":112,"endColumn":45},{"ruleId":"2315","severity":1,"message":"2316","line":157,"column":33,"nodeType":"2317","messageId":"2318","endLine":157,"endColumn":38},{"ruleId":"2312","severity":1,"message":"2343","line":232,"column":12,"nodeType":"2314","endLine":232,"endColumn":19},{"ruleId":"2312","severity":1,"message":"2344","line":232,"column":21,"nodeType":"2314","endLine":232,"endColumn":27},{"ruleId":"2312","severity":1,"message":"2345","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":29},{"ruleId":"2308","severity":1,"message":"2309","line":47,"column":17,"nodeType":"2310","messageId":"2311","endLine":47,"endColumn":20},{"ruleId":"2308","severity":1,"message":"2309","line":42,"column":36,"nodeType":"2310","messageId":"2311","endLine":42,"endColumn":39},{"ruleId":"2308","severity":1,"message":"2309","line":143,"column":14,"nodeType":"2310","messageId":"2311","endLine":143,"endColumn":17},{"ruleId":"2315","severity":1,"message":"2316","line":206,"column":31,"nodeType":"2317","messageId":"2318","endLine":206,"endColumn":43},{"ruleId":"2315","severity":1,"message":"2316","line":231,"column":35,"nodeType":"2317","messageId":"2318","endLine":231,"endColumn":56},{"ruleId":"2315","severity":1,"message":"2316","line":244,"column":34,"nodeType":"2317","messageId":"2318","endLine":244,"endColumn":46},{"ruleId":"2308","severity":1,"message":"2309","line":388,"column":39,"nodeType":"2310","messageId":"2311","endLine":388,"endColumn":42},{"ruleId":"2315","severity":1,"message":"2316","line":546,"column":10,"nodeType":"2317","messageId":"2318","endLine":546,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":3,"column":42,"nodeType":"2310","messageId":"2311","endLine":3,"endColumn":45},{"ruleId":"2308","severity":1,"message":"2309","line":34,"column":71,"nodeType":"2310","messageId":"2311","endLine":34,"endColumn":74},{"ruleId":"2312","severity":1,"message":"2346","line":546,"column":38,"nodeType":"2314","endLine":546,"endColumn":44},{"ruleId":"2312","severity":1,"message":"2346","line":858,"column":38,"nodeType":"2314","endLine":858,"endColumn":44},{"ruleId":"2308","severity":1,"message":"2309","line":972,"column":34,"nodeType":"2310","messageId":"2311","endLine":972,"endColumn":37},{"ruleId":"2308","severity":1,"message":"2309","line":4,"column":28,"nodeType":"2310","messageId":"2311","endLine":4,"endColumn":31},{"ruleId":"2312","severity":1,"message":"2347","line":12,"column":3,"nodeType":"2314","endLine":12,"endColumn":20},{"ruleId":"2308","severity":1,"message":"2309","line":93,"column":44,"nodeType":"2310","messageId":"2311","endLine":93,"endColumn":47},{"ruleId":"2308","severity":1,"message":"2309","line":111,"column":38,"nodeType":"2310","messageId":"2311","endLine":111,"endColumn":41},{"ruleId":"2308","severity":1,"message":"2309","line":710,"column":35,"nodeType":"2310","messageId":"2311","endLine":710,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":1077,"column":44,"nodeType":"2310","messageId":"2311","endLine":1077,"endColumn":47},{"ruleId":"2308","severity":1,"message":"2309","line":22,"column":35,"nodeType":"2310","messageId":"2311","endLine":22,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":60,"column":43,"nodeType":"2310","messageId":"2311","endLine":60,"endColumn":46},{"ruleId":"2308","severity":1,"message":"2309","line":44,"column":31,"nodeType":"2310","messageId":"2311","endLine":44,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2309","line":45,"column":33,"nodeType":"2310","messageId":"2311","endLine":45,"endColumn":36},{"ruleId":"2308","severity":1,"message":"2309","line":132,"column":29,"nodeType":"2310","messageId":"2311","endLine":132,"endColumn":32},{"ruleId":"2308","severity":1,"message":"2309","line":137,"column":30,"nodeType":"2310","messageId":"2311","endLine":137,"endColumn":33},{"ruleId":"2315","severity":1,"message":"2316","line":188,"column":26,"nodeType":"2317","messageId":"2318","endLine":188,"endColumn":39},{"ruleId":"2315","severity":1,"message":"2316","line":212,"column":26,"nodeType":"2317","messageId":"2318","endLine":212,"endColumn":39},{"ruleId":"2312","severity":1,"message":"2348","line":13,"column":10,"nodeType":"2314","endLine":13,"endColumn":26},{"ruleId":"2312","severity":1,"message":"2349","line":10,"column":10,"nodeType":"2314","endLine":10,"endColumn":27},{"ruleId":"2312","severity":1,"message":"2350","line":6,"column":10,"nodeType":"2314","endLine":6,"endColumn":47},{"ruleId":"2312","severity":1,"message":"2351","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":46},{"ruleId":"2312","severity":1,"message":"2349","line":21,"column":3,"nodeType":"2314","endLine":21,"endColumn":20},{"ruleId":"2308","severity":1,"message":"2309","line":228,"column":53,"nodeType":"2310","messageId":"2311","endLine":228,"endColumn":56},{"ruleId":"2352","severity":1,"message":"2353","line":345,"column":35,"nodeType":"2334","messageId":"2354"},{"ruleId":"2312","severity":1,"message":"2355","line":3,"column":3,"nodeType":"2314","endLine":3,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2309","line":192,"column":62,"nodeType":"2310","messageId":"2311","endLine":192,"endColumn":65},{"ruleId":"2308","severity":1,"message":"2309","line":227,"column":45,"nodeType":"2310","messageId":"2311","endLine":227,"endColumn":48},{"ruleId":"2308","severity":1,"message":"2309","line":344,"column":9,"nodeType":"2310","messageId":"2311","endLine":344,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2309","line":346,"column":5,"nodeType":"2310","messageId":"2311","endLine":346,"endColumn":8},{"ruleId":"2308","severity":1,"message":"2309","line":347,"column":5,"nodeType":"2310","messageId":"2311","endLine":347,"endColumn":8},{"ruleId":"2308","severity":1,"message":"2309","line":566,"column":58,"nodeType":"2310","messageId":"2311","endLine":566,"endColumn":61},{"ruleId":"2308","severity":1,"message":"2309","line":112,"column":30,"nodeType":"2310","messageId":"2311","endLine":112,"endColumn":33},{"ruleId":"2315","severity":1,"message":"2316","line":55,"column":26,"nodeType":"2317","messageId":"2318","endLine":55,"endColumn":47},{"ruleId":"2315","severity":1,"message":"2316","line":74,"column":26,"nodeType":"2317","messageId":"2318","endLine":74,"endColumn":47},{"ruleId":"2315","severity":1,"message":"2316","line":101,"column":26,"nodeType":"2317","messageId":"2318","endLine":101,"endColumn":47},{"ruleId":"2315","severity":1,"message":"2316","line":201,"column":26,"nodeType":"2317","messageId":"2318","endLine":201,"endColumn":47},{"ruleId":"2308","severity":1,"message":"2309","line":46,"column":20,"nodeType":"2310","messageId":"2311","endLine":46,"endColumn":23},{"ruleId":"2308","severity":1,"message":"2309","line":24,"column":64,"nodeType":"2310","messageId":"2311","endLine":24,"endColumn":67},{"ruleId":"2308","severity":1,"message":"2309","line":105,"column":46,"nodeType":"2310","messageId":"2311","endLine":105,"endColumn":49},{"ruleId":"2308","severity":1,"message":"2309","line":132,"column":13,"nodeType":"2310","messageId":"2311","endLine":132,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":145,"column":13,"nodeType":"2310","messageId":"2311","endLine":145,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":198,"column":13,"nodeType":"2310","messageId":"2311","endLine":198,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":211,"column":13,"nodeType":"2310","messageId":"2311","endLine":211,"endColumn":16},{"ruleId":"2308","severity":1,"message":"2309","line":311,"column":20,"nodeType":"2310","messageId":"2311","endLine":311,"endColumn":23},{"ruleId":"2308","severity":1,"message":"2309","line":161,"column":33,"nodeType":"2310","messageId":"2311","endLine":161,"endColumn":36},{"ruleId":"2312","severity":1,"message":"2356","line":35,"column":10,"nodeType":"2314","endLine":35,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":73,"column":64,"nodeType":"2310","messageId":"2311","endLine":73,"endColumn":67},{"ruleId":"2308","severity":1,"message":"2309","line":139,"column":31,"nodeType":"2310","messageId":"2311","endLine":139,"endColumn":34},{"ruleId":"2315","severity":1,"message":"2316","line":177,"column":63,"nodeType":"2317","messageId":"2318","endLine":177,"endColumn":67},{"ruleId":"2308","severity":1,"message":"2309","line":377,"column":20,"nodeType":"2310","messageId":"2311","endLine":377,"endColumn":23},{"ruleId":"2308","severity":1,"message":"2309","line":451,"column":31,"nodeType":"2310","messageId":"2311","endLine":451,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2309","line":452,"column":40,"nodeType":"2310","messageId":"2311","endLine":452,"endColumn":43},{"ruleId":"2308","severity":1,"message":"2309","line":461,"column":53,"nodeType":"2310","messageId":"2311","endLine":461,"endColumn":56},{"ruleId":"2308","severity":1,"message":"2309","line":574,"column":62,"nodeType":"2310","messageId":"2311","endLine":574,"endColumn":65},{"ruleId":"2315","severity":1,"message":"2316","line":576,"column":24,"nodeType":"2317","messageId":"2318","endLine":576,"endColumn":32},{"ruleId":"2308","severity":1,"message":"2309","line":608,"column":12,"nodeType":"2310","messageId":"2311","endLine":608,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":660,"column":12,"nodeType":"2310","messageId":"2311","endLine":660,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":792,"column":12,"nodeType":"2310","messageId":"2311","endLine":792,"endColumn":15},{"ruleId":"2315","severity":1,"message":"2316","line":901,"column":26,"nodeType":"2317","messageId":"2318","endLine":901,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2309","line":65,"column":5,"nodeType":"2310","messageId":"2311","endLine":65,"endColumn":8},{"ruleId":"2308","severity":1,"message":"2309","line":67,"column":5,"nodeType":"2310","messageId":"2311","endLine":67,"endColumn":8},{"ruleId":"2308","severity":1,"message":"2309","line":86,"column":11,"nodeType":"2310","messageId":"2311","endLine":86,"endColumn":14},{"ruleId":"2315","severity":1,"message":"2316","line":96,"column":23,"nodeType":"2317","messageId":"2318","endLine":96,"endColumn":32},{"ruleId":"2315","severity":1,"message":"2316","line":102,"column":27,"nodeType":"2317","messageId":"2318","endLine":102,"endColumn":36},{"ruleId":"2308","severity":1,"message":"2309","line":102,"column":40,"nodeType":"2310","messageId":"2311","endLine":102,"endColumn":43},{"ruleId":"2308","severity":1,"message":"2309","line":18,"column":22,"nodeType":"2310","messageId":"2311","endLine":18,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":70,"column":26,"nodeType":"2310","messageId":"2311","endLine":70,"endColumn":29},{"ruleId":"2324","severity":1,"message":"2357","line":198,"column":23,"nodeType":"2326","messageId":"2327"},{"ruleId":"2308","severity":1,"message":"2309","line":85,"column":24,"nodeType":"2310","messageId":"2311","endLine":85,"endColumn":27},{"ruleId":"2308","severity":1,"message":"2309","line":105,"column":40,"nodeType":"2310","messageId":"2311","endLine":105,"endColumn":43},{"ruleId":"2308","severity":1,"message":"2309","line":105,"column":50,"nodeType":"2310","messageId":"2311","endLine":105,"endColumn":53},{"ruleId":"2308","severity":1,"message":"2309","line":307,"column":22,"nodeType":"2310","messageId":"2311","endLine":307,"endColumn":25},{"ruleId":"2308","severity":1,"message":"2309","line":322,"column":42,"nodeType":"2310","messageId":"2311","endLine":322,"endColumn":45},{"ruleId":"2308","severity":1,"message":"2309","line":927,"column":12,"nodeType":"2310","messageId":"2311","endLine":927,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":1096,"column":5,"nodeType":"2310","messageId":"2311","endLine":1096,"endColumn":8},{"ruleId":"2312","severity":1,"message":"2358","line":2,"column":10,"nodeType":"2314","endLine":2,"endColumn":26},{"ruleId":"2312","severity":1,"message":"2359","line":4,"column":10,"nodeType":"2314","endLine":4,"endColumn":30},{"ruleId":"2308","severity":1,"message":"2309","line":49,"column":21,"nodeType":"2310","messageId":"2311","endLine":49,"endColumn":24},{"ruleId":"2308","severity":1,"message":"2309","line":101,"column":27,"nodeType":"2310","messageId":"2311","endLine":101,"endColumn":30},{"ruleId":"2308","severity":1,"message":"2309","line":4,"column":55,"nodeType":"2310","messageId":"2311","endLine":4,"endColumn":58},{"ruleId":"2312","severity":1,"message":"2360","line":2,"column":10,"nodeType":"2314","endLine":2,"endColumn":37},{"ruleId":"2312","severity":1,"message":"2361","line":5,"column":3,"nodeType":"2314","endLine":5,"endColumn":20},{"ruleId":"2362","severity":1,"message":"2363","line":122,"column":9,"nodeType":"2364","endLine":127,"endColumn":10},{"ruleId":"2312","severity":1,"message":"2365","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":38},{"ruleId":"2312","severity":1,"message":"2345","line":3,"column":10,"nodeType":"2314","endLine":3,"endColumn":29},{"ruleId":"2312","severity":1,"message":"2366","line":4,"column":10,"nodeType":"2314","endLine":4,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":15,"column":6,"nodeType":"2310","messageId":"2311","endLine":15,"endColumn":9},{"ruleId":"2308","severity":1,"message":"2309","line":25,"column":48,"nodeType":"2310","messageId":"2311","endLine":25,"endColumn":51},{"ruleId":"2308","severity":1,"message":"2309","line":27,"column":34,"nodeType":"2310","messageId":"2311","endLine":27,"endColumn":37},{"ruleId":"2308","severity":1,"message":"2309","line":6,"column":37,"nodeType":"2310","messageId":"2311","endLine":6,"endColumn":40},{"ruleId":"2308","severity":1,"message":"2309","line":6,"column":45,"nodeType":"2310","messageId":"2311","endLine":6,"endColumn":48},{"ruleId":"2308","severity":1,"message":"2309","line":8,"column":28,"nodeType":"2310","messageId":"2311","endLine":8,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":5,"column":40,"nodeType":"2310","messageId":"2311","endLine":5,"endColumn":43},{"ruleId":"2308","severity":1,"message":"2309","line":5,"column":48,"nodeType":"2310","messageId":"2311","endLine":5,"endColumn":51},{"ruleId":"2308","severity":1,"message":"2309","line":8,"column":25,"nodeType":"2310","messageId":"2311","endLine":8,"endColumn":28},{"ruleId":"2308","severity":1,"message":"2309","line":6,"column":47,"nodeType":"2310","messageId":"2311","endLine":6,"endColumn":50},{"ruleId":"2308","severity":1,"message":"2309","line":6,"column":55,"nodeType":"2310","messageId":"2311","endLine":6,"endColumn":58},{"ruleId":"2308","severity":1,"message":"2309","line":9,"column":32,"nodeType":"2310","messageId":"2311","endLine":9,"endColumn":35},{"ruleId":"2308","severity":1,"message":"2309","line":7,"column":21,"nodeType":"2310","messageId":"2311","endLine":7,"endColumn":24},{"ruleId":"2308","severity":1,"message":"2309","line":23,"column":23,"nodeType":"2310","messageId":"2311","endLine":23,"endColumn":26},{"ruleId":"2308","severity":1,"message":"2309","line":24,"column":21,"nodeType":"2310","messageId":"2311","endLine":24,"endColumn":24},{"ruleId":"2321","severity":1,"message":"2322","line":50,"column":5,"nodeType":"2323","endLine":50,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2309","line":50,"column":26,"nodeType":"2310","messageId":"2311","endLine":50,"endColumn":29},{"ruleId":"2324","severity":1,"message":"2325","line":50,"column":31,"nodeType":"2326","messageId":"2327"},{"ruleId":"2308","severity":1,"message":"2309","line":40,"column":25,"nodeType":"2310","messageId":"2311","endLine":40,"endColumn":28},{"ruleId":"2308","severity":1,"message":"2309","line":48,"column":18,"nodeType":"2310","messageId":"2311","endLine":48,"endColumn":21},{"ruleId":"2308","severity":1,"message":"2309","line":123,"column":16,"nodeType":"2310","messageId":"2311","endLine":123,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2309","line":124,"column":18,"nodeType":"2310","messageId":"2311","endLine":124,"endColumn":21},{"ruleId":"2308","severity":1,"message":"2309","line":1,"column":33,"nodeType":"2310","messageId":"2311","endLine":1,"endColumn":36},{"ruleId":"2308","severity":1,"message":"2309","line":4,"column":37,"nodeType":"2310","messageId":"2311","endLine":4,"endColumn":40},{"ruleId":"2308","severity":1,"message":"2309","line":8,"column":34,"nodeType":"2310","messageId":"2311","endLine":8,"endColumn":37},{"ruleId":"2308","severity":1,"message":"2309","line":17,"column":35,"nodeType":"2310","messageId":"2311","endLine":17,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":31,"column":46,"nodeType":"2310","messageId":"2311","endLine":31,"endColumn":49},{"ruleId":"2308","severity":1,"message":"2309","line":31,"column":74,"nodeType":"2310","messageId":"2311","endLine":31,"endColumn":77},{"ruleId":"2308","severity":1,"message":"2309","line":36,"column":8,"nodeType":"2310","messageId":"2311","endLine":36,"endColumn":11},{"ruleId":"2315","severity":1,"message":"2316","line":249,"column":38,"nodeType":"2317","messageId":"2318","endLine":249,"endColumn":57},{"ruleId":"2308","severity":1,"message":"2309","line":250,"column":44,"nodeType":"2310","messageId":"2311","endLine":250,"endColumn":47},{"ruleId":"2308","severity":1,"message":"2309","line":4,"column":14,"nodeType":"2310","messageId":"2311","endLine":4,"endColumn":17},{"ruleId":"2312","severity":1,"message":"2367","line":13,"column":3,"nodeType":"2314","endLine":13,"endColumn":20},{"ruleId":"2312","severity":1,"message":"2368","line":4,"column":3,"nodeType":"2314","endLine":4,"endColumn":21},{"ruleId":"2308","severity":1,"message":"2309","line":10,"column":41,"nodeType":"2310","messageId":"2311","endLine":10,"endColumn":44},{"ruleId":"2308","severity":1,"message":"2309","line":14,"column":41,"nodeType":"2310","messageId":"2311","endLine":14,"endColumn":44},{"ruleId":"2308","severity":1,"message":"2309","line":20,"column":44,"nodeType":"2310","messageId":"2311","endLine":20,"endColumn":47},{"ruleId":"2308","severity":1,"message":"2309","line":24,"column":43,"nodeType":"2310","messageId":"2311","endLine":24,"endColumn":46},{"ruleId":"2308","severity":1,"message":"2309","line":28,"column":47,"nodeType":"2310","messageId":"2311","endLine":28,"endColumn":50},{"ruleId":"2308","severity":1,"message":"2309","line":24,"column":32,"nodeType":"2310","messageId":"2311","endLine":24,"endColumn":35},{"ruleId":"2308","severity":1,"message":"2309","line":27,"column":12,"nodeType":"2310","messageId":"2311","endLine":27,"endColumn":15},{"ruleId":"2308","severity":1,"message":"2309","line":49,"column":48,"nodeType":"2310","messageId":"2311","endLine":49,"endColumn":51},{"ruleId":"2308","severity":1,"message":"2309","line":53,"column":50,"nodeType":"2310","messageId":"2311","endLine":53,"endColumn":53},{"ruleId":"2308","severity":1,"message":"2309","line":58,"column":14,"nodeType":"2310","messageId":"2311","endLine":58,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2309","line":64,"column":14,"nodeType":"2310","messageId":"2311","endLine":64,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2309","line":69,"column":58,"nodeType":"2310","messageId":"2311","endLine":69,"endColumn":61},{"ruleId":"2308","severity":1,"message":"2309","line":102,"column":8,"nodeType":"2310","messageId":"2311","endLine":102,"endColumn":11},{"ruleId":"2308","severity":1,"message":"2309","line":125,"column":36,"nodeType":"2310","messageId":"2311","endLine":125,"endColumn":39},{"ruleId":"2308","severity":1,"message":"2309","line":128,"column":35,"nodeType":"2310","messageId":"2311","endLine":128,"endColumn":38},{"ruleId":"2312","severity":1,"message":"2369","line":15,"column":24,"nodeType":"2314","endLine":15,"endColumn":33},{"ruleId":"2312","severity":1,"message":"2370","line":25,"column":10,"nodeType":"2314","endLine":25,"endColumn":38},{"ruleId":"2308","severity":1,"message":"2309","line":30,"column":8,"nodeType":"2310","messageId":"2311","endLine":30,"endColumn":11},{"ruleId":null,"fatal":true,"severity":2,"message":"2371"},{"ruleId":"2312","severity":1,"message":"2372","line":22,"column":3,"nodeType":"2314","endLine":22,"endColumn":18},{"ruleId":"2308","severity":1,"message":"2309","line":29,"column":28,"nodeType":"2310","messageId":"2311","endLine":29,"endColumn":31},{"ruleId":"2308","severity":1,"message":"2309","line":30,"column":29,"nodeType":"2310","messageId":"2311","endLine":30,"endColumn":32},{"ruleId":"2308","severity":1,"message":"2309","line":35,"column":40,"nodeType":"2310","messageId":"2311","endLine":35,"endColumn":43},{"ruleId":"2312","severity":1,"message":"2373","line":12,"column":10,"nodeType":"2314","endLine":12,"endColumn":29},{"ruleId":"2312","severity":1,"message":"2374","line":14,"column":7,"nodeType":"2314","endLine":14,"endColumn":17},{"ruleId":"2312","severity":1,"message":"2375","line":19,"column":7,"nodeType":"2314","endLine":19,"endColumn":21},{"ruleId":"2312","severity":1,"message":"2376","line":24,"column":7,"nodeType":"2314","endLine":24,"endColumn":21},{"ruleId":"2312","severity":1,"message":"2377","line":6,"column":10,"nodeType":"2314","endLine":6,"endColumn":26},{"ruleId":"2315","severity":1,"message":"2316","line":26,"column":18,"nodeType":"2317","messageId":"2318","endLine":26,"endColumn":24},{"ruleId":"2312","severity":1,"message":"2378","line":3,"column":3,"nodeType":"2314","endLine":3,"endColumn":68},{"ruleId":"2312","severity":1,"message":"2379","line":12,"column":3,"nodeType":"2314","endLine":12,"endColumn":33},{"ruleId":"2312","severity":1,"message":"2380","line":1,"column":10,"nodeType":"2314","endLine":1,"endColumn":38},{"ruleId":"2312","severity":1,"message":"2381","line":2,"column":10,"nodeType":"2314","endLine":2,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2309","line":7,"column":66,"nodeType":"2310","messageId":"2311","endLine":7,"endColumn":69},{"ruleId":"2308","severity":1,"message":"2309","line":25,"column":57,"nodeType":"2310","messageId":"2311","endLine":25,"endColumn":60},{"ruleId":"2308","severity":1,"message":"2309","line":35,"column":10,"nodeType":"2310","messageId":"2311","endLine":35,"endColumn":13},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: docs/assets/js/main.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: docs/assets/js/search.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: module-build/index.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: module-build/module-build.js.\nThe file must be included in at least one of the projects provided.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-unused-vars","'any' is defined but never used.","Identifier","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'signInResult' is assigned a value but never used.","'CA_CONNECTION_STATUS' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","Unexpected empty method 'setOptionsSwarmConnection'.","'login' is assigned a value but never used.","'ISwarmMessgaeEncryptedCache' is defined but never used.","'path' is defined but never used.","Unexpected empty async method 'close'.","'nothing' is assigned a value but never used.","'prefix' is assigned a value but never used.","'IFileStorageService' is defined but never used.","'status' is assigned a value but never used.","'exportPasswordKey' is defined but never used.","'CentralAuthority' is defined but never used.","'ISwarmMessageBody' is defined but never used.","'TSwarmMessageUserIdentifierSerialized' is defined but never used.","'ISwarmMessageSubclassFieldsValidator' is defined but never used.","array-callback-return","Expected to return a value at the end of arrow function.","expectedAtEnd","'TSwarmMessageSignatureAlgorithm' is defined but never used.","'delay' is defined but never used.","Unexpected empty async method 'load'.","'FileStoreAddFile' is defined but never used.","'SensitiveDataStorage' is defined but never used.","'FILE_STORAGE_SERVICE_STATUS' is defined but never used.","'downloadFileByUrl' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FileStorageClassProviderIPFS' is defined but never used.","'FileStorageClassProviderHTTP' is defined but never used.","'dataSignExportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'exportKey' is defined but never used.","'encodeArrayBufferToDOMString' is defined but never used.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/utils/ipfs-utils/ipfs-utils-libp2p/index.js.\nThe file must be included in at least one of the projects provided.","'STARDUST_SERVER' is defined but never used.","'WEB_RTC_STAR_SERVER' is defined but never used.","'API_SERVER' is assigned a value but never used.","'GATEWAY_SERVER' is assigned a value but never used.","'BOOTSTRAP_NODE' is assigned a value but never used.","'getLibPeerToPeer' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used."]