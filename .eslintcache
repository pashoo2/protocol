[{"/home/paul/projects/decentrilized-protocol/src/App.tsx":"1","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"2","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"3","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"4","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"5","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"6","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"7","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"8","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"9","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"10","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"11","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"12","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"13","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"14","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"15","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"16","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"17","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"18","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"19","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"20","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"21","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"22","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"23","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"24","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"25","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"26","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"27","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"28","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"29","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"30","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"31","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"32","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"33","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"34","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"35","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"36","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"37","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"38","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"39","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"40","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"41","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"42","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"43","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"44","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"45","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts":"46","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"47","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"48","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"49","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"50","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"51","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"52","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"53","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"54","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"55","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"56","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"57","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"58","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"59","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"60","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"61","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"62","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"63","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"64","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"65","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"66","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"67","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"68","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"69","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"70","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"71","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"72","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts":"73","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"74","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"75","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts":"76","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"77","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"78","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"79","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"80","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"81","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"82","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"83","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"84","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"85","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"86","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"87","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"88","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"89","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"90","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"91","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"92","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"93","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"94","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"95","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"96","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"97","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"98","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts":"99","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts":"100","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts":"101","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts":"102","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts":"103","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts":"104","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts":"105","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts":"106","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts":"107","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts":"108","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"109","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"110","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"111","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"112","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"113","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"114","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"115","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"116","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"117","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"118","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"119","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"120","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"121","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"122","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"123","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"124","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"125","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"126","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"127","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"128","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"129","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"130","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts":"131","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"132","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"133","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"134","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"135","/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts":"136","/home/paul/projects/decentrilized-protocol/src/index.tsx":"137","/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts":"138","/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts":"139","/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts":"140","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts":"141","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"142","/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts":"143","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts":"144","/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts":"145","/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts":"146","/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts":"147","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts":"148","/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts":"149","/home/paul/projects/decentrilized-protocol/src/types/main.types.ts":"150","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts":"151","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts":"152","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts":"153","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts":"154","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts":"155","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts":"156","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts":"157","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts":"158","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"159","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"160","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"161","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts":"162","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"163","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"164","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts":"165","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"166","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts":"167","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"168","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"169","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"170","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"171","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"172","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"173","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts":"174","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"175","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"176","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts":"177","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts":"178","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"179","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"180","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts":"181","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"182","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"183","/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts":"184","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"185","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"186","/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts":"187","/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"188","/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts":"189","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts":"190","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts":"191","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts":"192","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts":"193","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts":"194","/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts":"195","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts":"196","/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts":"197","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"198","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts":"199","/home/paul/projects/decentrilized-protocol/src/App.test.tsx":"200","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts":"201","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts":"202","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts":"203","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts":"204","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts":"205","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts":"206","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts":"207","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts":"208","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts":"209","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts":"210","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts":"211","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts":"212","/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts":"213","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts":"214","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts":"215","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js":"216","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts":"217","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts":"218","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts":"219","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts":"220","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts":"221","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts":"222","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts":"223","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"224","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"225","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"226","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"227","/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts":"228","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts":"229","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"230","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"231","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"232","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"233","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"234","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"235","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"236","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"237","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"238","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"239","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"240","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"241","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"242","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"243","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"244","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"245","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"246","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"247","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts":"248","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts":"249","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"250","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"251","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"252","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"253","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"254","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"255","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"256","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts":"257","/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"258","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts":"259","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"260","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"261","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"262","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"263","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"264","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"265","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"266","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"267","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"268","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"269","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"270","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"271","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"272","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"273","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"274","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"275","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts":"276","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"277","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"278","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts":"279","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts":"280","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts":"281","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"282","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"283","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"284","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"285","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v1.test.ts":"286","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v2.test.ts":"287","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.anonymousely.ts":"288","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.utils.firebase.ts":"289","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.const.ts":"290","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.ts":"291","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test.ts":"292","/home/paul/projects/decentrilized-protocol/src/test/common-utils-date-time-synced.test.ts":"293","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils-url.test.ts":"294","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.const.ts":"295","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.ts":"296","/home/paul/projects/decentrilized-protocol/src/test/salt-generation-utils.test/salt-generation-utils.test.ts":"297","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test.ts":"298","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"299","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"300","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"301","/home/paul/projects/decentrilized-protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"302","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.const.ts":"303","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.ts":"304","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.types.ts":"305","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"306","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"307","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"308","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"309","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"310","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.const.ts":"311","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.ts":"312","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.types.ts":"313","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"314","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.types.ts":"315","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"316","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"317","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts":"318","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"319"},{"size":5658,"mtime":1579371532267,"results":"320","hashOfConfig":"321"},{"size":578,"mtime":1579371532267,"results":"322","hashOfConfig":"321"},{"size":235,"mtime":1579371532267,"results":"323","hashOfConfig":"321"},{"size":1329,"mtime":1579371532267,"results":"324","hashOfConfig":"321"},{"size":2819,"mtime":1579371532267,"results":"325","hashOfConfig":"321"},{"size":1636,"mtime":1579371532267,"results":"326","hashOfConfig":"321"},{"size":3466,"mtime":1579371532267,"results":"327","hashOfConfig":"321"},{"size":4421,"mtime":1579371532267,"results":"328","hashOfConfig":"321"},{"size":1311,"mtime":1579371532271,"results":"329","hashOfConfig":"321"},{"size":7950,"mtime":1579371532271,"results":"330","hashOfConfig":"321"},{"size":1874,"mtime":1579371532271,"results":"331","hashOfConfig":"321"},{"size":2547,"mtime":1579371532271,"results":"332","hashOfConfig":"321"},{"size":728,"mtime":1579371532271,"results":"333","hashOfConfig":"321"},{"size":1648,"mtime":1579371532271,"results":"334","hashOfConfig":"321"},{"size":191,"mtime":1579371532271,"results":"335","hashOfConfig":"321"},{"size":2582,"mtime":1579371532271,"results":"336","hashOfConfig":"321"},{"size":978,"mtime":1579371532271,"results":"337","hashOfConfig":"321"},{"size":58,"mtime":1579371532271,"results":"338","hashOfConfig":"321"},{"size":2147,"mtime":1579371532271,"results":"339","hashOfConfig":"321"},{"size":216,"mtime":1579371532271,"results":"340","hashOfConfig":"321"},{"size":2025,"mtime":1579371532271,"results":"341","hashOfConfig":"321"},{"size":66,"mtime":1579371532271,"results":"342","hashOfConfig":"321"},{"size":2725,"mtime":1579371532271,"results":"343","hashOfConfig":"321"},{"size":900,"mtime":1579371532271,"results":"344","hashOfConfig":"321"},{"size":751,"mtime":1579371532271,"results":"345","hashOfConfig":"321"},{"size":187,"mtime":1579371532271,"results":"346","hashOfConfig":"321"},{"size":1579,"mtime":1579371532271,"results":"347","hashOfConfig":"321"},{"size":738,"mtime":1579371532275,"results":"348","hashOfConfig":"321"},{"size":224,"mtime":1579371532275,"results":"349","hashOfConfig":"321"},{"size":379,"mtime":1579371532275,"results":"350","hashOfConfig":"321"},{"size":2670,"mtime":1579371532275,"results":"351","hashOfConfig":"321"},{"size":781,"mtime":1579371532275,"results":"352","hashOfConfig":"321"},{"size":1934,"mtime":1579371532275,"results":"353","hashOfConfig":"321"},{"size":671,"mtime":1579371532275,"results":"354","hashOfConfig":"321"},{"size":215,"mtime":1579371532275,"results":"355","hashOfConfig":"321"},{"size":340,"mtime":1579371532275,"results":"356","hashOfConfig":"321"},{"size":3790,"mtime":1579371532275,"results":"357","hashOfConfig":"321"},{"size":1720,"mtime":1579371532275,"results":"358","hashOfConfig":"321"},{"size":676,"mtime":1579371532275,"results":"359","hashOfConfig":"321"},{"size":224,"mtime":1579371532275,"results":"360","hashOfConfig":"321"},{"size":76,"mtime":1579371532275,"results":"361","hashOfConfig":"321"},{"size":3995,"mtime":1579371532275,"results":"362","hashOfConfig":"321"},{"size":1035,"mtime":1579371532279,"results":"363","hashOfConfig":"321"},{"size":6273,"mtime":1579371532279,"results":"364","hashOfConfig":"321"},{"size":2890,"mtime":1579371532279,"results":"365","hashOfConfig":"321"},{"size":514,"mtime":1579371532279,"results":"366","hashOfConfig":"321"},{"size":311,"mtime":1579371532279,"results":"367","hashOfConfig":"321"},{"size":14225,"mtime":1579371532279,"results":"368","hashOfConfig":"321"},{"size":1182,"mtime":1579371532279,"results":"369","hashOfConfig":"321"},{"size":145,"mtime":1579371532279,"results":"370","hashOfConfig":"321"},{"size":4334,"mtime":1579371532279,"results":"371","hashOfConfig":"321"},{"size":110,"mtime":1579371532279,"results":"372","hashOfConfig":"321"},{"size":77,"mtime":1579371532279,"results":"373","hashOfConfig":"321"},{"size":75,"mtime":1579371532283,"results":"374","hashOfConfig":"321"},{"size":717,"mtime":1579371532283,"results":"375","hashOfConfig":"321"},{"size":306,"mtime":1579371532283,"results":"376","hashOfConfig":"321"},{"size":385,"mtime":1579371532283,"results":"377","hashOfConfig":"321"},{"size":130,"mtime":1579371532283,"results":"378","hashOfConfig":"321"},{"size":4321,"mtime":1579371532283,"results":"379","hashOfConfig":"321"},{"size":3891,"mtime":1579371532287,"results":"380","hashOfConfig":"321"},{"size":3547,"mtime":1579371532287,"results":"381","hashOfConfig":"321"},{"size":7618,"mtime":1579371532287,"results":"382","hashOfConfig":"321"},{"size":4867,"mtime":1579371532287,"results":"383","hashOfConfig":"321"},{"size":453,"mtime":1579371532287,"results":"384","hashOfConfig":"321"},{"size":310,"mtime":1579371532287,"results":"385","hashOfConfig":"321"},{"size":13512,"mtime":1579371532287,"results":"386","hashOfConfig":"321"},{"size":3800,"mtime":1579371532287,"results":"387","hashOfConfig":"321"},{"size":665,"mtime":1579371532287,"results":"388","hashOfConfig":"321"},{"size":4181,"mtime":1579371532287,"results":"389","hashOfConfig":"321"},{"size":1589,"mtime":1579371532287,"results":"390","hashOfConfig":"321"},{"size":504,"mtime":1579371532287,"results":"391","hashOfConfig":"321"},{"size":1490,"mtime":1579371532291,"results":"392","hashOfConfig":"321"},{"size":32718,"mtime":1579371532291,"results":"393","hashOfConfig":"321"},{"size":1469,"mtime":1579371532291,"results":"394","hashOfConfig":"321"},{"size":290,"mtime":1579371532291,"results":"395","hashOfConfig":"321"},{"size":28938,"mtime":1579371532291,"results":"396","hashOfConfig":"321"},{"size":1061,"mtime":1579371532291,"results":"397","hashOfConfig":"321"},{"size":1467,"mtime":1579371532295,"results":"398","hashOfConfig":"321"},{"size":1403,"mtime":1579371532295,"results":"399","hashOfConfig":"321"},{"size":4370,"mtime":1579371532295,"results":"400","hashOfConfig":"321"},{"size":8907,"mtime":1579371532295,"results":"401","hashOfConfig":"321"},{"size":1851,"mtime":1579371532295,"results":"402","hashOfConfig":"321"},{"size":10977,"mtime":1579371532295,"results":"403","hashOfConfig":"321"},{"size":114,"mtime":1579371532295,"results":"404","hashOfConfig":"321"},{"size":35,"mtime":1579371532295,"results":"405","hashOfConfig":"321"},{"size":51,"mtime":1579371532295,"results":"406","hashOfConfig":"321"},{"size":48,"mtime":1579371532295,"results":"407","hashOfConfig":"321"},{"size":35,"mtime":1579371532295,"results":"408","hashOfConfig":"321"},{"size":33,"mtime":1579371532295,"results":"409","hashOfConfig":"321"},{"size":31,"mtime":1579371532295,"results":"410","hashOfConfig":"321"},{"size":30,"mtime":1579371532295,"results":"411","hashOfConfig":"321"},{"size":37,"mtime":1579371532295,"results":"412","hashOfConfig":"321"},{"size":40,"mtime":1579371532295,"results":"413","hashOfConfig":"321"},{"size":25,"mtime":1579371532295,"results":"414","hashOfConfig":"321"},{"size":28,"mtime":1579371532295,"results":"415","hashOfConfig":"321"},{"size":29,"mtime":1579371532295,"results":"416","hashOfConfig":"321"},{"size":5821,"mtime":1579371532299,"results":"417","hashOfConfig":"321"},{"size":2201,"mtime":1579371532299,"results":"418","hashOfConfig":"321"},{"size":76,"mtime":1579371532299,"results":"419","hashOfConfig":"321"},{"size":780,"mtime":1579371532299,"results":"420","hashOfConfig":"321"},{"size":1208,"mtime":1579371532299,"results":"421","hashOfConfig":"321"},{"size":465,"mtime":1579371532303,"results":"422","hashOfConfig":"321"},{"size":46,"mtime":1579371532303,"results":"423","hashOfConfig":"321"},{"size":4093,"mtime":1579371532303,"results":"424","hashOfConfig":"321"},{"size":34,"mtime":1579371532303,"results":"425","hashOfConfig":"321"},{"size":29,"mtime":1579371532303,"results":"426","hashOfConfig":"321"},{"size":894,"mtime":1579371532303,"results":"427","hashOfConfig":"321"},{"size":20,"mtime":1579371532307,"results":"428","hashOfConfig":"321"},{"size":20,"mtime":1579371532307,"results":"429","hashOfConfig":"321"},{"size":270,"mtime":1579371532307,"results":"430","hashOfConfig":"321"},{"size":7019,"mtime":1579371532307,"results":"431","hashOfConfig":"321"},{"size":2052,"mtime":1579371532307,"results":"432","hashOfConfig":"321"},{"size":1153,"mtime":1579371532307,"results":"433","hashOfConfig":"321"},{"size":15830,"mtime":1579371532307,"results":"434","hashOfConfig":"321"},{"size":2293,"mtime":1579371532307,"results":"435","hashOfConfig":"321"},{"size":126,"mtime":1579371532307,"results":"436","hashOfConfig":"321"},{"size":2744,"mtime":1579371532307,"results":"437","hashOfConfig":"321"},{"size":157,"mtime":1579371532307,"results":"438","hashOfConfig":"321"},{"size":677,"mtime":1579371532307,"results":"439","hashOfConfig":"321"},{"size":1607,"mtime":1579371532307,"results":"440","hashOfConfig":"321"},{"size":763,"mtime":1579371532307,"results":"441","hashOfConfig":"321"},{"size":2693,"mtime":1579371532307,"results":"442","hashOfConfig":"321"},{"size":158,"mtime":1579371532307,"results":"443","hashOfConfig":"321"},{"size":542,"mtime":1579371532307,"results":"444","hashOfConfig":"321"},{"size":8597,"mtime":1579371532307,"results":"445","hashOfConfig":"321"},{"size":286,"mtime":1579371532307,"results":"446","hashOfConfig":"321"},{"size":2536,"mtime":1579371532307,"results":"447","hashOfConfig":"321"},{"size":36344,"mtime":1579371532311,"results":"448","hashOfConfig":"321"},{"size":1768,"mtime":1579371532311,"results":"449","hashOfConfig":"321"},{"size":54,"mtime":1579371532311,"results":"450","hashOfConfig":"321"},{"size":228,"mtime":1579371532311,"results":"451","hashOfConfig":"321"},{"size":1713,"mtime":1579371532311,"results":"452","hashOfConfig":"321"},{"size":480,"mtime":1579371532311,"results":"453","hashOfConfig":"321"},{"size":56,"mtime":1579371532311,"results":"454","hashOfConfig":"321"},{"size":1262,"mtime":1579371532311,"results":"455","hashOfConfig":"321"},{"size":592,"mtime":1579371532311,"results":"456","hashOfConfig":"321"},{"size":168,"mtime":1579371532311,"results":"457","hashOfConfig":"321"},{"size":40,"mtime":1579371532311,"results":"458","hashOfConfig":"321"},{"size":2348,"mtime":1579371532319,"results":"459","hashOfConfig":"321"},{"size":3237,"mtime":1579371532319,"results":"460","hashOfConfig":"321"},{"size":2982,"mtime":1579371532319,"results":"461","hashOfConfig":"321"},{"size":343,"mtime":1579371532319,"results":"462","hashOfConfig":"321"},{"size":1529,"mtime":1579371532319,"results":"463","hashOfConfig":"321"},{"size":1525,"mtime":1579371532323,"results":"464","hashOfConfig":"321"},{"size":534,"mtime":1579371532323,"results":"465","hashOfConfig":"321"},{"size":215,"mtime":1579371532323,"results":"466","hashOfConfig":"321"},{"size":646,"mtime":1579371532323,"results":"467","hashOfConfig":"321"},{"size":23,"mtime":1579371532323,"results":"468","hashOfConfig":"321"},{"size":11028,"mtime":1579371532323,"results":"469","hashOfConfig":"321"},{"size":393,"mtime":1579371532323,"results":"470","hashOfConfig":"321"},{"size":2965,"mtime":1579371532323,"results":"471","hashOfConfig":"321"},{"size":261,"mtime":1579371532323,"results":"472","hashOfConfig":"321"},{"size":937,"mtime":1579371532327,"results":"473","hashOfConfig":"321"},{"size":338,"mtime":1579371532327,"results":"474","hashOfConfig":"321"},{"size":2973,"mtime":1579371532327,"results":"475","hashOfConfig":"321"},{"size":215,"mtime":1579371532327,"results":"476","hashOfConfig":"321"},{"size":314,"mtime":1579371532327,"results":"477","hashOfConfig":"321"},{"size":38,"mtime":1579371532327,"results":"478","hashOfConfig":"321"},{"size":66,"mtime":1579371532327,"results":"479","hashOfConfig":"321"},{"size":3866,"mtime":1579371532327,"results":"480","hashOfConfig":"321"},{"size":178,"mtime":1579371532327,"results":"481","hashOfConfig":"321"},{"size":89,"mtime":1579371532327,"results":"482","hashOfConfig":"321"},{"size":532,"mtime":1579371532327,"results":"483","hashOfConfig":"321"},{"size":63,"mtime":1579371532327,"results":"484","hashOfConfig":"321"},{"size":50,"mtime":1579371532327,"results":"485","hashOfConfig":"321"},{"size":1290,"mtime":1579371532327,"results":"486","hashOfConfig":"321"},{"size":136,"mtime":1579371532327,"results":"487","hashOfConfig":"321"},{"size":1614,"mtime":1579371532327,"results":"488","hashOfConfig":"321"},{"size":9208,"mtime":1579371532327,"results":"489","hashOfConfig":"321"},{"size":50,"mtime":1579371532327,"results":"490","hashOfConfig":"321"},{"size":1935,"mtime":1579371532327,"results":"491","hashOfConfig":"321"},{"size":2157,"mtime":1579371532327,"results":"492","hashOfConfig":"321"},{"size":986,"mtime":1579371532327,"results":"493","hashOfConfig":"321"},{"size":48,"mtime":1579371532327,"results":"494","hashOfConfig":"321"},{"size":281,"mtime":1579371532327,"results":"495","hashOfConfig":"321"},{"size":5319,"mtime":1579371532331,"results":"496","hashOfConfig":"321"},{"size":961,"mtime":1579371532331,"results":"497","hashOfConfig":"321"},{"size":1800,"mtime":1579371532331,"results":"498","hashOfConfig":"321"},{"size":2313,"mtime":1579371532331,"results":"499","hashOfConfig":"321"},{"size":4319,"mtime":1579371532331,"results":"500","hashOfConfig":"321"},{"size":141,"mtime":1579371532331,"results":"501","hashOfConfig":"321"},{"size":6608,"mtime":1579371532331,"results":"502","hashOfConfig":"321"},{"size":50,"mtime":1579371532331,"results":"503","hashOfConfig":"321"},{"size":547,"mtime":1579371532331,"results":"504","hashOfConfig":"321"},{"size":230,"mtime":1579371532331,"results":"505","hashOfConfig":"321"},{"size":1337,"mtime":1579371532331,"results":"506","hashOfConfig":"321"},{"size":75,"mtime":1579371532331,"results":"507","hashOfConfig":"321"},{"size":560,"mtime":1579371532331,"results":"508","hashOfConfig":"321"},{"size":718,"mtime":1579371532331,"results":"509","hashOfConfig":"321"},{"size":3088,"mtime":1579371532331,"results":"510","hashOfConfig":"321"},{"size":5791,"mtime":1579371532331,"results":"511","hashOfConfig":"321"},{"size":2493,"mtime":1579371532331,"results":"512","hashOfConfig":"321"},{"size":2097,"mtime":1579371532331,"results":"513","hashOfConfig":"321"},{"size":473,"mtime":1579371532331,"results":"514","hashOfConfig":"321"},{"size":575,"mtime":1579371532331,"results":"515","hashOfConfig":"321"},{"size":462,"mtime":1579371532331,"results":"516","hashOfConfig":"321"},{"size":3990,"mtime":1579371532331,"results":"517","hashOfConfig":"321"},{"size":1042,"mtime":1579371532335,"results":"518","hashOfConfig":"321"},{"size":603,"mtime":1579371532335,"results":"519","hashOfConfig":"321"},{"size":248,"mtime":1574620670429,"results":"520","hashOfConfig":"521"},{"size":10837,"mtime":1578253700121,"results":"522","hashOfConfig":"521"},{"size":1117,"mtime":1576086673744,"results":"523","hashOfConfig":"521"},{"size":9511,"mtime":1578253700121,"results":"524","hashOfConfig":"521"},{"size":5207,"mtime":1578253700121,"results":"525","hashOfConfig":"521"},{"size":11166,"mtime":1578253700121,"results":"526","hashOfConfig":"521"},{"size":2098,"mtime":1574620670465,"results":"527","hashOfConfig":"521"},{"size":10461,"mtime":1578306232457,"results":"528","hashOfConfig":"521"},{"size":6061,"mtime":1578215948373,"results":"529","hashOfConfig":"521"},{"size":428,"mtime":1574620670469,"results":"530","hashOfConfig":"521"},{"size":198,"mtime":1575729809255,"results":"531","hashOfConfig":"521"},{"size":3057,"mtime":1574620670469,"results":"532","hashOfConfig":"521"},{"size":55,"mtime":1574620670469,"results":"533","hashOfConfig":"521"},{"size":2409,"mtime":1574797996143,"results":"534","hashOfConfig":"521"},{"size":1789,"mtime":1574797996143,"results":"535","hashOfConfig":"521"},{"size":3452,"mtime":1574797996143,"results":"536","hashOfConfig":"521"},{"size":1228,"mtime":1574620863009,"results":"537","hashOfConfig":"521"},{"size":4388,"mtime":1578250137875,"results":"538","hashOfConfig":"521"},{"size":2100,"mtime":1574620670469,"results":"539","hashOfConfig":"521"},{"size":1560,"mtime":1578250137875,"results":"540","hashOfConfig":"521"},{"size":4625,"mtime":1578253700121,"results":"541","hashOfConfig":"521"},{"size":31394,"mtime":1578253700121,"results":"542","hashOfConfig":"521"},{"size":1642,"mtime":1574620670473,"results":"543","hashOfConfig":"521"},{"size":134,"mtime":1574797996147,"results":"544","hashOfConfig":"521"},{"size":839,"mtime":1579371532287,"results":"545","hashOfConfig":"321"},{"size":15598,"mtime":1579371532291,"results":"546","hashOfConfig":"321"},{"size":3120,"mtime":1579371532291,"results":"547","hashOfConfig":"321"},{"size":514,"mtime":1579371532291,"results":"548","hashOfConfig":"321"},{"size":78,"mtime":1579371532311,"results":"549","hashOfConfig":"321"},{"size":72,"mtime":1579371532311,"results":"550","hashOfConfig":"321"},{"size":434,"mtime":1579371532311,"results":"551","hashOfConfig":"321"},{"size":2419,"mtime":1579371532327,"results":"552","hashOfConfig":"321"},{"size":594,"mtime":1579371532299,"results":"553","hashOfConfig":"321"},{"size":54,"mtime":1579371532299,"results":"554","hashOfConfig":"321"},{"size":529,"mtime":1579371532303,"results":"555","hashOfConfig":"321"},{"size":53,"mtime":1579371532303,"results":"556","hashOfConfig":"321"},{"size":699,"mtime":1579371532303,"results":"557","hashOfConfig":"321"},{"size":2280,"mtime":1579371532303,"results":"558","hashOfConfig":"321"},{"size":249,"mtime":1579371532303,"results":"559","hashOfConfig":"321"},{"size":803,"mtime":1579371532303,"results":"560","hashOfConfig":"321"},{"size":1893,"mtime":1579371532303,"results":"561","hashOfConfig":"321"},{"size":214,"mtime":1579371532303,"results":"562","hashOfConfig":"321"},{"size":738,"mtime":1579371532303,"results":"563","hashOfConfig":"321"},{"size":49,"mtime":1579371532303,"results":"564","hashOfConfig":"321"},{"size":1122,"mtime":1579371532303,"results":"565","hashOfConfig":"321"},{"size":60,"mtime":1579371532303,"results":"566","hashOfConfig":"321"},{"size":9632,"mtime":1579371532303,"results":"567","hashOfConfig":"321"},{"size":260,"mtime":1579371532303,"results":"568","hashOfConfig":"321"},{"size":266,"mtime":1579371532327,"results":"569","hashOfConfig":"321"},{"size":453,"mtime":1579371532327,"results":"570","hashOfConfig":"321"},{"size":33,"mtime":1579371532267,"results":"571","hashOfConfig":"321"},{"size":602,"mtime":1579371532267,"results":"572","hashOfConfig":"321"},{"size":43,"mtime":1579371532267,"results":"573","hashOfConfig":"321"},{"size":163,"mtime":1579371532267,"results":"574","hashOfConfig":"321"},{"size":1081,"mtime":1579371532275,"results":"575","hashOfConfig":"321"},{"size":1962,"mtime":1579371532275,"results":"576","hashOfConfig":"321"},{"size":1742,"mtime":1579371532275,"results":"577","hashOfConfig":"321"},{"size":27,"mtime":1579371532311,"results":"578","hashOfConfig":"321"},{"size":1749,"mtime":1579371532311,"results":"579","hashOfConfig":"321"},{"size":3785,"mtime":1579371532315,"results":"580","hashOfConfig":"321"},{"size":360,"mtime":1579371532275,"results":"581","hashOfConfig":"321"},{"size":1786,"mtime":1579371532275,"results":"582","hashOfConfig":"321"},{"size":1588,"mtime":1579371532283,"results":"583","hashOfConfig":"321"},{"size":15111,"mtime":1579371532283,"results":"584","hashOfConfig":"321"},{"size":2944,"mtime":1579371532283,"results":"585","hashOfConfig":"321"},{"size":30591,"mtime":1579371532279,"results":"586","hashOfConfig":"321"},{"size":19264,"mtime":1579371532279,"results":"587","hashOfConfig":"321"},{"size":651,"mtime":1579371532279,"results":"588","hashOfConfig":"321"},{"size":746,"mtime":1579371532279,"results":"589","hashOfConfig":"321"},{"size":21477,"mtime":1579371532283,"results":"590","hashOfConfig":"321"},{"size":3007,"mtime":1579371532283,"results":"591","hashOfConfig":"321"},{"size":868,"mtime":1579371532283,"results":"592","hashOfConfig":"321"},{"size":181,"mtime":1579371532283,"results":"593","hashOfConfig":"321"},{"size":192,"mtime":1579371532283,"results":"594","hashOfConfig":"321"},{"size":1290,"mtime":1579371532283,"results":"595","hashOfConfig":"321"},{"size":575,"mtime":1579371532283,"results":"596","hashOfConfig":"321"},{"size":471,"mtime":1579371532327,"results":"597","hashOfConfig":"321"},{"size":758,"mtime":1579371532283,"results":"598","hashOfConfig":"321"},{"size":333,"mtime":1579371532283,"results":"599","hashOfConfig":"321"},{"size":186,"mtime":1579371532331,"results":"600","hashOfConfig":"321"},{"size":3133,"mtime":1579371532331,"results":"601","hashOfConfig":"321"},{"size":132,"mtime":1579371532331,"results":"602","hashOfConfig":"321"},{"size":298,"mtime":1579371532291,"results":"603","hashOfConfig":"321"},{"size":1497,"mtime":1579371532291,"results":"604","hashOfConfig":"321"},{"size":1440,"mtime":1579371532291,"results":"605","hashOfConfig":"321"},{"size":563,"mtime":1579371532291,"results":"606","hashOfConfig":"321"},{"size":9276,"mtime":1578253700121,"results":"607","hashOfConfig":"521"},{"size":7510,"mtime":1578253700121,"results":"608","hashOfConfig":"521"},{"size":3563,"mtime":1578253700121,"results":"609","hashOfConfig":"521"},{"size":3958,"mtime":1578253700121,"results":"610","hashOfConfig":"521"},{"size":2595,"mtime":1576607687457,"results":"611","hashOfConfig":"521"},{"size":11871,"mtime":1578253700121,"results":"612","hashOfConfig":"521"},{"size":8978,"mtime":1576607687457,"results":"613","hashOfConfig":"521"},{"size":4046,"mtime":1575197547567,"results":"614","hashOfConfig":"521"},{"size":1222,"mtime":1576607687457,"results":"615","hashOfConfig":"521"},{"size":548,"mtime":1575054389462,"results":"616","hashOfConfig":"521"},{"size":2895,"mtime":1575054389462,"results":"617","hashOfConfig":"521"},{"size":7011,"mtime":1578215948373,"results":"618","hashOfConfig":"521"},{"size":15553,"mtime":1575231081809,"results":"619","hashOfConfig":"521"},{"size":17465,"mtime":1579371532283,"results":"620","hashOfConfig":"321"},{"size":981,"mtime":1579371532283,"results":"621","hashOfConfig":"321"},{"size":783,"mtime":1579371532283,"results":"622","hashOfConfig":"321"},{"size":206,"mtime":1579371532311,"results":"623","hashOfConfig":"321"},{"size":46,"mtime":1579371532287,"results":"624","hashOfConfig":"321"},{"size":5218,"mtime":1579371532287,"results":"625","hashOfConfig":"321"},{"size":1151,"mtime":1579371532287,"results":"626","hashOfConfig":"321"},{"size":80,"mtime":1579371532291,"results":"627","hashOfConfig":"321"},{"size":5189,"mtime":1579371532291,"results":"628","hashOfConfig":"321"},{"size":216,"mtime":1579371532291,"results":"629","hashOfConfig":"321"},{"size":5946,"mtime":1579371532291,"results":"630","hashOfConfig":"321"},{"size":1569,"mtime":1579371532291,"results":"631","hashOfConfig":"321"},{"size":1153,"mtime":1579371532295,"results":"632","hashOfConfig":"321"},{"size":643,"mtime":1579371532295,"results":"633","hashOfConfig":"321"},{"size":1322,"mtime":1579371532295,"results":"634","hashOfConfig":"321"},{"size":1417,"mtime":1579371532295,"results":"635","hashOfConfig":"321"},{"size":49,"mtime":1579371577107,"results":"636","hashOfConfig":"321"},{"size":15847,"mtime":1579371532287,"results":"637","hashOfConfig":"321"},{"size":1944,"mtime":1579371532287,"results":"638","hashOfConfig":"321"},{"size":500,"mtime":1579371532315,"results":"639","hashOfConfig":"321"},{"size":8796,"mtime":1579371532315,"results":"640","hashOfConfig":"321"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1oyszo4",{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"655","messages":"656","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"659","messages":"660","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"711","messages":"712","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"721","messages":"722","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"723","messages":"724","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"735","messages":"736","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"737","messages":"738","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"741","messages":"742","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"759","messages":"760","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"761","messages":"762","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"787","messages":"788","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"797","messages":"798","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"803","messages":"804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"805","messages":"806","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"841","messages":"842","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"875","messages":"876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"877","messages":"878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"895","messages":"896","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"919","messages":"920","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"925","messages":"926","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"935","messages":"936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"937","messages":"938","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"939","messages":"940","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"941","messages":"942","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"943","messages":"944","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"945","messages":"946","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"947","messages":"948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"949","messages":"950","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"951","messages":"952","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"953","messages":"954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"961","messages":"962","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"971","messages":"972","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"973","messages":"974","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"975","messages":"976","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"977","messages":"978","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"979","messages":"980","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"981","messages":"982","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"983","messages":"984","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"985","messages":"986","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"987","messages":"988","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"989","messages":"990","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"991","messages":"992","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"993","messages":"994","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"995","messages":"996","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"997","messages":"998","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1001","messages":"1002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1029","messages":"1030","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1035","messages":"1036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jkhww0",{"filePath":"1041","messages":"1042","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043"},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1046"},{"filePath":"1047","messages":"1048","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1049"},{"filePath":"1050","messages":"1051","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1052"},{"filePath":"1053","messages":"1054","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1055"},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1058","messages":"1059","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1060"},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1074","messages":"1075","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076"},{"filePath":"1077","messages":"1078","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1079"},{"filePath":"1080","messages":"1081","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1082"},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1089","messages":"1090","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1091"},{"filePath":"1092","messages":"1093","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1094"},{"filePath":"1095","messages":"1096","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1099","messages":"1100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1101","messages":"1102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1103","messages":"1104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1105","messages":"1106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1107","messages":"1108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1109","messages":"1110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1111","messages":"1112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1113","messages":"1114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1115","messages":"1116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1123","messages":"1124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1137","messages":"1138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1139","messages":"1140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1143","messages":"1144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1145","messages":"1146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1149","messages":"1150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1151","messages":"1152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1155","messages":"1156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1159","messages":"1160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1161","messages":"1162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1163","messages":"1164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1165","messages":"1166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1167","messages":"1168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1169","messages":"1170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1171","messages":"1172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1173","messages":"1174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1175","messages":"1176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1177","messages":"1178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1191","messages":"1192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1193","messages":"1194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1201","messages":"1202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1203","messages":"1204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1205","messages":"1206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1207","messages":"1208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1209","messages":"1210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1211","messages":"1212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1213","messages":"1214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1215","messages":"1216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1221","messages":"1222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1223","messages":"1224","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1225"},{"filePath":"1226","messages":"1227","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1228"},{"filePath":"1229","messages":"1230","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1231"},{"filePath":"1232","messages":"1233","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1234"},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1237","messages":"1238","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1239"},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1242"},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1247"},{"filePath":"1248","messages":"1249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1250","messages":"1251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1252"},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1257"},{"filePath":"1258","messages":"1259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1260","messages":"1261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1262","messages":"1263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1264","messages":"1265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1266","messages":"1267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1268","messages":"1269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1270","messages":"1271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1274","messages":"1275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1280","messages":"1281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1282","messages":"1283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1284","messages":"1285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1286","messages":"1287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1290","messages":"1291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1292","messages":"1293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1294","messages":"1295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1296","messages":"1297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1298","messages":"1299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/decentrilized-protocol/src/App.tsx",["1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["1328","1329","1330"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["1331"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["1332"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["1333","1334","1335"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["1336","1337"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["1338"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["1339","1340"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["1341"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["1342"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["1343"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["1344","1345","1346"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["1347"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["1348","1349","1350","1351","1352"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["1353"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["1354","1355","1356","1357","1358","1359","1360"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["1361","1362","1363","1364"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["1365"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["1366","1367"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["1368","1369","1370","1371"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["1372"],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts",["1373","1374","1375"],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["1376"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["1377"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["1378"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["1379","1380","1381"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts",["1382","1383"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts",["1384"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["1385"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["1386","1387","1388","1389","1390"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["1391","1392","1393","1394"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["1395"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",["1396"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["1397","1398","1399"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/index.tsx",[],"/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts",["1400","1401","1402","1403","1404","1405","1406","1407","1408","1409"],"/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts",["1410"],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts",["1411","1412"],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/main.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts",["1413","1414","1415"],"/home/paul/projects/decentrilized-protocol/src/types/users.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts",["1416","1417"],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts",["1418","1419"],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["1420","1421","1422"],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["1423"],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["1424"],"/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["1425","1426","1427","1428","1429"],"/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["1430","1431","1432","1433","1434","1435"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["1436"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["1437"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts",["1438","1439"],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts",["1440","1441"],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts",["1442"],"/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts",["1443"],"/home/paul/projects/decentrilized-protocol/src/App.test.tsx",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts",["1444"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { signToString, verifyFromString } from 'utils/data-sign-utils';\nimport {\n  getPublicKeysFromCryptoKeyPairs,\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  encryptNative,\n  decryptNative,\n} from 'utils/encryption-utils/encryption-utils';\nimport { TCACryptoKeyPairs } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const runTestEncryptData = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | true> => {\n  const dataToEncode = 'data to encode';\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n  } = keyPairs;\n  const dataToEncodeTypeedArray = stringToTypedArray(dataToEncode);\n\n  if (dataToEncodeTypeedArray instanceof Error) {\n    console.error(dataToEncodeTypeedArray);\n    console.error('Failed to convert data to typed array');\n    return;\n  }\n\n  const encryptedData = await encryptNative(\n    encryptionKeyPair.publicKey,\n    dataToEncodeTypeedArray\n  );\n\n  if (encryptedData instanceof Error) {\n    console.error('Cant encrypt data with the key pair generated');\n    console.error(encryptedData);\n    return;\n  }\n\n  const decryptedData = await decryptNative(\n    encryptionKeyPair.privateKey,\n    encryptedData\n  );\n\n  if (decryptedData instanceof Error) {\n    console.error('Cant decrypt data encrypted with a generated key pairs');\n    console.error(decryptedData);\n    return;\n  }\n\n  const decryptedString = typedArrayToString(decryptedData);\n\n  if (decryptedString instanceof Error) {\n    console.error(decryptedString);\n    console.error(\n      'Failed to convert a string decrypted as array buffer to a DOMString'\n    );\n  }\n\n  if (decryptedString !== dataToEncode) {\n    console.error(\n      `Decrypted data is invalid. Expected: ${dataToEncode}, but ${decryptedString} was received`\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestDataSign = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | boolean> => {\n  const dataToSign = {\n    hello: 'test hello',\n  };\n  const { [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair } = keyPairs;\n  const signString = await signToString(signKeyPair, dataToSign);\n\n  if (signString instanceof Error) {\n    console.error('Failed to sign the string');\n    console.error(signString);\n    return;\n  }\n  if (typeof signString !== 'string') {\n    console.error('Failed to sign the data as a string');\n    return;\n  }\n\n  const verifyDataResult = await verifyFromString(\n    signKeyPair,\n    dataToSign,\n    signString\n  );\n\n  if (verifyDataResult instanceof Error) {\n    console.error('Failed to verify the data signed');\n    console.error(verifyDataResult);\n    return;\n  }\n  if (verifyDataResult !== true) {\n    console.error('The wrong result was given by the verifyFromString');\n    console.error(verifyDataResult);\n    return;\n  }\n\n  const wrongDataVerifyResult = await verifyFromString(\n    signKeyPair,\n    'Wrong data',\n    signString\n  );\n\n  if (wrongDataVerifyResult instanceof Error) {\n    console.error('Failed to verify a non original string data');\n    console.error(wrongDataVerifyResult);\n    return;\n  }\n  if (wrongDataVerifyResult !== false) {\n    console.error('The wrong result of non origin string verification');\n    return;\n  }\n  return true;\n};\n\nexport const runTestForKeyPairs = async (\n  keyPairs: any\n): Promise<undefined | boolean> => {\n  if (keyPairs instanceof Error) {\n    console.error('Cant generate a crypto key pair');\n    console.error(keyPairs);\n    return;\n  }\n\n  if ((await runTestEncryptData(keyPairs)) !== true) {\n    return;\n  }\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    return;\n  }\n\n  const exportedKeyPairs = await exportKeyPairsAsString(keyPairs);\n\n  if (exportedKeyPairs instanceof Error) {\n    console.error('failed to export the key pair');\n    console.error(exportedKeyPairs);\n    return;\n  }\n  if (typeof exportedKeyPairs !== 'string') {\n    console.error('exportedKeyPairs does not exported in a string format');\n    return;\n  }\n\n  const importedKeyPairs = await importKeyPairsFromString(exportedKeyPairs);\n\n  if (!checkIsCryptoKeyPairs(importedKeyPairs)) {\n    console.error('A wrong format of the imported key pairs');\n    return;\n  }\n  if (importedKeyPairs instanceof Error) {\n    console.error('Failed to import key pairs from string');\n    return;\n  }\n  console.log('run tests for the imported from the exported string key pairs');\n  if ((await runTestEncryptData(importedKeyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs fot data sign'\n  );\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs fot data sign'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        privateKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        privateKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** --data sign test */\n  console.log(\n    'run tests encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    console.error('Cant get public keys from crypto key pairs');\n    console.error(publicKeys);\n    return;\n  }\n\n  console.log(\n    'run tests public keys encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey: publicKeys[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME],\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests public keys for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: publicKeys[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME],\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  console.warn('Central authority keys tests are succeed');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts",["1445"],"import { generateCryptoCredentialsV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const CA_CONNECTION_FIREBASE_CONFIG = {\n  apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n  authDomain: 'protocol-f251b.firebaseapp.com',\n  databaseURL: 'https://protocol-f251b.firebaseio.com',\n  projectId: 'protocol-f251b',\n  storageBucket: '',\n  messagingSenderId: '275196342406',\n  appId: '1:275196342406:web:40b79d671c50af57',\n};\n\nexport const CA_CONNECTION_FIREBASE_CONFIG_WATCHA3 = {\n  apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n  authDomain: 'watcha3-191815.firebaseapp.com',\n  databaseURL: 'https://watcha3-191815.firebaseio.com',\n  projectId: 'watcha3-191815',\n  storageBucket: 'watcha3-191815.appspot.com',\n  messagingSenderId: '271822572791',\n  appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n};\n\nexport const CA_CONNECTION_FIREBASE_USER_CREDENTIALS = {\n  login: 'akulich.p@gmail.com',\n  password: '123456',\n};\n\nexport const CA_CONNECTION_FIREBASE_CREDENTIALS = CA_CONNECTION_FIREBASE_USER_CREDENTIALS;\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts",["1446"],"import { CAConnectionFirestoreUtilsCredentialsStrorage } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  compareCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CONFIG_WATCHA3,\n} from './central-authority-connection.test.firebase.const';\nimport { ICAUserUniqueIdentifierMetadata } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAConnectionSignUpCredentials } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\n\nconst runTestFirebaseCredentialsStorageVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc?: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>,\n  firebaseConnectionOptions: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('runTestFirebaseCredentialsStorage::start');\n  let credentialsForInit;\n  if (generateCryptoCredentialsWithUserIdentityFunc) {\n    credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc({\n      authorityProviderURI: firebaseConnectionOptions.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    });\n  }\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const firebaseConnection = await connectWithFirebase(\n    {\n      ...firebaseCredentials,\n      cryptoCredentials: credentialsForInit,\n    },\n    firebaseConnectionOptions\n  );\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const credetntialsStoreConnectionToFirebase = new CAConnectionFirestoreUtilsCredentialsStrorage(\n    firebaseConnection\n  );\n\n  if (credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await credetntialsStoreConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const credentialsForUser = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n  if (credentialsForUser instanceof Error) {\n    console.error(credentialsForUser);\n    console.error('Failed to get credentials for the current user');\n    return;\n  }\n  if (credentialsForUser) {\n    const credentialsFromLocalStorage = localStorage.getItem(\n      `______test___firebase_acc___${firebaseCredentials.login}`\n    );\n\n    if (typeof credentialsFromLocalStorage === 'string') {\n      const credentialsFromLocalStorageParsed = await importCryptoCredentialsFromAString(\n        credentialsFromLocalStorage\n      );\n\n      if (\n        credentialsFromLocalStorageParsed &&\n        !(credentialsFromLocalStorageParsed instanceof Error)\n      ) {\n        if (\n          (await compareCryptoCredentials(\n            credentialsFromLocalStorageParsed,\n            credentialsForUser\n          )) !== true\n        ) {\n          console.error('compareCryptoCredentials returs the invalid result');\n          return;\n        }\n      }\n    } else {\n      const credentialsSerialized = await exportCryptoCredentialsToString(\n        credentialsForUser\n      );\n\n      if (credentialsSerialized instanceof Error) {\n        console.error('Failed to serialize the credentials');\n        return;\n      }\n      localStorage.setItem(\n        `______test___firebase_acc___${firebaseCredentials.login}`,\n        credentialsSerialized\n      );\n    }\n  }\n\n  const credentials = await (\n    generateCryptoCredentialsWithUserIdentityFunc ||\n    generateCryptoCredentialsWithUserIdentityV2\n  )({\n    authorityProviderURI: firebaseConnectionOptions.databaseURL,\n    userUniqueIdentifier:\n      generateCryptoCredentialsWithUserIdentityFunc ===\n      generateCryptoCredentialsWithUserIdentityV2\n        ? firebaseCredentials.login\n        : !generateCryptoCredentialsWithUserIdentityFunc\n        ? '123412'\n        : undefined,\n  });\n\n  if (credentials instanceof Error) {\n    console.error('Failed to generate crypto credentials');\n    return;\n  }\n  if ((await compareCryptoCredentials(credentials, credentials)) !== true) {\n    console.error('compareCryptoCredentials returs the invalid result');\n    return;\n  }\n\n  const setCredentialsResult = await credetntialsStoreConnectionToFirebase.setUserCredentials(\n    credentials\n  );\n\n  if (setCredentialsResult instanceof Error) {\n    console.error(setCredentialsResult);\n    console.error('Failed to set credentials');\n    return;\n  }\n  if (\n    credentialsForUser &&\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user created and stored once must be immputable anyway'\n    );\n    return;\n  }\n\n  if (!credentialsForUser) {\n    const credentialsForUserAfterSetANewOne = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n    if (credentialsForUserAfterSetANewOne instanceof Error) {\n      console.error(credentialsForUser);\n      console.error('Failed to get credentials for the current user');\n      return;\n    }\n    if (!credentialsForUserAfterSetANewOne) {\n      console.error(\n        'Credentials for the current must exists cause it was set before'\n      );\n      return;\n    }\n    if (\n      (await compareCryptoCredentials(\n        credentialsForUserAfterSetANewOne,\n        credentialsForUserAfterSetANewOne\n      )) !== true\n    ) {\n      console.error(\n        'Credentials for the user created and stored once must be immputable anyway'\n      );\n      return;\n    }\n  }\n\n  const userId = getUserIdentityByCryptoCredentials(setCredentialsResult);\n\n  if (userId instanceof Error) {\n    console.error(userId);\n    console.error('Failed to get user id by crypto credentials');\n    return;\n  }\n\n  const getCredentialsResult = await credetntialsStoreConnectionToFirebase.getUserCredentials(\n    userId\n  );\n\n  if (!getCredentialsResult) {\n    console.error(\n      'There is no credentials stored before was found in the Firebsae database'\n    );\n    return;\n  }\n  if (getCredentialsResult instanceof Error) {\n    console.error('Failed to read credentials from the Firebase database');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      getCredentialsResult\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user got by the user id must be immputable the same as the credentials set by the user on sign up flow'\n    );\n    return;\n  }\n\n  const firebaseConnectionNext = await connectWithFirebase({\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  });\n\n  if (!(firebaseConnectionNext instanceof Error)) {\n    console.error(\n      'The next attemp to connect under the same account must be failed'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestFirebaseCredentialsStorage = async () => {\n  // if (\n  //   !(await runTestFirebaseCredentialsStorageVersion(\n  //     {\n  //       login: 'rehodip223@mailhub.pro',\n  //       password: '123456',\n  //     },\n  //     generateCryptoCredentialsWithUserIdentityV1\n  //   ))\n  // ) {\n  //   console.error('Failed test for user identity V1');\n  //   return;\n  // }\n  // if (\n  //   !(await runTestFirebaseCredentialsStorageVersion(\n  //     {\n  //       login: 'pefik89126@mailhub.pro',\n  //       password: '123456',\n  //     },\n  //     generateCryptoCredentialsWithUserIdentityV2\n  //   ))\n  // ) {\n  //   console.error('Failed test for user identity V2');\n  //   return;\n  // }\n  if (\n    !(await runTestFirebaseCredentialsStorageVersion(\n      {\n        login: 'yaxida4519@email1.pro',\n        password: '123456',\n      },\n      undefined,\n      CA_CONNECTION_FIREBASE_CONFIG_WATCHA3\n    ))\n  ) {\n    console.error('Failed test for user identity V2');\n    return;\n  }\n  console.warn('runTestFirebaseCredentialsStorage::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts",["1447"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport CAConnectionWithFirebaseUtilDatabase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst connectToFirebase = async (): Promise<CAConnectionWithFirebaseUtilDatabase | void> => {\n  // TODO - replace the credentials with the existing\n  const login = 'i2ga8r+7mc075w0nc9ns@sharklasers.com';\n  const password = '123456';\n  const firebaseConnection = await connectWithFirebase({\n    login,\n    password,\n  });\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    console.error(new Error('Failed to connect with firebase'));\n    return;\n  }\n\n  const databaseConnectionToFirebase = new CAConnectionWithFirebaseUtilDatabase();\n\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await databaseConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n  return databaseConnectionToFirebase;\n};\n\nexport const runTestFirebaseConnectionDatabase = async () => {\n  console.warn('runTestFirebaseConnectionDatabase::start');\n  const databaseConnectionToFirebase = await connectToFirebase();\n\n  if (!databaseConnectionToFirebase) {\n    return;\n  }\n\n  const randomUUID = generateUUID();\n  const testKey = `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${randomUUID}`;\n  const testData = {\n    testData: 'testData',\n  };\n\n  const setValueResult = await databaseConnectionToFirebase.setValue(\n    testKey,\n    testData\n  );\n\n  if (setValueResult instanceof Error) {\n    console.error(setValueResult);\n    return setValueResult;\n  }\n\n  const readValueResult = await databaseConnectionToFirebase.getValue(testKey);\n\n  if (readValueResult instanceof Error) {\n    console.error(readValueResult);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (!readValueResult || typeof readValueResult !== 'object') {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResult as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseConnectionDatabase::success');\n\n  const disconnectResult = await databaseConnectionToFirebase.disconnect();\n\n  if (disconnectResult instanceof Error) {\n    console.error(disconnectResult);\n    console.error('An error has occured on disconnect from the database');\n    return;\n  }\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'isConnected must be false after disconnected from the database'\n    );\n    return;\n  }\n\n  const databaseConnectionToFirebaseAfterDisconnection = await connectToFirebase();\n\n  if (!databaseConnectionToFirebaseAfterDisconnection) {\n    console.error(\n      'It must be alllowed to create a new instance of the connection after disconnected from the Firebase'\n    );\n    return;\n  }\n\n  const readValueResultAfterReconnect = await databaseConnectionToFirebaseAfterDisconnection.getValue(\n    testKey\n  );\n\n  if (readValueResultAfterReconnect instanceof Error) {\n    console.error(readValueResultAfterReconnect);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (\n    !readValueResultAfterReconnect ||\n    typeof readValueResultAfterReconnect !== 'object'\n  ) {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResultAfterReconnect as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n\n  const newInstanceDisconnectResult = await databaseConnectionToFirebaseAfterDisconnection.disconnect();\n\n  if (newInstanceDisconnectResult instanceof Error) {\n    console.error(newInstanceDisconnectResult);\n    return;\n  }\n\n  const newInstanceConnectResult = await databaseConnectionToFirebaseAfterDisconnection.connect();\n\n  if (!(newInstanceConnectResult instanceof Error)) {\n    console.error(\n      'It\\'s not allowed to reconnect to the Firebase by calling of the \"connect\" method'\n    );\n    return;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts",["1448"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  connectWithFirebase,\n  deleteTheUserFromCA,\n} from './central-authority-connection.utils.firebase';\nimport {\n  CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n  CA_CONNECTION_FIREBASE_CONFIG,\n} from './central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  ICAConnectionUserAuthorizedResult,\n  ICAConnectionSignUpCredentials,\n} from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  generateCryptoCredentialsWithUserIdentityV1,\n  generateCryptoCredentialsWithUserIdentityV2,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { ICAUserUniqueIdentifierMetadata } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\nconst runTestCAConnectionFirebaseChangeEmailForVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>\n) => {\n  const credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc(\n    {\n      authorityProviderURI: CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    }\n  );\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const credentials = {\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  // TODO - it's necessary to use an email\n  // which can be accessed\n  const userProfileWithEmailTest = {\n    name: `Test account ${Date.now()}`,\n    email: 'cogej95883@mail1web.org',\n  };\n  const updateProfileWithEmailResult = await (connectionFirebase as any).setProfileData(\n    userProfileWithEmailTest\n  );\n\n  if (updateProfileWithEmailResult instanceof Error) {\n    console.error('Failed to set the profile (with a email) data');\n    return;\n  }\n  if (userProfileWithEmailTest.name !== updateProfileWithEmailResult.name) {\n    console.error('Name was not updated in the profile');\n    return;\n  }\n  if (userProfileWithEmailTest.email !== updateProfileWithEmailResult.email) {\n    console.error('The email was not updated in the profile');\n    return;\n  }\n  if (connectionFirebase.isAuthorized) {\n    console.error(\n      'isAuthorized connection flag must be false on email value changed'\n    );\n    return;\n  }\n  return true;\n};\n\nconst runTestCAConnectionFirebaseForVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>\n) => {\n  console.warn('CA connection firebase test started');\n  const credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc(\n    {\n      authorityProviderURI: CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    }\n  );\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const credentials = {\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n  console.warn('CA connection firebase test succeed');\n\n  //check profile update result\n  const userProfileTestWOEmailAndPhoneNumber: Partial<ICentralAuthorityUserProfile> = {\n    name: 'Paul',\n    photoURL:\n      'https://cdn.dribbble.com/users/199982/screenshots/4044699/furkan-avatar-dribbble.png',\n  };\n  const updateProfileResult = await (connectionFirebase as any).setProfileData(\n    userProfileTestWOEmailAndPhoneNumber\n  );\n\n  if (updateProfileResult instanceof Error) {\n    console.error('Failed tp set the profile (without a email) data');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (\n    userProfileTestWOEmailAndPhoneNumber.photoURL !==\n    updateProfileResult.photoURL\n  ) {\n    console.error('The photo URL was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (userProfileTestWOEmailAndPhoneNumber.name !== updateProfileResult.name) {\n    console.error('Name was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n\n  const deleteTheUserResult = await deleteTheUserFromCA(\n    connectionFirebase,\n    credentials\n  );\n\n  if (deleteTheUserResult instanceof Error) {\n    console.error(deleteTheUserResult);\n    return new Error('Failed to delete the user from the Firebase authority');\n  }\n  return true;\n};\n\nexport const runTestCAConnectionFirebase = async () => {\n  // TODO - to run full test it's necessary to change\n  // the credentials to a new\n  const credentialsTest1 = {\n    login: 'xamali6554@mail-help.net',\n    password: '123456',\n  };\n  const resultTestVersion1 = await runTestCAConnectionFirebaseForVersion(\n    credentialsTest1,\n    generateCryptoCredentialsWithUserIdentityV1\n  );\n\n  if (resultTestVersion1 !== true) {\n    console.warn('CA connection firebase for the identity V1 test failed');\n    return;\n  }\n  console.warn('CA connection firebase for the identity V1 test success');\n  const credentialsTest1EmailChange = {\n    login: 'hogano8384@swift-mail.net',\n    password: '123456',\n  };\n  const resultTestVersion1EmailChange = await runTestCAConnectionFirebaseChangeEmailForVersion(\n    credentialsTest1EmailChange,\n    generateCryptoCredentialsWithUserIdentityV1\n  );\n\n  if (resultTestVersion1EmailChange !== true) {\n    console.warn(\n      'CA connection firebase for the identity V1 email change test failed'\n    );\n    return;\n  }\n  console.warn(\n    'CA connection firebase for the identity V1 email change test succeed'\n  );\n  const credentialsTest2 = {\n    login: 'sisarar105@mail-help.net',\n    password: '123456',\n  };\n  const resultTestVersion2 = await runTestCAConnectionFirebaseForVersion(\n    credentialsTest2,\n    generateCryptoCredentialsWithUserIdentityV2\n  );\n\n  if (resultTestVersion2 !== true) {\n    console.warn('CA connection firebase for the identity V2 test failed');\n    return;\n  }\n  const credentialsTest2EmailChange = {\n    login: 'lodajab497@max-mail.org',\n    password: '123456',\n  };\n  const resultTestVersion2EmailChange = await runTestCAConnectionFirebaseChangeEmailForVersion(\n    credentialsTest2EmailChange,\n    generateCryptoCredentialsWithUserIdentityV2\n  );\n\n  if (resultTestVersion2EmailChange !== true) {\n    console.warn(\n      'CA connection firebase for the identity V1 email change test failed'\n    );\n    return;\n  }\n  console.warn(\n    'CA connection firebase for the identity V1 email change test succeed'\n  );\n  console.warn('CA connection firebase for the identity V2 test success');\n};\n\nexport const runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider = async () => {\n  console.error('runTestCAConnectionFirebaseWithoutCryptoCredentials::start');\n  const connectionFirebase = await connectWithFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  const {\n    cryptoCredentials: cryptoCredentialsGenerated,\n  } = connectionFirebase.authResult as ICAConnectionUserAuthorizedResult;\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsGenerated)) {\n    console.error(\n      'Invalida crypto credentials generated by Firebase CA connection'\n    );\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = new CentralAuthorityIdentity(\n    cryptoCredentialsGenerated\n  );\n\n  if (!userIdentityByCryptoCredentials.isValid) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n  const {\n    identityDescription: userIdentityDescription,\n  } = userIdentityByCryptoCredentials;\n\n  if (userIdentityDescription instanceof Error) {\n    console.error(userIdentityDescription);\n    console.error('Failed to parse the identity generated');\n    return;\n  }\n\n  const { authorityProviderURI } = userIdentityDescription;\n\n  if (authorityProviderURI !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL) {\n    console.error(\n      'The url of the Firebase authority provider from generated identity is not valid'\n    );\n    return;\n  }\n  const signOutResult = await connectionFirebase.signOut();\n  if (signOutResult instanceof Error) {\n    console.error(signOutResult);\n    console.error('Failed to sign out');\n    return;\n  }\n\n  const authorizeResultWithCredentialsGenerated = await connectionFirebase.authorize(\n    {\n      ...CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n      cryptoCredentials: cryptoCredentialsGenerated,\n    }\n  );\n  if (authorizeResultWithCredentialsGenerated instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n\n  const {\n    cryptoCredentials: cryptoCredentialsFromAuthorization,\n  } = authorizeResultWithCredentialsGenerated;\n  if (\n    (await compareCryptoCredentials(\n      cryptoCredentialsFromAuthorization,\n      cryptoCredentialsGenerated\n    )) !== true\n  ) {\n    console.error(\n      'Crypto credentials returned after success authorization must be same as provided (if not stored before)'\n    );\n    return;\n  }\n  console.warn('runTestCAConnectionFirebaseWithoutCryptoCredentials::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts",["1449"],"import { CentralAuthorityIdentityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  getUserCredentialsByUserIdentityAndCryptoKeys,\n  exportCryptoCredentialsToString,\n  compareCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\n\nconst runCACredentialsIdentityStorageTestForCredentials = async (\n  storageInstance: CentralAuthorityIdentityCredentialsStorage,\n  testIdentityDescription:\n    | ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n    | TCentralAuthorityUserIdentity\n): Promise<boolean | undefined> => {\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key Pairs');\n    return;\n  }\n\n  const setInStorageResult = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n  const caCryptoCredentialsTestRead = await storageInstance.getCredentials(\n    identityTest\n  );\n\n  if (setInStorageResult instanceof Error) {\n    if (!(caCryptoCredentialsTestRead instanceof Error)) {\n      console.error(\n        'If the set in storage result was wrong, than get from the storage result must be also wrong'\n      );\n    }\n    console.error(setInStorageResult);\n    return;\n  }\n  if (caCryptoCredentialsTestRead instanceof Error) {\n    console.error(caCryptoCredentialsTestRead);\n    console.error('Failed to read the crypto credentials saved previosely');\n    return;\n  }\n  if (!caCryptoCredentialsTestRead) {\n    console.error(\n      'The crypto credentials saved previousely have an empty value stored'\n    );\n    return;\n  }\n\n  const identityValue = getUserIdentityByCryptoCredentials(\n    caCryptoCredentialsTestRead\n  );\n\n  if (identityValue instanceof Error) {\n    console.error(identityValue);\n    console.error('There is a broken identity value was stored');\n    return;\n  }\n  if (identityValue !== identityTest) {\n    console.error('The identity stored have a wrong value not same as stred');\n    return;\n  }\n\n  const caCredentialsTest = getUserCredentialsByUserIdentityAndCryptoKeys(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (caCredentialsTest instanceof Error) {\n    console.error(caCredentialsTest);\n    console.error(\n      'Failed to create CACryproCredentials by the identity and test key pairs'\n    );\n    return;\n  }\n\n  const storeResultCaCryptoCredentials = await storageInstance.setCredentials(\n    caCredentialsTest\n  );\n\n  if (storeResultCaCryptoCredentials instanceof Error) {\n    console.error(storeResultCaCryptoCredentials);\n    console.error('Failed to store the CACryptoCredentials format');\n    return;\n  }\n  if (storeResultCaCryptoCredentials !== false) {\n    console.error(\n      'Crypto credentials for the same identity must not be rewritten'\n    );\n    return;\n  }\n\n  const caCryptoCredentialsExportedToStringTest = await exportCryptoCredentialsToString(\n    caCredentialsTest\n  );\n\n  if (caCryptoCredentialsExportedToStringTest instanceof Error) {\n    console.error(caCryptoCredentialsExportedToStringTest);\n    console.error('Failed to export CACryptoCredentials to a string');\n    return;\n  }\n\n  const storeResultCaCryptoCredentialsExportedToString = await storageInstance.setCredentials(\n    caCryptoCredentialsExportedToStringTest\n  );\n\n  if (storeResultCaCryptoCredentialsExportedToString instanceof Error) {\n    console.error(storeResultCaCryptoCredentialsExportedToString);\n    console.error(\n      'Failed to store the CACryptoCredentials exported to a string format'\n    );\n    return;\n  }\n  if (storeResultCaCryptoCredentialsExportedToString !== false) {\n    console.error(\n      'Crypto credentials (exported as string) for the same identity must not be rewritten'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runCACredentialsIdentityStorageTest = async () => {\n  console.warn('Storage identity test was started');\n\n  const conectionCredentials: ISecretStoreCredentials = {\n    login: 'login@value',\n    password: '123456',\n  };\n  const storageInstance = new CentralAuthorityIdentityCredentialsStorage();\n  const connectionResult = await storageInstance.connect(conectionCredentials);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error(new Error('Failed to connect to the storage'));\n    return;\n  }\n\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const resultFirst = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescription\n  );\n\n  if (resultFirst !== true) {\n    console.error('Test for the first credentials was failed');\n    return;\n  }\n\n  const testIdentityDescriptionSame = {\n    ...testIdentityDescription,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const caIdentityValue = new CentralAuthorityIdentity(testIdentityDescription);\n  const caIdentityValueSame = new CentralAuthorityIdentity(\n    testIdentityDescriptionSame\n  );\n\n  const resCredentialsValue = await storageInstance.getCredentials(\n    caIdentityValue.toString()\n  );\n\n  if (resCredentialsValue instanceof Error) {\n    console.error(resCredentialsValue);\n    console.error('Failed to read credentials');\n    return;\n  }\n  if (!resCredentialsValue) {\n    console.error('Failed to read credentials which are stored before');\n    return;\n  }\n\n  const resSameCredentialsValue = await storageInstance.getCredentials(\n    caIdentityValueSame.toString()\n  );\n\n  if (resSameCredentialsValue instanceof Error) {\n    console.error(resCredentialsValue);\n    console.error('Failed to read credentials');\n    return;\n  }\n  if (!resSameCredentialsValue) {\n    console.error('Failed to read credentials which are stored before');\n    return;\n  }\n  if (!compareCryptoCredentials(resCredentialsValue, resSameCredentialsValue)) {\n    console.error(\n      'A crypto credentials must be the same and independent from the CAIdentity version'\n    );\n    return;\n  }\n  if (\n    resCredentialsValue.userIdentity === resSameCredentialsValue.userIdentity\n  ) {\n    console.error(\n      'The user identity must not be the same cause the version is different'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionTwo = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n      'https://google1.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: 'WWW@WWW.RU',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const resultTwo = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionTwo\n  );\n\n  if (resultTwo !== true) {\n    console.error('Test for the second credentials was failed');\n    return;\n  }\n  console.warn('Test for a wrong identity valie started');\n  const testIdentityDescriptionWrongFormat = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: '',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultMustBeFailed = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionWrongFormat\n  );\n\n  // undefined must be\n  if (resultMustBeFailed) {\n    console.error('Test for a wrong identity valie must failed');\n    return;\n  }\n  console.warn('Test for a wrong identity value succeed');\n\n  const storageDisconnectResult = await storageInstance.disconnect();\n\n  if (storageDisconnectResult instanceof Error) {\n    console.error(storageDisconnectResult);\n    console.error('Failed to disconnect');\n    return;\n  }\n\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n\n  if (!identityTest) {\n    console.error(identityTest);\n    console.error(\n      'Failed to generate test identity string on disconnected storage test'\n    );\n    return;\n  }\n\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key pairs on disconnected storage test');\n    return;\n  }\n\n  const setCredentialsResultDisconnected = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (!(setCredentialsResultDisconnected instanceof Error)) {\n    console.error(\n      'Execution of the setCredentials method must failed on disconnected storage'\n    );\n    return;\n  }\n\n  const getCredentialsResultDisconnected = await storageInstance.getCredentials(\n    identityTest\n  );\n\n  if (!(getCredentialsResultDisconnected instanceof Error)) {\n    console.error(\n      'Execution of the getCredentials method must failed on disconnected storage'\n    );\n    return;\n  }\n  console.warn('Storage identity test was succes');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts",["1450"],"import { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst ITERATIONS_COUNT = 60000;\nconst CACHE_CAPACITY = 200;\n\nexport const runTestCachingDecorator = async () => {\n  const values: { [k: string]: string } = {};\n\n  let idx = 0;\n  while (idx < ITERATIONS_COUNT) {\n    values[generateUUID()] = generateUUID();\n    idx += 1;\n  }\n\n  class CachingDecoratorTestClass {\n    @caching(CACHE_CAPACITY)\n    async getValue(key: string): Promise<string | undefined> {\n      return (values as any)[key];\n    }\n  }\n\n  const instance = new CachingDecoratorTestClass();\n  let iteration = 0;\n\n  idx = 0;\n  const keysValues = Object.keys(values);\n  let k;\n\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2 + keysValues.length / 4);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 3 + keysValues.length / 5);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = keysValues.length;\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  console.error('Test for caching decorator succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts",["1451"],"import { SwarmConnectionSubclassIPFS } from 'classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD } from './ipfs-swarm-connection.const';\n\nexport const runTestSwarmConnectionIPFS = async () => {\n  await initializeMocha();\n\n  describe('ipfs swarm connection', () => {\n    it('create ipfs swarm connection', async () => {\n      const connection = new SwarmConnectionSubclassIPFS();\n      const password = SWARM_CONNECTION_PASSWORD;\n\n      try {\n        expect(connection.connect).to.be.a('function');\n        await assert.becomes(\n          connection.connect({\n            password,\n          }),\n          true,\n          'Connection to the swarm was not established'\n        );\n        expect(connection.isConnected).to.equal(true);\n        await assert.becomes(\n          connection.close(),\n          true,\n          'Connection to the swarm was not closed succesfully'\n        );\n        expect(connection.isConnected).to.equal(false);\n        await expect(\n          connection.connect({\n            password,\n          })\n        ).to.eventually.be.an.instanceOf(Error);\n        assert(\n          connection.isClosed === true,\n          'Connection isClosed flag must be true, after the connection was closed previousely'\n        );\n        assert(\n          connection.isConnected === false,\n          'Connection isConnected flag must be false, after the connection was closed previousely'\n        );\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n  });\n  runMocha();\n};\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts",["1452","1453"],"import { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport {\n  ESwarmConnectionClassSubclassType,\n  ESwarmConnectionSubclassStatus,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport { expect, assert } from 'chai';\nimport {\n  SWARM_CONNECTION_PASSWORD,\n  SWARM_CONNECTION_OPTIONS,\n} from './ipfs-swarm-connection.const';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from 'classes/basic-classes/status-class-base/status-class-base.const';\n\nexport const runTestSwarmConnection = async () => {\n  describe('swarm connection:: ipfs', () => {\n    it('create ipfs swarm connection', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n      try {\n        await assert.becomes(\n          connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS),\n          true,\n          'Failed to connect to the Swarm with ipfs'\n        );\n        expect(connectionToSwarm.isConnected).to.equal(true);\n        await assert.becomes(\n          connectionToSwarm.close(),\n          true,\n          'Connection to the swarm was not closed succesfully'\n        );\n        expect(connectionToSwarm.isConnected).to.equal(false);\n        await expect(\n          connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS)\n        ).to.eventually.be.an.instanceOf(Error);\n        assert(\n          connectionToSwarm.isClosed === true,\n          'Connection isClosed flag must be true, after the connection was closed previousely'\n        );\n        assert(\n          connectionToSwarm.isConnected === false,\n          'Connection isConnected flag must be false, after the connection was closed previousely'\n        );\n        return Promise.resolve();\n      } catch (err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n\n    it('swarm connection: check status', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n\n      const connectionOptions = {\n        type: ESwarmConnectionClassSubclassType.IPFS,\n        subclassOptions: {\n          password: SWARM_CONNECTION_PASSWORD,\n        },\n      };\n\n      try {\n        const { statusEmitter } = connectionToSwarm;\n        const statusesEmitted: ESwarmConnectionSubclassStatus[] = [];\n\n        expect(statusEmitter).to.be.an.instanceof(EventEmitter);\n        statusEmitter.addListener(STATUS_CLASS_STATUS_CHANGE_EVENT, (status) =>\n          statusesEmitted.push(status)\n        );\n        await assert.becomes(\n          connectionToSwarm.connect(connectionOptions),\n          true,\n          ''\n        );\n        expect(statusesEmitted)\n          .to.be.an('array')\n          .to.include.members([\n            ESwarmConnectionSubclassStatus.CONNECTED,\n            ESwarmConnectionSubclassStatus.CONNECTING,\n            ESwarmConnectionSubclassStatus.STARTED,\n          ]);\n        return Promise.resolve();\n      } catch (err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js",["1454"],"const admin = require('firebase-admin');\nconst serviceKey = require('./firebase.serviceKey.json');\n\nconst removeAllUsers = async () => {\n  const initResult = await admin.initializeApp({\n    credential: admin.credential.cert(serviceKey),\n    databaseURL: 'https://protocol-f251b.firebaseio.com',\n  });\n\n  if (initResult instanceof Error) {\n    console.error(initResult);\n    return new Error(\"Can't initialize the application\");\n  }\n\n  function deleteUser(uid) {\n    admin\n      .auth()\n      .deleteUser(uid)\n      .then(function() {\n        console.log('Successfully deleted user', uid);\n      })\n      .catch(function(error) {\n        console.log('Error deleting user:', error);\n      });\n  }\n\n  function getAllUsers(nextPageToken) {\n    admin\n      .auth()\n      .listUsers(100, nextPageToken)\n      .then(function(listUsersResult) {\n        listUsersResult.users.forEach(function(userRecord) {\n          let uid = userRecord.toJSON().uid;\n          deleteUser(uid);\n        });\n        if (listUsersResult.pageToken) {\n          getAllUsers(listUsersResult.pageToken);\n        }\n      })\n      .catch(function(error) {\n        console.log('Error listing users:', error);\n      });\n  }\n  getAllUsers();\n};\n\nremoveAllUsers();\n","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts",["1455"],"import { ISwarmStoreConnectorOrbitDBOptions } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport {\n  ISecretStorageOptions,\n  ISecretStoreCredentials,\n} from 'classes/secret-storage-class/secret-storage-class.types';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME =\n  'database_test';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME =\n  'database_test_2';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME =\n  'database_test_3';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: false,\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n      grantAcess: async (entity, id) => {\n        return true;\n      },\n    },\n  ],\n};\n\nconst USER_ID_KEY = '____userId';\nconst TEST_VALUE_KEY = '____test_value';\nfunction promptUserIdAndTestValue() {\n  const userIdStored = localStorage.getItem(USER_ID_KEY);\n\n  if (!userIdStored) {\n    const userId = String(window.prompt('user id', 'test1'));\n\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n\n  const testValueStored = localStorage.getItem(TEST_VALUE_KEY);\n\n  if (!testValueStored) {\n    const tstv = String(window.prompt('test value', 'tv'));\n\n    localStorage.setItem(TEST_VALUE_KEY, tstv);\n  }\n}\npromptUserIdAndTestValue();\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE = `${localStorage.getItem(\n  TEST_VALUE_KEY\n)}${new Date()}`;\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n  id: localStorage.getItem(USER_ID_KEY),\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER,\n  id: localStorage.getItem(USER_ID_KEY),\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO = {\n  dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n  isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE = {\n  dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n  isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n      isPublic: true,\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n      isPublic: true,\n      grantAcess: async (entity, id): Promise<boolean> => {\n        return !!entity && !!id;\n      },\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER,\n  id: localStorage.getItem(USER_ID_KEY),\n  credentials: {\n    login: 'user@login.com',\n    password: '123456',\n  },\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS: Required<ISecretStorageOptions> = {\n  dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS: ISecretStoreCredentials = {\n  login: 'login.com',\n  password: '123456',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS: Required<ISecretStorageOptions> = {\n  dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts",["1456"],"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { IPFS } from 'types/ipfs.types';\nimport ipfs from 'ipfs';\nimport { expect, assert } from 'chai';\nimport { SwarmStoreConnectorOrbitDB } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db';\nimport {\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n} from './swarm-storage-orbit-db.test.const';\nimport { SWARM_CONNECTION_OPTIONS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.const';\nimport { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmStoreConnectorOrbitDBEventNames } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const';\nimport { ISwarmStoreConnectorOrbitDbDatabaseValue } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON } from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport const testDatabase = async (\n  connection: SwarmStoreConnectorOrbitDB<string>,\n  dbName: string\n) => {\n  const addValueHash = await connection.request(\n    dbName,\n    'add',\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n  );\n\n  expect(addValueHash).to.be.a('string');\n\n  const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n    dbName,\n    'get',\n    addValueHash\n  );\n\n  expect(getValueByHashResult.id).to.be.equal(\n    (connection as any).orbitDb.identity.id\n  );\n  expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n  expect(getValueByHashResult.value).to.be.equal(\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n  );\n\n  await expect(\n    connection.request(dbName, 'remove', addValueHash)\n  ).eventually.not.rejected.not.be.an('error');\n\n  const getValueByHashAfterRemoveResult = await connection.request(\n    dbName,\n    'get',\n    addValueHash\n  );\n\n  assert(\n    getValueByHashAfterRemoveResult == null,\n    'The value removed before must be empty'\n  );\n};\n\nexport const testDatabaseWithRandomValue = async (\n  connection: SwarmStoreConnectorOrbitDB<string>,\n  dbName: string\n) => {\n  let i = 0;\n\n  while ((i += 1) <= 5) {\n    const testValue = `${new Date()}--test-value`;\n    const addValueHash = await connection.request(dbName, 'add', testValue);\n\n    expect(addValueHash).to.be.a('string');\n\n    const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n      dbName,\n      'get',\n      addValueHash\n    );\n\n    expect(getValueByHashResult.id).to.be.equal(\n      (connection as any).orbitDb.identity.id\n    );\n    expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n    expect(getValueByHashResult.value).to.be.equal(testValue);\n\n    await expect(\n      connection.request(dbName, 'remove', addValueHash)\n    ).eventually.not.rejected.not.be.an('error');\n\n    const getValueByHashAfterRemoveResult = await connection.request(\n      dbName,\n      'get',\n      addValueHash\n    );\n\n    assert(\n      getValueByHashAfterRemoveResult == null,\n      'The value removed before must be empty'\n    );\n  }\n};\n\nexport const runTestSwarmStoreOrbitDBConnection = async (name?: string) => {\n  describe('swarm store: orbit db', () => {\n    let ipfsConnection: IPFS | undefined;\n\n    beforeEach(async function() {\n      this.timeout(60000);\n      const swarmConnection = new SwarmConnection();\n\n      expect(swarmConnection).to.be.an.instanceof(SwarmConnection);\n      await assert.becomes(\n        swarmConnection.connect(SWARM_CONNECTION_OPTIONS),\n        true,\n        ''\n      );\n      expect(swarmConnection.isConnected).to.equal(true);\n\n      ipfsConnection = swarmConnection.getNativeConnection();\n\n      expect(ipfsConnection).to.be.an.instanceof(ipfs);\n    });\n\n    if (\n      !name ||\n      name === 'create swarm store OrbitDB connector - 3 databases'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database, check database close'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database, check database close', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n\n        //\n        await expect(\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO\n          )\n        ).to.eventually.be.undefined;\n        await expect(\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO\n          )\n        ).to.eventually.be.an('error');\n\n        //\n        const result = await Promise.all([\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE\n          ),\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE\n          ),\n        ]);\n\n        expect(result)\n          .to.be.an('array')\n          .that.has.property('length', 2);\n        assert(result[0] == null, 'The first instance must be started');\n        expect(result[1]).to.be.an.instanceof(Error);\n\n        let isEmitDbClose: boolean = false;\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE,\n          (dbName: string) => {\n            if (\n              dbName ===\n              SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n            ) {\n              isEmitDbClose = true;\n            }\n          }\n        );\n        await expect(\n          connection.closeDb(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n          )\n        ).to.eventually.eq(undefined);\n        expect(isEmitDbClose).to.be.equal(true);\n        await expect(\n          connection.request(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            'get',\n            '111'\n          )\n        ).to.eventually.be.an('Error');\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database with custom identity'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database with custom identity', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database with custom acccess provider'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database with custom acccess provider', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore -- with random loop'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n  });\n\n  async function testCache(\n    cache: SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  ) {\n    const testKey = '___test_key__cache';\n    const testValue = '___test_value_cache';\n\n    expect(cache).to.be.an.instanceof(\n      SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n    );\n    expect(cache.db).to.deep.equal({\n      status:\n        SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN,\n    });\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    await expect(cache.get(testKey)).to.be.eventually.oneOf([\n      testValue,\n      undefined,\n    ]);\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    await expect(cache.put(testKey, testValue)).to.eventually.be.fulfilled;\n    await expect(cache.open()).to.eventually.be.fulfilled;\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    // TODO - must provide storing values as buffer fo the SecretStorage\n    await expect(cache.get(testKey)).to.be.eventually.equal(testValue);\n\n    const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n    const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n    await expect(cache.put(testKeyRandom, testValueRandom)).to.eventually.be\n      .fulfilled;\n    // TODO - must provide storing values as buffer fo the SecretStorage\n\n    let cbCalledTimes = 0;\n    const cb = (err: Error | undefined, value: string | undefined) => {\n      if (!err) {\n        cbCalledTimes += Number(!!value);\n      }\n    };\n\n    await expect(cache.get(testKeyRandom, cb)).to.be.eventually.equal(\n      testValueRandom\n    );\n    expect(cbCalledTimes).to.equal(1);\n\n    const cbErr = (err: Error | undefined) => {\n      if (!err) {\n        cbCalledTimes += 1;\n      }\n    };\n\n    await expect(cache.del(testKeyRandom, cbErr)).to.be.eventually.equal(\n      undefined\n    );\n    expect(cbCalledTimes).to.equal(2);\n    await expect(cache.close(cbErr)).to.eventually.be.fulfilled;\n    expect(cbCalledTimes).to.equal(3);\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE\n    );\n  }\n\n  describe('swarm store:: orbit db:: subclasses', () => {\n    if (\n      !name ||\n      name ===\n        'subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter', async () => {\n        let secretStorageAdapter:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n        const testKey = '___test_key';\n        const testValue = '___test_value';\n\n        expect(() => {\n          secretStorageAdapter = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS\n          );\n        }).to.not.throw();\n        expect(secretStorageAdapter).to.be.an.instanceof(\n          SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n        );\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        await expect(\n          secretStorageAdapter!.get(testKey)\n        ).to.be.eventually.oneOf([testValue, undefined]);\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        await expect(secretStorageAdapter!.put(testKey, testValue)).to\n          .eventually.be.fulfilled;\n        await expect(secretStorageAdapter!.open()).to.eventually.be.fulfilled;\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(secretStorageAdapter!.get(testKey)).to.be.eventually.equal(\n          testValue\n        );\n\n        const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n        const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n        await expect(secretStorageAdapter!.put(testKeyRandom, testValueRandom))\n          .to.eventually.be.fulfilled;\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(\n          secretStorageAdapter!.get(testKeyRandom)\n        ).to.be.eventually.equal(testValueRandom);\n        await expect(secretStorageAdapter!.close()).to.eventually.be.fulfilled;\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE\n        );\n      }).timeout(10000);\n    }\n    if (\n      !name ||\n      name === 'subclass swarm-store-connector-orbit-db-subclass-storage-cache'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-storage-cache', async () => {\n        const password = '123456';\n        const login = 'user@login.com';\n        let key: CryptoKey;\n        let cache:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n        await expect(\n          (async () => {\n            const secretStorage = new SecretStorage();\n            key = (await secretStorage.generateCryptoKey({\n              login,\n              password,\n            })) as CryptoKey;\n            return key;\n          })()\n        ).to.eventually.be.fulfilled;\n\n        expect(key!).to.be.an.instanceOf(CryptoKey);\n        expect(() => {\n          cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n            { key },\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS\n          );\n        }).to.not.throw();\n        await testCache(cache!);\n      }).timeout(10000);\n    }\n    if (\n      !name ||\n      name === 'subclass swarm-store-connector-orbit-db-subclass-storage-fabric'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-storage-fabric', async () => {\n        const login = 'user@login.com';\n        const password = '123456';\n        const cachePath = '___cachePath_test';\n        const passwordFailed = '12345';\n\n        expect(() => {\n          new SwarmStoreConnectorOrbitDBSubclassStorageFabric({\n            login,\n            password: passwordFailed,\n          });\n        }).to.throw();\n\n        let fabric: undefined | SwarmStoreConnectorOrbitDBSubclassStorageFabric;\n        let cache:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n        expect(() => {\n          fabric = new SwarmStoreConnectorOrbitDBSubclassStorageFabric({\n            login,\n            password,\n          });\n        }).not.to.throw();\n        expect(fabric).to.be.instanceOf(\n          SwarmStoreConnectorOrbitDBSubclassStorageFabric\n        );\n        await expect(\n          (async () => {\n            cache = (await fabric!.createStore(\n              cachePath\n            )) as SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n          })()\n        ).to.eventually.be.fulfilled;\n        await testCache(cache!);\n      }).timeout(10000);\n    }\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["1457","1458","1459","1460","1461","1462"],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["1463","1464"],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["1465"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["1466","1467","1468","1469"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["1470"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["1471","1472"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["1473"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["1474","1475"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["1476"],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v1.test.ts",["1477"],"import { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { generateCryptoCredentialsWithUserIdentityV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { CA_CONNECTION_FIREBASE_CONFIG } from '../central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { getUserIdentityByCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { validateUserIdentityInstance } from './central-authority-identity.utils';\n\nexport const runTestCAIdentityV1 = async () => {\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValue = new CentralAuthorityIdentity(testIdentityDescription);\n\n  if (!validateUserIdentityInstance(identityValue, testIdentityDescription)) {\n    console.error('Failed to create an instance of CAIdentity');\n    return;\n  }\n\n  const { identityDescritptionSerialized } = identityValue;\n  const identityFromIdentityString = new CentralAuthorityIdentity(\n    identityDescritptionSerialized as string\n  );\n\n  if (\n    !validateUserIdentityInstance(\n      identityFromIdentityString,\n      testIdentityDescription\n    )\n  ) {\n    console.error(\n      'Failed to create an instance of CAIdentity from identityDescritptionSerialized of the test Identity description'\n    );\n    return;\n  }\n\n  const { id: userIdentifier } = identityFromIdentityString;\n\n  if (userIdentifier instanceof Error || typeof userIdentifier !== 'string') {\n    console.error(\n      'The user identifier (id) prop must not be an error for a valid identity'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongGUID = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19a#',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValueFromWrongGUID = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongGUID\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongGUID,\n      testIdentityDescriptionWithWrongGUID\n    )\n  ) {\n    console.error(\n      'Wrong guid value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongURL = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValueFromWrongURL = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongURL,\n      testIdentityDescriptionWithWrongURL\n    )\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongURL =\n    '01htt://googlecom76d55caf-fc4a-41a9-8844-19877dcb19ad';\n  const identityValueFromStringWrongURL = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongURL, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'htt://googlecom',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n    })\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongURL as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for a wrong authority url'\n    );\n    return;\n  }\n  const testIdentityStringnWithWrongUUID =\n    '01https://google.com76d55caf-fc4a-41a9-8*44-19877dcb19ad';\n  const identityValueFromStringWrongUUID = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongUUID\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongUUID, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n        'https://google.com',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8*44-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n    })\n  ) {\n    console.error(\n      'Wrong UUID value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongUUID as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error('The userIdentifier prop must be an error for a wrong uuid');\n    return;\n  }\n  const testIdentityStringnWithWrongVersionUnsupported =\n    '11https://google.com76d55caf-fc4a-41a9-8144-19877dcb19ad';\n  const identityValueFromStringWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongVersionUnsupported\n  );\n  const testIdentityDescriptionWithVersionUnsupported = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8144-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: '99',\n  };\n  if (\n    validateUserIdentityInstance(\n      identityValueFromStringWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  const identityValueFromIdentityDescriptionWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithVersionUnsupported\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromIdentityDescriptionWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromIdentityDescriptionWrongVersionUnsupported as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for unsupported identity version'\n    );\n    return;\n  }\n  console.warn('The user identity description test is succesfull');\n};\n\nexport const runTestCAIdentityWithAuthorityProviderGeneratorV1 = async () => {\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:started');\n\n  const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV1({\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n      CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  });\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = getUserIdentityByCryptoCredentials(\n    cryptoCredentials\n  );\n  const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n  if (!caUserIdentity.isValid) {\n    console.error('User identity generated is not valid');\n    return;\n  }\n  const stringifiedIdentity = caUserIdentity.toString();\n\n  if (stringifiedIdentity === '') {\n    console.error(stringifiedIdentity);\n    console.error('Failed to parse the identity');\n    return;\n  }\n  if (stringifiedIdentity !== userIdentityByCryptoCredentials) {\n    console.error('Parsed identity is not valid');\n    return;\n  }\n  const identityDescriptionParsed = caUserIdentity.identityDescription;\n\n  if (identityDescriptionParsed instanceof Error) {\n    console.error(identityDescriptionParsed);\n    console.error('Failed to get description by identity string');\n    return;\n  }\n  if (\n    identityDescriptionParsed[\n      CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n    ] !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL\n  ) {\n    console.error('Wrong authority provider url got from the identity string');\n    return;\n  }\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v2.test.ts",["1478"],"import { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { validateUserIdentityInstance } from './central-authority-identity.utils';\nimport { CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const';\n\nexport const testIdentity = (userIdOnAuthProvider: string): void | boolean => {\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: userIdOnAuthProvider,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValue = new CentralAuthorityIdentity(testIdentityDescription);\n\n  if (!validateUserIdentityInstance(identityValue, testIdentityDescription)) {\n    console.error('Failed to create an instance of CAIdentity');\n    return;\n  }\n\n  const { identityDescritptionSerialized } = identityValue;\n  const identityFromIdentityString = new CentralAuthorityIdentity(\n    identityDescritptionSerialized as string\n  );\n\n  if (\n    !validateUserIdentityInstance(\n      identityFromIdentityString,\n      testIdentityDescription\n    )\n  ) {\n    console.error(\n      'Failed to create an instance of CAIdentity from identityDescritptionSerialized of the test Identity description'\n    );\n    return;\n  }\n\n  const { id: userIdentifier } = identityFromIdentityString;\n\n  if (userIdentifier instanceof Error || typeof userIdentifier !== 'string') {\n    console.error(\n      'The user identifier (id) prop must not be an error for a valid identity'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestCAIdentityV2 = async () => {\n  if (!testIdentity(generateUUID())) {\n    console.error('UUIDv4 must be valid as user login on the auth server');\n    return;\n  }\n  if (!testIdentity('nnn@gmail.com')) {\n    console.error('email must be valid as user login on the auth server');\n    return;\n  }\n  if (!testIdentity('#$%^&_()[]___@_.33.333..__3')) {\n    console.error(\n      'the login format must be valid as user login on the auth server'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongLogin = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '.11',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValueFromWrongLogin = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongLogin\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongLogin,\n      testIdentityDescriptionWithWrongLogin\n    )\n  ) {\n    console.error(\n      'Wrong guid value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongURL = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'googlecom',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValueFromWrongURL = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongURL,\n      testIdentityDescriptionWithWrongURL\n    )\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongURL = `02htt://googlecom${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}76d55caf-fc4a-41a9-8844-19877dcb19ad`;\n  const identityValueFromStringWrongURL = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongURL, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'htt://googlecom',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n    })\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongURL as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for a wrong authority url'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongLogin = `02https://google.com${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}.44`;\n  const identityValueFromStringWrongLogin = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongLogin\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongLogin, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n        'https://google.com',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '.44',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n    })\n  ) {\n    console.error(\n      'Wrong UUID value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongLogin as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error('The userIdentifier prop must be an error for a wrong uuid');\n    return;\n  }\n  const testIdentityStringnWithWrongVersionUnsupported = `99https://google.com${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}121`;\n  const identityValueFromStringWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongVersionUnsupported\n  );\n  const testIdentityDescriptionWithVersionUnsupported = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '121',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: '99',\n  };\n  if (\n    validateUserIdentityInstance(\n      identityValueFromStringWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  const identityValueFromIdentityDescriptionWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithVersionUnsupported\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromIdentityDescriptionWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromIdentityDescriptionWrongVersionUnsupported as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for unsupported identity version'\n    );\n    return;\n  }\n  console.warn('The user identity description test is succesfull');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.anonymousely.ts",["1479"],"import {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CONFIG_WATCHA3,\n} from './central-authority-connection.test.firebase.const';\nimport CAConnectionWithFirebase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nconst connectToFirebaseAnonymousely = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n): Promise<Error | CAConnectionWithFirebase> => {\n  const connectionFirebase = new CAConnectionWithFirebase();\n  const connectionResult = await connectionFirebase.connect(firebaseParams);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return new Error('Failed connection to the firebase app account');\n  }\n  if (connectionFirebase.status !== CA_CONNECTION_STATUS.CONNECTED) {\n    return new Error('CONNECTED status must be set on connection succeed');\n  }\n  return connectionFirebase;\n};\n\nexport const runTestForFirebaseConfig = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('test runTestConnectToFirebaseAnonymousely is started');\n  const connectionToFirebase = await connectWithFirebase(\n    {\n      login: 'yaxida4519@email1.pro',\n      password: '123456',\n    },\n    firebaseParams\n  );\n\n  if (connectionToFirebase instanceof Error) {\n    return connectionToFirebase;\n  }\n\n  const userCryptoCredentials = connectionToFirebase.cryptoCredentials;\n  const disconnectResult = await connectionToFirebase.disconnect();\n\n  if (!userCryptoCredentials) {\n    return new Error('The user crypto credentials are empty');\n  }\n  if (disconnectResult instanceof Error) {\n    return disconnectResult;\n  }\n\n  const connectAnonymousely = await connectToFirebaseAnonymousely(\n    firebaseParams\n  );\n\n  if (connectAnonymousely instanceof Error) {\n    return connectAnonymousely;\n  }\n\n  const userCredentials = await connectAnonymousely.getUserCredentials(\n    userCryptoCredentials.userIdentity\n  );\n\n  if (userCredentials instanceof Error) {\n    return userCredentials;\n  }\n  if (!userCredentials) {\n    return new Error(\n      'User crypto credentials must be returned even if the user is not authorized'\n    );\n  }\n  if (!compareCryptoCredentials(userCryptoCredentials, userCredentials)) {\n    return new Error(\n      'User crypto credentials must be the same with the credentials when the user is authorized'\n    );\n  }\n\n  const anonymouselyDisconnect = await connectAnonymousely.disconnect();\n\n  if (anonymouselyDisconnect instanceof Error) {\n    return anonymouselyDisconnect;\n  }\n};\n\nexport const runTestConnectToFirebaseAnonymousely = async () => {\n  const resTestFirebaseV1 = await runTestForFirebaseConfig(\n    CA_CONNECTION_FIREBASE_CONFIG\n  );\n\n  if (resTestFirebaseV1 instanceof Error) {\n    return resTestFirebaseV1;\n  }\n\n  const resTestFirebaseV2 = await runTestForFirebaseConfig(\n    CA_CONNECTION_FIREBASE_CONFIG_WATCHA3\n  );\n\n  if (resTestFirebaseV2 instanceof Error) {\n    return resTestFirebaseV2;\n  }\n\n  console.warn('test runTestConnectToFirebaseAnonymousely was succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.utils.firebase.ts",["1480"],"import { CAConnectionWithFirebase } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase';\nimport {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CREDENTIALS,\n} from './central-authority-connection.test.firebase.const';\nimport { ICAConnectionSignUpCredentials } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport { CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport const connectToFirebase = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n): Promise<Error | CAConnectionWithFirebase> => {\n  const connectionFirebase = new CAConnectionWithFirebase();\n  const connectionResult = await connectionFirebase.connect(firebaseParams);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return new Error('Failed connection to the firebase app account');\n  }\n  if (!connectionFirebase.isConnected) {\n    return new Error(\n      'isConnected status flag must be truthly on connection succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const aurhorizeWithCredentials = async (\n  authCredentials: ICAConnectionSignUpCredentials,\n  connectionFirebase: CAConnectionWithFirebase\n): Promise<Error | CAConnectionWithFirebase> => {\n  const authorizeResult = await connectionFirebase.authorize(authCredentials);\n\n  if (\n    authorizeResult instanceof ErrorExtendedBaseClass &&\n    authorizeResult.code === CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n  ) {\n    alert('Please, veriy your email');\n    return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n  }\n  if (authorizeResult instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const connectAndAuthorizeInFirebase = async (\n  authCredentials: ICAConnectionSignUpCredentials,\n  firebaseParams?: typeof CA_CONNECTION_FIREBASE_CONFIG\n): Promise<CAConnectionWithFirebase | Error> => {\n  const connectionFirebase = await connectToFirebase(firebaseParams);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n  return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n};\n\n/**\n * connect to firebase with credentials\n * defined\n */\nexport const connectWithFirebase = async (\n  authCredentials: ICAConnectionSignUpCredentials = CA_CONNECTION_FIREBASE_CREDENTIALS,\n  firebaseParams?: typeof CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('CA connection firebase test started');\n\n  if (authCredentials instanceof Error) {\n    return authCredentials;\n  }\n\n  const connectionFirebase = await connectAndAuthorizeInFirebase(\n    authCredentials,\n    firebaseParams\n  );\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n\n  return connectionFirebase;\n};\n\nexport const deleteTheUserFromCA = async (\n  connectionFirebase: CAConnectionWithFirebase,\n  authCredentials: ICAConnectionSignUpCredentials\n): Promise<boolean | Error> => {\n  if (connectionFirebase instanceof CAConnectionWithFirebase) {\n    const deleteResult = await connectionFirebase.delete(authCredentials);\n\n    if (deleteResult instanceof Error) {\n      console.error(deleteResult);\n      return new Error('Failed to delete the user from the Firebase authority');\n    }\n    return true;\n  }\n  return new Error('The connection to the firebase is not valid');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.ts",["1481"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { expect, assert } from 'chai';\nimport { CAConnectionsPool } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool';\nimport {\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF_INVALID,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF_INVALID,\n} from './central-authority-connections-pool.test.const';\nimport CAConnectionWithFirebase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase';\nimport { CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.const';\nimport { IAuthProviderConnectionConfiguration } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types';\nimport { delay } from 'utils/common-utils/common-utils-timer';\n\nexport const runTestCAConnectionsPoolTest = () => {\n  describe('central-authority-connections-pool module test', () => {\n    describe('test constructor for the class', () => {\n      it('valid configurations for the auth providers - should not throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n      });\n      it('invalid configurations for the auth providers - should throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({} as any);\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF_INVALID,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF_INVALID,\n            ],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              {\n                ...CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n                caProviderUrl: '',\n              },\n            ],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              {\n                ...CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n                caProvider: 1000 as any,\n              },\n            ],\n          });\n        }).to.throw();\n      });\n      it('valid configurations for the same auth providers - should throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).to.throw();\n      });\n    });\n    describe('test connect and disconnect methods method', async () => {\n      let connectionPool: CAConnectionsPool;\n\n      beforeEach(() => {\n        connectionPool = new CAConnectionsPool({\n          providers: [\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n          ],\n        });\n      });\n\n      // afterEach(async () => {\n      //   if (connectionPool) {\n      //     await connectionPool.close();\n      //   }\n      // });\n\n      // it('connect to a valid auth provider url and close the connection pool to disconnect from all connected providers', async () => {\n      //   await expect(\n      //     connectionPool.connect(\n      //       CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n      //     )\n      //   ).to.eventually.not.be.an('error');\n      //   await expect(connectionPool.close()).to.eventually.not.be.an('error');\n      // });\n      // it('connect method to invalid auth provider url - should return error', async () => {\n      //   await expect(async () =>\n      //     connectionPool.connect(null as any)\n      //   ).to.not.throw();\n      //   await expect(async () => connectionPool.connect('')).to.not.throw();\n      //   await expect(async () =>\n      //     connectionPool.connect(0 as any)\n      //   ).to.not.throw();\n      //   await expect(connectionPool.connect(0 as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      //   await expect(connectionPool.connect({} as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      //   await expect(connectionPool.connect('' as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      // });\n\n      async function runTestForConnectionConfiguration(\n        conf: IAuthProviderConnectionConfiguration\n      ) {\n        const connectionFirebaseWatcha = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        expect(connectionFirebaseWatcha).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            conf.caProvider\n          ]\n        );\n\n        const connectionFirebaseWatchaSame = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        assert(\n          connectionFirebaseWatcha === connectionFirebaseWatchaSame,\n          'Connection to the same url must rerurn the same connection if not disconnected before'\n        );\n\n        await expect(\n          connectionPool.disconnect(conf.caProviderUrl)\n        ).to.eventually.not.be.an('error');\n\n        const connectionFirebaseWatchaNext = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        expect(connectionFirebaseWatchaNext).to.be.an.instanceof(\n          CAConnectionWithFirebase\n        );\n        assert(\n          connectionFirebaseWatchaNext !== connectionFirebaseWatchaSame,\n          'Connection to the same url must not return the same connection if disconnected before'\n        );\n      }\n\n      // it('connect method to a valid auth provider url - should connect and disconnect', async () => {\n      //   await runTestForConnectionConfiguration(\n      //     CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n      //   );\n      //   await runTestForConnectionConfiguration(\n      //     CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n      //   );\n      // }).timeout(10000);\n\n      it('authorize method to a valid auth provider url - should authorize and disconnect', async () => {\n        const credentials = {\n          login: 'vovit83253@mailfile.org',\n          password: '123456',\n        };\n        const connectionWithAuthProvider = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        expect(connectionWithAuthProvider).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n\n        const connectionWithAuthProviderSecond = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        assert(\n          connectionWithAuthProviderSecond === connectionWithAuthProvider,\n          'The same connection must be returned if authorized to the same auth provider'\n        );\n        await expect(connectionPool.signOut()).to.eventually.not.be.an('error');\n\n        const connectionWithAuthProviderThird = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        expect(connectionWithAuthProviderThird).to.be.an.instanceof(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        assert(\n          connectionWithAuthProvider !== connectionWithAuthProviderThird,\n          'After the sign out from the connection pool another connection shoul be returned after another authorization'\n        );\n\n        const connectionWithAuthProviderFourth = await connectionPool.connect(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n        );\n\n        assert(\n          connectionWithAuthProviderThird === connectionWithAuthProviderFourth,\n          'Connection to the same provider must be the same as connection after the authorization'\n        );\n\n        await expect(\n          connectionPool.authorize(\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl,\n            credentials\n          )\n        ).to.eventually.be.an('error');\n\n        const connectionToAnotherProvider = await connectionPool.connect(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl\n        );\n\n        expect(connectionToAnotherProvider).to.be.an.instanceof(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        await expect(\n          connectionPool.disconnect(\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n          )\n        ).to.eventually.not.be.an('error');\n        debugger;\n        await delay(1000);\n        const credentialsAnotherProvider = {\n          login: 'cemilic688@themail3.net',\n          password: '123456',\n        };\n        const authConnectionToAnotherProvider = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentialsAnotherProvider\n        );\n        debugger;\n        expect(authConnectionToAnotherProvider).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        assert(\n          authConnectionToAnotherProvider === connectionToAnotherProvider,\n          'After authorization connection to the auth provider must not be created again and must be reused connection opened before'\n        );\n        await expect(connectionPool.signOut()).to.eventually.not.be.an('error');\n        debugger;\n      }).timeout(120000);\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test.ts",["1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495"],"import { expect } from 'chai';\nimport {\n  validateCAConnectionAuthProviderType,\n  validateCAConnectionAuthProviderUrl,\n  validateCAConnectionAuthProviderConnectionConfiguration,\n} from 'classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils';\nimport { CA_CONNECTION_AUTH_PROVIDERS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.const';\n\nexport const runTestCAConnectionsUtilsValidators = () => {\n  describe('Test of the central-authority-connections-utils.validators', () => {\n    describe('Test of the validateCAConnectionAuthProviderType', () => {\n      it('validateCAConnectionAuthProviderType not throw', () => {\n        expect(() => {\n          validateCAConnectionAuthProviderType('fff');\n        }).not.to.throw();\n        expect(() => {\n          validateCAConnectionAuthProviderType(null);\n        }).not.to.throw();\n        expect(() => {\n          validateCAConnectionAuthProviderType({});\n        }).not.to.throw();\n      });\n\n      it('validateCAConnectionAuthProviderType return true for valid providers', () => {\n        expect(\n          validateCAConnectionAuthProviderType(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE\n          )\n        ).to.be.equal(true);\n      });\n\n      it('validateCAConnectionAuthProviderType return for unvalid providers', () => {\n        expect(validateCAConnectionAuthProviderType(1000)).to.be.equal(false);\n        expect(validateCAConnectionAuthProviderType('')).to.be.equal(false);\n      });\n    });\n\n    describe('Test of the validateCAConnectionAuthProviderUrl', () => {\n      it('validateCAConnectionAuthProviderUrl should not throw', () => {\n        expect(() =>\n          validateCAConnectionAuthProviderUrl(undefined as any)\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderUrl({} as any)\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderUrl(0 as any)\n        ).to.not.throw();\n      });\n      it('validateCAConnectionAuthProviderUrl should return true for a valid urls', () => {\n        expect(\n          validateCAConnectionAuthProviderUrl(\n            'https://watcha3-191815.firebaseio.com'\n          )\n        ).to.be.equal(true);\n        expect(\n          validateCAConnectionAuthProviderUrl(\n            'https://protocol-f251b.firebaseio.com'\n          )\n        ).to.be.equal(true);\n      });\n      it('validateCAConnectionAuthProviderUrl should return false for invalid urls', () => {\n        expect(\n          validateCAConnectionAuthProviderUrl('fds://watcha3-191815.firebaseio')\n        ).to.be.equal(false);\n        expect(validateCAConnectionAuthProviderUrl('https://com')).to.be.equal(\n          false\n        );\n      });\n    });\n\n    describe('Test of the validateCAConnectionAuthProviderConnectionConfiguration', () => {\n      it('validateCAConnectionAuthProviderConnectionConfiguration should not throw', () => {\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            undefined as any,\n            undefined as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            {} as any,\n            {} as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            0 as any,\n            0 as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            '' as any,\n            '' as any\n          )\n        ).to.not.throw();\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return true for a valid configuration', () => {\n        const validConfigurationOne = {\n          apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n        const validConfigurationTwo = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://watcha3-191815.firebaseio.com',\n          projectId: 'watcha3-191815',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            validConfigurationOne\n          )\n        ).to.be.equal(true);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            validConfigurationTwo\n          )\n        ).to.be.equal(true);\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return false for invalid configuration', () => {\n        const inValidConfigurationNoAPIKey = {\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n        const inVvalidConfigurationIvalidDatabaseURL = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://com',\n          projectId: 'watcha3-191815',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n        const inVvalidConfigurationAppIDIsNumber = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://watcha3-191815.firebaseio.com',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: 0,\n        };\n        const inVvalidConfigurationInvalidDatabaseURLTwo = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          projectId: 'watcha3-191815',\n          databaseURL: 'firebaseio. ',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inValidConfigurationNoAPIKey\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationIvalidDatabaseURL\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationAppIDIsNumber\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationInvalidDatabaseURLTwo\n          )\n        ).to.be.equal(false);\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return false for invalid auth provider type', () => {\n        const validConfigurationOne = {\n          apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            10000,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            {} as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            '' as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            undefined as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils-date-time-synced.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils-url.test.ts",["1496","1497","1498"],"import { expect } from 'chai';\nimport { normalizeUrl } from 'utils/common-utils/common-utils-url';\n\nexport const runTestCommonUtilsURL = () => {\n  describe('Test common-utils-url', () => {\n    describe('normalizeUrl function tets', () => {\n      it('normalizeUrl should not throw', () => {\n        expect(() => normalizeUrl(undefined as any)).to.not.throw();\n        expect(() => normalizeUrl(0 as any)).to.not.throw();\n        expect(() => normalizeUrl({} as any)).to.not.throw();\n        expect(() => normalizeUrl('gg')).to.not.throw();\n      });\n      it('normalizeUrl protocol normalize', () => {\n        expect(normalizeUrl('test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('www.test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('https://test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('http://test.com')).to.equal('http://test.com');\n      });\n      it('normalizeUrl sort query', () => {\n        expect(normalizeUrl('https://www.test.com?b=2&a=1')).to.equal(\n          'https://test.com/?a=1&b=2'\n        );\n        expect(normalizeUrl('http://www.test.com?2=2&1=1')).to.equal(\n          'http://test.com/?1=1&2=2'\n        );\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.ts",["1499"],"import { expect } from 'chai';\nimport { PseudoNTPClass } from 'classes/pseudo-ntp-class/pseudo-ntp-class';\nimport { PSEUDO_NTP_CLASS_SERVERS_POOL } from './pseudo-ntp-class.test.const';\n\nexport const runTestPseudoNtpClass = () => {\n  describe('Tests for pseudo ntp class', () => {\n    it('Check constructor not failed the defaults', () => {\n      expect(\n        () =>\n          new PseudoNTPClass({\n            serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n          })\n      ).to.not.throw();\n    });\n\n    it('Check call of the start() method not failed', () => {\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n      });\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n    });\n\n    it(`Check the event ${PseudoNTPClass.Event.TIME_SYNC} emitted`, async () => {\n      const maxOffsetSeconds = 10;\n      const syncIntervalS = 10;\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n        maxOffsetErrorS: maxOffsetSeconds,\n        syncIntervalS,\n      });\n      const eventName = PseudoNTPClass.Event.TIME_SYNC;\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n      await expect(\n        new Promise((res, rej) => {\n          const timeout = setTimeout(() => {\n            pseudoNTP.removeAllListeners(eventName);\n            rej(new Error('Timed out'));\n          }, syncIntervalS * 1000);\n          pseudoNTP.addListener(eventName, (diffSeconds) => {\n            if (timeout) {\n              clearTimeout(timeout);\n            }\n            if (diffSeconds > maxOffsetSeconds) {\n              res(diffSeconds);\n            } else {\n              rej(new Error('The difference is less than the maximum error'));\n            }\n          });\n        })\n      ).to.eventually.fulfilled.with.a('number');\n    }).timeout(60000);\n\n    it(`Check the event ${PseudoNTPClass.Event.TIME_SYNC} emitted multiple times during an interval`, async () => {\n      const mustCalledTimes = 3;\n      const maxOffsetSeconds = 10;\n      const syncIntervalS = 3;\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n        maxOffsetErrorS: maxOffsetSeconds,\n        syncIntervalS,\n      });\n      const eventName = PseudoNTPClass.Event.TIME_SYNC;\n      let timesEmitted = 0;\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n      await expect(\n        new Promise((res, rej) => {\n          const timeout = setTimeout(() => {\n            pseudoNTP.removeAllListeners(eventName);\n            rej(new Error('Timed out'));\n          }, syncIntervalS * 1000 * (mustCalledTimes + 1));\n          pseudoNTP.addListener(eventName, () => {\n            timesEmitted += 1;\n            if (timesEmitted >= mustCalledTimes) {\n              res();\n            }\n          });\n        })\n      ).to.eventually.fulfilled;\n    }).timeout(120000);\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/salt-generation-utils.test/salt-generation-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test.ts",["1500","1501","1502","1503","1504","1505"],"import SwarmMessageSubclassFieldsValidator from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator';\nimport { expect } from 'chai';\nimport { AssertionError } from 'assert';\nimport { SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const';\nimport { getDateNowInSeconds } from 'utils/common-utils/common-utils-date-time-synced';\nimport {\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES,\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES,\n} from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const';\nimport { TSwarmMessagePayloadSerialized } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { OmitType, ConstructorType } from 'types/helper.types';\nimport { bytesInInteger } from 'utils/common-utils/common-utils-number';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { SWARM_MESSAGE_SUBCLASS_VALIDATOR_USER_IDENTITY_SERIALIZED_MAX_LENGTH } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const';\n\nexport const runSwarmMessageFieldsValidator = () => {\n  describe('SwarmMessageSubclassFieldsValidator tests', () => {\n    it('check constructor with no options not throws', () => {\n      expect(() => {\n        new SwarmMessageSubclassFieldsValidator();\n      }).not.to.throw();\n    });\n\n    describe('validate user identity', () => {\n      let messageValidator: any;\n\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n      it('CentralAuthorityIdentity with UUID stringified - should not throw', () => {\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n            'https://google.com',\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString)\n        ).to.not.throw();\n      });\n      it('CentralAuthorityIdentity with UUID stringified but not valid - should throw', () => {\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n            'https://google.com',\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString + '--')\n        ).to.throw(AssertionError);\n      });\n      it('CentralAuthorityIdentity with UUID stringified but too large - should throw', () => {\n        const uidProviderURl = `https://go${new Array(\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_USER_IDENTITY_SERIALIZED_MAX_LENGTH\n        ).join('o')}ogle.com`;\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: uidProviderURl,\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString)\n        ).to.throw(AssertionError);\n      });\n      it('empty string - should throw', () => {\n        expect(() => messageValidator.validateUserIdentifier('')).to.throw(\n          AssertionError\n        );\n      });\n      it('empty - should throw', () => {\n        expect(() => messageValidator.validateUserIdentifier()).to.throw(\n          AssertionError\n        );\n        expect(() => messageValidator.validateUserIdentifier(null)).to.throw(\n          AssertionError\n        );\n      });\n    });\n\n    describe('validate payload', () => {\n      let messageValidator: any;\n\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n\n      const validatePayloadConstructorType = (\n        PayloadConstructor: ConstructorType<\n          OmitType<TSwarmMessagePayloadSerialized, string | number[]>\n        >\n      ) => {\n        it(`validate empty ${PayloadConstructor} - should throw`, () => {\n          const payload = new PayloadConstructor(0);\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} greater than max length - should throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES + 1\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} less than min length - should throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES - 1\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} greater than min length and less than the max length - should not throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES + 5\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.not.throw();\n        });\n      };\n\n      validatePayloadConstructorType(ArrayBuffer);\n      validatePayloadConstructorType(Uint8Array);\n      validatePayloadConstructorType(SharedArrayBuffer);\n\n      it(`validate empty number[] - should throw`, () => {\n        const payload: number[] = [];\n\n        expect(() => {\n          messageValidator.validatePayload(payload);\n        }).to.throw(AssertionError);\n      });\n\n      const generateArrayOfLength = <T = number>(len: number, it: T): T[] => {\n        const arr: T[] = [];\n        let idx = 0;\n\n        while ((idx += 1) < len) {\n          arr.push(it);\n        }\n        return arr;\n      };\n      const testArrayOfNumbers = (num: number) => {\n        const bytesInNumber = bytesInInteger(num);\n\n        if (typeof bytesInNumber !== 'number') {\n          throw new Error('Failed to calculate the bytes count for the number');\n        }\n\n        it(`validate empty number[] - should throw`, () => {\n          const payload: number[] = [];\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n\n        it(`validate not empty number[] greater than max length cause ${num} is ${bytesInNumber} bytes - should throw`, () => {\n          const payload: number[] = generateArrayOfLength(\n            Math.round(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES /\n                bytesInNumber\n            ) + 2,\n            num\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n\n        it(`validate not empty number[] less than max length cause ${num} is ${bytesInNumber} bytes - should not throw`, () => {\n          const payload: number[] = generateArrayOfLength(\n            Math.round(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES /\n                bytesInNumber\n            ) - 2,\n            num\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.not.throw();\n        });\n      };\n\n      testArrayOfNumbers(255);\n      testArrayOfNumbers(65537);\n      testArrayOfNumbers(4294967295);\n      testArrayOfNumbers(4294967296);\n\n      it('empty string - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload('');\n        }).to.throw();\n      });\n\n      it('string with length less than min - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload(\n            generateArrayOfLength<string>(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES - 1,\n              ''\n            )\n          );\n        }).to.throw(AssertionError);\n      });\n\n      it('string with length greater than max - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload(\n            generateArrayOfLength<string>(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES + 1,\n              ''\n            )\n          );\n        }).to.throw(AssertionError);\n      });\n\n      it('empty - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload();\n        }).to.throw(AssertionError);\n        expect(() => {\n          messageValidator.validatePayload(null);\n        }).to.throw(AssertionError);\n      });\n    });\n\n    describe('validate timestamps', () => {\n      let fieldsValidator: any;\n\n      beforeEach(() => {\n        fieldsValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n\n      it(`timestamp less than min on the ${SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds +\n        1} seconds - should throw`, () => {\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds -\n          1;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(lessThanMinTimestamp)\n        ).to.throw(AssertionError);\n      });\n\n      it('timestamp equal to minimum - should not throw cause an error allowed', () => {\n        const eqToMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(eqToMinTimestamp)\n        ).not.to.throw(AssertionError);\n      });\n\n      it(`timestamp less than min on the ${SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds -\n        1} - should not throw cause in the interval of error allowed`, () => {\n        const fieldsValidator = new SwarmMessageSubclassFieldsValidator({\n          timestampValidationOptions: {\n            ttlSeconds: 0,\n          },\n        });\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds +\n          1;\n\n        expect(() =>\n          (fieldsValidator as any).validateTimestamp(lessThanMinTimestamp)\n        ).to.not.throw(AssertionError);\n      });\n\n      it('timestamp is not an integer - should throw', () => {\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          0.1;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(lessThanMinTimestamp)\n        ).to.throw(AssertionError);\n      });\n\n      it('timestamp equals to the current - should not throw', () => {\n        expect(() =>\n          fieldsValidator.validateTimestamp(getDateNowInSeconds())\n        ).to.not.throw(AssertionError);\n      });\n    });\n\n    describe('validate type', () => {\n      const messageType1 = 'type1';\n      const messageType2 = 'type2';\n      const messageAllowedTypes = [messageType1, messageType2];\n      let messageValidator: any;\n\n      it('message validator constructor - shoult not throw', () => {\n        expect(\n          () =>\n            (messageValidator = new SwarmMessageSubclassFieldsValidator({\n              typesList: messageAllowedTypes,\n            }))\n        ).to.not.throw();\n      });\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator({\n          typesList: messageAllowedTypes,\n        });\n      });\n      it('message with allowed type - should not throw', () => {\n        expect(() =>\n          messageValidator.validateType(messageType1)\n        ).to.not.throw();\n        expect(() =>\n          messageValidator.validateType(messageType2)\n        ).to.not.throw();\n      });\n      it('message with not allowed type - should throw', () => {\n        expect(() =>\n          messageValidator.validateType(`${messageType1}-wrong`)\n        ).to.throw(AssertionError);\n        expect(() =>\n          messageValidator.validateType(`${messageType2}-wrong`)\n        ).to.throw(AssertionError);\n      });\n    });\n\n    describe('validate issuer', () => {\n      const messageIssuer1 = 'type1';\n      const messageIssuer2 = 'type2';\n      const messageAllowedIssuer = [messageIssuer1, messageIssuer2];\n      let messageValidator: any;\n\n      it('message validator constructor - shoult not throw', () => {\n        expect(\n          () =>\n            (messageValidator = new SwarmMessageSubclassFieldsValidator({\n              issuersList: messageAllowedIssuer,\n            }))\n        ).to.not.throw();\n      });\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator({\n          issuersList: messageAllowedIssuer,\n        });\n      });\n      it('message with allowed issuer - should not throw', () => {\n        expect(() =>\n          messageValidator.validateIssuer(messageIssuer1)\n        ).to.not.throw();\n        expect(() =>\n          messageValidator.validateIssuer(messageIssuer2)\n        ).to.not.throw();\n      });\n      it('message with not allowed issuer - should throw', () => {\n        expect(() =>\n          messageValidator.validateIssuer(`${messageIssuer1}-wrong`)\n        ).to.throw(AssertionError);\n        expect(() =>\n          messageValidator.validateIssuer(`${messageIssuer2}-wrong`)\n        ).to.throw(AssertionError);\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["1506","1507"],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",["1508"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],{"ruleId":"1509","severity":1,"message":"1510","line":2,"column":8,"nodeType":"1511","endLine":2,"endColumn":12},{"ruleId":"1509","severity":1,"message":"1512","line":5,"column":10,"nodeType":"1511","endLine":5,"endColumn":43},{"ruleId":"1509","severity":1,"message":"1513","line":6,"column":10,"nodeType":"1511","endLine":6,"endColumn":43},{"ruleId":"1509","severity":1,"message":"1514","line":8,"column":3,"nodeType":"1511","endLine":8,"endColumn":52},{"ruleId":"1509","severity":1,"message":"1515","line":9,"column":3,"nodeType":"1511","endLine":9,"endColumn":22},{"ruleId":"1509","severity":1,"message":"1516","line":12,"column":3,"nodeType":"1511","endLine":12,"endColumn":30},{"ruleId":"1509","severity":1,"message":"1517","line":13,"column":3,"nodeType":"1511","endLine":13,"endColumn":77},{"ruleId":"1509","severity":1,"message":"1518","line":15,"column":10,"nodeType":"1511","endLine":15,"endColumn":30},{"ruleId":"1509","severity":1,"message":"1519","line":16,"column":10,"nodeType":"1511","endLine":16,"endColumn":32},{"ruleId":"1509","severity":1,"message":"1520","line":17,"column":10,"nodeType":"1511","endLine":17,"endColumn":36},{"ruleId":"1509","severity":1,"message":"1521","line":19,"column":10,"nodeType":"1511","endLine":19,"endColumn":44},{"ruleId":"1509","severity":1,"message":"1522","line":20,"column":10,"nodeType":"1511","endLine":20,"endColumn":48},{"ruleId":"1509","severity":1,"message":"1523","line":21,"column":10,"nodeType":"1511","endLine":21,"endColumn":28},{"ruleId":"1509","severity":1,"message":"1524","line":22,"column":10,"nodeType":"1511","endLine":22,"endColumn":31},{"ruleId":"1509","severity":1,"message":"1525","line":23,"column":10,"nodeType":"1511","endLine":23,"endColumn":33},{"ruleId":"1509","severity":1,"message":"1526","line":24,"column":10,"nodeType":"1511","endLine":24,"endColumn":40},{"ruleId":"1509","severity":1,"message":"1527","line":25,"column":10,"nodeType":"1511","endLine":25,"endColumn":29},{"ruleId":"1509","severity":1,"message":"1528","line":26,"column":10,"nodeType":"1511","endLine":26,"endColumn":45},{"ruleId":"1509","severity":1,"message":"1529","line":27,"column":10,"nodeType":"1511","endLine":27,"endColumn":45},{"ruleId":"1509","severity":1,"message":"1530","line":28,"column":10,"nodeType":"1511","endLine":28,"endColumn":31},{"ruleId":"1509","severity":1,"message":"1531","line":29,"column":10,"nodeType":"1511","endLine":29,"endColumn":38},{"ruleId":"1509","severity":1,"message":"1532","line":44,"column":10,"nodeType":"1511","endLine":44,"endColumn":26},{"ruleId":"1509","severity":1,"message":"1533","line":45,"column":10,"nodeType":"1511","endLine":45,"endColumn":27},{"ruleId":"1509","severity":1,"message":"1534","line":46,"column":10,"nodeType":"1511","endLine":46,"endColumn":30},{"ruleId":"1509","severity":1,"message":"1535","line":47,"column":10,"nodeType":"1511","endLine":47,"endColumn":36},{"ruleId":"1509","severity":1,"message":"1536","line":48,"column":10,"nodeType":"1511","endLine":48,"endColumn":44},{"ruleId":"1509","severity":1,"message":"1537","line":49,"column":10,"nodeType":"1511","endLine":49,"endColumn":38},{"ruleId":"1509","severity":1,"message":"1538","line":50,"column":10,"nodeType":"1511","endLine":50,"endColumn":32},{"ruleId":"1509","severity":1,"message":"1539","line":2,"column":10,"nodeType":"1511","endLine":2,"endColumn":13},{"ruleId":"1540","severity":1,"message":"1541","line":9,"column":56,"nodeType":"1542","messageId":"1543","endLine":9,"endColumn":59},{"ruleId":"1540","severity":1,"message":"1541","line":15,"column":55,"nodeType":"1542","messageId":"1543","endLine":15,"endColumn":58},{"ruleId":"1544","severity":1,"message":"1545","line":87,"column":15,"nodeType":"1546","messageId":"1547","endLine":87,"endColumn":27},{"ruleId":"1509","severity":1,"message":"1548","line":32,"column":9,"nodeType":"1511","endLine":32,"endColumn":15},{"ruleId":"1509","severity":1,"message":"1549","line":8,"column":10,"nodeType":"1511","endLine":8,"endColumn":20},{"ruleId":"1540","severity":1,"message":"1541","line":77,"column":27,"nodeType":"1542","messageId":"1543","endLine":77,"endColumn":30},{"ruleId":"1540","severity":1,"message":"1541","line":78,"column":39,"nodeType":"1542","messageId":"1543","endLine":78,"endColumn":42},{"ruleId":"1544","severity":1,"message":"1545","line":98,"column":36,"nodeType":"1546","messageId":"1547","endLine":98,"endColumn":40},{"ruleId":"1540","severity":1,"message":"1541","line":130,"column":38,"nodeType":"1542","messageId":"1543","endLine":130,"endColumn":41},{"ruleId":"1509","severity":1,"message":"1550","line":38,"column":7,"nodeType":"1511","endLine":38,"endColumn":17},{"ruleId":"1551","severity":1,"message":"1552","line":63,"column":3,"nodeType":"1553","endLine":63,"endColumn":19},{"ruleId":"1554","severity":1,"message":"1555","line":63,"column":17,"nodeType":"1556","messageId":"1557"},{"ruleId":"1509","severity":1,"message":"1558","line":3,"column":3,"nodeType":"1511","endLine":3,"endColumn":41},{"ruleId":"1509","severity":1,"message":"1559","line":1,"column":10,"nodeType":"1511","endLine":1,"endColumn":39},{"ruleId":"1540","severity":1,"message":"1541","line":2,"column":7,"nodeType":"1542","messageId":"1543","endLine":2,"endColumn":10},{"ruleId":"1540","severity":1,"message":"1541","line":13,"column":12,"nodeType":"1542","messageId":"1543","endLine":13,"endColumn":15},{"ruleId":"1540","severity":1,"message":"1541","line":47,"column":28,"nodeType":"1542","messageId":"1543","endLine":47,"endColumn":31},{"ruleId":"1540","severity":1,"message":"1541","line":67,"column":28,"nodeType":"1542","messageId":"1543","endLine":67,"endColumn":31},{"ruleId":"1540","severity":1,"message":"1541","line":35,"column":58,"nodeType":"1542","messageId":"1543","endLine":35,"endColumn":61},{"ruleId":"1544","severity":1,"message":"1545","line":44,"column":14,"nodeType":"1546","messageId":"1547","endLine":44,"endColumn":19},{"ruleId":"1544","severity":1,"message":"1545","line":44,"column":14,"nodeType":"1546","messageId":"1547","endLine":44,"endColumn":18},{"ruleId":"1540","severity":1,"message":"1541","line":158,"column":29,"nodeType":"1542","messageId":"1543","endLine":158,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":188,"column":29,"nodeType":"1542","messageId":"1543","endLine":188,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":225,"column":20,"nodeType":"1542","messageId":"1543","endLine":225,"endColumn":23},{"ruleId":"1509","severity":1,"message":"1560","line":4,"column":10,"nodeType":"1511","endLine":4,"endColumn":30},{"ruleId":"1540","severity":1,"message":"1541","line":37,"column":32,"nodeType":"1542","messageId":"1543","endLine":37,"endColumn":35},{"ruleId":"1544","severity":1,"message":"1545","line":103,"column":13,"nodeType":"1546","messageId":"1547","endLine":103,"endColumn":23},{"ruleId":"1544","severity":1,"message":"1545","line":103,"column":13,"nodeType":"1546","messageId":"1547","endLine":103,"endColumn":22},{"ruleId":"1544","severity":1,"message":"1545","line":134,"column":13,"nodeType":"1546","messageId":"1547","endLine":134,"endColumn":23},{"ruleId":"1544","severity":1,"message":"1545","line":134,"column":13,"nodeType":"1546","messageId":"1547","endLine":134,"endColumn":22},{"ruleId":"1544","severity":1,"message":"1545","line":152,"column":30,"nodeType":"1546","messageId":"1547","endLine":152,"endColumn":40},{"ruleId":"1544","severity":1,"message":"1545","line":152,"column":30,"nodeType":"1546","messageId":"1547","endLine":152,"endColumn":39},{"ruleId":"1540","severity":1,"message":"1541","line":19,"column":58,"nodeType":"1542","messageId":"1543","endLine":19,"endColumn":61},{"ruleId":"1540","severity":1,"message":"1541","line":34,"column":13,"nodeType":"1542","messageId":"1543","endLine":34,"endColumn":16},{"ruleId":"1540","severity":1,"message":"1541","line":64,"column":13,"nodeType":"1542","messageId":"1543","endLine":64,"endColumn":16},{"ruleId":"1540","severity":1,"message":"1541","line":87,"column":15,"nodeType":"1542","messageId":"1543","endLine":87,"endColumn":18},{"ruleId":"1509","severity":1,"message":"1561","line":11,"column":3,"nodeType":"1511","endLine":11,"endColumn":23},{"ruleId":"1540","severity":1,"message":"1541","line":185,"column":30,"nodeType":"1542","messageId":"1543","endLine":185,"endColumn":33},{"ruleId":"1540","severity":1,"message":"1541","line":218,"column":28,"nodeType":"1542","messageId":"1543","endLine":218,"endColumn":31},{"ruleId":"1540","severity":1,"message":"1541","line":18,"column":62,"nodeType":"1542","messageId":"1543","endLine":18,"endColumn":65},{"ruleId":"1540","severity":1,"message":"1541","line":29,"column":22,"nodeType":"1542","messageId":"1543","endLine":29,"endColumn":25},{"ruleId":"1540","severity":1,"message":"1541","line":75,"column":22,"nodeType":"1542","messageId":"1543","endLine":75,"endColumn":25},{"ruleId":"1540","severity":1,"message":"1541","line":114,"column":38,"nodeType":"1542","messageId":"1543","endLine":114,"endColumn":41},{"ruleId":"1540","severity":1,"message":"1541","line":6,"column":16,"nodeType":"1542","messageId":"1543","endLine":6,"endColumn":19},{"ruleId":"1509","severity":1,"message":"1562","line":546,"column":38,"nodeType":"1511","endLine":546,"endColumn":44},{"ruleId":"1509","severity":1,"message":"1562","line":858,"column":38,"nodeType":"1511","endLine":858,"endColumn":44},{"ruleId":"1540","severity":1,"message":"1541","line":972,"column":34,"nodeType":"1542","messageId":"1543","endLine":972,"endColumn":37},{"ruleId":"1509","severity":1,"message":"1563","line":1,"column":8,"nodeType":"1511","endLine":1,"endColumn":17},{"ruleId":"1509","severity":1,"message":"1564","line":5,"column":3,"nodeType":"1511","endLine":5,"endColumn":70},{"ruleId":"1540","severity":1,"message":"1541","line":24,"column":40,"nodeType":"1542","messageId":"1543","endLine":24,"endColumn":43},{"ruleId":"1540","severity":1,"message":"1541","line":22,"column":20,"nodeType":"1542","messageId":"1543","endLine":22,"endColumn":23},{"ruleId":"1540","severity":1,"message":"1541","line":108,"column":38,"nodeType":"1542","messageId":"1543","endLine":108,"endColumn":41},{"ruleId":"1540","severity":1,"message":"1541","line":150,"column":46,"nodeType":"1542","messageId":"1543","endLine":150,"endColumn":49},{"ruleId":"1551","severity":1,"message":"1552","line":4,"column":3,"nodeType":"1553","endLine":4,"endColumn":70},{"ruleId":"1554","severity":1,"message":"1555","line":4,"column":68,"nodeType":"1556","messageId":"1557"},{"ruleId":"1509","severity":1,"message":"1565","line":1,"column":8,"nodeType":"1511","endLine":1,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":161,"column":33,"nodeType":"1542","messageId":"1543","endLine":161,"endColumn":36},{"ruleId":"1540","severity":1,"message":"1541","line":268,"column":14,"nodeType":"1542","messageId":"1543","endLine":268,"endColumn":17},{"ruleId":"1544","severity":1,"message":"1545","line":271,"column":24,"nodeType":"1546","messageId":"1547","endLine":271,"endColumn":32},{"ruleId":"1544","severity":1,"message":"1545","line":289,"column":19,"nodeType":"1546","messageId":"1547","endLine":289,"endColumn":28},{"ruleId":"1540","severity":1,"message":"1541","line":292,"column":26,"nodeType":"1542","messageId":"1543","endLine":292,"endColumn":29},{"ruleId":"1544","severity":1,"message":"1545","line":511,"column":26,"nodeType":"1546","messageId":"1547","endLine":511,"endColumn":34},{"ruleId":"1540","severity":1,"message":"1541","line":84,"column":11,"nodeType":"1542","messageId":"1543","endLine":84,"endColumn":14},{"ruleId":"1544","severity":1,"message":"1545","line":94,"column":23,"nodeType":"1546","messageId":"1547","endLine":94,"endColumn":32},{"ruleId":"1544","severity":1,"message":"1545","line":100,"column":27,"nodeType":"1546","messageId":"1547","endLine":100,"endColumn":36},{"ruleId":"1540","severity":1,"message":"1541","line":100,"column":40,"nodeType":"1542","messageId":"1543","endLine":100,"endColumn":43},{"ruleId":"1554","severity":1,"message":"1566","line":158,"column":23,"nodeType":"1556","messageId":"1557"},{"ruleId":"1509","severity":1,"message":"1567","line":2,"column":10,"nodeType":"1511","endLine":2,"endColumn":26},{"ruleId":"1540","severity":1,"message":"1541","line":76,"column":24,"nodeType":"1542","messageId":"1543","endLine":76,"endColumn":27},{"ruleId":"1540","severity":1,"message":"1541","line":271,"column":22,"nodeType":"1542","messageId":"1543","endLine":271,"endColumn":25},{"ruleId":"1540","severity":1,"message":"1541","line":286,"column":42,"nodeType":"1542","messageId":"1543","endLine":286,"endColumn":45},{"ruleId":"1509","severity":1,"message":"1568","line":3,"column":3,"nodeType":"1511","endLine":3,"endColumn":16},{"ruleId":"1509","severity":1,"message":"1569","line":4,"column":3,"nodeType":"1511","endLine":4,"endColumn":16},{"ruleId":"1509","severity":1,"message":"1570","line":5,"column":3,"nodeType":"1511","endLine":5,"endColumn":24},{"ruleId":"1509","severity":1,"message":"1571","line":6,"column":3,"nodeType":"1511","endLine":6,"endColumn":26},{"ruleId":"1509","severity":1,"message":"1572","line":7,"column":3,"nodeType":"1511","endLine":7,"endColumn":18},{"ruleId":"1509","severity":1,"message":"1573","line":8,"column":3,"nodeType":"1511","endLine":8,"endColumn":20},{"ruleId":"1509","severity":1,"message":"1574","line":9,"column":3,"nodeType":"1511","endLine":9,"endColumn":22},{"ruleId":"1509","severity":1,"message":"1575","line":11,"column":10,"nodeType":"1511","endLine":11,"endColumn":23},{"ruleId":"1509","severity":1,"message":"1576","line":13,"column":10,"nodeType":"1511","endLine":13,"endColumn":29},{"ruleId":"1509","severity":1,"message":"1577","line":23,"column":7,"nodeType":"1511","endLine":23,"endColumn":21},{"ruleId":"1509","severity":1,"message":"1578","line":3,"column":8,"nodeType":"1511","endLine":3,"endColumn":13},{"ruleId":"1540","severity":1,"message":"1541","line":15,"column":6,"nodeType":"1542","messageId":"1543","endLine":15,"endColumn":9},{"ruleId":"1540","severity":1,"message":"1541","line":25,"column":48,"nodeType":"1542","messageId":"1543","endLine":25,"endColumn":51},{"ruleId":"1540","severity":1,"message":"1541","line":8,"column":23,"nodeType":"1542","messageId":"1543","endLine":8,"endColumn":26},{"ruleId":"1540","severity":1,"message":"1541","line":15,"column":23,"nodeType":"1542","messageId":"1543","endLine":15,"endColumn":26},{"ruleId":"1540","severity":1,"message":"1541","line":16,"column":21,"nodeType":"1542","messageId":"1543","endLine":16,"endColumn":24},{"ruleId":"1540","severity":1,"message":"1541","line":40,"column":25,"nodeType":"1542","messageId":"1543","endLine":40,"endColumn":28},{"ruleId":"1540","severity":1,"message":"1541","line":48,"column":18,"nodeType":"1542","messageId":"1543","endLine":48,"endColumn":21},{"ruleId":"1540","severity":1,"message":"1541","line":1,"column":37,"nodeType":"1542","messageId":"1543","endLine":1,"endColumn":40},{"ruleId":"1540","severity":1,"message":"1541","line":5,"column":34,"nodeType":"1542","messageId":"1543","endLine":5,"endColumn":37},{"ruleId":"1509","severity":1,"message":"1579","line":23,"column":3,"nodeType":"1511","endLine":23,"endColumn":8},{"ruleId":"1509","severity":1,"message":"1580","line":24,"column":3,"nodeType":"1511","endLine":24,"endColumn":9},{"ruleId":"1540","severity":1,"message":"1541","line":32,"column":8,"nodeType":"1542","messageId":"1543","endLine":32,"endColumn":11},{"ruleId":"1509","severity":1,"message":"1581","line":11,"column":24,"nodeType":"1511","endLine":11,"endColumn":33},{"ruleId":"1509","severity":1,"message":"1582","line":4,"column":3,"nodeType":"1511","endLine":4,"endColumn":21},{"ruleId":"1540","severity":1,"message":"1541","line":10,"column":41,"nodeType":"1542","messageId":"1543","endLine":10,"endColumn":44},{"ruleId":"1540","severity":1,"message":"1541","line":14,"column":41,"nodeType":"1542","messageId":"1543","endLine":14,"endColumn":44},{"ruleId":"1540","severity":1,"message":"1541","line":20,"column":44,"nodeType":"1542","messageId":"1543","endLine":20,"endColumn":47},{"ruleId":"1540","severity":1,"message":"1541","line":24,"column":43,"nodeType":"1542","messageId":"1543","endLine":24,"endColumn":46},{"ruleId":"1540","severity":1,"message":"1541","line":28,"column":47,"nodeType":"1542","messageId":"1543","endLine":28,"endColumn":50},{"ruleId":"1540","severity":1,"message":"1541","line":15,"column":32,"nodeType":"1542","messageId":"1543","endLine":15,"endColumn":35},{"ruleId":"1540","severity":1,"message":"1541","line":17,"column":42,"nodeType":"1542","messageId":"1543","endLine":17,"endColumn":45},{"ruleId":"1540","severity":1,"message":"1541","line":25,"column":58,"nodeType":"1542","messageId":"1543","endLine":25,"endColumn":61},{"ruleId":"1540","severity":1,"message":"1541","line":58,"column":8,"nodeType":"1542","messageId":"1543","endLine":58,"endColumn":11},{"ruleId":"1540","severity":1,"message":"1541","line":81,"column":36,"nodeType":"1542","messageId":"1543","endLine":81,"endColumn":39},{"ruleId":"1540","severity":1,"message":"1541","line":84,"column":35,"nodeType":"1542","messageId":"1543","endLine":84,"endColumn":38},{"ruleId":"1509","severity":1,"message":"1581","line":14,"column":24,"nodeType":"1511","endLine":14,"endColumn":33},{"ruleId":"1540","severity":1,"message":"1541","line":23,"column":8,"nodeType":"1542","messageId":"1543","endLine":23,"endColumn":11},{"ruleId":"1509","severity":1,"message":"1583","line":3,"column":3,"nodeType":"1511","endLine":3,"endColumn":68},{"ruleId":"1509","severity":1,"message":"1584","line":12,"column":3,"nodeType":"1511","endLine":12,"endColumn":33},{"ruleId":"1509","severity":1,"message":"1585","line":1,"column":10,"nodeType":"1511","endLine":1,"endColumn":38},{"ruleId":"1509","severity":1,"message":"1586","line":2,"column":10,"nodeType":"1511","endLine":2,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":7,"column":66,"nodeType":"1542","messageId":"1543","endLine":7,"endColumn":69},{"ruleId":"1540","severity":1,"message":"1541","line":16,"column":57,"nodeType":"1542","messageId":"1543","endLine":16,"endColumn":60},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":"1509","severity":1,"message":"1588","line":1,"column":10,"nodeType":"1511","endLine":1,"endColumn":37},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":"1540","severity":1,"message":"1541","line":19,"column":25,"nodeType":"1542","messageId":"1543","endLine":19,"endColumn":28},{"ruleId":"1589","severity":2,"message":"1590","line":15,"column":16,"nodeType":"1591","messageId":"1592","endLine":15,"endColumn":34},{"ruleId":"1589","severity":2,"message":"1590","line":21,"column":14,"nodeType":"1591","messageId":"1592","endLine":21,"endColumn":39},{"ruleId":"1589","severity":2,"message":"1590","line":58,"column":14,"nodeType":"1591","messageId":"1592","endLine":58,"endColumn":39},{"ruleId":null,"fatal":true,"severity":2,"message":"1593"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":"1540","severity":1,"message":"1541","line":143,"column":14,"nodeType":"1542","messageId":"1543","endLine":143,"endColumn":17},{"ruleId":"1544","severity":1,"message":"1545","line":206,"column":31,"nodeType":"1546","messageId":"1547","endLine":206,"endColumn":43},{"ruleId":"1544","severity":1,"message":"1545","line":231,"column":35,"nodeType":"1546","messageId":"1547","endLine":231,"endColumn":56},{"ruleId":"1544","severity":1,"message":"1545","line":244,"column":34,"nodeType":"1546","messageId":"1547","endLine":244,"endColumn":46},{"ruleId":"1540","severity":1,"message":"1541","line":388,"column":39,"nodeType":"1542","messageId":"1543","endLine":388,"endColumn":42},{"ruleId":"1544","severity":1,"message":"1545","line":546,"column":10,"nodeType":"1546","messageId":"1547","endLine":546,"endColumn":38},{"ruleId":"1540","severity":1,"message":"1541","line":3,"column":42,"nodeType":"1542","messageId":"1543","endLine":3,"endColumn":45},{"ruleId":"1540","severity":1,"message":"1541","line":34,"column":71,"nodeType":"1542","messageId":"1543","endLine":34,"endColumn":74},{"ruleId":"1509","severity":1,"message":"1594","line":391,"column":9,"nodeType":"1511","endLine":391,"endColumn":21},{"ruleId":"1544","severity":1,"message":"1545","line":187,"column":14,"nodeType":"1546","messageId":"1547","endLine":187,"endColumn":47},{"ruleId":"1544","severity":1,"message":"1545","line":213,"column":26,"nodeType":"1546","messageId":"1547","endLine":213,"endColumn":76},{"ruleId":"1544","severity":1,"message":"1545","line":213,"column":26,"nodeType":"1546","messageId":"1547","endLine":213,"endColumn":75},{"ruleId":"1540","severity":1,"message":"1541","line":322,"column":17,"nodeType":"1542","messageId":"1543","endLine":322,"endColumn":20},{"ruleId":"1540","severity":1,"message":"1541","line":7,"column":18,"nodeType":"1542","messageId":"1543","endLine":7,"endColumn":21},{"ruleId":"1595","severity":1,"message":"1596","line":296,"column":21,"nodeType":"1597","messageId":"1598","endLine":305,"endColumn":16},{"ruleId":"1595","severity":1,"message":"1596","line":306,"column":22,"nodeType":"1597","messageId":"1598","endLine":309,"endColumn":16},{"ruleId":"1509","severity":1,"message":"1599","line":1,"column":10,"nodeType":"1511","endLine":1,"endColumn":44},{"ruleId":"1540","severity":1,"message":"1541","line":10,"column":19,"nodeType":"1542","messageId":"1543","endLine":10,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":26,"column":19,"nodeType":"1542","messageId":"1543","endLine":26,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":4,"column":28,"nodeType":"1542","messageId":"1543","endLine":4,"endColumn":31},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":null,"fatal":true,"severity":2,"message":"1587"},{"ruleId":"1540","severity":1,"message":"1541","line":41,"column":60,"nodeType":"1542","messageId":"1543","endLine":41,"endColumn":63},{"ruleId":"1540","severity":1,"message":"1541","line":44,"column":53,"nodeType":"1542","messageId":"1543","endLine":44,"endColumn":56},{"ruleId":"1540","severity":1,"message":"1541","line":47,"column":52,"nodeType":"1542","messageId":"1543","endLine":47,"endColumn":55},{"ruleId":"1540","severity":1,"message":"1541","line":76,"column":26,"nodeType":"1542","messageId":"1543","endLine":76,"endColumn":29},{"ruleId":"1540","severity":1,"message":"1541","line":77,"column":26,"nodeType":"1542","messageId":"1543","endLine":77,"endColumn":29},{"ruleId":"1540","severity":1,"message":"1541","line":82,"column":19,"nodeType":"1542","messageId":"1543","endLine":82,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":83,"column":19,"nodeType":"1542","messageId":"1543","endLine":83,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":88,"column":18,"nodeType":"1542","messageId":"1543","endLine":88,"endColumn":21},{"ruleId":"1540","severity":1,"message":"1541","line":89,"column":18,"nodeType":"1542","messageId":"1543","endLine":89,"endColumn":21},{"ruleId":"1540","severity":1,"message":"1541","line":94,"column":19,"nodeType":"1542","messageId":"1543","endLine":94,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":95,"column":19,"nodeType":"1542","messageId":"1543","endLine":95,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":212,"column":19,"nodeType":"1542","messageId":"1543","endLine":212,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":218,"column":19,"nodeType":"1542","messageId":"1543","endLine":218,"endColumn":22},{"ruleId":"1540","severity":1,"message":"1541","line":224,"column":26,"nodeType":"1542","messageId":"1543","endLine":224,"endColumn":29},{"ruleId":"1540","severity":1,"message":"1541","line":8,"column":48,"nodeType":"1542","messageId":"1543","endLine":8,"endColumn":51},{"ruleId":"1540","severity":1,"message":"1541","line":9,"column":40,"nodeType":"1542","messageId":"1543","endLine":9,"endColumn":43},{"ruleId":"1540","severity":1,"message":"1541","line":10,"column":41,"nodeType":"1542","messageId":"1543","endLine":10,"endColumn":44},{"ruleId":"1509","severity":1,"message":"1600","line":70,"column":17,"nodeType":"1511","endLine":70,"endColumn":24},{"ruleId":"1540","severity":1,"message":"1541","line":30,"column":29,"nodeType":"1542","messageId":"1543","endLine":30,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":101,"column":29,"nodeType":"1542","messageId":"1543","endLine":101,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":257,"column":28,"nodeType":"1542","messageId":"1543","endLine":257,"endColumn":31},{"ruleId":"1540","severity":1,"message":"1541","line":297,"column":31,"nodeType":"1542","messageId":"1543","endLine":297,"endColumn":34},{"ruleId":"1540","severity":1,"message":"1541","line":322,"column":29,"nodeType":"1542","messageId":"1543","endLine":322,"endColumn":32},{"ruleId":"1540","severity":1,"message":"1541","line":359,"column":29,"nodeType":"1542","messageId":"1543","endLine":359,"endColumn":32},{"ruleId":"1544","severity":1,"message":"1545","line":144,"column":26,"nodeType":"1546","messageId":"1547","endLine":144,"endColumn":39},{"ruleId":"1544","severity":1,"message":"1545","line":168,"column":26,"nodeType":"1546","messageId":"1547","endLine":168,"endColumn":39},{"ruleId":"1509","severity":1,"message":"1559","line":4,"column":3,"nodeType":"1511","endLine":4,"endColumn":32},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","'runTestFirebaseConnectionDatabase' is defined but never used.","'runTestFirebaseCredentialsStorage' is defined but never used.","'runTestCAIdentityWithAuthorityProviderGeneratorV1' is defined but never used.","'runTestCAIdentityV1' is defined but never used.","'runTestCAConnectionFirebase' is defined but never used.","'runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider' is defined but never used.","'runTestErrorExtended' is defined but never used.","'runTestSwarmConnection' is defined but never used.","'runTestSwarmConnectionIPFS' is defined but never used.","'runTestSwarmStoreOrbitDBConnection' is defined but never used.","'runTestValidateMessagingTimestampsTest' is defined but never used.","'runTestHttpRequest' is defined but never used.","'runTestPseudoNtpClass' is defined but never used.","'runTestClientTimeSynced' is defined but never used.","'runSwarmMessageFieldsValidator' is defined but never used.","'runTestCAIdentityV2' is defined but never used.","'runCACredentialsIdentityStorageTest' is defined but never used.","'runTestCAConnectionsUtilsValidators' is defined but never used.","'runTestCommonUtilsURL' is defined but never used.","'runTestCAConnectionsPoolTest' is defined but never used.","'runTestSaltUtils' is defined but never used.","'testKeyGeneration' is defined but never used.","'runTestSecretStorage' is defined but never used.","'runTestEncryptionKeysUtils' is defined but never used.","'runTestAuthorityStorageCurrentUser' is defined but never used.","'runTestCentralAuthorityUtils' is defined but never used.","'runTestOpenStorageTest' is defined but never used.","'any' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'CA_CONNECTION_STATUS' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'status' is assigned a value but never used.","'Multiaddr' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","'CentralAuthorityIdentity' is defined but never used.","Unexpected empty async method 'load'.","'IdentityProvider' is defined but never used.","'encryptNative' is defined but never used.","'decryptNative' is defined but never used.","'exportKeyPairAsString' is defined but never used.","'importKeyPairFromString' is defined but never used.","'encryptToString' is defined but never used.","'decryptFromString' is defined but never used.","'encryptToTypedArray' is defined but never used.","'calculateHash' is defined but never used.","'arrayBufferToBase64' is defined but never used.","'testEncryption' is assigned a value but never used.","'Mocha' is defined but never used.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'exportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used.","Parsing error: path.replace is not a function","'generateCryptoCredentialsV1' is defined but never used.","@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.","MemberExpression","unbound","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js.\nThe file must be included in at least one of the projects provided.","'signInResult' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'timeout' is assigned a value but never used."]