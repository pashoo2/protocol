[{"/home/paul/projects/decentrilized-protocol/src/App.tsx":"1","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"2","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"3","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"4","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"5","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"6","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"7","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"8","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"9","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"10","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"11","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"12","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"13","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"14","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"15","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"16","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"17","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"18","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"19","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"20","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"21","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"22","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"23","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"24","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"25","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"26","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"27","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"28","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"29","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"30","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"31","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"32","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"33","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"34","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"35","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"36","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"37","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"38","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"39","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"40","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"41","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"42","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"43","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"44","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"45","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts":"46","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"47","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"48","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"49","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"50","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"51","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"52","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"53","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"54","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"55","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"56","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-server-api/central-authority-connection-server-api.ts":"57","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"58","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"59","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"60","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.const.ts":"61","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.ts":"62","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-identity-storage.types.ts":"63","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials.const.ts":"64","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials.ts":"65","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"66","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"67","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"68","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"69","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"70","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"71","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"72","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"73","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"74","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"75","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"76","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"77","/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-class.ts":"78","/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-class.types.ts":"79","/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"80","/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"81","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"82","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts":"83","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"84","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.const.ts":"85","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.ts":"86","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"87","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.ts":"88","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-storage-provider/secret-storage-local-storage-provider.ts":"89","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-session-storage-provider/secret-storage-session-storage-provider.ts":"90","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"91","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts":"92","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"93","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"94","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"95","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"96","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"97","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"98","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"99","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"100","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"101","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"102","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"103","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"104","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"105","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"106","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"107","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"108","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"109","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"110","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"111","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"112","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"113","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"114","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts":"115","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts":"116","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts":"117","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts":"118","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts":"119","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts":"120","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts":"121","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts":"122","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts":"123","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts":"124","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"125","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"126","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"127","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"128","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"129","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"130","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"131","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"132","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"133","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"134","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"135","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"136","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"137","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"138","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"139","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"140","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"141","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"142","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"143","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"144","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"145","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"146","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts":"147","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"148","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"149","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"150","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-common/const-validation-values-messaging-common.ts":"151","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-common/const-validation-values-messaging-common.types.ts":"152","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"153","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-timestamp.ts":"154","/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts":"155","/home/paul/projects/decentrilized-protocol/src/index.tsx":"156","/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts":"157","/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts":"158","/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts":"159","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts":"160","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"161","/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts":"162","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts":"163","/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts":"164","/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts":"165","/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts":"166","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts":"167","/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts":"168","/home/paul/projects/decentrilized-protocol/src/types/main.types.ts":"169","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts":"170","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts":"171","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts":"172","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts":"173","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts":"174","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts":"175","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts":"176","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts":"177","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts":"178","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"179","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"180","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"181","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts":"182","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"183","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"184","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts":"185","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"186","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts":"187","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"188","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"189","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"190","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"191","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"192","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"193","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts":"194","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"195","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"196","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts":"197","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts":"198","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"199","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"200","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts":"201","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"202","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"203","/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts":"204","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"205","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"206","/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts":"207","/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"208","/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts":"209","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts":"210","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts":"211","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts":"212","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts":"213","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts":"214","/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts":"215","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts":"216","/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts":"217","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"218","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts":"219","/home/paul/projects/decentrilized-protocol/src/App.test.tsx":"220","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts":"221","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts":"222","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts":"223","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts":"224","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts":"225","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.utils.ts":"226","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts":"227","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-identity.test.ts":"228","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts":"229","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts":"230","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts":"231","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts":"232","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts":"233","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts":"234","/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts":"235","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts":"236","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts":"237","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js":"238","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts":"239","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts":"240","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts":"241","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts":"242","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts":"243","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts":"244","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts":"245","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"246","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"247","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"248","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"249","/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts":"250"},{"size":3663,"mtime":1574970452495,"results":"251","hashOfConfig":"252"},{"size":578,"mtime":1574620670429,"results":"253","hashOfConfig":"252"},{"size":235,"mtime":1574620670429,"results":"254","hashOfConfig":"252"},{"size":1329,"mtime":1574797996119,"results":"255","hashOfConfig":"252"},{"size":2819,"mtime":1574797996123,"results":"256","hashOfConfig":"252"},{"size":1636,"mtime":1574620670433,"results":"257","hashOfConfig":"252"},{"size":3466,"mtime":1574797996123,"results":"258","hashOfConfig":"252"},{"size":4421,"mtime":1574797996123,"results":"259","hashOfConfig":"252"},{"size":1311,"mtime":1574797996123,"results":"260","hashOfConfig":"252"},{"size":7950,"mtime":1574797996123,"results":"261","hashOfConfig":"252"},{"size":1874,"mtime":1574797996123,"results":"262","hashOfConfig":"252"},{"size":2547,"mtime":1574797996123,"results":"263","hashOfConfig":"252"},{"size":728,"mtime":1574620670433,"results":"264","hashOfConfig":"252"},{"size":1648,"mtime":1574620670433,"results":"265","hashOfConfig":"252"},{"size":191,"mtime":1574620670433,"results":"266","hashOfConfig":"252"},{"size":2582,"mtime":1574797996123,"results":"267","hashOfConfig":"252"},{"size":978,"mtime":1574620670433,"results":"268","hashOfConfig":"252"},{"size":58,"mtime":1574620670433,"results":"269","hashOfConfig":"252"},{"size":2147,"mtime":1574797996123,"results":"270","hashOfConfig":"252"},{"size":216,"mtime":1574620670433,"results":"271","hashOfConfig":"252"},{"size":1301,"mtime":1574620670433,"results":"272","hashOfConfig":"252"},{"size":66,"mtime":1574620670433,"results":"273","hashOfConfig":"252"},{"size":2176,"mtime":1574620670433,"results":"274","hashOfConfig":"252"},{"size":1053,"mtime":1574620670433,"results":"275","hashOfConfig":"252"},{"size":751,"mtime":1574620670433,"results":"276","hashOfConfig":"252"},{"size":187,"mtime":1574620670437,"results":"277","hashOfConfig":"252"},{"size":1299,"mtime":1574620670437,"results":"278","hashOfConfig":"252"},{"size":556,"mtime":1574797996123,"results":"279","hashOfConfig":"252"},{"size":224,"mtime":1574620670437,"results":"280","hashOfConfig":"252"},{"size":379,"mtime":1574620670437,"results":"281","hashOfConfig":"252"},{"size":2670,"mtime":1574620670437,"results":"282","hashOfConfig":"252"},{"size":384,"mtime":1574620670437,"results":"283","hashOfConfig":"252"},{"size":1406,"mtime":1574620670437,"results":"284","hashOfConfig":"252"},{"size":495,"mtime":1574797996123,"results":"285","hashOfConfig":"252"},{"size":215,"mtime":1574620670437,"results":"286","hashOfConfig":"252"},{"size":340,"mtime":1574620670437,"results":"287","hashOfConfig":"252"},{"size":3790,"mtime":1574620670437,"results":"288","hashOfConfig":"252"},{"size":1449,"mtime":1574620670437,"results":"289","hashOfConfig":"252"},{"size":567,"mtime":1574797996123,"results":"290","hashOfConfig":"252"},{"size":224,"mtime":1574620670437,"results":"291","hashOfConfig":"252"},{"size":76,"mtime":1574620670437,"results":"292","hashOfConfig":"252"},{"size":3882,"mtime":1574620670437,"results":"293","hashOfConfig":"252"},{"size":578,"mtime":1574620670437,"results":"294","hashOfConfig":"252"},{"size":5894,"mtime":1574797996123,"results":"295","hashOfConfig":"252"},{"size":1706,"mtime":1574620670441,"results":"296","hashOfConfig":"252"},{"size":33,"mtime":1574620670441,"results":"297","hashOfConfig":"252"},{"size":311,"mtime":1574620670441,"results":"298","hashOfConfig":"252"},{"size":14274,"mtime":1574797996123,"results":"299","hashOfConfig":"252"},{"size":870,"mtime":1574620670441,"results":"300","hashOfConfig":"252"},{"size":145,"mtime":1574620670441,"results":"301","hashOfConfig":"252"},{"size":3894,"mtime":1574620670441,"results":"302","hashOfConfig":"252"},{"size":110,"mtime":1574620670441,"results":"303","hashOfConfig":"252"},{"size":77,"mtime":1574620670441,"results":"304","hashOfConfig":"252"},{"size":75,"mtime":1574620670441,"results":"305","hashOfConfig":"252"},{"size":32290,"mtime":1574797996123,"results":"306","hashOfConfig":"252"},{"size":306,"mtime":1574620670441,"results":"307","hashOfConfig":"252"},{"size":894,"mtime":1574797996123,"results":"308","hashOfConfig":"252"},{"size":385,"mtime":1574620670441,"results":"309","hashOfConfig":"252"},{"size":67,"mtime":1574620670441,"results":"310","hashOfConfig":"252"},{"size":2627,"mtime":1574620670441,"results":"311","hashOfConfig":"252"},{"size":2157,"mtime":1574620670441,"results":"312","hashOfConfig":"252"},{"size":14554,"mtime":1574620670445,"results":"313","hashOfConfig":"252"},{"size":2915,"mtime":1574620670445,"results":"314","hashOfConfig":"252"},{"size":1395,"mtime":1574620670445,"results":"315","hashOfConfig":"252"},{"size":12329,"mtime":1574620670445,"results":"316","hashOfConfig":"252"},{"size":3891,"mtime":1574620670445,"results":"317","hashOfConfig":"252"},{"size":3547,"mtime":1574797996123,"results":"318","hashOfConfig":"252"},{"size":5462,"mtime":1574797996123,"results":"319","hashOfConfig":"252"},{"size":4913,"mtime":1574620670445,"results":"320","hashOfConfig":"252"},{"size":453,"mtime":1574620670445,"results":"321","hashOfConfig":"252"},{"size":310,"mtime":1574620670445,"results":"322","hashOfConfig":"252"},{"size":9735,"mtime":1574620670445,"results":"323","hashOfConfig":"252"},{"size":2213,"mtime":1574620670445,"results":"324","hashOfConfig":"252"},{"size":665,"mtime":1574620670445,"results":"325","hashOfConfig":"252"},{"size":4181,"mtime":1574620670445,"results":"326","hashOfConfig":"252"},{"size":1589,"mtime":1574620670445,"results":"327","hashOfConfig":"252"},{"size":504,"mtime":1574620670445,"results":"328","hashOfConfig":"252"},{"size":33,"mtime":1574620670449,"results":"329","hashOfConfig":"252"},{"size":602,"mtime":1574620670449,"results":"330","hashOfConfig":"252"},{"size":43,"mtime":1574620670449,"results":"331","hashOfConfig":"252"},{"size":163,"mtime":1574620670449,"results":"332","hashOfConfig":"252"},{"size":1510,"mtime":1574620670449,"results":"333","hashOfConfig":"252"},{"size":32718,"mtime":1574797996127,"results":"334","hashOfConfig":"252"},{"size":1498,"mtime":1574620670449,"results":"335","hashOfConfig":"252"},{"size":80,"mtime":1574797996127,"results":"336","hashOfConfig":"252"},{"size":5237,"mtime":1574797996127,"results":"337","hashOfConfig":"252"},{"size":216,"mtime":1574797996127,"results":"338","hashOfConfig":"252"},{"size":5726,"mtime":1574797996127,"results":"339","hashOfConfig":"252"},{"size":1378,"mtime":1574620670449,"results":"340","hashOfConfig":"252"},{"size":1423,"mtime":1574620670449,"results":"341","hashOfConfig":"252"},{"size":1435,"mtime":1574797996127,"results":"342","hashOfConfig":"252"},{"size":23205,"mtime":1574797996127,"results":"343","hashOfConfig":"252"},{"size":2106,"mtime":1574797996127,"results":"344","hashOfConfig":"252"},{"size":1467,"mtime":1574620670453,"results":"345","hashOfConfig":"252"},{"size":1403,"mtime":1574797996127,"results":"346","hashOfConfig":"252"},{"size":4370,"mtime":1574797996127,"results":"347","hashOfConfig":"252"},{"size":8907,"mtime":1574797996127,"results":"348","hashOfConfig":"252"},{"size":1851,"mtime":1574797996127,"results":"349","hashOfConfig":"252"},{"size":10977,"mtime":1574797996131,"results":"350","hashOfConfig":"252"},{"size":114,"mtime":1574797996131,"results":"351","hashOfConfig":"252"},{"size":35,"mtime":1574620670453,"results":"352","hashOfConfig":"252"},{"size":51,"mtime":1574620670453,"results":"353","hashOfConfig":"252"},{"size":48,"mtime":1574620670453,"results":"354","hashOfConfig":"252"},{"size":35,"mtime":1574620670453,"results":"355","hashOfConfig":"252"},{"size":33,"mtime":1574620670453,"results":"356","hashOfConfig":"252"},{"size":31,"mtime":1574620670453,"results":"357","hashOfConfig":"252"},{"size":30,"mtime":1574620670453,"results":"358","hashOfConfig":"252"},{"size":37,"mtime":1574620670453,"results":"359","hashOfConfig":"252"},{"size":40,"mtime":1574620670453,"results":"360","hashOfConfig":"252"},{"size":25,"mtime":1574620670453,"results":"361","hashOfConfig":"252"},{"size":28,"mtime":1574620670453,"results":"362","hashOfConfig":"252"},{"size":29,"mtime":1574620670453,"results":"363","hashOfConfig":"252"},{"size":5821,"mtime":1574797996131,"results":"364","hashOfConfig":"252"},{"size":2201,"mtime":1574797996131,"results":"365","hashOfConfig":"252"},{"size":76,"mtime":1574797996131,"results":"366","hashOfConfig":"252"},{"size":780,"mtime":1574797996131,"results":"367","hashOfConfig":"252"},{"size":1208,"mtime":1574797996131,"results":"368","hashOfConfig":"252"},{"size":465,"mtime":1574797996131,"results":"369","hashOfConfig":"252"},{"size":13877,"mtime":1574797996131,"results":"370","hashOfConfig":"252"},{"size":2028,"mtime":1574797996131,"results":"371","hashOfConfig":"252"},{"size":34,"mtime":1574797996131,"results":"372","hashOfConfig":"252"},{"size":29,"mtime":1574797996131,"results":"373","hashOfConfig":"252"},{"size":894,"mtime":1574797996131,"results":"374","hashOfConfig":"252"},{"size":20,"mtime":1574797996135,"results":"375","hashOfConfig":"252"},{"size":20,"mtime":1574797996135,"results":"376","hashOfConfig":"252"},{"size":270,"mtime":1574797996135,"results":"377","hashOfConfig":"252"},{"size":7019,"mtime":1574797996135,"results":"378","hashOfConfig":"252"},{"size":2052,"mtime":1574797996135,"results":"379","hashOfConfig":"252"},{"size":1153,"mtime":1574797996135,"results":"380","hashOfConfig":"252"},{"size":15837,"mtime":1574797996135,"results":"381","hashOfConfig":"252"},{"size":2293,"mtime":1574797996135,"results":"382","hashOfConfig":"252"},{"size":126,"mtime":1574797996135,"results":"383","hashOfConfig":"252"},{"size":2744,"mtime":1574797996135,"results":"384","hashOfConfig":"252"},{"size":157,"mtime":1574797996135,"results":"385","hashOfConfig":"252"},{"size":677,"mtime":1574797996135,"results":"386","hashOfConfig":"252"},{"size":1607,"mtime":1574797996135,"results":"387","hashOfConfig":"252"},{"size":763,"mtime":1574797996135,"results":"388","hashOfConfig":"252"},{"size":2655,"mtime":1574797996139,"results":"389","hashOfConfig":"252"},{"size":158,"mtime":1574797996139,"results":"390","hashOfConfig":"252"},{"size":562,"mtime":1574797996139,"results":"391","hashOfConfig":"252"},{"size":8360,"mtime":1574797996139,"results":"392","hashOfConfig":"252"},{"size":286,"mtime":1574797996139,"results":"393","hashOfConfig":"252"},{"size":2536,"mtime":1574797996139,"results":"394","hashOfConfig":"252"},{"size":36272,"mtime":1574797996139,"results":"395","hashOfConfig":"252"},{"size":1582,"mtime":1574797996139,"results":"396","hashOfConfig":"252"},{"size":54,"mtime":1574797996139,"results":"397","hashOfConfig":"252"},{"size":228,"mtime":1574797996139,"results":"398","hashOfConfig":"252"},{"size":2139,"mtime":1574620670465,"results":"399","hashOfConfig":"252"},{"size":480,"mtime":1574620670465,"results":"400","hashOfConfig":"252"},{"size":56,"mtime":1574620670465,"results":"401","hashOfConfig":"252"},{"size":771,"mtime":1574797996139,"results":"402","hashOfConfig":"252"},{"size":132,"mtime":1574797996139,"results":"403","hashOfConfig":"252"},{"size":1398,"mtime":1575051686631,"results":"404","hashOfConfig":"252"},{"size":1330,"mtime":1574797996143,"results":"405","hashOfConfig":"252"},{"size":290,"mtime":1574620670465,"results":"406","hashOfConfig":"252"},{"size":168,"mtime":1574797996143,"results":"407","hashOfConfig":"252"},{"size":40,"mtime":1574620670465,"results":"408","hashOfConfig":"252"},{"size":2348,"mtime":1574620670469,"results":"409","hashOfConfig":"252"},{"size":3237,"mtime":1574797996143,"results":"410","hashOfConfig":"252"},{"size":2982,"mtime":1574620670469,"results":"411","hashOfConfig":"252"},{"size":343,"mtime":1574797996143,"results":"412","hashOfConfig":"252"},{"size":1529,"mtime":1574797996143,"results":"413","hashOfConfig":"252"},{"size":1525,"mtime":1574797996147,"results":"414","hashOfConfig":"252"},{"size":534,"mtime":1574620670473,"results":"415","hashOfConfig":"252"},{"size":215,"mtime":1574620670473,"results":"416","hashOfConfig":"252"},{"size":325,"mtime":1574797996147,"results":"417","hashOfConfig":"252"},{"size":23,"mtime":1574797996147,"results":"418","hashOfConfig":"252"},{"size":10916,"mtime":1574797996147,"results":"419","hashOfConfig":"252"},{"size":306,"mtime":1574620670473,"results":"420","hashOfConfig":"252"},{"size":2965,"mtime":1574797996147,"results":"421","hashOfConfig":"252"},{"size":261,"mtime":1574797996147,"results":"422","hashOfConfig":"252"},{"size":937,"mtime":1574797996147,"results":"423","hashOfConfig":"252"},{"size":338,"mtime":1574620670473,"results":"424","hashOfConfig":"252"},{"size":2797,"mtime":1574797996147,"results":"425","hashOfConfig":"252"},{"size":832,"mtime":1574797996147,"results":"426","hashOfConfig":"252"},{"size":215,"mtime":1574620670473,"results":"427","hashOfConfig":"252"},{"size":314,"mtime":1574797996147,"results":"428","hashOfConfig":"252"},{"size":38,"mtime":1574620670473,"results":"429","hashOfConfig":"252"},{"size":66,"mtime":1574620670477,"results":"430","hashOfConfig":"252"},{"size":3866,"mtime":1574797996151,"results":"431","hashOfConfig":"252"},{"size":178,"mtime":1574620670477,"results":"432","hashOfConfig":"252"},{"size":89,"mtime":1574620670477,"results":"433","hashOfConfig":"252"},{"size":532,"mtime":1574620670477,"results":"434","hashOfConfig":"252"},{"size":63,"mtime":1574620670477,"results":"435","hashOfConfig":"252"},{"size":50,"mtime":1574620670477,"results":"436","hashOfConfig":"252"},{"size":1290,"mtime":1574620670477,"results":"437","hashOfConfig":"252"},{"size":136,"mtime":1574620670477,"results":"438","hashOfConfig":"252"},{"size":1614,"mtime":1574620670477,"results":"439","hashOfConfig":"252"},{"size":9208,"mtime":1574797996151,"results":"440","hashOfConfig":"252"},{"size":50,"mtime":1574620670477,"results":"441","hashOfConfig":"252"},{"size":1935,"mtime":1574797996151,"results":"442","hashOfConfig":"252"},{"size":2157,"mtime":1574797996151,"results":"443","hashOfConfig":"252"},{"size":821,"mtime":1574620670477,"results":"444","hashOfConfig":"252"},{"size":48,"mtime":1574620670477,"results":"445","hashOfConfig":"252"},{"size":281,"mtime":1574620670477,"results":"446","hashOfConfig":"252"},{"size":2120,"mtime":1574620670477,"results":"447","hashOfConfig":"252"},{"size":961,"mtime":1574620670477,"results":"448","hashOfConfig":"252"},{"size":1800,"mtime":1574620670477,"results":"449","hashOfConfig":"252"},{"size":2313,"mtime":1574620670477,"results":"450","hashOfConfig":"252"},{"size":4319,"mtime":1574797996151,"results":"451","hashOfConfig":"252"},{"size":141,"mtime":1574620670477,"results":"452","hashOfConfig":"252"},{"size":6608,"mtime":1574797996151,"results":"453","hashOfConfig":"252"},{"size":50,"mtime":1574620670481,"results":"454","hashOfConfig":"252"},{"size":554,"mtime":1574620670481,"results":"455","hashOfConfig":"252"},{"size":231,"mtime":1574620670481,"results":"456","hashOfConfig":"252"},{"size":1262,"mtime":1574620670481,"results":"457","hashOfConfig":"252"},{"size":75,"mtime":1574620670481,"results":"458","hashOfConfig":"252"},{"size":560,"mtime":1574620670481,"results":"459","hashOfConfig":"252"},{"size":718,"mtime":1574620670481,"results":"460","hashOfConfig":"252"},{"size":2978,"mtime":1574797996151,"results":"461","hashOfConfig":"252"},{"size":5442,"mtime":1574620670481,"results":"462","hashOfConfig":"252"},{"size":2382,"mtime":1574620670481,"results":"463","hashOfConfig":"252"},{"size":2434,"mtime":1574620670481,"results":"464","hashOfConfig":"252"},{"size":473,"mtime":1574620670481,"results":"465","hashOfConfig":"252"},{"size":575,"mtime":1574797996151,"results":"466","hashOfConfig":"252"},{"size":462,"mtime":1574620670481,"results":"467","hashOfConfig":"252"},{"size":2902,"mtime":1574620670481,"results":"468","hashOfConfig":"252"},{"size":1033,"mtime":1574797996151,"results":"469","hashOfConfig":"252"},{"size":394,"mtime":1574620670481,"results":"470","hashOfConfig":"252"},{"size":248,"mtime":1574620670429,"results":"471","hashOfConfig":"472"},{"size":10900,"mtime":1574620863005,"results":"473","hashOfConfig":"472"},{"size":730,"mtime":1574620670465,"results":"474","hashOfConfig":"472"},{"size":3946,"mtime":1574620670465,"results":"475","hashOfConfig":"472"},{"size":2920,"mtime":1574620670465,"results":"476","hashOfConfig":"472"},{"size":6824,"mtime":1574620863005,"results":"477","hashOfConfig":"472"},{"size":4035,"mtime":1574620670465,"results":"478","hashOfConfig":"472"},{"size":2098,"mtime":1574620670465,"results":"479","hashOfConfig":"472"},{"size":12018,"mtime":1574620863005,"results":"480","hashOfConfig":"472"},{"size":8252,"mtime":1574620863009,"results":"481","hashOfConfig":"472"},{"size":5943,"mtime":1574620670469,"results":"482","hashOfConfig":"472"},{"size":428,"mtime":1574620670469,"results":"483","hashOfConfig":"472"},{"size":162,"mtime":1574620670469,"results":"484","hashOfConfig":"472"},{"size":3057,"mtime":1574620670469,"results":"485","hashOfConfig":"472"},{"size":55,"mtime":1574620670469,"results":"486","hashOfConfig":"472"},{"size":474,"mtime":1574621187430,"results":"487","hashOfConfig":"472"},{"size":1618,"mtime":1574620863009,"results":"488","hashOfConfig":"472"},{"size":3186,"mtime":1574620863009,"results":"489","hashOfConfig":"472"},{"size":1228,"mtime":1574620863009,"results":"490","hashOfConfig":"472"},{"size":3100,"mtime":1574620670469,"results":"491","hashOfConfig":"472"},{"size":2100,"mtime":1574620670469,"results":"492","hashOfConfig":"472"},{"size":1477,"mtime":1574620670473,"results":"493","hashOfConfig":"472"},{"size":4769,"mtime":1574620863009,"results":"494","hashOfConfig":"472"},{"size":33866,"mtime":1574620863009,"results":"495","hashOfConfig":"472"},{"size":1642,"mtime":1574620670473,"results":"496","hashOfConfig":"472"},{"size":133,"mtime":1574620863009,"results":"497","hashOfConfig":"472"},{"size":839,"mtime":1574971490437,"results":"498","hashOfConfig":"252"},{"size":15349,"mtime":1575051606528,"results":"499","hashOfConfig":"252"},{"size":3120,"mtime":1574799545056,"results":"500","hashOfConfig":"252"},{"size":514,"mtime":1574797996147,"results":"501","hashOfConfig":"252"},{"size":78,"mtime":1574797996139,"results":"502","hashOfConfig":"252"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u6995m",{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"511","messages":"512","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"518","messages":"519","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"655","messages":"656","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"670","messages":"671","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"709","messages":"710","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"711","messages":"712","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"758","messages":"759","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"812","messages":"813","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"832","messages":"833","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"845","messages":"846","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"852","messages":"853","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"warningCount":115,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"905","messages":"906","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"911","messages":"912","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"913","messages":"914","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"922"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"925","messages":"926","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"927","messages":"928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"929","messages":"930","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"935","messages":"936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"937","messages":"938","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"939","messages":"940","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"941","messages":"942","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"943","messages":"944","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948"},{"filePath":"949","messages":"950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"951","messages":"952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"953","messages":"954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"957"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"960","messages":"961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"962","messages":"963","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"971","messages":"972","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o2e4c6",{"filePath":"976","messages":"977","errorCount":2,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"978"},{"filePath":"979","messages":"980","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"984"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"987"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"990"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996"},{"filePath":"997","messages":"998","errorCount":1,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"999"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1002"},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1008"},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1018"},{"filePath":"1019","messages":"1020","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021"},{"filePath":"1022","messages":"1023","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1024"},{"filePath":"1025","messages":"1026","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1039"},{"filePath":"1040","messages":"1041","errorCount":24,"warningCount":48,"fixableErrorCount":18,"fixableWarningCount":0,"source":"1042"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045"},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1048","messages":"1049","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1050","messages":"1051","errorCount":1,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/decentrilized-protocol/src/App.tsx",["1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["1071","1072","1073"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["1074","1075","1076","1077","1078","1079"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",["1080","1081","1082","1083"],"import {\n  isClientSideError,\n  getNetworkError,\n} from '../http-request-class-base-utils';\n\nexport class HttpResponseError extends Error {\n  public code?: number;\n  public error?: Error;\n  // is error code is between the 400..500\n  public isClientError: boolean = false;\n\n  protected response: Response;\n\n  constructor(response: Response) {\n    super();\n    this.response = response;\n    this.processResponse();\n  }\n\n  setResponseCode() {\n    const { response } = this;\n    const { status } = response;\n\n    this.code = status ? Number(status) : undefined;\n  }\n\n  setIsClientSideError() {\n    const { response } = this;\n\n    this.isClientError = isClientSideError(response);\n  }\n\n  async errorMessage() {\n    const { message, response } = this;\n\n    if (message && typeof message === 'string') {\n      return message;\n    }\n    try {\n      const { statusText } = response;\n      const message = await response.text();\n\n      this.message = statusText;\n      if (message) {\n        // cached error message\n        this.message = String(message);\n        return message;\n      }\n      return statusText;\n    } catch (err) {\n      console.error(`HttpResponseError::setErrorMessage::fail`, err);\n      return err;\n    }\n  }\n\n  mergeWithNetworkError(): boolean {\n    const { response } = this;\n    const networkError = getNetworkError(response);\n\n    if (networkError instanceof Error) {\n      Object.assign(this, networkError);\n      return true;\n    }\n    return false;\n  }\n\n  processResponse() {\n    this.setResponseCode();\n    this.setIsClientSideError();\n    if (!this.mergeWithNetworkError()) {\n      this.errorMessage();\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["1084"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["1085","1086","1087"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["1088","1089","1090","1091"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["1092"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",["1093","1094"],"import mime from 'mime';\nimport {\n  MIME_TYPES_CLASS_TEXT_EXTENSIONS,\n  MIME_TYPES_CLASS_TEXT_TYPES,\n  MIME_TYPES_CLASS_BLOB_TYPES,\n  MIME_TYPES_CLASS_JSON_EXTENSIONS,\n} from './mime-types-class-base.const';\n\nexport class MimeTypeClass {\n  public extension: string | null = null;\n\n  public isText: boolean = false;\n\n  public isBlob: boolean = false;\n\n  public isFile: boolean = false;\n\n  public isJSON: boolean = false;\n\n  public isUnknown: boolean = false;\n\n  constructor(protected mimeType: string) {\n    this.processMimeType();\n  }\n\n  checkIsFile(): boolean {\n    const { extension } = this;\n\n    return !!extension;\n  }\n\n  checkIsBlob(): boolean {\n    const { mimeType } = this;\n\n    return MIME_TYPES_CLASS_BLOB_TYPES.includes(mimeType);\n  }\n\n  checkIsJSON(): boolean {\n    const { extension } = this;\n\n    return !!extension && MIME_TYPES_CLASS_JSON_EXTENSIONS.includes(extension);\n  }\n\n  checkIsText(): boolean {\n    const { mimeType } = this;\n\n    if (MIME_TYPES_CLASS_TEXT_TYPES.includes(mimeType)) {\n      return true;\n    }\n\n    const { extension } = this;\n\n    if (extension) {\n      return MIME_TYPES_CLASS_TEXT_EXTENSIONS.includes(extension);\n    }\n    return false;\n  }\n\n  checkFileExtension() {\n    const { mimeType } = this;\n\n    this.extension = mime.getExtension(mimeType);\n  }\n\n  processMimeType() {\n    this.checkFileExtension();\n    if ((this.isText = this.checkIsText())) {\n      return;\n    }\n    if ((this.isBlob = this.checkIsBlob())) {\n      return;\n    }\n    if ((this.isJSON = this.checkIsJSON())) {\n      return;\n    }\n    if ((this.isFile = this.checkIsFile())) {\n      return;\n    }\n    this.isUnknown = true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",["1095","1096","1097","1098","1099","1100","1101","1102","1103"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",["1104","1105","1106","1107","1108"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["1109","1110"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: string;\n  password: string;\n}\n\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor(options: ICentralAuthorityConnectionOptions) {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (options: ICentralAuthorityConnectionOptions): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",["1111"],"import {\n  TCACryptoKeyPairsExported,\n  TCACryptoKeyPairs,\n} from './central-authority-class-types-crypto-keys';\nimport {\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME,\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n} from '../central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityAuthCredentials,\n} from './central-authority-class-types-common';\n\nexport type TCentralAuthorityUserCryptoCredentials = {\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME]: TCentralAuthorityUserIdentity;\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: TCACryptoKeyPairs;\n};\n\nexport type TCentralAuthorityUserCryptoCredentialsExported = {\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME]: TCentralAuthorityUserIdentity;\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: string;\n};\n\nexport type TCentralAuthorityCredentialsStorageAuthCredentials = TCentralAuthorityAuthCredentials;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["1112"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["1113"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",["1114"],"import {\n  dataValidatorUtilURL,\n  dataValidatorUtilUUIDV4,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n} from '../../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierDescription } from '../../central-authority-class-user-identity.types';\n\nexport default (v: any): v is ICAUserUniqueIdentifierDescription => {\n  if (v && typeof v === 'object') {\n    const {\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: userUniqueIdentifier,\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authProviderURI,\n    } = v;\n\n    if (\n      typeof version !== 'string' ||\n      version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT\n    ) {\n      return false;\n    }\n    if (!dataValidatorUtilURL(authProviderURI)) {\n      console.warn(\n        `The auth provider's uri ${authProviderURI} have a wrong format`\n      );\n      return false;\n    }\n    if (!dataValidatorUtilUUIDV4(userUniqueIdentifier)) {\n      console.warn(\n        `The user unique identifier ${userUniqueIdentifier} have a format different from the UUIDv4`\n      );\n      return false;\n    }\n    return true;\n  }\n  console.warn('The URI must be an object');\n  return false;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["1115"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["1116","1117","1118","1119"],"import { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { CONST_VALIDATION_SCHEMES_URL } from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const { version, authorityProviderURI } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["1120","1121"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",["1122"],"import {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityUserCryptoCredentials,\n} from '../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n} from './central-authority-class-user-identity.const';\n\n/**\n *\n * this is interface for description\n * of the user unique identity whithin\n * the server overall\n * @export\n * @interface ICAUserUniqueIdentifierDescription\n */\n\nexport type TCAuthProviderIdentifier = string;\n\nexport type TCAuthProviderUserIdentifier = string;\n\nexport interface ICAUserIdentityDescription {\n  [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: TCAuthProviderIdentifier;\n  [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: TCAuthProviderUserIdentifier;\n}\n\nexport interface ICAUserUniqueIdentifierDescription\n  extends ICAUserIdentityDescription {\n  [CA_USER_IDENTITY_VERSION_PROP_NAME]: string;\n}\n\nexport interface ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  extends ICAUserIdentityDescription {\n  [CA_USER_IDENTITY_VERSION_PROP_NAME]?: string;\n}\n\nexport interface ICAUserUniqueIdentifierMetadata {\n  [CA_USER_IDENTITY_VERSION_PROP_NAME]?: string;\n  [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: TCAuthProviderIdentifier;\n}\n\nexport interface ICAIdentityCommonInstance {\n  identityDescription: ICAUserUniqueIdentifierDescription | Error;\n  identityDescritptionSerialized: TCentralAuthorityUserIdentity | Error;\n  toString: () => TCentralAuthorityUserIdentity;\n  // returns a unique string, may be used as a unique identifier in overall system\n  id: string | Error;\n  isValid?: boolean;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["1123","1124","1125","1126","1127","1128"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["1129"],"import {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserIdentity,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["1130","1131","1132","1133","1134","1135","1136","1137","1138"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected } = this;\n\n    if (isConnected) {\n      return true;\n    }\n\n    const database = firebase.database();\n\n    try {\n      await database.goOnline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setDatabaseInstance(database);\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to disconnect from the firebase server');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",["1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-server-api/central-authority-connection-server-api.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.ts",["1155","1156","1157","1158"],"/**\n * This is storage of the current\n * user crypto keys for signing\n * and encryptopn a data\n */\n\nimport { SecretStorage } from 'classes/secret-storage-class';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport {\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n  ICentralAuthorityStorageCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  validateUserIdentity,\n  validateAuthCredentials,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  exportCryptoCredentialsToString,\n  getUserCredentialsByUserIdentityAndCryptoKeys,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials';\nimport {\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS,\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_KEY_CRYPTO_CREDENTIALS,\n  CENTRAL_AUTHORITY_STORAGE_PROVIDER_NAME,\n} from './central-authority-storage-credentials.const';\nimport { TSecretStoreConfiguration } from 'classes/secret-storage-class/secret-storage-class.types';\nimport { calculateHash } from 'utils/hash-calculation-utils/hash-calculation-utils';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n/**\n *\n * this is storage which is necessary\n * to save all the user keys along with the user id which\n * are necessary to communicate with another users\n * in the network in encrypted form\n * @export\n * @class CentralAuthorityCredentialsStorage\n * @extends {StatusClassBase<typeof CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS>}\n */\nexport class CentralAuthorityCredentialsStorage\n  extends getStatusClass<typeof CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS>({\n    errorStatus: CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.ERROR,\n    initialStatus: CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.NEW,\n    instanceName: 'CentralAuthorityCredentialsStorage',\n  })\n  implements ICentralAuthorityStorageCryptoCredentials {\n  protected __userIdentity?: TCentralAuthorityUserIdentity;\n\n  protected __userIdentityHash?: string;\n\n  protected secretStorageConnection?: SecretStorage;\n\n  protected userCryptoCredentialsCached?: TCentralAuthorityUserCryptoCredentials;\n\n  protected get userIdentity(): undefined | string {\n    const { __userIdentity } = this;\n\n    if (validateUserIdentity(__userIdentity)) {\n      return __userIdentity;\n    }\n    return undefined;\n  }\n\n  protected get userIdentityHash(): undefined | string {\n    const { __userIdentityHash } = this;\n\n    return __userIdentityHash || undefined;\n  }\n\n  protected get secretStorageCredentialsValueKey(): string {\n    const { userIdentityHash } = this;\n\n    return `${CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_KEY_CRYPTO_CREDENTIALS}__${userIdentityHash}`;\n  }\n\n  protected get isConnectedToStorage(): boolean {\n    const { status } = this;\n\n    return status === CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTED;\n  }\n\n  protected get secretStorageOptions(): Partial<TSecretStoreConfiguration> {\n    return {\n      storageProviderName: CENTRAL_AUTHORITY_STORAGE_PROVIDER_NAME,\n    };\n  }\n\n  protected async setUserIdentity(userIdentity: any): Promise<Error | boolean> {\n    if (validateUserIdentity(userIdentity)) {\n      const userIdentityHash = await calculateHash(userIdentity);\n\n      if (userIdentityHash instanceof Error) {\n        console.error(userIdentityHash);\n        return new Error(\"Failed to calculate the user's identity hash\");\n      }\n\n      this.__userIdentity = userIdentity;\n      this.__userIdentityHash = userIdentityHash;\n      return true;\n    }\n    return new Error('The user identity is not valid');\n  }\n\n  protected createSecretStorageInstance() {\n    const { secretStorageOptions: configuration } = this;\n\n    this.secretStorageConnection = new SecretStorage(configuration);\n  }\n\n  /**\n   * authorize to the storage with a credentials given\n   * @param {object} credentials\n   */\n  protected authorizeWithCredentials(\n    credentials: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<Error | boolean> | Error {\n    const { secretStorageConnection } = this;\n    const {\n      [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: password,\n    } = credentials;\n\n    if (secretStorageConnection) {\n      return secretStorageConnection.authorize({ password });\n    }\n    return new Error('There is no secretStorageConnection');\n  }\n\n  /**\n   * connect to the SecretStorage without credentials.\n   * the success will depending on the previous\n   * connection with credentials - if it was succed\n   * then the credentials may be stored in the session\n   * storage\n   */\n  protected connectToStorageWithoutCredentials():\n    | Promise<Error | boolean>\n    | Error {\n    const { secretStorageConnection } = this;\n\n    if (secretStorageConnection) {\n      return secretStorageConnection.connect();\n    }\n    return new Error('There is no secretStorageConnection');\n  }\n\n  protected async connectToTheStorage(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error> {\n    if (validateAuthCredentials(credentials)) {\n      const {\n        [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n      } = credentials;\n      const resultSetUserIdentity = await this.setUserIdentity(userIdentity);\n\n      if (resultSetUserIdentity === true) {\n        return this.authorizeWithCredentials(credentials);\n      }\n      return new Error('A wrong user identity');\n    }\n    return this.connectToStorageWithoutCredentials();\n  }\n\n  public async connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error> {\n    this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTING);\n    this.createSecretStorageInstance();\n\n    const connectionResult = await this.connectToTheStorage(credentials);\n\n    if (connectionResult instanceof Error) {\n      this.setStatus(\n        CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTION_FAILED\n      );\n      CentralAuthorityCredentialsStorage.error(connectionResult);\n      return connectionResult;\n    }\n    this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTED);\n    return true;\n  }\n\n  protected reset() {\n    this.__userIdentity = undefined;\n    this.__userIdentityHash = undefined;\n    this.secretStorageConnection = undefined;\n  }\n\n  public async disconnect(): Promise<boolean | Error> {\n    const { isConnectedToStorage, secretStorageConnection } = this;\n\n    if (isConnectedToStorage && secretStorageConnection) {\n      const disconnectFromStorageResult = await secretStorageConnection.disconnect();\n\n      if (disconnectFromStorageResult instanceof Error) {\n        console.error(disconnectFromStorageResult);\n        return new Error('Failed to disconnect from the storage');\n      }\n      this.reset();\n      this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.DISCONNECTED);\n      return true;\n    }\n    return new Error('Not connected to the storage');\n  }\n\n  protected setUserCredentialsToCache(\n    userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): undefined | Error {\n    if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n      return new Error('The given value is not a valid crypto credentials');\n    }\n    this.userCryptoCredentialsCached = userCryptoCredentials;\n  }\n\n  protected unsetUserCredentialsInCache(): void {\n    this.userCryptoCredentialsCached = undefined;\n  }\n\n  protected async setToStorage(\n    key: string,\n    value: any\n  ): Promise<Error | boolean> {\n    const {\n      secretStorageConnection,\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n    } = this;\n\n    if (isConnectedToTheSecretStorage && secretStorageConnection) {\n      return secretStorageConnection.set(key, value);\n    }\n    return new Error('There is no active connecion to the secret storage');\n  }\n\n  protected async readFromStorage(\n    key: string\n  ): Promise<Error | string | undefined> {\n    const {\n      secretStorageConnection,\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n    } = this;\n\n    if (isConnectedToTheSecretStorage && secretStorageConnection) {\n      return secretStorageConnection.get(key);\n    }\n    return new Error('There is no active connecion to the secret storage');\n  }\n\n  protected async setCryptoCredentialsToStorage(\n    userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean> {\n    const {\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n      secretStorageCredentialsValueKey,\n    } = this;\n\n    if (!isConnectedToTheSecretStorage) {\n      return new Error('There is no active connecion to the secret storage');\n    }\n\n    const exportedUserCryptoCredentials = await exportCryptoCredentialsToString(\n      userCryptoCredentials\n    );\n\n    if (exportedUserCryptoCredentials instanceof Error) {\n      return exportedUserCryptoCredentials;\n    }\n    return this.setToStorage(\n      secretStorageCredentialsValueKey,\n      exportedUserCryptoCredentials\n    );\n  }\n\n  protected unsetCryptoCredentialsToStorage(): Promise<Error | boolean> {\n    const { secretStorageCredentialsValueKey } = this;\n\n    return this.setToStorage(secretStorageCredentialsValueKey, null);\n  }\n\n  protected getCredentialsCached():\n    | TCentralAuthorityUserCryptoCredentials\n    | Error\n    | undefined {\n    const { userCryptoCredentialsCached } = this;\n\n    if (!userCryptoCredentialsCached) {\n      return undefined;\n    }\n    if (checkIsValidCryptoCredentials(userCryptoCredentialsCached)) {\n      return userCryptoCredentialsCached;\n    }\n    return new Error('There is no a crypto credetials cached');\n  }\n\n  protected async readCryptoCredentialsFromStorage(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  > {\n    const { secretStorageCredentialsValueKey } = this;\n\n    const cryptoCredentials = await this.readFromStorage(\n      secretStorageCredentialsValueKey\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to read the credentials from the storage');\n    }\n    if (!cryptoCredentials) {\n      console.warn('There is no crypto credentials stored');\n      return null;\n    }\n\n    const importedCryptoKey = await importCryptoCredentialsFromAString(\n      cryptoCredentials\n    );\n\n    if (importedCryptoKey instanceof Error) {\n      console.error(importedCryptoKey);\n      return new Error(\n        'Failed to import a crypto credentials value from the string stored'\n      );\n    }\n\n    const resultSetInCache = this.setUserCredentialsToCache(importedCryptoKey);\n\n    if (resultSetInCache instanceof Error) {\n      console.error(resultSetInCache);\n      this.unsetUserCredentialsInCache();\n      return new Error(\n        'Failed to set the crypto credentials value in the cache'\n      );\n    }\n    return importedCryptoKey;\n  }\n\n  public async getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  > {\n    const { isConnectedToStorage } = this;\n\n    if (!isConnectedToStorage) {\n      return new Error('There is no an active connection to the storage');\n    }\n    const cachedCryptoCredentials = this.getCredentialsCached();\n\n    if (cachedCryptoCredentials instanceof Error) {\n      console.error(cachedCryptoCredentials);\n      console.error('Failed to read a cached value of a crypto credentials');\n    }\n    if (cachedCryptoCredentials) {\n      return cachedCryptoCredentials;\n    }\n\n    const storedCryptoCredentials = await this.readCryptoCredentialsFromStorage();\n\n    if (storedCryptoCredentials instanceof Error) {\n      console.error(storedCryptoCredentials);\n      return new Error(\n        'Failed to read a crypto credentials value from the storage'\n      );\n    }\n    if (!storedCryptoCredentials) {\n      console.warn('A crypto credentials value is absent');\n      return null;\n    }\n\n    const setToCacheResult = this.setUserCredentialsToCache(\n      storedCryptoCredentials\n    );\n\n    if (setToCacheResult instanceof Error) {\n      console.error(setToCacheResult);\n      this.unsetUserCredentialsInCache();\n      console.error(\n        'Failed to set the crypto credentials read from the storage in the cache'\n      );\n    }\n    return storedCryptoCredentials;\n  }\n\n  public async setCredentials(\n    cryptoKeyPairs: TCACryptoKeyPairs\n  ): Promise<Error | boolean> {\n    const { userIdentity, isConnectedToStorage } = this;\n\n    if (!isConnectedToStorage) {\n      return new Error('There is no an active connection to the storage');\n    }\n    if (!userIdentity) {\n      return new Error('A user identity value was not set');\n    }\n\n    const cryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      userIdentity,\n      cryptoKeyPairs\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error(\n        'Failed to create a valid crypro credentials from the given crypto keys and the user identity'\n      );\n    }\n\n    const setCredentialsInCacheResult = this.setUserCredentialsToCache(\n      cryptoCredentials\n    );\n\n    if (setCredentialsInCacheResult instanceof Error) {\n      this.unsetUserCredentialsInCache();\n      console.error(setCredentialsInCacheResult);\n      return new Error('Failed to set the crypto credentials in the cahce');\n    }\n\n    const resultSetCryptoCredentialsToStorage = await this.setCryptoCredentialsToStorage(\n      cryptoCredentials\n    );\n\n    if (resultSetCryptoCredentialsToStorage instanceof Error) {\n      this.unsetUserCredentialsInCache();\n      if ((await this.unsetCryptoCredentialsToStorage()) instanceof Error) {\n        console.error('Failed to unset a crypto credentials in the storage');\n      }\n      console.error(resultSetCryptoCredentialsToStorage);\n      return new Error('Failed to set the crypto credentials in the storage');\n    }\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-identity-storage.types.ts",["1159","1160"],"import {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserCryptoCredentialsExported,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ownValueOf } from 'types/helper.types';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\n\n/**\n * contains the user's identifier\n * and a keys for data sign and\n * data encryption. An identifier\n * is unique, but an identifier's\n * value must be different for\n * the same user. It is necessary\n * to parse it and get a unique\n * value, which is uniquely\n * identifies the user throughout\n * the app.\n * @export\n * @interface ICAIdentityCredentialsDescription\n */\nexport interface ICAIdentityCredentialsDescription {\n  // an identiy of the user\n  identity: TCentralAuthorityUserIdentity;\n  // a key pairs for data sign and data encryption for the user\n  credentials: TCACryptoKeyPairs;\n}\n\n/**\n * defines how does a user's\n * identity and credentials will be stored\n * @export\n * @interface ICAIdentityCredentialsDescriptionStored\n */\nexport interface ICAIdentityCredentialsDescriptionStored {\n  // the user's unique identifier\n  // throughout the app\n  id: string;\n  // an identiy of the user\n  identity: TCentralAuthorityUserIdentity;\n  // a key pairs for data sign and data encryption for the user\n  credentials: TCACryptoKeyPairs;\n}\n\n/**\n * the interface for the storage\n * implementation. There are\n * only two methods to realize\n * the main functionality of it.\n * The first method returns stored\n * credentials of the user. And the\n * second set the credentials\n * of the user in the storage.\n * @export\n * @interface ICAIdentityCredentialsStorage\n */\nexport interface ICAIdentityCredentialsStorage {\n  // is the instance is connected\n  // to the storage and active\n  isActive: boolean;\n  // connect to the storage with the credentials\n  // to decrypt a values stored\n  connect(credentials: ISecretStoreCredentials): Promise<boolean | Error>;\n  // disconnect from the storage\n  disconnect(): Promise<boolean | Error>;\n  // read credentials from the storage\n  getCredentials(\n    identity: TCentralAuthorityUserIdentity\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null>;\n  // store credentials for the identity\n  // in the storage\n  setCredentials(\n    identity: TCentralAuthorityUserIdentity,\n    cryptoCredentials: TCACryptoKeyPairs\n  ): Promise<boolean | Error>;\n  // Store the crypto credentials.\n  // It will be parsed to\n  // identity and key pairs\n  setCredentials(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<boolean | Error>;\n  // store the crypto credentials\n  // exported to a string.\n  // It will be parsed to\n  // identity and key pairs\n  setCredentials(\n    cryptoCredentialsExportedAsString: string\n  ): Promise<boolean | Error>;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials.ts",["1161","1162","1163","1164","1165","1166","1167"],"import { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport {\n  CA_IDENTITY_CREDENTIALS_STORAGE_STATUS,\n  CA_IDENTITY_CREDENTIALS_STORAGE_CONFIGURATION,\n  CA_IDENTITY_CREDENTIALS_STORAGE_READ_CACHE_CAPACITY,\n  CA_IDENTITY_CREDENTIALS_STORAGE_READ_RAW_CACHE_CAPACITY,\n  CA_IDENTITY_CREDENTIALS_STORAGE_FULL_NAME,\n} from './central-authority-storage-identity-credentials.const';\nimport { ICAIdentityCredentialsStorage } from './central-authority-identity-storage.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  ISecretStoreCredentials,\n  ISecretStorage,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  getExportedCryptoCredentialsByCAIdentity,\n  importCryptoCredentialsFromExportedFromat,\n  replaceCryptoCredentialsIdentity,\n  importCryptoCredentialsFromAString,\n  getUserIdentityByCryptoCredentials,\n  getCryptoKeyPairsByCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport {\n  checkIsValidExportedCryptoCredentialsToString,\n  checkIsValidCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n/**\n * this is the storage for the user\n * identifier and a public keys for\n * data sign and encryption\n */\nexport class CentralAuthorityIdentityCredentialsStorage\n  extends getStatusClass<typeof CA_IDENTITY_CREDENTIALS_STORAGE_STATUS>({\n    errorStatus: CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.ERROR,\n    initialStatus: CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.NEW,\n    instanceName: 'CentralAuthorityIdentityCredentialsStorage',\n  })\n  implements ICAIdentityCredentialsStorage {\n  protected secretStorageConnection?: ISecretStorage;\n\n  protected createConnectionToSecretStorage(): SecretStorage | Error {\n    try {\n      const connection = new SecretStorage(\n        CA_IDENTITY_CREDENTIALS_STORAGE_CONFIGURATION\n      );\n\n      return connection;\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  public get isActive(): boolean {\n    const { status, secretStorageConnection } = this;\n\n    return (\n      status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED &&\n      !!secretStorageConnection &&\n      secretStorageConnection.isActive\n    );\n  }\n\n  /**\n   * connect to the SecretStorage with\n   * the user's credentials\n   * @param storageCredentials\n   */\n  public async connect(\n    storageCredentials?: ISecretStoreCredentials\n  ): Promise<boolean | Error> {\n    const connection = this.createConnectionToSecretStorage();\n\n    if (connection instanceof Error) {\n      console.error(connection);\n      return this.setErrorStatus(\n        'Failed to create an instance of SecretStorage'\n      );\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTING);\n\n    let connectionResult;\n\n    if (storageCredentials) {\n      connectionResult = await connection.authorize(storageCredentials);\n    } else {\n      connectionResult = await connection.connect();\n    }\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTION_FAILED);\n      return new Error('Failed to authorize');\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED);\n    this.secretStorageConnection = connection;\n    return true;\n  }\n\n  public async disconnect(): Promise<Error | boolean> {\n    const { status, secretStorageConnection } = this;\n\n    if (status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.DISCONNECTED) {\n      console.error(\n        new Error('The instance is already disconnected from the storage')\n      );\n      // return false cause already disconnected\n      return false;\n    }\n    if (\n      status !== CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED ||\n      status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.ERROR\n    ) {\n      return this.setErrorStatus(\n        new Error(\n          \"Can't disconnect cause the instance is not in the Connected state\"\n        )\n      );\n    }\n    if (!(secretStorageConnection instanceof SecretStorage)) {\n      return this.setErrorStatus('There is no connection to the SecretStorage');\n    }\n\n    const disconnectionResult = await secretStorageConnection.disconnect();\n\n    if (disconnectionResult instanceof Error) {\n      console.error(disconnectionResult);\n      return this.setErrorStatus('SecretStorage failed to disconnect');\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.DISCONNECTED);\n    return true;\n  }\n\n  protected getKeyNameWithPrefix(key: string): string {\n    return `__CA_IDENTITY_CREDENTIALS_STORAGE_FULL_NAME___${key}`;\n  }\n\n  @caching(CA_IDENTITY_CREDENTIALS_STORAGE_READ_RAW_CACHE_CAPACITY)\n  protected async getCredentialsRaw(\n    id: string\n  ): Promise<string | Error | undefined> {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    try {\n      const { secretStorageConnection } = this;\n      const caCryptoCredentials = await secretStorageConnection!!.get(\n        this.getKeyNameWithPrefix(id)\n      );\n\n      if (caCryptoCredentials instanceof Error) {\n        console.error(caCryptoCredentials);\n        return new Error('Failed to read credentials from the storage');\n      }\n      if (!caCryptoCredentials) {\n        return undefined;\n      }\n      return caCryptoCredentials;\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to read a credentials for identity from the storage'\n      );\n    }\n    return undefined;\n  }\n\n  protected setCredentialsByIdentity = async (\n    identity: TCentralAuthorityUserIdentity,\n    cryptoKeyPairs: TCACryptoKeyPairs\n  ): Promise<boolean | Error> => {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    try {\n      // parse the identity\n      const caIdentity = new CentralAuthorityIdentity(identity);\n      const cryptoCredentialsExported = await getExportedCryptoCredentialsByCAIdentity(\n        caIdentity,\n        cryptoKeyPairs\n      );\n\n      if (cryptoCredentialsExported instanceof Error) {\n        console.error(cryptoCredentialsExported);\n        return new Error('Failed to export the credentials to a string');\n      }\n\n      const { id } = caIdentity;\n      /**\n       * id - is the unique identity\n       * for the user throughout\n       * the application.\n       * Wich is uniquely identifies\n       * the user with the\n       * identity. Use it as a key\n       * to store the credentials\n       * */\n      if (id instanceof Error) {\n        return new Error(\n          'The identity value is wrong or have an unknown format'\n        );\n      }\n\n      const credentialsStoredForIdentity = await this.getCredentialsRaw(id);\n\n      // if a credentials was already\n      // stored for the identity\n      // do not modify it.\n      // Cause it's value\n      // must be immutable\n      if (\n        credentialsStoredForIdentity &&\n        !(credentialsStoredForIdentity instanceof Error)\n      ) {\n        return false;\n      }\n\n      // if the given values are valid\n      // then can put it to the storage\n      // connected to\n      const { secretStorageConnection } = this;\n\n      return secretStorageConnection!!.set(\n        this.getKeyNameWithPrefix(id),\n        cryptoCredentialsExported\n      );\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the credentials');\n    }\n    return true;\n  };\n\n  protected async setCredentialsByCACryptoCredentials(\n    caCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<boolean | Error> {\n    const identity = getUserIdentityByCryptoCredentials(caCryptoCredentials);\n\n    if (identity instanceof Error) {\n      console.error(identity);\n      return new Error(\n        'The user identity is not valid or have an unknown format'\n      );\n    }\n\n    const cryptoKeyPairs = getCryptoKeyPairsByCryptoCredentials(\n      caCryptoCredentials\n    );\n\n    if (cryptoKeyPairs instanceof Error) {\n      console.error(cryptoKeyPairs);\n      return new Error(\n        'The crypto key pairs are not valid or have an unknown format'\n      );\n    }\n\n    return this.setCredentialsByIdentity(identity, cryptoKeyPairs);\n  }\n\n  protected async setCredentialsByCACryptoCredentialsExportedToString(\n    caCryptoCredentialsExportedToString: string\n  ): Promise<boolean | Error> {\n    const cryptoCredentials = await importCryptoCredentialsFromAString(\n      caCryptoCredentialsExportedToString\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to import crypto credentials from the string');\n    }\n    return this.setCredentialsByCACryptoCredentials(cryptoCredentials);\n  }\n\n  public async setCredentials(...args: any[]): Promise<boolean | Error> {\n    const argsLenght = args.length;\n\n    if (argsLenght === 2) {\n      return this.setCredentialsByIdentity(args[0], args[1]);\n    } else if (argsLenght === 1) {\n      const caCryptoCredentials = args[0];\n\n      if (checkIsValidExportedCryptoCredentialsToString(caCryptoCredentials)) {\n        return this.setCredentialsByCACryptoCredentialsExportedToString(\n          caCryptoCredentials\n        );\n      } else if (checkIsValidCryptoCredentials(caCryptoCredentials)) {\n        return this.setCredentialsByCACryptoCredentials(caCryptoCredentials);\n      }\n    }\n    return new Error('An unknown arguments');\n  }\n\n  @caching(CA_IDENTITY_CREDENTIALS_STORAGE_READ_CACHE_CAPACITY)\n  protected async getCredentialsCached(\n    identity: TCentralAuthorityUserIdentity\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    try {\n      // parse the identity\n      const caIdentity = new CentralAuthorityIdentity(identity);\n      const { isValid, id } = caIdentity;\n\n      if (!isValid) {\n        return new Error('The identity is not valid');\n      }\n      if (id instanceof Error) {\n        return new Error('Failed to parse the identity and get id');\n      }\n\n      const caCryptoCredentials = await this.getCredentialsRaw(id);\n\n      if (caCryptoCredentials instanceof Error) {\n        console.error(caCryptoCredentials);\n        return new Error('Failed to read credentials from the storage');\n      }\n      if (!caCryptoCredentials) {\n        return null;\n      }\n\n      const importedCryptoCredentials = await importCryptoCredentialsFromAString(\n        caCryptoCredentials\n      );\n\n      if (importedCryptoCredentials instanceof Error) {\n        console.error(importedCryptoCredentials);\n        return new Error('Failed to import the value read');\n      }\n\n      // replace the existing value\n      // of the user identity\n      // by a requested value.\n      // Because the stored identity\n      // version may be different\n      // from the requested. It may\n      // cause an unexpected issues\n      const resultedValue = replaceCryptoCredentialsIdentity(\n        importedCryptoCredentials,\n        identity\n      );\n\n      if (resultedValue instanceof Error) {\n        console.error(resultedValue);\n        return new Error(\n          'Failed to replace the identity in the credentials read from the storage'\n        );\n      }\n      return resultedValue;\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to read a credentials for identity from the storage'\n      );\n    }\n  }\n\n  public async getCredentials(\n    identity: TCentralAuthorityUserIdentity\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    return this.getCredentialsCached(identity);\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["1168","1169","1170","1171"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["1172"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",["1173"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",["1174"],"import {\n  importKeyPairFromString as importKeyPairDataEncryptionFromString,\n  importKeyFromString as importKeyEncryptionFromString,\n} from 'utils/encryption-utils';\nimport {\n  importKeyPairFromString as importKeyPairDataSignFromString,\n  importKeyFromString as importKeySignFromString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\nimport { caValidateCryptoKeyPairExportedObject } from '../../central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport {\n  checkIsPublicKeys,\n  checkIsCryptoKeyPairs,\n  checkIsCryptoKeyPairsExportedAsString,\n} from './central-authority-util-crypto-keys-common';\nimport { decompressString } from 'utils/data-compression-utils/data-compression-utils-strings';\n\n/**\n * import an exported key pair\n * and returs it a crypto key pair\n * @param {string} keyPairsString\n * @returns {Promise<Error | object>}\n */\nexport const importKeyPairsFromString = async (\n  keyPairsString: string\n): Promise<TCACryptoKeyPairs | Error> => {\n  if (!checkIsCryptoKeyPairsExportedAsString(keyPairsString)) {\n    return new Error('This is a wrong type of exported crypto keys');\n  }\n\n  let parsedKeyPairsObject;\n\n  const decompressedValue = decompressString(keyPairsString);\n\n  if (decompressedValue instanceof Error) {\n    console.error(decompressedValue);\n    return new Error('Failed to decompress key pairs');\n  }\n\n  try {\n    parsedKeyPairsObject = JSON.parse(decompressedValue);\n  } catch (err) {\n    return err;\n  }\n  if (!caValidateCryptoKeyPairExportedObject(parsedKeyPairsObject)) {\n    return new Error('There is a wrong format of a key pairs exported');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n  } = parsedKeyPairsObject;\n  const [encryptionKeyPair, dataSignKeyPair] = await Promise.all([\n    importKeyPairDataEncryptionFromString(encryptionKeyPairString),\n    importKeyPairDataSignFromString(signDataKeyPairString),\n  ]);\n\n  if (encryptionKeyPair instanceof Error) {\n    return encryptionKeyPair;\n  }\n  if (dataSignKeyPair instanceof Error) {\n    return dataSignKeyPair;\n  }\n\n  const encryptionKeyPairs = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  };\n\n  if (checkIsCryptoKeyPairs(encryptionKeyPairs)) {\n    return encryptionKeyPairs;\n  }\n  return new Error('Failed to import key pairs');\n};\n\nexport const importPublicKeyPairsFromString = async (\n  publicKeyPairsString: string\n): Promise<Error | TCACryptoPubilicKeys> => {\n  let publicKeyPairsImport;\n  try {\n    publicKeyPairsImport = JSON.parse(publicKeyPairsString);\n  } catch (err) {\n    return err;\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: importedStringEncryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: importedStringSignPublicKey,\n  } = publicKeyPairsImport;\n\n  if (\n    typeof importedStringEncryptionPublicKey !== 'string' ||\n    importedStringEncryptionPublicKey.length <\n      CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH\n  ) {\n    const err = new Error(\n      'Encryption public key import as a string was failed'\n    );\n\n    console.error(err);\n    return err;\n  }\n  if (\n    typeof importedStringSignPublicKey !== 'string' ||\n    importedStringSignPublicKey.length <\n      CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH\n  ) {\n    const err = new Error('Sign public key import as a string was failed');\n\n    console.error(err);\n    return err;\n  }\n\n  const [\n    importedEncryptionPublicKey,\n    importedSignPublicKey,\n  ] = await Promise.all([\n    importKeyEncryptionFromString(importedStringEncryptionPublicKey),\n    importKeySignFromString(importedStringSignPublicKey),\n  ]);\n\n  if (importedEncryptionPublicKey instanceof Error) {\n    console.error('Failed to import encryption public key from the string');\n    return importedEncryptionPublicKey;\n  }\n  if (importedSignPublicKey instanceof Error) {\n    console.error('Failed to import sign public key from the string');\n    return importedSignPublicKey;\n  }\n\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: importedEncryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: importedSignPublicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error('Failed to import a public keys');\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["1175","1176"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const exportResult = await exportCryptoCredentialsToString(credentials[0]);\n\n  if (exportResult instanceof Error) {\n    return exportResult;\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let exportCredentialsResult = null;\n\n  for (; idx < length; idx += 1) {\n    exportCredentialsResult = await exportCryptoCredentialsToString(\n      credentials[idx]\n    );\n\n    if (exportCredentialsResult instanceof Error) {\n      console.error(\n        `Failed to export the credentials on index ${idx} === ${credentials[idx]}`\n      );\n      return exportCredentialsResult;\n    }\n    if (exportCredentialsResult !== exportResult) {\n      return new Error(\n        `The credentials on index ${idx} are not equals to the first credentials`\n      );\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(cryptoKeysExported);\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(cryptoCredentialsExported);\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  if (typeof caIdentity === 'object') {\n    return getExportedAsStringCryptoCredentials(\n      String(caIdentity), // conver it to identity\n      cryptoCredentialsKeyPairs\n    );\n  }\n  return new Error('The identity has a wrong format');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",["1177","1178","1179","1180","1181"],"import {\n  CA_USER_IDENTITY_TYPE,\n  CA_USER_IDENTITY_MIN_LENGTH,\n  CA_USER_PASSWORD_MIN_LENGTH,\n  CA_USER_PASSWORD_TYPE,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_USER_IDENTITY_MAX_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityAuthCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { UTILS_DATA_COMPRESSION_COMPRESSION_RATIO_MAX } from 'utils/data-compression-utils/data-compression-utils.const';\n\nexport const validateUserIdentityType = (v: any): boolean =>\n  typeof v === CA_USER_IDENTITY_TYPE;\n\nexport const validateUserIdentity = (\n  v: any,\n  isSilentMode: boolean = false\n): v is TCentralAuthorityUserIdentity => {\n  if (!validateUserIdentityType(v)) {\n    if (!isSilentMode) {\n      console.error('There is a wrong type of the user identity');\n    }\n    return false;\n  }\n  if (\n    v.length <\n    CA_USER_IDENTITY_MIN_LENGTH / UTILS_DATA_COMPRESSION_COMPRESSION_RATIO_MAX\n  ) {\n    if (!isSilentMode) {\n      console.error('There is a too small length of the user identity');\n    }\n    return false;\n  }\n  if (v.length > CA_USER_IDENTITY_MAX_LENGTH) {\n    if (!isSilentMode) {\n      console.error('There is a too big length of the user identity');\n    }\n    return false;\n  }\n  return true;\n};\n\nexport const validateUserIdentitySilent = (\n  v: any\n): v is TCentralAuthorityUserIdentity => validateUserIdentity(v, true);\n\nexport const validatePassword = (\n  v: any\n): v is TCentralAuthorityUserIdentity => {\n  return (\n    typeof v === CA_USER_PASSWORD_TYPE &&\n    v.length >=\n      CA_USER_PASSWORD_MIN_LENGTH / UTILS_DATA_COMPRESSION_COMPRESSION_RATIO_MAX\n  );\n};\n\nexport const validateAuthCredentials = (\n  v: any\n): v is TCentralAuthorityAuthCredentials => {\n  if (v && typeof v === 'object') {\n    const {\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n      [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: password,\n    } = v;\n\n    return validatePassword(password) && validateUserIdentity(userIdentity);\n  }\n  return false;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["1182","1183","1184","1185"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\nimport {\n  TCentralAuthorityUserCryptoCredentialsExported,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  checkIsCryptoKeyPairsExportedAsString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairsExportedAsString(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["1186"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts",["1187","1188","1189","1190","1191","1192","1193","1194","1195"],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",["1196"],"import {\n  ISecretStoreCredentials,\n  TSecretStoreConfiguration,\n  TSecretStorageProviderName,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  ESAFE_STORAGE_STORAGE_TYPE,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n} from './safe-storage-class.const';\n\nexport type TSafeStorageProviderName = TSecretStorageProviderName;\n\nexport type TSafeStorageStorageAppendLogDataType = string[];\n\nexport type TSafeStorageKeyType = string | number;\n\nexport type TSafeStorageDataType = string | object | number | null;\n\nexport type TSafeStorageStoredDataTypeKeyValue = {\n  [keyName: string]: TSafeStorageDataType;\n};\n\nexport type TSafeStorageStoredDataTypeAppendLog = Array<TSafeStorageDataType>;\n\nexport type TSafeStorageStoredDataType<\n  T extends ESAFE_STORAGE_STORAGE_TYPE\n> = T extends ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n  ? TSafeStorageStoredDataTypeAppendLog\n  : TSafeStorageStoredDataTypeKeyValue;\n\nexport interface ISafeStorageOptions {\n  name: string; // a unique name for the storage\n  credentials: ISecretStoreCredentials; // credentials for access to the secret storage\n  dumpIntervalMs?: number; // how often a dump of a data must be saved in secret storage\n  storageDumpProvider?: TSafeStorageProviderName; // name for the provider where the dumps will be stored\n  storageType?: ESAFE_STORAGE_STORAGE_TYPE; // storage data type\n}\n\nexport type TSafeStorageDataTypesAvail = string | number | object;\n\nexport type TSafeStorageEvents = {\n  status: ESAFE_STORAGE_PROVIDER_STATUS;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.ts",["1197","1198","1199","1200"],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.ts",["1201","1202","1203","1204"],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts",["1205","1206","1207","1208","1209"],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",["1210"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["1211"],"import Multiaddr from 'multiaddr';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\nimport { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES } from './swarm-connection-class-subclass-ipfs.signal-star.conf';\n\nexport enum SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS {\n  FLOODSUB = 'floodsub',\n  GOSSIPPSUB = 'gossipsub',\n}\n\n//https://github.com/ipfs/js-ipfs/blob/master/doc/config.md#api\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT = {\n  Addresses: {\n    // if a dommain used then '/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'\n    Swarm: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES,\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n    ],\n    API: '',\n    Gateway: '',\n    Delegates: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10,\n    },\n    webRTCStar: {\n      Enabled: true,\n    },\n  },\n  Bootstrap: [\n    ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  ],\n  Pubsub: {\n    Enabled: true,\n    Router: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS.GOSSIPPSUB,\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500,\n    },\n  },\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["1212"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["1213","1214"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",["1230","1231","1232","1233","1234","1235"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts",["1236","1237"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts",["1238"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts",["1239"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["1240","1241"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["1261","1262","1263","1264"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",["1276"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301"],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-common/const-validation-values-messaging-common.ts",["1302"],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-common/const-validation-values-messaging-common.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",["1303"],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-timestamp.ts",["1304"],"/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/index.tsx",[],"/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts",["1305"],"import {\n  generateKeyPair,\n  exportKeyPairAsString,\n  importKeyPairFromString,\n  signToString,\n  verifyFromString,\n} from 'utils/data-sign-utils';\nimport { calculateHash } from 'utils/hash-calculation-utils';\n\nconst testDataSigning = async () => {\n  const keyPair = await generateKeyPair();\n\n  if (keyPair instanceof Error) {\n    console.error(keyPair);\n    return;\n  }\n  console.log('keyPair', keyPair);\n\n  const exportedKeyPair = await exportKeyPairAsString(keyPair);\n\n  if (exportedKeyPair instanceof Error) {\n    console.error(exportedKeyPair);\n    return;\n  }\n  console.log('exportedKeyPair', exportedKeyPair);\n\n  const keyPairImported = await importKeyPairFromString(exportedKeyPair);\n\n  if (keyPairImported instanceof Error) {\n    console.error(keyPairImported);\n    return keyPairImported;\n  }\n  console.log('keyPairImported', keyPairImported);\n\n  const exportedKeyPairByImported = await exportKeyPairAsString(\n    keyPairImported\n  );\n\n  if (exportedKeyPairByImported instanceof Error) {\n    console.error(exportedKeyPairByImported);\n    return;\n  }\n  console.log('exportedKeyPairByImported', exportedKeyPairByImported);\n  console.log(\n    'exportedKeyPairByImported === exportedKeyPair',\n    exportedKeyPairByImported === exportedKeyPair\n  );\n\n  const data = { d: 1 };\n  const signString = await signToString(keyPairImported.privateKey, data);\n\n  if (signString instanceof Error) {\n    console.error(signString);\n    return;\n  }\n\n  console.log('signString', signString);\n\n  const dataTwice = await calculateHash('2222');\n\n  if (dataTwice instanceof Error) {\n    console.error(dataTwice);\n    return dataTwice;\n  }\n\n  const signStringTwice = await signToString(\n    keyPairImported.privateKey,\n    dataTwice\n  );\n\n  if (signStringTwice instanceof Error) {\n    console.error(signStringTwice);\n    return;\n  }\n\n  console.log('signStringTwice', signStringTwice);\n\n  const isValid = await verifyFromString(keyPairImported, data, signString);\n\n  if (isValid instanceof Error) {\n    console.error(isValid);\n    return isValid;\n  }\n  console.log('isValid', isValid);\n\n  const isValidTwice = await verifyFromString(\n    keyPairImported,\n    dataTwice,\n    signStringTwice\n  );\n\n  if (isValidTwice instanceof Error) {\n    console.error(isValidTwice);\n    return isValidTwice;\n  }\n  console.log('isValidTwice', isValidTwice);\n};\ntestDataSigning();\n","/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts",["1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317"],"/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts",["1318"],"import { ErrorExtendedBaseClass } from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\n\nexport const runTestErrorExtended = () => {\n  console.warn('test ErrorExtendedBaseClass was started');\n  const errExtendedEmpty = new ErrorExtendedBaseClass();\n\n  if (!(errExtendedEmpty instanceof Error)) {\n    console.error('ErrorExtended must be an instance of the Error');\n    return;\n  }\n\n  const errorMessageEmpty = errExtendedEmpty.toString();\n\n  if (typeof errorMessageEmpty !== 'string') {\n    console.error('Error message must be a string');\n    return;\n  }\n\n  const errorMessageTest = 'Test error message';\n  const errorStringNoCode = new ErrorExtendedBaseClass(errorMessageTest);\n\n  if (!(errorStringNoCode instanceof Error)) {\n    console.error('errorMessageStringNoCode must be an instance of Error');\n    return;\n  }\n\n  const errorMessageStringNoCode = errorStringNoCode.toString();\n\n  if (errorMessageStringNoCode !== errorMessageTest) {\n    console.error(\n      'The error stringified with no code must be equal to the string passed as argument'\n    );\n    return;\n  }\n\n  const errorWithMessageAndCodeMessage = 'Test error with code';\n  const errorWithMessageAndCodeCode = 100;\n  const errorWithMessageAndCode = new ErrorExtendedBaseClass(\n    errorWithMessageAndCodeMessage,\n    errorWithMessageAndCodeCode\n  );\n\n  if (!(errorWithMessageAndCode instanceof Error)) {\n    console.error('errorWithMessageAndCode must be an instance of Error');\n    return;\n  }\n\n  const { code: errorWithMessageAndCodeCodeResult } = errorWithMessageAndCode;\n\n  if (errorWithMessageAndCodeCodeResult !== errorWithMessageAndCodeCode) {\n    console.error('The error code must be equal to the passed');\n    return;\n  }\n\n  const {\n    message: errorWithMessageAndCodeMessageResult,\n  } = errorWithMessageAndCode;\n\n  if (\n    !errorWithMessageAndCodeMessageResult.includes(\n      errorWithMessageAndCodeMessage\n    )\n  ) {\n    console.error(\n      'The error message must includes the string passed as argument'\n    );\n    return;\n  }\n\n  const errorWithMessageAndCodeStringified = String(errorWithMessageAndCode);\n\n  if (\n    !errorWithMessageAndCodeStringified.includes(\n      `Error code: ${errorWithMessageAndCodeCode}`\n    )\n  ) {\n    console.error(\n      'The error stringified must includes the code passed as argument'\n    );\n    return;\n  }\n  if (\n    !errorWithMessageAndCodeStringified.includes(errorWithMessageAndCodeMessage)\n  ) {\n    console.error(\n      'The error stringified must includes the string message passed as argument'\n    );\n    return;\n  }\n\n  const errorMessageByErrorExtendedBaseClass = new ErrorExtendedBaseClass(\n    errorWithMessageAndCode\n  );\n\n  if (errorMessageByErrorExtendedBaseClass !== errorWithMessageAndCode) {\n    console.error(\n      'Error extended created depending on an instance of ErrorExtendedBaseClass must be equal to the argument passeds'\n    );\n    return;\n  }\n  console.warn('test ErrorExtendedBaseClass was succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts",["1319","1320","1321"],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts",["1322"],"/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts",["1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437"],"/home/paul/projects/decentrilized-protocol/src/types/main.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts",["1438","1439","1440"],"/home/paul/projects/decentrilized-protocol/src/types/users.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts",["1441","1442","1443"],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts",["1444","1445"],"export const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts",["1446","1447"],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",["1448"],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["1449","1450","1451"],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["1452"],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["1453"],"/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["1454","1455","1456","1457"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["1458","1459","1460","1461","1462","1463"],"import {\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n} from './encryption-keys-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (keyPair: any): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    keyPair.publicKey instanceof CryptoKey &&\n    keyPair.privateKey instanceof CryptoKey\n  );\n};\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["1464"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["1465","1466","1467"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts",["1468"],"import uuidV4 from 'uuid/v4';\n\nexport const generateUUID = () => uuidV4();\n","/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",["1469"],"export const lazyLoadScript = (\n  url: string,\n  crossOrigin: string = 'anonymous'\n): Promise<Error | boolean> => {\n  try {\n    const script = window.document.createElement('script');\n\n    script.src = url;\n    script.async = true;\n    script.type = 'text/javascript';\n    script.crossOrigin = crossOrigin;\n    window.document.body.appendChild(script);\n    return new Promise<Error | boolean>((res, rej) => {\n      script.onload = () => {\n        res(true);\n      };\n      script.onerror = rej;\n    });\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts",["1470","1471"],"import {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts",["1472","1473","1474"],"/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts",["1475"],"import { TTypedArrays, TMainDataTypes } from 'types/main.types';\nimport { stringify, TStringifyData } from './main-utils';\nimport {\n  encodeArrayBufferToDOMString,\n  decodeDOMStringToArrayBuffer,\n} from 'utils/string-encoding-utils';\n\nexport const arrayBufferFromTypedArray = (\n  typedArray: TTypedArrays | ArrayBuffer\n): ArrayBuffer | Error => {\n  if (typedArray instanceof ArrayBuffer) {\n    return typedArray;\n  }\n  if (ArrayBuffer.isView(typedArray)) {\n    return typedArray.buffer;\n  }\n  return new Error('The data given is not a typed array');\n};\n\ntype isTypedArrayData = any;\n\nexport const isTypedArray = (data: isTypedArrayData): data is TTypedArrays =>\n  data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\nexport const stringToTypedArray = (\n  data: TMainDataTypes\n): ArrayBuffer | Error => {\n  const strData = stringify(data);\n\n  if (strData instanceof Error) {\n    return strData;\n  }\n  return decodeDOMStringToArrayBuffer(strData);\n};\n\nexport const typedArrayToString = (\n  data: TTypedArrays | string\n): string | Error => {\n  if (typeof data === 'string') {\n    return data;\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data is not a typed array');\n  }\n\n  const dataAsArrayBuffer = arrayBufferFromTypedArray(data);\n\n  if (dataAsArrayBuffer instanceof Error) {\n    return dataAsArrayBuffer;\n  }\n\n  return encodeArrayBufferToDOMString(dataAsArrayBuffer);\n};\n\ntype TConvertedToTypedArrayData = TStringifyData | TTypedArrays;\n\nexport const convertToTypedArray = (\n  data: TConvertedToTypedArrayData\n): TTypedArrays | Error => {\n  if (isTypedArray(data)) {\n    return data;\n  }\n  return stringToTypedArray(data);\n};\n\nexport const getOverallLength = (\n  ...typedArrays: ArrayBuffer[]\n): number | Error => {\n  try {\n    return typedArrays.reduce(\n      (allLength, typedArray) => (allLength += typedArray.byteLength),\n      0\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const concatArrayBuffers = (\n  ...typedArrays: ArrayBuffer[]\n): ArrayBuffer | Error => {\n  const len = getOverallLength(...typedArrays);\n\n  if (len instanceof Error) {\n    return len;\n  }\n\n  const arrayResulted = new Uint8Array(len);\n  const count = typedArrays.length;\n  let idx = 0;\n  let arrayBuffer = null;\n  let currentLength = 0;\n  let newTypedArray;\n\n  try {\n    for (; idx < count; idx += 1) {\n      arrayBuffer = typedArrays[idx];\n      newTypedArray = new Uint8Array(arrayBuffer);\n      arrayResulted.set(newTypedArray, currentLength);\n      currentLength += newTypedArray.byteLength;\n    }\n  } catch (err) {\n    return err;\n  }\n  return arrayBufferFromTypedArray(arrayResulted);\n};\n\nexport const getBytesFromArrayBuffer = (\n  typedArray: ArrayBuffer,\n  from: number,\n  to?: number\n): ArrayBuffer | Error => {\n  try {\n    const arrayResulted = new Uint8Array(typedArray);\n\n    return arrayBufferFromTypedArray(arrayResulted.slice(from, to));\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts",["1476"],"import Ajv, { ValidateFunction } from 'ajv';\nimport memoize from 'lodash.memoize';\n\nconst ajv = new Ajv();\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  const validator = getValidatorForJSONSchema(schema);\n\n  return validator(value) as boolean;\n};\n","/home/paul/projects/decentrilized-protocol/src/App.test.tsx",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts",["1477","1478","1479"],"import { signToString, verifyFromString } from 'utils/data-sign-utils';\nimport {\n  getPublicKeysFromCryptoKeyPairs,\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  encryptNative,\n  decryptNative,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const runTestEncryptData = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | true> => {\n  const dataToEncode = 'data to encode';\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n  } = keyPairs;\n  const dataToEncodeTypeedArray = stringToTypedArray(dataToEncode);\n\n  if (dataToEncodeTypeedArray instanceof Error) {\n    console.error(dataToEncodeTypeedArray);\n    console.error('Failed to convert data to typed array');\n    return;\n  }\n\n  const encryptedData = await encryptNative(\n    encryptionKeyPair.publicKey,\n    dataToEncodeTypeedArray\n  );\n\n  if (encryptedData instanceof Error) {\n    console.error('Cant encrypt data with the key pair generated');\n    console.error(encryptedData);\n    return;\n  }\n\n  const decryptedData = await decryptNative(\n    encryptionKeyPair.privateKey,\n    encryptedData\n  );\n\n  if (decryptedData instanceof Error) {\n    console.error('Cant decrypt data encrypted with a generated key pairs');\n    console.error(decryptedData);\n    return;\n  }\n\n  const decryptedString = typedArrayToString(decryptedData);\n\n  if (decryptedString instanceof Error) {\n    console.error(decryptedString);\n    console.error(\n      'Failed to convert a string decrypted as array buffer to a DOMString'\n    );\n  }\n\n  if (decryptedString !== dataToEncode) {\n    console.error(\n      `Decrypted data is invalid. Expected: ${dataToEncode}, but ${decryptedString} was received`\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestDataSign = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | boolean> => {\n  const dataToSign = {\n    hello: 'test hello',\n  };\n  const { [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair } = keyPairs;\n  const signString = await signToString(signKeyPair, dataToSign);\n\n  if (signString instanceof Error) {\n    console.error('Failed to sign the string');\n    console.error(signString);\n    return;\n  }\n  if (typeof signString !== 'string') {\n    console.error('Failed to sign the data as a string');\n    return;\n  }\n\n  const verifyDataResult = await verifyFromString(\n    signKeyPair,\n    dataToSign,\n    signString\n  );\n\n  if (verifyDataResult instanceof Error) {\n    console.error('Failed to verify the data signed');\n    console.error(verifyDataResult);\n    return;\n  }\n  if (verifyDataResult !== true) {\n    console.error('The wrong result was given by the verifyFromString');\n    console.error(verifyDataResult);\n    return;\n  }\n\n  const wrongDataVerifyResult = await verifyFromString(\n    signKeyPair,\n    'Wrong data',\n    signString\n  );\n\n  if (wrongDataVerifyResult instanceof Error) {\n    console.error('Failed to verify a non original string data');\n    console.error(wrongDataVerifyResult);\n    return;\n  }\n  if (wrongDataVerifyResult !== false) {\n    console.error('The wrong result of non origin string verification');\n    return;\n  }\n  return true;\n};\n\nexport const runTestForKeyPairs = async (\n  keyPairs: any\n): Promise<undefined | boolean> => {\n  if (keyPairs instanceof Error) {\n    console.error('Cant generate a crypto key pair');\n    console.error(keyPairs);\n    return;\n  }\n\n  if ((await runTestEncryptData(keyPairs)) !== true) {\n    return;\n  }\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    return;\n  }\n\n  const exportedKeyPairs = await exportKeyPairsAsString(keyPairs);\n\n  if (exportedKeyPairs instanceof Error) {\n    console.error('failed to export the key pair');\n    console.error(exportedKeyPairs);\n    return;\n  }\n  if (typeof exportedKeyPairs !== 'string') {\n    console.error('exportedKeyPairs does not exported in a string format');\n    return;\n  }\n\n  const importedKeyPairs = await importKeyPairsFromString(exportedKeyPairs);\n\n  if (!checkIsCryptoKeyPairs(importedKeyPairs)) {\n    console.error('A wrong format of the imported key pairs');\n    return;\n  }\n  if (importedKeyPairs instanceof Error) {\n    console.error('Failed to import key pairs from string');\n    return;\n  }\n  console.log('run tests for the imported from the exported string key pairs');\n  if ((await runTestEncryptData(importedKeyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs fot data sign'\n  );\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs fot data sign'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        privateKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        privateKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** --data sign test */\n  console.log(\n    'run tests encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    console.error('Cant get public keys from crypto key pairs');\n    console.error(publicKeys);\n    return;\n  }\n\n  console.log(\n    'run tests public keys encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey: (publicKeys as TCACryptoPubilicKeys)[\n          CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME\n        ],\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests public keys for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: (publicKeys as TCACryptoPubilicKeys)[\n          CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME\n        ],\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  console.warn('Central authority keys tests are succeed');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts",["1480"],"import { generateCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const CA_CONNECTION_FIREBASE_CONFIG = {\n  apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n  authDomain: 'protocol-f251b.firebaseapp.com',\n  databaseURL: 'https://protocol-f251b.firebaseio.com',\n  projectId: 'protocol-f251b',\n  storageBucket: '',\n  messagingSenderId: '275196342406',\n  appId: '1:275196342406:web:40b79d671c50af57',\n};\n\nexport const CA_CONNECTION_FIREBASE_USER_CREDENTIALS = {\n  login: 'akulich.p@gmail.com',\n  password: '123456',\n};\n\nexport const CA_CONNECTION_FIREBASE_CREDENTIALS = CA_CONNECTION_FIREBASE_USER_CREDENTIALS;\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts",["1481"],"import { CAConnectionFirestoreUtilsCredentialsStrorage } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { connectWithFirebase } from './central-authority-connection.test.firebase.utils';\nimport { generateCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  compareCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nexport const runTestFirebaseCredentialsStorage = async () => {\n  console.warn('runTestFirebaseCredentialsStorage::start');\n  const firebaseConnection = await connectWithFirebase();\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const credetntialsStoreConnectionToFirebase = new CAConnectionFirestoreUtilsCredentialsStrorage(\n    firebaseConnection\n  );\n\n  if (credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await credetntialsStoreConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const credentialsForUser = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n  if (credentialsForUser instanceof Error) {\n    console.error(credentialsForUser);\n    console.error('Failed to get credentials for the current user');\n    return;\n  }\n  if (!credentialsForUser) {\n    console.error('Credentials for the user must be auto generated on sign up');\n    return;\n  }\n\n  const credentials = await generateCryptoCredentials();\n\n  if (credentials instanceof Error) {\n    console.error('Failed to generate crypto credentials');\n    return;\n  }\n\n  const setCredentialsResult = await credetntialsStoreConnectionToFirebase.setUserCredentials(\n    credentials\n  );\n\n  if (setCredentialsResult instanceof Error) {\n    console.error(setCredentialsResult);\n    console.error('Failed to set credentials');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user created and stored once must be immputable anyway'\n    );\n    return;\n  }\n\n  const userId = getUserIdentityByCryptoCredentials(setCredentialsResult);\n\n  if (userId instanceof Error) {\n    console.error(userId);\n    console.error('Failed to get user id by crypto credentials');\n    return;\n  }\n\n  const getCredentialsResult = await credetntialsStoreConnectionToFirebase.getUserCredentials(\n    userId\n  );\n\n  if (!getCredentialsResult) {\n    console.error(\n      'There is no credentials stored before was found in the Firebsae database'\n    );\n    return;\n  }\n  if (getCredentialsResult instanceof Error) {\n    console.error('Failed to read credentials from the Firebase database');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user got by the user id must be immputable the same as the credentials set by the user on sign up flow'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseCredentialsStorage::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts",["1482","1483"],"import CAConnectionWithFirebaseUtilDatabase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport { connectWithFirebase } from './central-authority-connection.test.firebase.utils';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nexport const runTestFirebaseConnectionDatabase = async () => {\n  console.warn('runTestFirebaseConnectionDatabase::start');\n\n  const login = 'i2ga8r+7mc075w0nc9ns@sharklasers.com';\n  const password = '123456';\n  const firebaseConnection = await connectWithFirebase({\n    login,\n    password,\n  });\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const databaseConnectionToFirebase = new CAConnectionWithFirebaseUtilDatabase();\n\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await databaseConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const randomUUID = generateUUID();\n  const testKey = `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${randomUUID}`;\n  const testData = {\n    testData: 'testData',\n  };\n  const setValueResult = await databaseConnectionToFirebase.setValue(\n    testKey,\n    testData\n  );\n\n  if (setValueResult instanceof Error) {\n    console.error(setValueResult);\n    return setValueResult;\n  }\n\n  const readValueResult = await databaseConnectionToFirebase.getValue(testKey);\n\n  if (readValueResult instanceof Error) {\n    console.error(readValueResult);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (!readValueResult || typeof readValueResult !== 'object') {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResult as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseConnectionDatabase::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts",["1484","1485","1486","1487","1488","1489"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  connectToFirebase,\n  connectWithFirebase,\n  deleteTheUserFromCA,\n} from './central-authority-connection.test.firebase.utils';\nimport {\n  CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n  CA_CONNECTION_FIREBASE_CONFIG,\n} from './central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { ICAConnectionUserAuthorizedResult } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nexport const runTestCAConnectionFirebaseChangeEmail = async () => {\n  const connectionFirebase = await connectToFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  const userProfileWithEmailTest = {\n    name: 'Test account',\n    email: 'gavidan@6mail.top',\n  };\n  const updateProfileWithEmailResult = await connectionFirebase.setProfileData(\n    userProfileWithEmailTest\n  );\n\n  if (updateProfileWithEmailResult instanceof Error) {\n    console.error('Failed to set the profile (with a email) data');\n    return;\n  }\n  if (updateProfileWithEmailResult.name !== updateProfileWithEmailResult.name) {\n    console.error('Name was not updated in the profile');\n    return;\n  }\n  if (\n    updateProfileWithEmailResult.email !== updateProfileWithEmailResult.email\n  ) {\n    console.error('The email was not updated in the profile');\n    return;\n  }\n  if (connectionFirebase.isAuthorized) {\n    console.error(\n      'isAuthorized connection flag must be false on email value changed'\n    );\n    return;\n  }\n};\n\nexport const runTestCAConnectionFirebase = async () => {\n  console.warn('CA connection firebase test started');\n  const credentials = {\n    login: 'lxnmgnyc@sharklasers.com',\n    password: '123456',\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  console.warn('CA connection firebase test succeed');\n\n  //check profile update result\n  const userProfileTestWOEmailAndPhoneNumber: Partial<\n    ICentralAuthorityUserProfile\n  > = {\n    name: 'Paul',\n    photoURL:\n      'https://cdn.dribbble.com/users/199982/screenshots/4044699/furkan-avatar-dribbble.png',\n  };\n  const updateProfileResult = await connectionFirebase.setProfileData(\n    userProfileTestWOEmailAndPhoneNumber\n  );\n\n  if (updateProfileResult instanceof Error) {\n    console.error('Failed tp set the profile (without a email) data');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n\n  if (\n    userProfileTestWOEmailAndPhoneNumber.photoURL !==\n    updateProfileResult.photoURL\n  ) {\n    console.error('The photo URL was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (userProfileTestWOEmailAndPhoneNumber.name !== updateProfileResult.name) {\n    console.error('Name was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  const deleteTheUserResult = await deleteTheUserFromCA(\n    connectionFirebase,\n    credentials\n  );\n  if (deleteTheUserResult instanceof Error) {\n    console.error(deleteTheUserResult);\n    return new Error('Failed to delete the user from the Firebase authority');\n  }\n  console.warn('CA connection firebase test success');\n};\n\nexport const runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider = async () => {\n  const credentials = {\n    login: 'lxnmgnyc@sharklasers.com',\n    password: '123456',\n  };\n  console.error('runTestCAConnectionFirebaseWithoutCryptoCredentials::start');\n  const connectionFirebase = await connectWithFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  const {\n    cryptoCredentials: cryptoCredentialsGenerated,\n  } = connectionFirebase.getAuthResult() as ICAConnectionUserAuthorizedResult;\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsGenerated)) {\n    console.error(\n      'Invalida crypto credentials generated by Firebase CA connection'\n    );\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = new CentralAuthorityIdentity(\n    cryptoCredentialsGenerated\n  );\n\n  if (!userIdentityByCryptoCredentials.isValid) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n  const {\n    identityDescription: userIdentityDescription,\n  } = userIdentityByCryptoCredentials;\n\n  if (userIdentityDescription instanceof Error) {\n    console.error(userIdentityDescription);\n    console.error('Failed to parse the identity generated');\n    return;\n  }\n\n  const { authorityProviderURI } = userIdentityDescription;\n\n  if (authorityProviderURI !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL) {\n    console.error(\n      'The url of the Firebase authority provider from generated identity is not valid'\n    );\n    return;\n  }\n  const signOutResult = await connectionFirebase.signOut();\n  if (signOutResult instanceof Error) {\n    console.error(signOutResult);\n    console.error('Failed to sign out');\n    return;\n  }\n\n  const authorizeResultWithCredentialsGenerated = await connectionFirebase.authorize(\n    {\n      ...CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n      cryptoCredentials: cryptoCredentialsGenerated,\n    }\n  );\n  if (authorizeResultWithCredentialsGenerated instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n\n  const {\n    cryptoCredentials: cryptoCredentialsFromAuthorization,\n  } = authorizeResultWithCredentialsGenerated;\n  if (\n    (await compareCryptoCredentials(\n      cryptoCredentialsFromAuthorization,\n      cryptoCredentialsGenerated\n    )) !== true\n  ) {\n    console.error(\n      'Crypto credentials returned after success authorization must be same as provided (if not stored before)'\n    );\n    return;\n  }\n  console.warn('runTestCAConnectionFirebaseWithoutCryptoCredentials::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.utils.ts",["1490","1491","1492"],"import { CAConnectionWithFirebase } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase';\nimport {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CREDENTIALS,\n} from './central-authority-connection.test.firebase.const';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAConnectionSignUpCredentials } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport { generateCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport { CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport const connectToFirebase = async (): Promise<\n  Error | CAConnectionWithFirebase\n> => {\n  const connectionFirebase = new CAConnectionWithFirebase();\n  const connectionResult = await connectionFirebase.connect(\n    CA_CONNECTION_FIREBASE_CONFIG\n  );\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return new Error('Failed connection to the firebase app account');\n  }\n  if (!connectionFirebase.isConnected) {\n    return new Error(\n      'isConnected status flag must be truthly on connection succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const aurhorizeWithCredentials = async (\n  authCredentials: ICAConnectionSignUpCredentials,\n  connectionFirebase: CAConnectionWithFirebase\n): Promise<Error | CAConnectionWithFirebase> => {\n  const authorizeResult = await connectionFirebase.authorize(authCredentials);\n\n  if (\n    authorizeResult instanceof ErrorExtendedBaseClass &&\n    authorizeResult.code === CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n  ) {\n    alert('Please, veriy your email');\n    return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n  }\n  if (authorizeResult instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const connectAndAuthorizeInFirebase = async (\n  authCredentials: ICAConnectionSignUpCredentials\n): Promise<CAConnectionWithFirebase | Error> => {\n  const connectionFirebase = await connectToFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n  return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n};\n\n/**\n * connect to firebase with credentials\n * defined\n */\nexport const connectWithFirebase = async (\n  authCredentials = CA_CONNECTION_FIREBASE_CREDENTIALS\n) => {\n  console.warn('CA connection firebase test started');\n\n  if (authCredentials instanceof Error) {\n    return authCredentials;\n  }\n\n  const connectionFirebase = await connectAndAuthorizeInFirebase(\n    authCredentials\n  );\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n\n  return connectionFirebase;\n};\n\nexport const deleteTheUserFromCA = async (\n  connectionFirebase: CAConnectionWithFirebase,\n  authCredentials: ICAConnectionSignUpCredentials\n): Promise<boolean | Error> => {\n  if (connectionFirebase instanceof CAConnectionWithFirebase) {\n    const deleteResult = await connectionFirebase.delete(authCredentials);\n\n    if (deleteResult instanceof Error) {\n      console.error(deleteResult);\n      return new Error('Failed to delete the user from the Firebase authority');\n    }\n    return true;\n  }\n  return new Error('The connection to the firebase is not valid');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts",["1493"],"import { validateUserProfileData } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user';\n\nexport * from './central-authority-connection.test.firebase';\n\nexport const runTestProfileValidation = () => {\n  console.warn('test for CA user profiel data validation started');\n  const test1ProfileValid = {\n    name: '1',\n  };\n\n  if (!validateUserProfileData(test1ProfileValid)) {\n    console.error('The profile data 1 must be valid');\n    return;\n  }\n\n  const test2ProfileValid = {\n    phone: '+79292239192',\n  };\n\n  if (!validateUserProfileData(test2ProfileValid)) {\n    console.error('The profile data 2 must be valid');\n    return;\n  }\n  console.warn('test for CA user profiel data validation succeed');\n\n  const test3ProfileValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'ggg@mail.com',\n    photoURL:\n      'https://camo.githubusercontent.com/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (!validateUserProfileData(test3ProfileValid)) {\n    console.error('The profile data 3 must be valid');\n    return;\n  }\n\n  const testProfileEmailNotValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'gggmail.com',\n    photoURL:\n      'https://camo.githubusercontent.com/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (validateUserProfileData(testProfileEmailNotValid)) {\n    console.error('The email in the profile data is not valid');\n    return;\n  }\n\n  const testProfilePhotoUrlNotValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'ggg@mail.com',\n    photoURL:\n      'camo.githubusercontent/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (validateUserProfileData(testProfilePhotoUrlNotValid)) {\n    console.error('The photo url in the profile data is not valid');\n    return;\n  }\n\n  console.warn('test for CA user profiel data validation succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-identity.test.ts",["1494","1495","1496"],"import { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { validateIdentityDescriptionVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { generateCryptoCredentialsWithUserIdentity } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { CA_CONNECTION_FIREBASE_CONFIG } from './central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { getUserIdentityByCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nconst validateIdentityDescription = (\n  identityDescription: ICAUserUniqueIdentifierDescription | Error,\n  testIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n): undefined | boolean => {\n  if (identityDescription instanceof Error) {\n    console.error(identityDescription);\n    console.error('Failed to serialize the test description');\n    return;\n  }\n  if (identityDescription) {\n    const {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: identityDescriptionAuthProvider,\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: identityDescriptionUUID,\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: identityDescriptionVersion,\n    } = identityDescription;\n    const {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: testIdentityDescriptionAuthProvider,\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: testIdentityDescriptionUUID,\n    } = testIdentityDescription;\n\n    if (!identityDescriptionVersion) {\n      console.error('a version must be defined in identity description');\n      return;\n    }\n    if (!validateIdentityDescriptionVersion(identityDescriptionVersion)) {\n      console.error('the version of the identity description is not valid');\n      return;\n    }\n    if (identityDescriptionUUID !== testIdentityDescriptionUUID) {\n      console.error('uuid is not the same with the test value');\n      return;\n    }\n    if (\n      identityDescriptionAuthProvider !== testIdentityDescriptionAuthProvider\n    ) {\n      console.error('auth provider is not the same as in the test value');\n      return;\n    }\n    return true;\n  }\n  console.error('The user identity description is empty');\n  return;\n};\n\nconst validateUserIdentityInstance = (\n  identityValue: CentralAuthorityIdentity,\n  testIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n): identityValue is CentralAuthorityIdentity => {\n  const { identityDescritptionSerialized, identityDescription } = identityValue;\n\n  if (identityDescription instanceof Error) {\n    console.error(identityDescription);\n    console.error('Failed to serialize the test description');\n    return false;\n  }\n  if (identityDescritptionSerialized instanceof Error) {\n    console.error(identityDescritptionSerialized);\n    console.error('Failed to serialize the test user identity description');\n    return false;\n  }\n  if (!validateUserIdentity(identityDescritptionSerialized)) {\n    console.error('The user identity serialized has a wrong format');\n    return false;\n  }\n  if (\n    !validateIdentityDescription(identityDescription, testIdentityDescription)\n  ) {\n    console.error('The identity description have a wrong format');\n    return false;\n  }\n  return true;\n};\n\nexport const runTestCAIdentity = async () => {\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const identityValue = new CentralAuthorityIdentity(testIdentityDescription);\n\n  if (!validateUserIdentityInstance(identityValue, testIdentityDescription)) {\n    console.error('Failed to create an instance of CAIdentity');\n    return;\n  }\n\n  const { identityDescritptionSerialized } = identityValue;\n  const identityFromIdentityString = new CentralAuthorityIdentity(\n    identityDescritptionSerialized as string\n  );\n\n  if (\n    !validateUserIdentityInstance(\n      identityFromIdentityString,\n      testIdentityDescription\n    )\n  ) {\n    console.error(\n      'Failed to create an instance of CAIdentity from identityDescritptionSerialized of the test Identity description'\n    );\n    return;\n  }\n\n  const {\n    id: userIdentifier,\n  } = identityFromIdentityString as CentralAuthorityIdentity;\n\n  if (userIdentifier instanceof Error || typeof userIdentifier !== 'string') {\n    console.error(\n      'The user identifier (id) prop must not be an error for a valid identity'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongGUID = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19a#',\n  };\n  const identityValueFromWrongGUID = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongGUID\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongGUID,\n      testIdentityDescriptionWithWrongGUID\n    )\n  ) {\n    console.error(\n      'Wrong guid value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongURL = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n  };\n  const identityValueFromWrongURL = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongURL,\n      testIdentityDescriptionWithWrongURL\n    )\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongURL =\n    '01htt://googlecom76d55caf-fc4a-41a9-8844-19877dcb19ad';\n  const identityValueFromStringWrongURL = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongURL, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'htt://googlecom',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n    })\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongURL as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for a wrong authority url'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongUUID =\n    '01https://google.com76d55caf-fc4a-41a9-8*44-19877dcb19ad';\n  const identityValueFromStringWrongUUID = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongUUID\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongUUID, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n        'https://google.com',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8*44-19877dcb19ad',\n    })\n  ) {\n    console.error(\n      'Wrong UUID value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongUUID as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error('The userIdentifier prop must be an error for a wrong uuid');\n    return;\n  }\n\n  const testIdentityStringnWithWrongVersionUnsupported =\n    '11https://google.com76d55caf-fc4a-41a9-8144-19877dcb19ad';\n  const identityValueFromStringWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongVersionUnsupported\n  );\n  const testIdentityDescriptionWithVersionUnsupported = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8144-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: '11',\n  };\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromStringWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 11 does not recognized in the identifier string`\n    );\n    return;\n  }\n\n  const identityValueFromIdentityDescriptionWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithVersionUnsupported\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromIdentityDescriptionWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 11 does not recognized in the identifier string`\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromIdentityDescriptionWrongVersionUnsupported as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for unsupported identity version'\n    );\n    return;\n  }\n  console.warn('The user identity description test is succesfull');\n};\n\nexport const runTestCAIdentityWithAuthorityProviderGenerator = async () => {\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:started');\n\n  const cryptoCredentials = await generateCryptoCredentialsWithUserIdentity({\n    authorityProviderURI: CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n  });\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = getUserIdentityByCryptoCredentials(\n    cryptoCredentials\n  );\n  const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n  if (!caUserIdentity.isValid) {\n    console.error('User identity generated is not valid');\n    return;\n  }\n  const stringifiedIdentity = caUserIdentity.toString();\n\n  if (stringifiedIdentity === '') {\n    console.error(stringifiedIdentity);\n    console.error('Failed to parse the identity');\n    return;\n  }\n  if (stringifiedIdentity !== userIdentityByCryptoCredentials) {\n    console.error('Parsed identity is not valid');\n    return;\n  }\n  const identityDescriptionParsed = caUserIdentity.identityDescription;\n\n  if (identityDescriptionParsed instanceof Error) {\n    console.error(identityDescriptionParsed);\n    console.error('Failed to get description by identity string');\n    return;\n  }\n  if (\n    identityDescriptionParsed[\n      CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n    ] !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL\n  ) {\n    console.error('Wrong authority provider url got from the identity string');\n    return;\n  }\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts",["1497"],"import { CentralAuthorityIdentityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { getUserIdentityByCryptoCredentials, getUserCredentialsByUserIdentityAndCryptoKeys, exportCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\n\n\nconst runCACredentialsIdentityStorageTestForCredentials = async (\n  storageInstance: CentralAuthorityIdentityCredentialsStorage,\n  testIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion | TCentralAuthorityUserIdentity,\n  ): Promise<boolean | undefined> => {\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key Pairs');\n    return;\n  }\n\n  const setInStorageResult = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (setInStorageResult instanceof Error) {\n    console.error(setInStorageResult);\n    return;\n  }\n\n  const caCryptoCredentialsTestRead = await storageInstance.getCredentials(identityTest);\n\n  if (caCryptoCredentialsTestRead instanceof Error) {\n    console.error(caCryptoCredentialsTestRead);\n    console.error('Failed to read the crypto credentials saved previosely');\n    return;\n  }\n  if (!caCryptoCredentialsTestRead) {\n    console.error('The crypto credentials saved previousely have an empty value stored');\n    return;\n  }\n\n  const identityValue = getUserIdentityByCryptoCredentials(caCryptoCredentialsTestRead);\n\n  if (identityValue instanceof Error) {\n    console.error(identityValue);\n    console.error('There is a broken identity value was stored');\n    return;\n  }\n  if (identityValue !== identityTest) {\n    console.error('The identity stored have a wrong value not same as stred');\n    return;\n  }\n\n  const caCredentialsTest = getUserCredentialsByUserIdentityAndCryptoKeys(\n    identityTest,\n    testKeyPairs,\n  );\n\n    if (caCredentialsTest instanceof Error) {\n      console.error(caCredentialsTest);\n      console.error('Failed to create CACryproCredentials by the identity and test key pairs');\n      return;\n    }\n\n  const storeResultCaCryptoCredentials = await storageInstance.setCredentials(caCredentialsTest);\n\n  if (storeResultCaCryptoCredentials instanceof Error) {\n    console.error(storeResultCaCryptoCredentials);\n    console.error('Failed to store the CACryptoCredentials format');\n    return;\n  }\n  if (storeResultCaCryptoCredentials !== false) {\n    console.error('Crypto credentials for the same identity must not be rewritten');\n    return;    \n  }\n  \n  const caCryptoCredentialsExportedToStringTest = await exportCryptoCredentialsToString(caCredentialsTest);\n\n  if (caCryptoCredentialsExportedToStringTest instanceof Error) {\n    console.error(caCryptoCredentialsExportedToStringTest);\n    console.error('Failed to export CACryptoCredentials to a string');\n    return;\n  }\n\n  const storeResultCaCryptoCredentialsExportedToString = await storageInstance.setCredentials(caCryptoCredentialsExportedToStringTest);\n\n  if (storeResultCaCryptoCredentialsExportedToString instanceof Error) {\n    console.error(storeResultCaCryptoCredentialsExportedToString);\n    console.error('Failed to store the CACryptoCredentials exported to a string format');\n    return;\n  }\n  if (storeResultCaCryptoCredentialsExportedToString !== false) {\n    console.error('Crypto credentials (exported as string) for the same identity must not be rewritten');\n    return;    \n  }\n  \n  return true;\n};\n\nexport const runCACredentialsIdentityStorageTest = async () => {\n  console.warn('Storage identity test was started');\n  \n  const conectionCredentials: ISecretStoreCredentials = {\n    password: '11234',\n  };\n  const storageInstance = new CentralAuthorityIdentityCredentialsStorage();\n  const connectionResult = await storageInstance.connect(conectionCredentials);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error(new Error('Failed to connect to the storage'));\n    return;\n  }\n\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultFirst = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescription\n  );\n\n  if (resultFirst !== true) {\n    console.error('Test for the first credentials was failed');\n    return;\n  }\n\n  const testIdentityDescriptionTwo = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google1.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultTwo = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionTwo\n  );\n\n  if (resultTwo !== true) {\n    console.error('Test for the second credentials was failed');\n    return;\n  }\n\n  console.warn('Test for a wrong identity valie started');\n  const testIdentityDescriptionWrongFormat = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: '',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultMustBeFailed = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionWrongFormat\n  );\n\n  if (resultMustBeFailed) {\n    console.error('Test for a wrong identity valie must failed');\n    return;\n  }\n  console.warn('Test for a wrong identity value succeed');\n\n  const storageDisconnectResult = await storageInstance.disconnect();\n\n  if (storageDisconnectResult instanceof Error) {\n    console.error(storageDisconnectResult);\n    console.error('Failed to disconnect');\n    return;\n  }\n\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n    \n  if (!identityTest) {\n    console.error(identityTest);\n    console.error('Failed to generate test identity string on disconnected storage test');\n    return;\n  }\n\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key pairs on disconnected storage test');\n    return;\n  }\n\n  const setCredentialsResultDisconnected = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (!(setCredentialsResultDisconnected instanceof Error)) {\n    console.error('Execution of the setCredentials method must failed on disconnected storage')\n    return;\n  }\n\n  const getCredentialsResultDisconnected = await storageInstance.getCredentials(\n    identityTest,\n  );\n\n  if (!(getCredentialsResultDisconnected instanceof Error)) {\n    console.error('Execution of the getCredentials method must failed on disconnected storage')\n    return;\n  }\n  console.warn('Storage identity test was succes');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts",["1498"],"import { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { runTestForKeyPairs } from './central-aurhority.keys.common.test';\nimport {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.const';\nimport { CentralAuthorityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials';\n\nexport const runTestsCredentialsStorage = async () => {\n  const cryptoKeyPairsGenerated = await generateKeyPairs();\n\n  if (cryptoKeyPairsGenerated instanceof Error) {\n    console.error(cryptoKeyPairsGenerated);\n    console.error('Failed to generate a new key pairs');\n    return;\n  }\n\n  console.warn('Run tests for credentials storage keys generated');\n  const result = await runTestForKeyPairs(cryptoKeyPairsGenerated);\n\n  if (result !== true) {\n    console.warn('Failed tests for credentials storage keys generated');\n    return;\n  }\n\n  const cryptoCredentialsStorage = new CentralAuthorityCredentialsStorage();\n  const storageAuthCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: generateUUID(),\n    [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: 'password',\n  };\n\n  console.warn(\n    'Success result in the tests for credentials storage keys generated'\n  );\n  const connectionResult = await cryptoCredentialsStorage.connect(\n    storageAuthCredentials\n  );\n\n  if (connectionResult instanceof Error) {\n    console.error('Failed to connect to the secret storage');\n    return;\n  }\n\n  const credentials = await cryptoCredentialsStorage.getCredentials();\n\n  if (credentials instanceof Error) {\n    console.error(credentials);\n    console.error('Failed to reade a credentials read from the new instance');\n    return;\n  }\n  if (credentials !== null) {\n    console.error('The credentials read from the new instance must be null');\n    return;\n  }\n\n  const credentialsSetResult = await cryptoCredentialsStorage.setCredentials(\n    cryptoKeyPairsGenerated\n  );\n\n  if (credentialsSetResult instanceof Error) {\n    console.error(credentialsSetResult);\n    console.error('Failed to set the credentials');\n    return;\n  }\n\n  const credentialsCached = await cryptoCredentialsStorage.getCredentials();\n\n  if (credentialsCached instanceof Error) {\n    console.error(credentialsCached);\n    console.error('Failed to read a credentials stored');\n    return;\n  }\n  if (credentialsCached === null) {\n    console.error('The credentials stored are absent in the storage and cache');\n    return;\n  }\n\n  const {\n    [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairsStored,\n  } = credentialsCached;\n  const resultTestCredentialsStored = await runTestForKeyPairs(\n    cryptoKeyPairsStored\n  );\n\n  if (resultTestCredentialsStored !== true) {\n    console.warn(\n      'Failed tests for credentials storage keys read from stored values'\n    );\n    return;\n  }\n\n  const resultCryptoCredentialsStorageDisconnect = await cryptoCredentialsStorage.disconnect();\n\n  if (resultCryptoCredentialsStorageDisconnect instanceof Error) {\n    console.error(resultCryptoCredentialsStorageDisconnect);\n    console.error(\n      'Failed to disconnect the first instance of the resultCryptoCredentialsStorageDisconnect'\n    );\n    return;\n  }\n\n  const credentialsReadFromStorageDisconnected = await cryptoCredentialsStorage.getCredentials();\n\n  if (!(credentialsReadFromStorageDisconnected instanceof Error)) {\n    console.error('Any read from the disconnected storage must cause an error');\n    return;\n  }\n\n  const resultSetCredentialsReadFromStorageDisconnected = await cryptoCredentialsStorage.setCredentials(\n    cryptoKeyPairsGenerated\n  );\n\n  if (!(resultSetCredentialsReadFromStorageDisconnected instanceof Error)) {\n    console.error(\n      'Any write from the disconnected storage must cause an error'\n    );\n    return;\n  }\n  /**\n   * create a new instance\n   * to check if it works\n   * and can to read a stored\n   * piveousely crypto credentials.\n   * Connect with the credentials\n   * exactly same as used\n   * for the first connection\n   */\n\n  const cryptoCredentialsStorageSecondInstance = new CentralAuthorityCredentialsStorage();\n  const connectionResultSecondInstance = await cryptoCredentialsStorageSecondInstance.connect(\n    storageAuthCredentials\n  );\n\n  if (connectionResultSecondInstance instanceof Error) {\n    console.error(\n      'Failed to connect to the secret storage with the second instance'\n    );\n    return;\n  }\n\n  const credentialsReadFromStorage = await cryptoCredentialsStorageSecondInstance.getCredentials();\n\n  if (credentialsReadFromStorage instanceof Error) {\n    console.error(credentials);\n    console.error('Failed to read a credentials read from the second instance');\n    return;\n  }\n  if (credentialsReadFromStorage === null) {\n    console.error('The credentials read by second instance must not be empty');\n    return;\n  }\n\n  const {\n    [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairsStoredByTheFirstInstance,\n  } = credentialsReadFromStorage;\n  const resultTestCredentialsStoredByTheFirstInstance = await runTestForKeyPairs(\n    cryptoKeyPairsStoredByTheFirstInstance\n  );\n\n  if (resultTestCredentialsStoredByTheFirstInstance !== true) {\n    console.warn(\n      'Failed tests for credentials storage keys read from stored values'\n    );\n    return;\n  }\n  console.warn('Succeed in the crypto credentials storage tests');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts",["1499"],"import { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { runTestForKeyPairs } from './central-aurhority.keys.common.test';\n\nexport const runTestKeys = async () => {\n  console.warn('Central authority keys tests start');\n\n  const keyPairs = await generateKeyPairs();\n  return runTestForKeyPairs(keyPairs);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts",["1500","1501"],"import { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst ITERATIONS_COUNT = 60000;\nconst CACHE_CAPACITY = 200;\n\nexport const runTestCachingDecorator = async () => {\n  const values: { [k: string]: string } = {};\n\n  let idx = 0;\n  while (idx < ITERATIONS_COUNT) {\n    values[generateUUID()] = generateUUID();\n    idx += 1;\n  }\n\n  class CachingDecoratorTestClass {\n    @caching(CACHE_CAPACITY)\n    async getValue(key: string): Promise<string | undefined> {\n      return (values as any)[key];\n    }\n  }\n\n  const instance = new CachingDecoratorTestClass();\n  let iteration = 0;\n\n  idx = 0;\n  const keysValues = Object.keys(values);\n  let k;\n\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2 + keysValues.length / 4);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 3 + keysValues.length / 5);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = keysValues.length;\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  console.error('Test for caching decorator succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts",["1502"],"import { expect } from 'chai';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\n\nexport function runTestHttpRequest() {\n  describe('test HttpRequest class', async () => {\n    it('check a response from google.com', async () => {\n      const req = new HttpRequest({\n        url: 'google.com',\n      });\n\n      expect(req).to.be.an.instanceof(HttpRequest);\n      await expect(req.send()).to.eventually.fulfilled;\n    });\n  });\n}\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts",["1503","1504"],"import { SwarmConnectionSubclassIPFS } from 'classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD } from './ipfs-swarm-connection.const';\n\nexport const runTestSwarmConnectionIPFS = async () => {\n  await initializeMocha();\n\n  describe('ipfs swarm connection', () => {\n    it('create ipfs swarm connection', async () => {\n      const connection = new SwarmConnectionSubclassIPFS();\n      const password = SWARM_CONNECTION_PASSWORD;\n\n      try {\n        expect(connection.connect).to.be.a('function');\n        await assert.becomes(connection.connect({\n          password,\n        }), true, 'Connection to the swarm was not established');\n        expect(connection.isConnected).to.equal(true);\n        await assert.becomes(connection.close(), true, 'Connection to the swarm was not closed succesfully');\n        expect(connection.isConnected).to.equal(false);\n        await expect(connection.connect({\n          password,\n        })).to.eventually.be.an.instanceOf(Error);\n        assert(connection.isClosed === true, 'Connection isClosed flag must be true, after the connection was closed previousely');\n        assert(connection.isConnected === false, 'Connection isConnected flag must be false, after the connection was closed previousely');\n        return Promise.resolve();\n      } catch(err) {\n        return Promise.reject(err);\n      }\n    }).timeout(10000)\n  })\n  runMocha();\n};\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts",["1505","1506","1507"],"import { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmConnectionClassSubclassType, ESwarmConnectionSubclassStatus } from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD, SWARM_CONNECTION_OPTIONS } from './ipfs-swarm-connection.const';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from 'classes/basic-classes/status-class-base/status-class-base.const';\n\nexport const runTestSwarmConnection = async () => {\n  describe('swarm connection:: ipfs', () => {\n    it('create ipfs swarm connection', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n      try {\n        await assert.becomes(connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS), true, 'Failed to connect to the Swarm with ipfs');\n        expect(connectionToSwarm.isConnected).to.equal(true);\n        await assert.becomes(connectionToSwarm.close(), true, 'Connection to the swarm was not closed succesfully');\n        expect(connectionToSwarm.isConnected).to.equal(false);\n        await expect(connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS)).to.eventually.be.an.instanceOf(Error);\n        assert(connectionToSwarm.isClosed === true, 'Connection isClosed flag must be true, after the connection was closed previousely');\n        assert(connectionToSwarm.isConnected === false, 'Connection isConnected flag must be false, after the connection was closed previousely');\n        return Promise.resolve();\n      } catch(err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n\n    it('swarm connection: check status', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n\n      const connectionOptions = {\n        type: ESwarmConnectionClassSubclassType.IPFS,\n        subclassOptions: {\n          password: SWARM_CONNECTION_PASSWORD\n        }\n      };\n\n      try {\n        const { statusEmitter } = connectionToSwarm;\n        const statusesEmitted: ESwarmConnectionSubclassStatus[] = [];\n\n        expect(statusEmitter).to.be.an.instanceof(EventEmitter);\n        statusEmitter.addListener(STATUS_CLASS_STATUS_CHANGE_EVENT, status => statusesEmitted.push(status));\n        await assert.becomes(connectionToSwarm.connect(connectionOptions), true, '');\n        expect(statusesEmitted).to.be.an('array').to.include.members([\n          ESwarmConnectionSubclassStatus.CONNECTED,\n          ESwarmConnectionSubclassStatus.CONNECTING,\n          ESwarmConnectionSubclassStatus.STARTED,\n        ]);\n        return Promise.resolve();\n      } catch(err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000)\n\n  })\n};\n","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js",["1508"],"const admin = require('firebase-admin');\nconst serviceKey = require('./firebase.serviceKey.json');\n\nconst removeAllUsers = async () => {\n  const initResult = await admin.initializeApp({\n    credential: admin.credential.cert(serviceKey),\n    databaseURL: 'https://protocol-f251b.firebaseio.com',\n  });\n\n  if (initResult instanceof Error) {\n    console.error(initResult);\n    return new Error(\"Can't initialize the application\");\n  }\n\n  function deleteUser(uid) {\n    admin\n      .auth()\n      .deleteUser(uid)\n      .then(function() {\n        console.log('Successfully deleted user', uid);\n      })\n      .catch(function(error) {\n        console.log('Error deleting user:', error);\n      });\n  }\n\n  function getAllUsers(nextPageToken) {\n    admin\n      .auth()\n      .listUsers(100, nextPageToken)\n      .then(function(listUsersResult) {\n        listUsersResult.users.forEach(function(userRecord) {\n          let uid = userRecord.toJSON().uid;\n          deleteUser(uid);\n        });\n        if (listUsersResult.pageToken) {\n          getAllUsers(listUsersResult.pageToken);\n        }\n      })\n      .catch(function(error) {\n        console.log('Error listing users:', error);\n      });\n  }\n  getAllUsers();\n};\n\nremoveAllUsers();\n","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts",["1509","1510","1511","1512","1513"],"import {\n  generatePasswordKeyAsString,\n  importPasswordKeyFromString,\n  exportPasswordKey,\n} from 'utils/password-utils/derive-key.password-utils';\nimport {\n  encryptDataToArrayBuffer,\n  encryptDataToString,\n  encryptDataWithPassword,\n} from 'utils/password-utils/encrypt.password-utils';\nimport {\n  decryptDataWithKeyNative,\n  decryptDataWithKey,\n  decryptDataByPassword,\n} from 'utils/password-utils/decrypt.password-utils';\n\nconst testKeyGeneration = async () => {\n  /**\n   * test key generation from a password\n   */\n  // const passwordString = '123';\n  // const passwordKey = await generatePasswordKeyAsString(passwordString);\n  // console.log('passwordKey', passwordKey);\n  // const passwordStringAgain = '123';\n  // const passwordKeyAgain = await generatePasswordKeyAsString(\n  //   passwordStringAgain\n  // );\n  // console.log('passwordKeyAgain', passwordKeyAgain);\n  // console.log('isEquals', passwordKeyAgain === passwordKey);\n  // if (typeof passwordKeyAgain === 'string' && typeof passwordKey === 'string') {\n  //   const resultedKeyImported = await importPasswordKeyFromString(passwordKey);\n  //   const resultedKeyImportedAgain = await importPasswordKeyFromString(\n  //     passwordKeyAgain\n  //   );\n  //   if (\n  //     !(resultedKeyImported instanceof Error) &&\n  //     !(resultedKeyImported instanceof Error)\n  //   ) {\n  //     const exportedImported = await exportPasswordKey(resultedKeyImported);\n  //     const exportedAgainImported = await exportPasswordKey(\n  //       resultedKeyImported\n  //     );\n  //     console.log('exportedImported', exportedImported);\n  //     console.log('exportedAgainImported', exportedAgainImported);\n  //     if (\n  //       !(exportedImported instanceof Error) &&\n  //       !(exportedAgainImported instanceof Error)\n  //     ) {\n  //       console.log('isEquals', exportedImported.k === exportedAgainImported.k);\n  //     }\n  //   }\n  // }\n  const passwordString = '12345678';\n  const passwordKey = await generatePasswordKeyAsString(passwordString);\n\n  if (passwordKey instanceof Error) {\n    console.error(passwordKey);\n    return passwordKey;\n  }\n\n  const data = 'test_string';\n  const chipher = await encryptDataToString(passwordKey, data);\n\n  if (chipher instanceof Error) {\n    console.error(chipher);\n    return chipher;\n  }\n  console.log('chipher', chipher);\n  const decrypted = await decryptDataWithKey(passwordKey, chipher);\n\n  if (decrypted instanceof Error) {\n    console.error(decrypted);\n    return decrypted;\n  }\n  console.log('decrypted', decrypted);\n  console.log('is valid', decrypted === data);\n\n  const dataTest = 'test string fo password';\n  const pwd = 'pwd_test';\n  const encrypted = await encryptDataWithPassword(pwd, dataTest);\n\n  if (encrypted instanceof Error) {\n    console.error(encrypted);\n    return encrypted;\n  }\n\n  const decryptedPwd = await decryptDataByPassword(pwd, encrypted);\n\n  if (decryptedPwd instanceof Error) {\n    console.error(decryptedPwd);\n    return decryptedPwd;\n  }\n  console.log('decryptedPwd', decryptedPwd);\n  console.log('is valid', decryptedPwd === dataTest);\n};\n\ntestKeyGeneration();\n","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts",["1514","1515","1516"],"import { SafeStorage } from 'classes/safe-storage-class';\nimport { ESAFE_STORAGE_STORAGE_TYPE } from 'classes/safe-storage-class/safe-storage-class.const';\n\nexport const runTestAppendLogStorage = async () => {\n  const safeStorageAppendLog = new SafeStorage({\n    name: 'testStorage',\n    credentials: {\n      password: 'test_password',\n    },\n    storageType: ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG,\n  });\n\n  console.dir(safeStorageAppendLog);\n\n  const connectionResult = await safeStorageAppendLog.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.dir(safeStorageAppendLog);\n\n  const pushDataResult = await safeStorageAppendLog.set({ hello: new Date() });\n\n  if (pushDataResult instanceof Error) {\n    return pushDataResult;\n  }\n\n  const pushNewDataResult = await safeStorageAppendLog.set({\n    newHello: new Date(),\n  });\n\n  if (pushNewDataResult instanceof Error) {\n    return pushNewDataResult;\n  }\n\n  console.log('data was pushed in append log storage');\n};\n\nexport const runTestKeyValueStorage = async () => {\n  const safeStorage = new SafeStorage({\n    name: 'testStorageKeyValue',\n    credentials: {\n      password: 'test_password_KV',\n    },\n    storageType: ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE,\n  });\n\n  console.dir(safeStorage);\n\n  const connectionResult = await safeStorage.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.dir(safeStorage);\n\n  const pushDataResult = await safeStorage.set(\n    { hello: new Date() },\n    `${new Date()}`\n  );\n\n  if (pushDataResult instanceof Error) {\n    return pushDataResult;\n  }\n\n  const pushNewDataResult = await safeStorage.set(\n    { hello: new Date() },\n    `${new Date()}|||new`\n  );\n\n  if (pushNewDataResult instanceof Error) {\n    return pushNewDataResult;\n  }\n  console.log('data was pushed in key value storage');\n};\n\nexport const runTest = async () => {\n  await runTestAppendLogStorage();\n  // await Promise.all([runTestAppendLogStorage(), runTestKeyValueStorage()]);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts",["1517"],"import { SecretStorage } from 'classes/secret-storage-class';\n\nexport const runTest = async () => {\n  const secretStorage = new SecretStorage();\n  const password = '494949494';\n  const isAuthorized = await secretStorage.authorize({\n    password,\n  });\n\n  if (isAuthorized instanceof Error) {\n    console.error(isAuthorized);\n    return isAuthorized;\n  }\n  console.log('isAuthorized', isAuthorized);\n\n  const secretStorageNewInstance = new SecretStorage();\n  //should connect because authoirized before and credentials are stored (e.g. in the session storage)\n  const connectionResult = await secretStorageNewInstance.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.log('is new instance connected', connectionResult);\n\n  const testValue = 'testy value for the secret storage';\n  const testValueKey = 'test_value';\n  const setTestValueResult = await secretStorage.set(testValueKey, testValue);\n\n  if (setTestValueResult instanceof Error) {\n    console.error(setTestValueResult);\n    return setTestValueResult;\n  }\n  console.log('setTestValueResult', setTestValueResult);\n\n  const getTestValueResult = await secretStorageNewInstance.get(testValueKey);\n\n  if (getTestValueResult instanceof Error) {\n    console.error(getTestValueResult);\n    return getTestValueResult;\n  }\n  console.log('getTestValueResult', getTestValueResult);\n  console.log('is valid', testValue === getTestValueResult);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts",["1518","1519"],"import { ISwarmStoreConnectorOrbitDBOptions } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport { ISecretStorageOptions, ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME = 'database_test';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME = 'database_test_2';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME = 'database_test_3';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [{\n        dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n        isPublic: false,\n    }],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [{\n        dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n        isPublic: true,\n        grantAcess: async (entity, id) => {\n            return true;\n        }\n    }],\n};\n\nconst USER_ID_KEY = '____userId';\nconst TEST_VALUE_KEY = '____test_value';\nfunction promptUserIdAndTestValue() {\n    const userIdStored = localStorage.getItem(USER_ID_KEY);\n\n    if (!userIdStored) {\n        const userId = String(window.prompt('user id', 'test1'));\n\n        localStorage.setItem(USER_ID_KEY, userId);\n    }\n    \n    const testValueStored = localStorage.getItem(TEST_VALUE_KEY);\n\n    if (!testValueStored) {\n        const tstv = String(window.prompt('test value', 'tv'));\n\n        localStorage.setItem(TEST_VALUE_KEY, tstv);\n    }\n}\npromptUserIdAndTestValue();\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE = `${localStorage.getItem(TEST_VALUE_KEY)}${new Date()}`;\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n    id: localStorage.getItem(USER_ID_KEY),\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER,\n    id: localStorage.getItem(USER_ID_KEY),\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO = {\n    dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n    isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE = {\n    dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n    isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [\n        {\n            dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n            isPublic: true,\n        },\n    ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [\n        {\n            dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n            isPublic: true,\n            grantAcess: async (entity, id): Promise<boolean> => {\n                return !!entity && !!id;\n            }\n        },\n    ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER,\n    id: localStorage.getItem(USER_ID_KEY),\n    credentials: {\n        password: '123456',\n    }\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS: Required<ISecretStorageOptions> = {\n    dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS: ISecretStoreCredentials = {\n    password: '123456',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS: Required<ISecretStorageOptions> = {\n    dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts",["1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591"],"import { IPFS } from 'types/ipfs.types';\nimport ipfs from 'ipfs';\nimport { expect, assert } from 'chai';\nimport { SwarmStoreConnectorOrbitDB } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db';\nimport { \n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE, \n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n } from './swarm-storage-orbit-db.test.const';\nimport { SWARM_CONNECTION_OPTIONS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.const';\nimport { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmStoreConnectorOrbitDBEventNames } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const';\nimport { ISwarmStoreConnectorOrbitDbDatabaseValue } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON } from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport const testDatabase = async (\n    connection: SwarmStoreConnectorOrbitDB<string>,\n    dbName: string,\n) => {\n    const testValue = `${new Date()}--te`;\n    const addValueHash = await connection.request(\n        dbName,\n        'add',\n        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n    )\n\n    expect(addValueHash).to.be.a('string');\n   \n    const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n        dbName,\n        'get',\n        addValueHash,\n    );\n   \n    expect(getValueByHashResult.id).to.be.equal((connection as any).orbitDb.identity.id);\n    expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n    expect(getValueByHashResult.value).to.be.equal(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE);\n   \n    await expect(connection.request(\n        dbName,\n        'remove',\n        addValueHash,\n    )).eventually.not.rejected.not.be.an('error');\n\n    const getValueByHashAfterRemoveResult = await connection.request(\n        dbName,\n        'get',\n        addValueHash,\n    );\n    \n    assert(getValueByHashAfterRemoveResult == null, 'The value removed before must be empty');\n}\n\nexport const testDatabaseWithRandomValue = async (\n    connection: SwarmStoreConnectorOrbitDB<string>,\n    dbName: string,\n) => {\n    let i = 0;\n\n    while((i += 1) <= 5) {\n        const testValue = `${new Date()}--test-value`;\n        const addValueHash = await connection.request(\n            dbName,\n            'add',\n            testValue,\n        )\n\n        expect(addValueHash).to.be.a('string');\n    \n        const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = (\n            await connection.request(\n                dbName,\n                'get',\n                addValueHash,\n            )\n        );\n    \n        expect(getValueByHashResult.id).to.be.equal((connection as any).orbitDb.identity.id);\n        expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n        expect(getValueByHashResult.value).to.be.equal(testValue);\n    \n        await expect(connection.request(\n            dbName,\n            'remove',\n            addValueHash,\n        )).eventually.not.rejected.not.be.an('error');\n\n        const getValueByHashAfterRemoveResult = await connection.request(\n            dbName,\n            'get',\n            addValueHash,\n        );\n        \n        assert(getValueByHashAfterRemoveResult == null, 'The value removed before must be empty');\n    }\n}\n\nexport const runTestSwarmStoreOrbitDBConnection = async (name?: string) => {\n    describe('swarm store: orbit db', () => {        \n        let ipfsConnection: IPFS | undefined;\n\n        beforeEach(async function () {\n            this.timeout(60000);\n            const swarmConnection = new SwarmConnection();\n\n            expect(swarmConnection).to.be.an.instanceof(SwarmConnection);\n            await assert.becomes(swarmConnection.connect(SWARM_CONNECTION_OPTIONS), true, '');\n            expect(swarmConnection.isConnected).to.equal(true);\n\n            ipfsConnection = swarmConnection.getNativeConnection();\n\n            expect(ipfsConnection).to.be.an.instanceof(ipfs);\n        });\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases') {\n            it('create swarm store OrbitDB connector - 3 databases', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n    \n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES);\n    \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n    \n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n    \n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n    \n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert((fullProgressEmitted as boolean) === true, 'The event 100% loading progress does not emitted')\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES.databases.map(db => db.dbName)\n                    );\n                \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database, check database close') {\n            it('create swarm store OrbitDB connector - 1 database, check database close', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE);\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert((fullProgressEmitted as boolean) === true, 'The event 100% loading progress does not emitted')\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n\n                //\n                await expect(connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO))\n                    .to.eventually.be.undefined;\n                await expect(connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO))\n                    .to.eventually.be.an('error');\n\n                //\n                const result = await Promise.all([\n                    connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE),\n                    connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE),\n                ]);\n\n                expect(result)\n                    .to.be.an('array').that.has.property('length', 2);\n                assert(result[0] == null, 'The first instance must be started');\n                expect(result[1]).to.be.an.instanceof(Error);\n\n                let isEmitDbClose: boolean = false;\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE, (dbName: string) => {\n                    if (dbName === SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME) {\n                        isEmitDbClose = true;\n                    }\n                })\n                await expect(connection.closeDb(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME)).to.eventually.eq(undefined);\n                expect(isEmitDbClose).to.be.equal(true);\n                await expect(connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'get',\n                    '111'\n                )).to.eventually.be.an('Error');\n                \n                let isCloseEmitted: boolean = false;\n\n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n\n                await expect(connection.close()).to.eventually.be.undefined;\n\n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n\n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database with custom identity') {\n            it('create swarm store OrbitDB connector - 1 database with custom identity', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY as any,\n                );\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database with custom acccess provider') {\n            it('create swarm store OrbitDB connector - 1 database with custom acccess provider', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER as any,\n                );\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore') {\n            it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any,\n                );\n                \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                        \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore -- with random loop') {\n            it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any,\n                );\n                \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                        \n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n    })\n\n    async function testCache(cache: SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter) {\n        const testKey = '___test_key__cache';\n        const testValue = '___test_value_cache';\n\n        expect(cache)\n            .to.be.an\n            .instanceof(SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter);\n        expect(cache.db).to.deep.equal({\n            status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        })\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        await expect(cache!.get(\n            testKey,\n        )).to.be.eventually.oneOf([testValue, undefined]);\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        await expect(cache!.put(\n            testKey,\n            testValue,\n        )).to.eventually.be.fulfilled;\n        await expect(cache!.open()).to.eventually.be.fulfilled;\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(cache!.get(\n            testKey,\n        )).to.be.eventually.equal(testValue);\n\n        const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n        const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n        await expect(cache!.put(\n            testKeyRandom,\n            testValueRandom,\n        )).to.eventually.be.fulfilled;\n        // TODO - must provide storing values as buffer fo the SecretStorage\n\n        let cbCalledTimes = 0;\n        const cb = (err: Error | undefined, value: string | undefined) => {\n            if (!err) {\n                cbCalledTimes += Number(!!value);\n            }\n        }\n\n        await expect(cache!.get(\n            testKeyRandom,\n            cb,\n        )).to.be.eventually.equal(testValueRandom);\n        expect(cbCalledTimes).to.equal(1);\n\n        const cbErr = (err: Error | undefined) => {\n            if (!err) {\n                cbCalledTimes += 1;\n            }\n        }\n\n        await expect(cache!.del(\n            testKeyRandom,\n            cbErr,\n        )).to.be.eventually.equal(undefined);\n        expect(cbCalledTimes).to.equal(2);\n        await expect(cache!.close(cbErr,)).to.eventually.be.fulfilled;\n        expect(cbCalledTimes).to.equal(3);\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE);\n    }\n\n    describe('swarm store:: orbit db:: subclasses', () => {\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter') { \n            it('subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter', async () => {\n                let secretStorageAdapter: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n                const testKey = '___test_key';\n                const testValue = '___test_value';\n\n                expect(() => {\n                    secretStorageAdapter = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n                    );\n                }).to.not.throw();\n                expect(secretStorageAdapter)\n                    .to.be.an\n                    .instanceof(SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter);\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                await expect(secretStorageAdapter!.get(\n                    testKey,\n                )).to.be.eventually.oneOf([testValue, undefined]);\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                await expect(secretStorageAdapter!.put(\n                    testKey,\n                    testValue,\n                )).to.eventually.be.fulfilled;\n                await expect(secretStorageAdapter!.open()).to.eventually.be.fulfilled;\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                // TODO - must provide storing values as buffer fo the SecretStorage\n                await expect(secretStorageAdapter!.get(\n                    testKey,\n                )).to.be.eventually.equal(testValue);\n\n                const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n                const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n                await expect(secretStorageAdapter!.put(\n                    testKeyRandom,\n                    testValueRandom,\n                )).to.eventually.be.fulfilled;\n                // TODO - must provide storing values as buffer fo the SecretStorage\n                await expect(secretStorageAdapter!.get(\n                    testKeyRandom,\n                )).to.be.eventually.equal(testValueRandom);\n                await expect(secretStorageAdapter!.close()).to.eventually.be.fulfilled;\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE);\n            }).timeout(10000);\n        }\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-storage-cache') {\n            it('subclass swarm-store-connector-orbit-db-subclass-storage-cache', async () => {\n                const password = '123456';\n                let key: CryptoKey;\n                let cache: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n                await expect((async () => {\n                    key = await SecretStorage.generatePasswordKeyByPasswordString(password) as CryptoKey;\n                    return key;\n                })()).to.eventually.be.fulfilled;\n\n                expect(key!).to.be.an.instanceOf(CryptoKey);\n                expect(() => {\n                    cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n                        { key },\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n                    );\n                }).to.not.throw();\n                await testCache(cache!);\n            }).timeout(10000);\n        }\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-storage-fabric') {\n            it('subclass swarm-store-connector-orbit-db-subclass-storage-fabric', async () => {\n                const password = '123456';\n                const cachePath = '___cachePath_test';\n                const passwordFailed = '12345';\n\n                expect(() => {\n                    new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n                        { password: passwordFailed}\n                    );\n                }).to.throw();\n\n                let fabric: undefined | SwarmStoreConnectorOrbitDBSubclassStorageFabric;\n                let cache: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n                expect(() => {\n                    fabric = new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n                        { password }\n                    );\n                }).not.to.throw();\n                expect(fabric).to.be.instanceOf(SwarmStoreConnectorOrbitDBSubclassStorageFabric);\n                await expect((async () => {\n                    cache = await fabric!.createStore(cachePath) as SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n                })()).to.eventually.be.fulfilled;\n                await testCache(cache!);\n            }).timeout(10000);\n        }\n    });\n};","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts",["1592"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const runTest = () => {\n  const schema = {\n    title: 'test',\n    type: 'object',\n    $id: 'http://test.schema',\n    description: 'schema for testing of the validation functionality',\n    properties: {\n      notRequired: {\n        type: 'string',\n      },\n      required: {\n        type: 'array',\n        items: {\n          oneOf: [\n            {\n              type: 'number',\n            },\n            {\n              type: 'string',\n            },\n          ],\n        },\n      },\n    },\n    required: ['required'],\n    additionalProperties: false,\n  };\n\n  const result = validateBySchema(schema, undefined);\n\n  if (result !== false) {\n    console.error('Wrong result for undefined');\n  }\n\n  const testData1 = {\n    required: ['1', 1],\n  };\n  const result1 = validateBySchema(schema, testData1);\n\n  if (result1 !== true) {\n    console.error('Wrong result for requered field');\n  }\n\n  const testData2 = {\n    notRequired: '1',\n  };\n  const result2 = validateBySchema(schema, testData2);\n\n  if (result2 !== false) {\n    console.error('Wrong result for data with no required field');\n  }\n\n  const testData3 = {\n    notRequired: '1',\n    required: ['1', 1],\n  };\n  const result3 = validateBySchema(schema, testData3);\n\n  if (result3 !== true) {\n    console.error('Wrong result for data with all fields');\n  }\n\n  const testData4 = {\n    notRequired: '1',\n    required: ['1', 1],\n    additional: 1,\n  };\n  const result4 = validateBySchema(schema, testData4);\n\n  if (result4 !== false) {\n    console.error('Wrong result for data with additional fields');\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609"],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["1610","1611"],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",["1612"],"/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts",[],{"ruleId":"1613","severity":1,"message":"1614","line":2,"column":8,"nodeType":"1615","endLine":2,"endColumn":12},{"ruleId":"1613","severity":1,"message":"1616","line":5,"column":10,"nodeType":"1615","endLine":5,"endColumn":43},{"ruleId":"1613","severity":1,"message":"1617","line":6,"column":10,"nodeType":"1615","endLine":6,"endColumn":43},{"ruleId":"1613","severity":1,"message":"1618","line":7,"column":10,"nodeType":"1615","endLine":7,"endColumn":57},{"ruleId":"1613","severity":1,"message":"1619","line":9,"column":3,"nodeType":"1615","endLine":9,"endColumn":30},{"ruleId":"1613","severity":1,"message":"1620","line":10,"column":3,"nodeType":"1615","endLine":10,"endColumn":77},{"ruleId":"1613","severity":1,"message":"1621","line":12,"column":10,"nodeType":"1615","endLine":12,"endColumn":30},{"ruleId":"1613","severity":1,"message":"1622","line":13,"column":10,"nodeType":"1615","endLine":13,"endColumn":32},{"ruleId":"1613","severity":1,"message":"1623","line":14,"column":10,"nodeType":"1615","endLine":14,"endColumn":36},{"ruleId":"1613","severity":1,"message":"1624","line":16,"column":10,"nodeType":"1615","endLine":16,"endColumn":44},{"ruleId":"1613","severity":1,"message":"1625","line":17,"column":10,"nodeType":"1615","endLine":17,"endColumn":48},{"ruleId":"1613","severity":1,"message":"1626","line":18,"column":10,"nodeType":"1615","endLine":18,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":52,"column":17,"nodeType":"1629","messageId":"1630","endLine":52,"endColumn":28},{"ruleId":"1613","severity":1,"message":"1631","line":2,"column":10,"nodeType":"1615","endLine":2,"endColumn":13},{"ruleId":"1632","severity":1,"message":"1633","line":9,"column":56,"nodeType":"1634","messageId":"1635","endLine":9,"endColumn":59},{"ruleId":"1632","severity":1,"message":"1633","line":15,"column":55,"nodeType":"1634","messageId":"1635","endLine":15,"endColumn":58},{"ruleId":"1627","severity":1,"message":"1628","line":14,"column":3,"nodeType":"1636","messageId":"1630","endLine":14,"endColumn":69},{"ruleId":"1627","severity":1,"message":"1628","line":20,"column":3,"nodeType":"1636","messageId":"1630","endLine":20,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1628","line":27,"column":3,"nodeType":"1636","messageId":"1630","endLine":27,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1628","line":33,"column":3,"nodeType":"1636","messageId":"1630","endLine":33,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":49,"column":3,"nodeType":"1636","messageId":"1630","endLine":49,"endColumn":38},{"ruleId":"1637","severity":1,"message":"1638","line":87,"column":15,"nodeType":"1639","messageId":"1640","endLine":87,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":20,"column":3,"nodeType":"1636","messageId":"1630","endLine":20,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1628","line":27,"column":3,"nodeType":"1636","messageId":"1630","endLine":27,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1628","line":33,"column":3,"nodeType":"1636","messageId":"1630","endLine":33,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1628","line":67,"column":3,"nodeType":"1636","messageId":"1630","endLine":67,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1641","line":32,"column":9,"nodeType":"1615","endLine":32,"endColumn":15},{"ruleId":"1613","severity":1,"message":"1642","line":8,"column":10,"nodeType":"1615","endLine":8,"endColumn":20},{"ruleId":"1632","severity":1,"message":"1633","line":77,"column":27,"nodeType":"1634","messageId":"1635","endLine":77,"endColumn":30},{"ruleId":"1632","severity":1,"message":"1633","line":78,"column":39,"nodeType":"1634","messageId":"1635","endLine":78,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":91,"column":17,"nodeType":"1629","messageId":"1630","endLine":91,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1638","line":98,"column":36,"nodeType":"1639","messageId":"1640","endLine":98,"endColumn":40},{"ruleId":"1632","severity":1,"message":"1633","line":130,"column":38,"nodeType":"1634","messageId":"1635","endLine":130,"endColumn":41},{"ruleId":"1627","severity":1,"message":"1628","line":223,"column":3,"nodeType":"1636","messageId":"1630","endLine":223,"endColumn":53},{"ruleId":"1613","severity":1,"message":"1643","line":38,"column":7,"nodeType":"1615","endLine":38,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1628","line":59,"column":3,"nodeType":"1636","messageId":"1630","endLine":59,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1628","line":65,"column":3,"nodeType":"1636","messageId":"1630","endLine":65,"endColumn":20},{"ruleId":"1627","severity":1,"message":"1628","line":20,"column":28,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":65},{"ruleId":"1627","severity":1,"message":"1628","line":35,"column":3,"nodeType":"1636","messageId":"1630","endLine":35,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":42,"column":3,"nodeType":"1636","messageId":"1630","endLine":42,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1628","line":60,"column":3,"nodeType":"1636","messageId":"1630","endLine":62,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":81,"column":20,"nodeType":"1629","messageId":"1630","endLine":81,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1628","line":85,"column":3,"nodeType":"1636","messageId":"1630","endLine":85,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1628","line":89,"column":3,"nodeType":"1636","messageId":"1630","endLine":89,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1628","line":96,"column":3,"nodeType":"1636","messageId":"1630","endLine":96,"endColumn":10},{"ruleId":"1627","severity":1,"message":"1628","line":101,"column":3,"nodeType":"1636","messageId":"1630","endLine":101,"endColumn":9},{"ruleId":"1627","severity":1,"message":"1628","line":8,"column":31,"nodeType":"1629","messageId":"1630","endLine":12,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1628","line":41,"column":5,"nodeType":"1636","messageId":"1630","endLine":41,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":45,"column":5,"nodeType":"1636","messageId":"1630","endLine":45,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":49,"column":5,"nodeType":"1636","messageId":"1630","endLine":49,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":64,"column":14,"nodeType":"1629","messageId":"1630","endLine":64,"endColumn":19},{"ruleId":"1644","severity":1,"message":"1645","line":49,"column":3,"nodeType":"1646","endLine":49,"endColumn":62},{"ruleId":"1647","severity":1,"message":"1648","line":49,"column":60,"nodeType":"1636","messageId":"1649"},{"ruleId":"1613","severity":1,"message":"1650","line":2,"column":3,"nodeType":"1615","endLine":2,"endColumn":28},{"ruleId":"1613","severity":1,"message":"1651","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":41},{"ruleId":"1613","severity":1,"message":"1652","line":1,"column":10,"nodeType":"1615","endLine":1,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":13,"column":20,"nodeType":"1634","messageId":"1635","endLine":13,"endColumn":23},{"ruleId":"1632","severity":1,"message":"1633","line":2,"column":7,"nodeType":"1634","messageId":"1635","endLine":2,"endColumn":10},{"ruleId":"1613","severity":1,"message":"1653","line":9,"column":10,"nodeType":"1615","endLine":9,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":13,"column":12,"nodeType":"1634","messageId":"1635","endLine":13,"endColumn":15},{"ruleId":"1632","severity":1,"message":"1633","line":47,"column":28,"nodeType":"1634","messageId":"1635","endLine":47,"endColumn":31},{"ruleId":"1632","severity":1,"message":"1633","line":67,"column":28,"nodeType":"1634","messageId":"1635","endLine":67,"endColumn":31},{"ruleId":"1632","severity":1,"message":"1633","line":35,"column":58,"nodeType":"1634","messageId":"1635","endLine":35,"endColumn":61},{"ruleId":"1627","severity":1,"message":"1628","line":151,"column":3,"nodeType":"1636","messageId":"1630","endLine":153,"endColumn":4},{"ruleId":"1613","severity":1,"message":"1654","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":41},{"ruleId":"1637","severity":1,"message":"1638","line":82,"column":14,"nodeType":"1639","messageId":"1640","endLine":82,"endColumn":19},{"ruleId":"1637","severity":1,"message":"1638","line":82,"column":14,"nodeType":"1639","messageId":"1640","endLine":82,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1628","line":134,"column":3,"nodeType":"1636","messageId":"1630","endLine":134,"endColumn":76},{"ruleId":"1632","severity":1,"message":"1633","line":166,"column":29,"nodeType":"1634","messageId":"1635","endLine":166,"endColumn":32},{"ruleId":"1632","severity":1,"message":"1633","line":196,"column":29,"nodeType":"1634","messageId":"1635","endLine":196,"endColumn":32},{"ruleId":"1632","severity":1,"message":"1633","line":233,"column":20,"nodeType":"1634","messageId":"1635","endLine":233,"endColumn":23},{"ruleId":"1613","severity":1,"message":"1652","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1628","line":18,"column":3,"nodeType":"1636","messageId":"1630","endLine":18,"endColumn":56},{"ruleId":"1627","severity":1,"message":"1628","line":22,"column":3,"nodeType":"1636","messageId":"1630","endLine":22,"endColumn":64},{"ruleId":"1632","severity":1,"message":"1633","line":35,"column":32,"nodeType":"1634","messageId":"1635","endLine":35,"endColumn":35},{"ruleId":"1637","severity":1,"message":"1638","line":88,"column":13,"nodeType":"1639","messageId":"1640","endLine":88,"endColumn":23},{"ruleId":"1637","severity":1,"message":"1638","line":88,"column":13,"nodeType":"1639","messageId":"1640","endLine":88,"endColumn":22},{"ruleId":"1637","severity":1,"message":"1638","line":119,"column":13,"nodeType":"1639","messageId":"1640","endLine":119,"endColumn":23},{"ruleId":"1637","severity":1,"message":"1638","line":119,"column":13,"nodeType":"1639","messageId":"1640","endLine":119,"endColumn":22},{"ruleId":"1637","severity":1,"message":"1638","line":137,"column":30,"nodeType":"1639","messageId":"1640","endLine":137,"endColumn":40},{"ruleId":"1637","severity":1,"message":"1638","line":137,"column":30,"nodeType":"1639","messageId":"1640","endLine":137,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1638","line":64,"column":26,"nodeType":"1639","messageId":"1640","endLine":64,"endColumn":31},{"ruleId":"1637","severity":1,"message":"1638","line":64,"column":26,"nodeType":"1639","messageId":"1640","endLine":64,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1628","line":127,"column":3,"nodeType":"1636","messageId":"1630","endLine":127,"endColumn":70},{"ruleId":"1627","severity":1,"message":"1628","line":134,"column":3,"nodeType":"1636","messageId":"1630","endLine":134,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1628","line":189,"column":3,"nodeType":"1636","messageId":"1630","endLine":191,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":234,"column":3,"nodeType":"1636","messageId":"1630","endLine":234,"endColumn":33},{"ruleId":"1613","severity":1,"message":"1655","line":284,"column":9,"nodeType":"1615","endLine":284,"endColumn":21},{"ruleId":"1637","severity":1,"message":"1638","line":588,"column":48,"nodeType":"1639","messageId":"1640","endLine":588,"endColumn":81},{"ruleId":"1637","severity":1,"message":"1638","line":588,"column":48,"nodeType":"1639","messageId":"1640","endLine":588,"endColumn":82},{"ruleId":"1637","severity":1,"message":"1638","line":611,"column":40,"nodeType":"1639","messageId":"1640","endLine":611,"endColumn":73},{"ruleId":"1637","severity":1,"message":"1638","line":611,"column":40,"nodeType":"1639","messageId":"1640","endLine":611,"endColumn":74},{"ruleId":"1637","severity":1,"message":"1638","line":801,"column":26,"nodeType":"1639","messageId":"1640","endLine":801,"endColumn":76},{"ruleId":"1637","severity":1,"message":"1638","line":801,"column":26,"nodeType":"1639","messageId":"1640","endLine":801,"endColumn":75},{"ruleId":"1637","severity":1,"message":"1638","line":920,"column":13,"nodeType":"1639","messageId":"1640","endLine":920,"endColumn":18},{"ruleId":"1637","severity":1,"message":"1638","line":920,"column":13,"nodeType":"1639","messageId":"1640","endLine":920,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1628","line":930,"column":3,"nodeType":"1636","messageId":"1630","endLine":930,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":98,"column":49,"nodeType":"1634","messageId":"1635","endLine":98,"endColumn":52},{"ruleId":"1627","severity":1,"message":"1628","line":114,"column":3,"nodeType":"1636","messageId":"1630","endLine":114,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":192,"column":3,"nodeType":"1636","messageId":"1630","endLine":192,"endColumn":20},{"ruleId":"1632","severity":1,"message":"1633","line":230,"column":12,"nodeType":"1634","messageId":"1635","endLine":230,"endColumn":15},{"ruleId":"1613","severity":1,"message":"1656","line":5,"column":3,"nodeType":"1615","endLine":5,"endColumn":49},{"ruleId":"1613","severity":1,"message":"1642","line":7,"column":10,"nodeType":"1615","endLine":7,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1657","line":7,"column":3,"nodeType":"1615","endLine":7,"endColumn":44},{"ruleId":"1613","severity":1,"message":"1658","line":23,"column":3,"nodeType":"1615","endLine":23,"endColumn":44},{"ruleId":"1637","severity":1,"message":"1638","line":157,"column":41,"nodeType":"1639","messageId":"1640","endLine":157,"endColumn":66},{"ruleId":"1637","severity":1,"message":"1638","line":157,"column":41,"nodeType":"1639","messageId":"1640","endLine":157,"endColumn":65},{"ruleId":"1637","severity":1,"message":"1638","line":235,"column":14,"nodeType":"1639","messageId":"1640","endLine":235,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1638","line":235,"column":14,"nodeType":"1639","messageId":"1640","endLine":235,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":286,"column":40,"nodeType":"1634","messageId":"1635","endLine":286,"endColumn":43},{"ruleId":"1632","severity":1,"message":"1633","line":19,"column":58,"nodeType":"1634","messageId":"1635","endLine":19,"endColumn":61},{"ruleId":"1632","severity":1,"message":"1633","line":34,"column":13,"nodeType":"1634","messageId":"1635","endLine":34,"endColumn":16},{"ruleId":"1632","severity":1,"message":"1633","line":64,"column":13,"nodeType":"1634","messageId":"1635","endLine":64,"endColumn":16},{"ruleId":"1632","severity":1,"message":"1633","line":87,"column":15,"nodeType":"1634","messageId":"1635","endLine":87,"endColumn":18},{"ruleId":"1613","severity":1,"message":"1659","line":11,"column":3,"nodeType":"1615","endLine":11,"endColumn":23},{"ruleId":"1613","severity":1,"message":"1660","line":23,"column":10,"nodeType":"1615","endLine":23,"endColumn":33},{"ruleId":"1613","severity":1,"message":"1661","line":14,"column":3,"nodeType":"1615","endLine":14,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":113,"column":30,"nodeType":"1634","messageId":"1635","endLine":113,"endColumn":33},{"ruleId":"1632","severity":1,"message":"1633","line":146,"column":28,"nodeType":"1634","messageId":"1635","endLine":146,"endColumn":31},{"ruleId":"1632","severity":1,"message":"1633","line":16,"column":45,"nodeType":"1634","messageId":"1635","endLine":16,"endColumn":48},{"ruleId":"1632","severity":1,"message":"1633","line":20,"column":6,"nodeType":"1634","messageId":"1635","endLine":20,"endColumn":9},{"ruleId":"1632","severity":1,"message":"1633","line":48,"column":6,"nodeType":"1634","messageId":"1635","endLine":48,"endColumn":9},{"ruleId":"1632","severity":1,"message":"1633","line":52,"column":6,"nodeType":"1634","messageId":"1635","endLine":52,"endColumn":9},{"ruleId":"1632","severity":1,"message":"1633","line":62,"column":6,"nodeType":"1634","messageId":"1635","endLine":62,"endColumn":9},{"ruleId":"1632","severity":1,"message":"1633","line":18,"column":62,"nodeType":"1634","messageId":"1635","endLine":18,"endColumn":65},{"ruleId":"1632","severity":1,"message":"1633","line":29,"column":22,"nodeType":"1634","messageId":"1635","endLine":29,"endColumn":25},{"ruleId":"1632","severity":1,"message":"1633","line":75,"column":22,"nodeType":"1634","messageId":"1635","endLine":75,"endColumn":25},{"ruleId":"1632","severity":1,"message":"1633","line":114,"column":38,"nodeType":"1634","messageId":"1635","endLine":114,"endColumn":41},{"ruleId":"1632","severity":1,"message":"1633","line":6,"column":16,"nodeType":"1634","messageId":"1635","endLine":6,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1628","line":40,"column":3,"nodeType":"1636","messageId":"1630","endLine":40,"endColumn":50},{"ruleId":"1627","severity":1,"message":"1628","line":46,"column":3,"nodeType":"1636","messageId":"1630","endLine":46,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1628","line":125,"column":3,"nodeType":"1636","messageId":"1630","endLine":125,"endColumn":29},{"ruleId":"1613","severity":1,"message":"1662","line":546,"column":38,"nodeType":"1615","endLine":546,"endColumn":44},{"ruleId":"1627","severity":1,"message":"1628","line":699,"column":3,"nodeType":"1636","messageId":"1630","endLine":699,"endColumn":61},{"ruleId":"1613","severity":1,"message":"1662","line":858,"column":38,"nodeType":"1615","endLine":858,"endColumn":44},{"ruleId":"1627","severity":1,"message":"1628","line":891,"column":3,"nodeType":"1636","messageId":"1630","endLine":891,"endColumn":35},{"ruleId":"1632","severity":1,"message":"1633","line":972,"column":34,"nodeType":"1634","messageId":"1635","endLine":972,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":1100,"column":3,"nodeType":"1636","messageId":"1630","endLine":1100,"endColumn":41},{"ruleId":"1613","severity":1,"message":"1663","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":28},{"ruleId":"1613","severity":1,"message":"1664","line":3,"column":8,"nodeType":"1615","endLine":3,"endColumn":20},{"ruleId":"1637","severity":1,"message":"1638","line":145,"column":26,"nodeType":"1639","messageId":"1640","endLine":145,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1638","line":169,"column":26,"nodeType":"1639","messageId":"1640","endLine":169,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":189,"column":3,"nodeType":"1636","messageId":"1630","endLine":189,"endColumn":32},{"ruleId":"1637","severity":1,"message":"1638","line":155,"column":26,"nodeType":"1639","messageId":"1640","endLine":155,"endColumn":39},{"ruleId":"1637","severity":1,"message":"1638","line":179,"column":26,"nodeType":"1639","messageId":"1640","endLine":179,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":184,"column":37,"nodeType":"1634","messageId":"1635","endLine":184,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1628","line":202,"column":3,"nodeType":"1636","messageId":"1630","endLine":202,"endColumn":32},{"ruleId":"1613","severity":1,"message":"1665","line":17,"column":22,"nodeType":"1615","endLine":17,"endColumn":30},{"ruleId":"1632","severity":1,"message":"1633","line":110,"column":30,"nodeType":"1634","messageId":"1635","endLine":110,"endColumn":33},{"ruleId":"1627","severity":1,"message":"1628","line":182,"column":3,"nodeType":"1636","messageId":"1630","endLine":182,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1628","line":188,"column":3,"nodeType":"1636","messageId":"1630","endLine":188,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1628","line":482,"column":3,"nodeType":"1636","messageId":"1630","endLine":482,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1666","line":1,"column":10,"nodeType":"1615","endLine":1,"endColumn":64},{"ruleId":"1613","severity":1,"message":"1667","line":1,"column":8,"nodeType":"1615","endLine":1,"endColumn":17},{"ruleId":"1613","severity":1,"message":"1668","line":5,"column":3,"nodeType":"1615","endLine":5,"endColumn":70},{"ruleId":"1627","severity":1,"message":"1628","line":24,"column":33,"nodeType":"1629","messageId":"1630","endLine":24,"endColumn":47},{"ruleId":"1632","severity":1,"message":"1633","line":24,"column":40,"nodeType":"1634","messageId":"1635","endLine":24,"endColumn":43},{"ruleId":"1632","severity":1,"message":"1633","line":22,"column":20,"nodeType":"1634","messageId":"1635","endLine":22,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1628","line":92,"column":3,"nodeType":"1636","messageId":"1630","endLine":92,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1628","line":108,"column":3,"nodeType":"1636","messageId":"1630","endLine":108,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":108,"column":38,"nodeType":"1634","messageId":"1635","endLine":108,"endColumn":41},{"ruleId":"1627","severity":1,"message":"1628","line":112,"column":3,"nodeType":"1636","messageId":"1630","endLine":112,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1628","line":122,"column":3,"nodeType":"1636","messageId":"1630","endLine":122,"endColumn":57},{"ruleId":"1632","severity":1,"message":"1633","line":150,"column":46,"nodeType":"1634","messageId":"1635","endLine":150,"endColumn":49},{"ruleId":"1627","severity":1,"message":"1628","line":157,"column":29,"nodeType":"1629","messageId":"1630","endLine":157,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1628","line":162,"column":27,"nodeType":"1629","messageId":"1630","endLine":162,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1628","line":171,"column":33,"nodeType":"1629","messageId":"1630","endLine":171,"endColumn":38},{"ruleId":"1627","severity":1,"message":"1628","line":176,"column":26,"nodeType":"1629","messageId":"1630","endLine":176,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1628","line":186,"column":3,"nodeType":"1636","messageId":"1630","endLine":189,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":198,"column":30,"nodeType":"1629","messageId":"1630","endLine":198,"endColumn":56},{"ruleId":"1627","severity":1,"message":"1628","line":302,"column":3,"nodeType":"1636","messageId":"1630","endLine":302,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":307,"column":3,"nodeType":"1636","messageId":"1630","endLine":307,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":30,"column":3,"nodeType":"1636","messageId":"1630","endLine":30,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":128,"column":3,"nodeType":"1636","messageId":"1630","endLine":128,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1628","line":132,"column":3,"nodeType":"1636","messageId":"1630","endLine":135,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":144,"column":3,"nodeType":"1636","messageId":"1630","endLine":144,"endColumn":78},{"ruleId":"1627","severity":1,"message":"1628","line":148,"column":3,"nodeType":"1636","messageId":"1630","endLine":148,"endColumn":78},{"ruleId":"1627","severity":1,"message":"1628","line":153,"column":3,"nodeType":"1636","messageId":"1630","endLine":155,"endColumn":4},{"ruleId":"1644","severity":1,"message":"1645","line":4,"column":3,"nodeType":"1646","endLine":4,"endColumn":70},{"ruleId":"1647","severity":1,"message":"1648","line":4,"column":68,"nodeType":"1636","messageId":"1649"},{"ruleId":"1613","severity":1,"message":"1669","line":1,"column":8,"nodeType":"1615","endLine":1,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1628","line":421,"column":3,"nodeType":"1636","messageId":"1630","endLine":421,"endColumn":58},{"ruleId":"1632","severity":1,"message":"1633","line":161,"column":33,"nodeType":"1634","messageId":"1635","endLine":161,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1628","line":224,"column":3,"nodeType":"1636","messageId":"1630","endLine":226,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":208,"column":3,"nodeType":"1636","messageId":"1630","endLine":208,"endColumn":49},{"ruleId":"1627","severity":1,"message":"1628","line":212,"column":3,"nodeType":"1636","messageId":"1630","endLine":212,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":222,"column":42,"nodeType":"1629","messageId":"1630","endLine":222,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1628","line":250,"column":3,"nodeType":"1636","messageId":"1630","endLine":250,"endColumn":68},{"ruleId":"1627","severity":1,"message":"1628","line":266,"column":3,"nodeType":"1636","messageId":"1630","endLine":269,"endColumn":4},{"ruleId":"1632","severity":1,"message":"1633","line":268,"column":14,"nodeType":"1634","messageId":"1635","endLine":268,"endColumn":17},{"ruleId":"1637","severity":1,"message":"1638","line":271,"column":24,"nodeType":"1639","messageId":"1640","endLine":271,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1628","line":280,"column":3,"nodeType":"1636","messageId":"1630","endLine":280,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":287,"column":24,"nodeType":"1629","messageId":"1630","endLine":287,"endColumn":29},{"ruleId":"1637","severity":1,"message":"1638","line":289,"column":19,"nodeType":"1639","messageId":"1640","endLine":289,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":292,"column":26,"nodeType":"1634","messageId":"1635","endLine":292,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1628","line":300,"column":34,"nodeType":"1629","messageId":"1630","endLine":300,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":307,"column":35,"nodeType":"1629","messageId":"1630","endLine":307,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1628","line":312,"column":41,"nodeType":"1629","messageId":"1630","endLine":318,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1628","line":323,"column":39,"nodeType":"1629","messageId":"1630","endLine":323,"endColumn":44},{"ruleId":"1627","severity":1,"message":"1628","line":332,"column":35,"nodeType":"1629","messageId":"1630","endLine":332,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1628","line":398,"column":48,"nodeType":"1629","messageId":"1630","endLine":404,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1628","line":460,"column":3,"nodeType":"1636","messageId":"1630","endLine":462,"endColumn":4},{"ruleId":"1637","severity":1,"message":"1638","line":511,"column":26,"nodeType":"1639","messageId":"1640","endLine":511,"endColumn":34},{"ruleId":"1632","severity":1,"message":"1633","line":84,"column":11,"nodeType":"1634","messageId":"1635","endLine":84,"endColumn":14},{"ruleId":"1637","severity":1,"message":"1638","line":94,"column":23,"nodeType":"1639","messageId":"1640","endLine":94,"endColumn":32},{"ruleId":"1637","severity":1,"message":"1638","line":100,"column":27,"nodeType":"1639","messageId":"1640","endLine":100,"endColumn":36},{"ruleId":"1632","severity":1,"message":"1633","line":100,"column":40,"nodeType":"1634","messageId":"1635","endLine":100,"endColumn":43},{"ruleId":"1627","severity":1,"message":"1628","line":36,"column":3,"nodeType":"1636","messageId":"1630","endLine":36,"endColumn":18},{"ruleId":"1627","severity":1,"message":"1628","line":152,"column":3,"nodeType":"1636","messageId":"1630","endLine":152,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1628","line":157,"column":3,"nodeType":"1636","messageId":"1630","endLine":157,"endColumn":22},{"ruleId":"1647","severity":1,"message":"1670","line":157,"column":23,"nodeType":"1636","messageId":"1649"},{"ruleId":"1627","severity":1,"message":"1628","line":160,"column":3,"nodeType":"1636","messageId":"1630","endLine":160,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1628","line":168,"column":3,"nodeType":"1636","messageId":"1630","endLine":168,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1628","line":172,"column":3,"nodeType":"1636","messageId":"1630","endLine":172,"endColumn":25},{"ruleId":"1627","severity":1,"message":"1628","line":212,"column":3,"nodeType":"1636","messageId":"1630","endLine":214,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":245,"column":3,"nodeType":"1636","messageId":"1630","endLine":245,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1628","line":249,"column":3,"nodeType":"1636","messageId":"1630","endLine":249,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1628","line":257,"column":3,"nodeType":"1636","messageId":"1630","endLine":257,"endColumn":31},{"ruleId":"1613","severity":1,"message":"1671","line":2,"column":10,"nodeType":"1615","endLine":2,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1628","line":48,"column":3,"nodeType":"1636","messageId":"1630","endLine":48,"endColumn":46},{"ruleId":"1627","severity":1,"message":"1628","line":59,"column":3,"nodeType":"1636","messageId":"1630","endLine":59,"endColumn":46},{"ruleId":"1632","severity":1,"message":"1633","line":76,"column":24,"nodeType":"1634","messageId":"1635","endLine":76,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":271,"column":22,"nodeType":"1634","messageId":"1635","endLine":271,"endColumn":25},{"ruleId":"1632","severity":1,"message":"1633","line":286,"column":42,"nodeType":"1634","messageId":"1635","endLine":286,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1628","line":318,"column":27,"nodeType":"1629","messageId":"1630","endLine":318,"endColumn":32},{"ruleId":"1627","severity":1,"message":"1628","line":357,"column":3,"nodeType":"1636","messageId":"1630","endLine":357,"endColumn":50},{"ruleId":"1627","severity":1,"message":"1628","line":413,"column":9,"nodeType":"1672","messageId":"1630","endLine":413,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1628","line":427,"column":9,"nodeType":"1672","messageId":"1630","endLine":427,"endColumn":46},{"ruleId":"1627","severity":1,"message":"1628","line":437,"column":9,"nodeType":"1672","messageId":"1630","endLine":437,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":452,"column":42,"nodeType":"1629","messageId":"1630","endLine":452,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1628","line":460,"column":3,"nodeType":"1636","messageId":"1630","endLine":462,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":488,"column":3,"nodeType":"1636","messageId":"1630","endLine":488,"endColumn":47},{"ruleId":"1627","severity":1,"message":"1628","line":500,"column":3,"nodeType":"1636","messageId":"1630","endLine":500,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1628","line":504,"column":3,"nodeType":"1636","messageId":"1630","endLine":504,"endColumn":26},{"ruleId":"1627","severity":1,"message":"1628","line":515,"column":3,"nodeType":"1636","messageId":"1630","endLine":517,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":549,"column":3,"nodeType":"1636","messageId":"1630","endLine":551,"endColumn":4},{"ruleId":"1637","severity":1,"message":"1638","line":647,"column":7,"nodeType":"1639","messageId":"1640","endLine":647,"endColumn":19},{"ruleId":"1627","severity":1,"message":"1628","line":726,"column":3,"nodeType":"1636","messageId":"1630","endLine":726,"endColumn":52},{"ruleId":"1627","severity":1,"message":"1628","line":837,"column":3,"nodeType":"1636","messageId":"1630","endLine":837,"endColumn":40},{"ruleId":"1673","severity":1,"message":"1674","line":933,"column":13,"nodeType":"1675","endLine":933,"endColumn":33,"fix":"1676"},{"ruleId":"1627","severity":1,"message":"1628","line":988,"column":3,"nodeType":"1636","messageId":"1630","endLine":990,"endColumn":4},{"ruleId":"1627","severity":1,"message":"1628","line":998,"column":39,"nodeType":"1629","messageId":"1630","endLine":1000,"endColumn":7},{"ruleId":"1627","severity":1,"message":"1628","line":1048,"column":35,"nodeType":"1629","messageId":"1630","endLine":1048,"endColumn":54},{"ruleId":"1627","severity":1,"message":"1628","line":1122,"column":7,"nodeType":"1672","messageId":"1630","endLine":1122,"endColumn":31},{"ruleId":"1627","severity":1,"message":"1628","line":13,"column":1,"nodeType":"1672","messageId":"1630","endLine":13,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":26,"column":1,"nodeType":"1672","messageId":"1630","endLine":26,"endColumn":22},{"ruleId":"1627","severity":1,"message":"1628","line":23,"column":1,"nodeType":"1672","messageId":"1630","endLine":23,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":10,"column":25,"nodeType":"1629","messageId":"1630","endLine":10,"endColumn":36},{"ruleId":"1613","severity":1,"message":"1677","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":16},{"ruleId":"1613","severity":1,"message":"1678","line":4,"column":3,"nodeType":"1615","endLine":4,"endColumn":16},{"ruleId":"1613","severity":1,"message":"1679","line":5,"column":3,"nodeType":"1615","endLine":5,"endColumn":24},{"ruleId":"1613","severity":1,"message":"1680","line":6,"column":3,"nodeType":"1615","endLine":6,"endColumn":26},{"ruleId":"1613","severity":1,"message":"1681","line":7,"column":3,"nodeType":"1615","endLine":7,"endColumn":18},{"ruleId":"1613","severity":1,"message":"1682","line":8,"column":3,"nodeType":"1615","endLine":8,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1683","line":9,"column":3,"nodeType":"1615","endLine":9,"endColumn":22},{"ruleId":"1613","severity":1,"message":"1684","line":11,"column":10,"nodeType":"1615","endLine":11,"endColumn":23},{"ruleId":"1627","severity":1,"message":"1628","line":13,"column":1,"nodeType":"1672","messageId":"1630","endLine":13,"endColumn":50},{"ruleId":"1613","severity":1,"message":"1685","line":13,"column":10,"nodeType":"1615","endLine":13,"endColumn":29},{"ruleId":"1613","severity":1,"message":"1686","line":23,"column":7,"nodeType":"1615","endLine":23,"endColumn":21},{"ruleId":"1627","severity":1,"message":"1628","line":23,"column":24,"nodeType":"1629","messageId":"1630","endLine":23,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1628","line":3,"column":37,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":42},{"ruleId":"1613","severity":1,"message":"1687","line":3,"column":8,"nodeType":"1615","endLine":3,"endColumn":13},{"ruleId":"1627","severity":1,"message":"1628","line":10,"column":8,"nodeType":"1672","messageId":"1630","endLine":10,"endColumn":40},{"ruleId":"1627","severity":1,"message":"1628","line":39,"column":8,"nodeType":"1672","messageId":"1630","endLine":42,"endColumn":2},{"ruleId":"1627","severity":1,"message":"1628","line":9,"column":55,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":60},{"ruleId":"1632","severity":1,"message":"1633","line":15,"column":31,"nodeType":"1634","messageId":"1635","endLine":15,"endColumn":34},{"ruleId":"1632","severity":1,"message":"1633","line":16,"column":29,"nodeType":"1634","messageId":"1635","endLine":16,"endColumn":32},{"ruleId":"1632","severity":1,"message":"1633","line":21,"column":14,"nodeType":"1634","messageId":"1635","endLine":21,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":24,"column":20,"nodeType":"1634","messageId":"1635","endLine":24,"endColumn":23},{"ruleId":"1632","severity":1,"message":"1633","line":28,"column":15,"nodeType":"1634","messageId":"1635","endLine":28,"endColumn":18},{"ruleId":"1632","severity":1,"message":"1633","line":29,"column":15,"nodeType":"1634","messageId":"1635","endLine":29,"endColumn":18},{"ruleId":"1632","severity":1,"message":"1633","line":35,"column":14,"nodeType":"1634","messageId":"1635","endLine":35,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":36,"column":11,"nodeType":"1634","messageId":"1635","endLine":36,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":37,"column":10,"nodeType":"1634","messageId":"1635","endLine":37,"endColumn":13},{"ruleId":"1632","severity":1,"message":"1633","line":40,"column":11,"nodeType":"1634","messageId":"1635","endLine":40,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":58,"column":18,"nodeType":"1634","messageId":"1635","endLine":58,"endColumn":21},{"ruleId":"1632","severity":1,"message":"1633","line":60,"column":12,"nodeType":"1634","messageId":"1635","endLine":60,"endColumn":15},{"ruleId":"1632","severity":1,"message":"1633","line":73,"column":25,"nodeType":"1634","messageId":"1635","endLine":73,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":74,"column":19,"nodeType":"1634","messageId":"1635","endLine":74,"endColumn":22},{"ruleId":"1632","severity":1,"message":"1633","line":77,"column":11,"nodeType":"1634","messageId":"1635","endLine":77,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":78,"column":20,"nodeType":"1634","messageId":"1635","endLine":78,"endColumn":23},{"ruleId":"1632","severity":1,"message":"1633","line":79,"column":13,"nodeType":"1634","messageId":"1635","endLine":79,"endColumn":16},{"ruleId":"1632","severity":1,"message":"1633","line":100,"column":57,"nodeType":"1634","messageId":"1635","endLine":100,"endColumn":60},{"ruleId":"1632","severity":1,"message":"1633","line":102,"column":20,"nodeType":"1634","messageId":"1635","endLine":102,"endColumn":23},{"ruleId":"1632","severity":1,"message":"1633","line":102,"column":44,"nodeType":"1634","messageId":"1635","endLine":102,"endColumn":47},{"ruleId":"1632","severity":1,"message":"1633","line":103,"column":30,"nodeType":"1634","messageId":"1635","endLine":103,"endColumn":33},{"ruleId":"1632","severity":1,"message":"1633","line":109,"column":42,"nodeType":"1634","messageId":"1635","endLine":109,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":130,"column":28,"nodeType":"1634","messageId":"1635","endLine":130,"endColumn":31},{"ruleId":"1632","severity":1,"message":"1633","line":130,"column":52,"nodeType":"1634","messageId":"1635","endLine":130,"endColumn":55},{"ruleId":"1632","severity":1,"message":"1633","line":131,"column":38,"nodeType":"1634","messageId":"1635","endLine":131,"endColumn":41},{"ruleId":"1632","severity":1,"message":"1633","line":133,"column":29,"nodeType":"1634","messageId":"1635","endLine":133,"endColumn":32},{"ruleId":"1632","severity":1,"message":"1633","line":133,"column":35,"nodeType":"1634","messageId":"1635","endLine":133,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":135,"column":35,"nodeType":"1634","messageId":"1635","endLine":135,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":136,"column":35,"nodeType":"1634","messageId":"1635","endLine":136,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":146,"column":47,"nodeType":"1634","messageId":"1635","endLine":146,"endColumn":50},{"ruleId":"1632","severity":1,"message":"1633","line":154,"column":22,"nodeType":"1634","messageId":"1635","endLine":154,"endColumn":25},{"ruleId":"1632","severity":1,"message":"1633","line":180,"column":57,"nodeType":"1634","messageId":"1635","endLine":180,"endColumn":60},{"ruleId":"1632","severity":1,"message":"1633","line":181,"column":47,"nodeType":"1634","messageId":"1635","endLine":181,"endColumn":50},{"ruleId":"1632","severity":1,"message":"1633","line":183,"column":60,"nodeType":"1634","messageId":"1635","endLine":183,"endColumn":63},{"ruleId":"1632","severity":1,"message":"1633","line":184,"column":50,"nodeType":"1634","messageId":"1635","endLine":184,"endColumn":53},{"ruleId":"1632","severity":1,"message":"1633","line":189,"column":23,"nodeType":"1634","messageId":"1635","endLine":189,"endColumn":26},{"ruleId":"1632","severity":1,"message":"1633","line":190,"column":23,"nodeType":"1634","messageId":"1635","endLine":190,"endColumn":26},{"ruleId":"1632","severity":1,"message":"1633","line":191,"column":36,"nodeType":"1634","messageId":"1635","endLine":191,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":192,"column":49,"nodeType":"1634","messageId":"1635","endLine":192,"endColumn":52},{"ruleId":"1632","severity":1,"message":"1633","line":204,"column":9,"nodeType":"1634","messageId":"1635","endLine":204,"endColumn":12},{"ruleId":"1632","severity":1,"message":"1633","line":208,"column":9,"nodeType":"1634","messageId":"1635","endLine":208,"endColumn":12},{"ruleId":"1632","severity":1,"message":"1633","line":216,"column":24,"nodeType":"1634","messageId":"1635","endLine":216,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":222,"column":14,"nodeType":"1634","messageId":"1635","endLine":222,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":223,"column":67,"nodeType":"1634","messageId":"1635","endLine":223,"endColumn":70},{"ruleId":"1632","severity":1,"message":"1633","line":224,"column":57,"nodeType":"1634","messageId":"1635","endLine":224,"endColumn":60},{"ruleId":"1632","severity":1,"message":"1633","line":230,"column":24,"nodeType":"1634","messageId":"1635","endLine":230,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":236,"column":14,"nodeType":"1634","messageId":"1635","endLine":236,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":240,"column":24,"nodeType":"1634","messageId":"1635","endLine":240,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":242,"column":62,"nodeType":"1634","messageId":"1635","endLine":242,"endColumn":65},{"ruleId":"1632","severity":1,"message":"1633","line":246,"column":11,"nodeType":"1634","messageId":"1635","endLine":246,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":248,"column":24,"nodeType":"1634","messageId":"1635","endLine":248,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":252,"column":11,"nodeType":"1634","messageId":"1635","endLine":252,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":254,"column":14,"nodeType":"1634","messageId":"1635","endLine":254,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":255,"column":42,"nodeType":"1634","messageId":"1635","endLine":255,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":255,"column":66,"nodeType":"1634","messageId":"1635","endLine":255,"endColumn":69},{"ruleId":"1632","severity":1,"message":"1633","line":256,"column":42,"nodeType":"1634","messageId":"1635","endLine":256,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":256,"column":56,"nodeType":"1634","messageId":"1635","endLine":256,"endColumn":59},{"ruleId":"1632","severity":1,"message":"1633","line":260,"column":11,"nodeType":"1634","messageId":"1635","endLine":260,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":262,"column":24,"nodeType":"1634","messageId":"1635","endLine":262,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":266,"column":11,"nodeType":"1634","messageId":"1635","endLine":266,"endColumn":14},{"ruleId":"1632","severity":1,"message":"1633","line":268,"column":14,"nodeType":"1634","messageId":"1635","endLine":268,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":269,"column":39,"nodeType":"1634","messageId":"1635","endLine":269,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":269,"column":63,"nodeType":"1634","messageId":"1635","endLine":269,"endColumn":66},{"ruleId":"1632","severity":1,"message":"1633","line":270,"column":39,"nodeType":"1634","messageId":"1635","endLine":270,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":270,"column":53,"nodeType":"1634","messageId":"1635","endLine":270,"endColumn":56},{"ruleId":"1632","severity":1,"message":"1633","line":278,"column":63,"nodeType":"1634","messageId":"1635","endLine":278,"endColumn":66},{"ruleId":"1632","severity":1,"message":"1633","line":279,"column":53,"nodeType":"1634","messageId":"1635","endLine":279,"endColumn":56},{"ruleId":"1632","severity":1,"message":"1633","line":280,"column":36,"nodeType":"1634","messageId":"1635","endLine":280,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":281,"column":26,"nodeType":"1634","messageId":"1635","endLine":281,"endColumn":29},{"ruleId":"1632","severity":1,"message":"1633","line":286,"column":24,"nodeType":"1634","messageId":"1635","endLine":286,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":288,"column":65,"nodeType":"1634","messageId":"1635","endLine":288,"endColumn":68},{"ruleId":"1632","severity":1,"message":"1633","line":289,"column":48,"nodeType":"1634","messageId":"1635","endLine":289,"endColumn":51},{"ruleId":"1632","severity":1,"message":"1633","line":290,"column":38,"nodeType":"1634","messageId":"1635","endLine":290,"endColumn":41},{"ruleId":"1632","severity":1,"message":"1633","line":295,"column":24,"nodeType":"1634","messageId":"1635","endLine":295,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":297,"column":66,"nodeType":"1634","messageId":"1635","endLine":297,"endColumn":69},{"ruleId":"1632","severity":1,"message":"1633","line":298,"column":49,"nodeType":"1634","messageId":"1635","endLine":298,"endColumn":52},{"ruleId":"1632","severity":1,"message":"1633","line":299,"column":39,"nodeType":"1634","messageId":"1635","endLine":299,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":323,"column":16,"nodeType":"1634","messageId":"1635","endLine":323,"endColumn":19},{"ruleId":"1632","severity":1,"message":"1633","line":323,"column":30,"nodeType":"1634","messageId":"1635","endLine":323,"endColumn":33},{"ruleId":"1632","severity":1,"message":"1633","line":323,"column":54,"nodeType":"1634","messageId":"1635","endLine":323,"endColumn":57},{"ruleId":"1632","severity":1,"message":"1633","line":324,"column":16,"nodeType":"1634","messageId":"1635","endLine":324,"endColumn":19},{"ruleId":"1632","severity":1,"message":"1633","line":324,"column":30,"nodeType":"1634","messageId":"1635","endLine":324,"endColumn":33},{"ruleId":"1632","severity":1,"message":"1633","line":324,"column":44,"nodeType":"1634","messageId":"1635","endLine":324,"endColumn":47},{"ruleId":"1632","severity":1,"message":"1633","line":329,"column":14,"nodeType":"1634","messageId":"1635","endLine":329,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":330,"column":24,"nodeType":"1634","messageId":"1635","endLine":330,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":332,"column":49,"nodeType":"1634","messageId":"1635","endLine":332,"endColumn":52},{"ruleId":"1632","severity":1,"message":"1633","line":332,"column":63,"nodeType":"1634","messageId":"1635","endLine":332,"endColumn":66},{"ruleId":"1632","severity":1,"message":"1633","line":333,"column":59,"nodeType":"1634","messageId":"1635","endLine":333,"endColumn":62},{"ruleId":"1632","severity":1,"message":"1633","line":334,"column":49,"nodeType":"1634","messageId":"1635","endLine":334,"endColumn":52},{"ruleId":"1632","severity":1,"message":"1633","line":335,"column":45,"nodeType":"1634","messageId":"1635","endLine":335,"endColumn":48},{"ruleId":"1632","severity":1,"message":"1633","line":336,"column":35,"nodeType":"1634","messageId":"1635","endLine":336,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":341,"column":14,"nodeType":"1634","messageId":"1635","endLine":341,"endColumn":17},{"ruleId":"1632","severity":1,"message":"1633","line":342,"column":24,"nodeType":"1634","messageId":"1635","endLine":342,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":344,"column":50,"nodeType":"1634","messageId":"1635","endLine":344,"endColumn":53},{"ruleId":"1632","severity":1,"message":"1633","line":344,"column":64,"nodeType":"1634","messageId":"1635","endLine":344,"endColumn":67},{"ruleId":"1632","severity":1,"message":"1633","line":345,"column":60,"nodeType":"1634","messageId":"1635","endLine":345,"endColumn":63},{"ruleId":"1632","severity":1,"message":"1633","line":346,"column":50,"nodeType":"1634","messageId":"1635","endLine":346,"endColumn":53},{"ruleId":"1632","severity":1,"message":"1633","line":347,"column":36,"nodeType":"1634","messageId":"1635","endLine":347,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":347,"column":60,"nodeType":"1634","messageId":"1635","endLine":347,"endColumn":63},{"ruleId":"1632","severity":1,"message":"1633","line":348,"column":36,"nodeType":"1634","messageId":"1635","endLine":348,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":348,"column":50,"nodeType":"1634","messageId":"1635","endLine":348,"endColumn":53},{"ruleId":"1632","severity":1,"message":"1633","line":349,"column":46,"nodeType":"1634","messageId":"1635","endLine":349,"endColumn":49},{"ruleId":"1632","severity":1,"message":"1633","line":350,"column":36,"nodeType":"1634","messageId":"1635","endLine":350,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":355,"column":34,"nodeType":"1634","messageId":"1635","endLine":355,"endColumn":37},{"ruleId":"1632","severity":1,"message":"1633","line":368,"column":24,"nodeType":"1634","messageId":"1635","endLine":368,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":386,"column":24,"nodeType":"1634","messageId":"1635","endLine":386,"endColumn":27},{"ruleId":"1632","severity":1,"message":"1633","line":388,"column":60,"nodeType":"1634","messageId":"1635","endLine":388,"endColumn":63},{"ruleId":"1632","severity":1,"message":"1633","line":390,"column":25,"nodeType":"1634","messageId":"1635","endLine":390,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":391,"column":17,"nodeType":"1634","messageId":"1635","endLine":391,"endColumn":20},{"ruleId":"1632","severity":1,"message":"1633","line":393,"column":49,"nodeType":"1634","messageId":"1635","endLine":393,"endColumn":52},{"ruleId":"1632","severity":1,"message":"1633","line":394,"column":39,"nodeType":"1634","messageId":"1635","endLine":394,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":407,"column":19,"nodeType":"1634","messageId":"1635","endLine":407,"endColumn":22},{"ruleId":"1632","severity":1,"message":"1633","line":420,"column":47,"nodeType":"1634","messageId":"1635","endLine":420,"endColumn":50},{"ruleId":"1632","severity":1,"message":"1633","line":430,"column":56,"nodeType":"1634","messageId":"1635","endLine":430,"endColumn":59},{"ruleId":"1632","severity":1,"message":"1633","line":431,"column":46,"nodeType":"1634","messageId":"1635","endLine":431,"endColumn":49},{"ruleId":"1632","severity":1,"message":"1633","line":8,"column":23,"nodeType":"1634","messageId":"1635","endLine":8,"endColumn":26},{"ruleId":"1632","severity":1,"message":"1633","line":15,"column":23,"nodeType":"1634","messageId":"1635","endLine":15,"endColumn":26},{"ruleId":"1632","severity":1,"message":"1633","line":16,"column":21,"nodeType":"1634","messageId":"1635","endLine":16,"endColumn":24},{"ruleId":"1627","severity":1,"message":"1628","line":20,"column":48,"nodeType":"1629","messageId":"1630","endLine":20,"endColumn":73},{"ruleId":"1632","severity":1,"message":"1633","line":38,"column":25,"nodeType":"1634","messageId":"1635","endLine":38,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":46,"column":18,"nodeType":"1634","messageId":"1635","endLine":46,"endColumn":21},{"ruleId":"1632","severity":1,"message":"1633","line":1,"column":37,"nodeType":"1634","messageId":"1635","endLine":1,"endColumn":40},{"ruleId":"1632","severity":1,"message":"1633","line":5,"column":34,"nodeType":"1634","messageId":"1635","endLine":5,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":1,"column":24,"nodeType":"1629","messageId":"1630","endLine":1,"endColumn":61},{"ruleId":"1627","severity":1,"message":"1628","line":8,"column":22,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":27,"column":10,"nodeType":"1629","messageId":"1630","endLine":31,"endColumn":7},{"ruleId":"1613","severity":1,"message":"1688","line":23,"column":3,"nodeType":"1615","endLine":23,"endColumn":8},{"ruleId":"1613","severity":1,"message":"1689","line":24,"column":3,"nodeType":"1615","endLine":24,"endColumn":9},{"ruleId":"1632","severity":1,"message":"1633","line":32,"column":8,"nodeType":"1634","messageId":"1635","endLine":32,"endColumn":11},{"ruleId":"1613","severity":1,"message":"1690","line":11,"column":24,"nodeType":"1615","endLine":11,"endColumn":33},{"ruleId":"1613","severity":1,"message":"1691","line":4,"column":3,"nodeType":"1615","endLine":4,"endColumn":21},{"ruleId":"1632","severity":1,"message":"1633","line":9,"column":41,"nodeType":"1634","messageId":"1635","endLine":9,"endColumn":44},{"ruleId":"1632","severity":1,"message":"1633","line":13,"column":41,"nodeType":"1634","messageId":"1635","endLine":13,"endColumn":44},{"ruleId":"1632","severity":1,"message":"1633","line":19,"column":44,"nodeType":"1634","messageId":"1635","endLine":19,"endColumn":47},{"ruleId":"1632","severity":1,"message":"1633","line":23,"column":43,"nodeType":"1634","messageId":"1635","endLine":23,"endColumn":46},{"ruleId":"1632","severity":1,"message":"1633","line":7,"column":32,"nodeType":"1634","messageId":"1635","endLine":7,"endColumn":35},{"ruleId":"1632","severity":1,"message":"1633","line":9,"column":42,"nodeType":"1634","messageId":"1635","endLine":9,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":17,"column":58,"nodeType":"1634","messageId":"1635","endLine":17,"endColumn":61},{"ruleId":"1632","severity":1,"message":"1633","line":50,"column":8,"nodeType":"1634","messageId":"1635","endLine":50,"endColumn":11},{"ruleId":"1632","severity":1,"message":"1633","line":73,"column":36,"nodeType":"1634","messageId":"1635","endLine":73,"endColumn":39},{"ruleId":"1632","severity":1,"message":"1633","line":76,"column":35,"nodeType":"1634","messageId":"1635","endLine":76,"endColumn":38},{"ruleId":"1613","severity":1,"message":"1690","line":14,"column":24,"nodeType":"1615","endLine":14,"endColumn":33},{"ruleId":"1632","severity":1,"message":"1633","line":23,"column":8,"nodeType":"1634","messageId":"1635","endLine":23,"endColumn":11},{"ruleId":"1627","severity":1,"message":"1628","line":56,"column":32,"nodeType":"1629","messageId":"1630","endLine":56,"endColumn":65},{"ruleId":"1627","severity":1,"message":"1628","line":60,"column":40,"nodeType":"1629","messageId":"1630","endLine":60,"endColumn":73},{"ruleId":"1627","severity":1,"message":"1628","line":3,"column":29,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1628","line":14,"column":23,"nodeType":"1629","messageId":"1630","endLine":14,"endColumn":28},{"ruleId":"1613","severity":1,"message":"1692","line":2,"column":3,"nodeType":"1615","endLine":2,"endColumn":68},{"ruleId":"1613","severity":1,"message":"1693","line":11,"column":3,"nodeType":"1615","endLine":11,"endColumn":33},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":8,"nodeType":"1672","messageId":"1630","endLine":6,"endColumn":63},{"ruleId":"1632","severity":1,"message":"1633","line":7,"column":66,"nodeType":"1634","messageId":"1635","endLine":7,"endColumn":69},{"ruleId":"1627","severity":1,"message":"1628","line":9,"column":8,"nodeType":"1672","messageId":"1630","endLine":9,"endColumn":58},{"ruleId":"1632","severity":1,"message":"1633","line":20,"column":25,"nodeType":"1634","messageId":"1635","endLine":20,"endColumn":28},{"ruleId":"1632","severity":1,"message":"1633","line":10,"column":57,"nodeType":"1634","messageId":"1635","endLine":10,"endColumn":60},{"ruleId":"1632","severity":1,"message":"1633","line":135,"column":13,"nodeType":"1634","messageId":"1635","endLine":135,"endColumn":16},{"ruleId":"1694","severity":2,"message":"1695","line":285,"column":21,"nodeType":"1696","messageId":"1697","endLine":285,"endColumn":55,"fix":"1698"},{"ruleId":"1694","severity":2,"message":"1695","line":305,"column":21,"nodeType":"1696","messageId":"1697","endLine":305,"endColumn":55,"fix":"1699"},{"ruleId":"1613","severity":1,"message":"1700","line":1,"column":10,"nodeType":"1615","endLine":1,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1628","line":9,"column":50,"nodeType":"1629","messageId":"1630","endLine":9,"endColumn":61},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":50,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":61},{"ruleId":"1632","severity":1,"message":"1633","line":68,"column":27,"nodeType":"1634","messageId":"1635","endLine":68,"endColumn":30},{"ruleId":"1627","severity":1,"message":"1628","line":16,"column":55,"nodeType":"1629","messageId":"1630","endLine":16,"endColumn":66},{"ruleId":"1701","severity":1,"message":"1702","line":36,"column":7,"nodeType":"1703","endLine":36,"endColumn":78},{"ruleId":"1701","severity":1,"message":"1702","line":41,"column":5,"nodeType":"1703","endLine":41,"endColumn":78},{"ruleId":"1627","severity":1,"message":"1628","line":54,"column":44,"nodeType":"1629","messageId":"1630","endLine":54,"endColumn":55},{"ruleId":"1627","severity":1,"message":"1628","line":107,"column":91,"nodeType":"1629","messageId":"1630","endLine":107,"endColumn":102},{"ruleId":"1613","severity":1,"message":"1704","line":108,"column":9,"nodeType":"1615","endLine":108,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1705","line":6,"column":10,"nodeType":"1615","endLine":6,"endColumn":38},{"ruleId":"1613","severity":1,"message":"1700","line":8,"column":10,"nodeType":"1615","endLine":8,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1628","line":72,"column":36,"nodeType":"1629","messageId":"1630","endLine":74,"endColumn":5},{"ruleId":"1627","severity":1,"message":"1628","line":5,"column":41,"nodeType":"1629","messageId":"1630","endLine":5,"endColumn":46},{"ruleId":"1627","severity":1,"message":"1628","line":92,"column":34,"nodeType":"1629","messageId":"1630","endLine":92,"endColumn":45},{"ruleId":"1694","severity":2,"message":"1695","line":123,"column":7,"nodeType":"1696","messageId":"1697","endLine":123,"endColumn":61,"fix":"1706"},{"ruleId":"1627","severity":1,"message":"1628","line":286,"column":64,"nodeType":"1629","messageId":"1630","endLine":286,"endColumn":75},{"ruleId":"1627","severity":1,"message":"1628","line":111,"column":52,"nodeType":"1629","messageId":"1630","endLine":111,"endColumn":63},{"ruleId":"1627","severity":1,"message":"1628","line":11,"column":43,"nodeType":"1629","messageId":"1630","endLine":11,"endColumn":54},{"ruleId":"1627","severity":1,"message":"1628","line":4,"column":28,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":7,"column":40,"nodeType":"1629","messageId":"1630","endLine":7,"endColumn":51},{"ruleId":"1632","severity":1,"message":"1633","line":19,"column":25,"nodeType":"1634","messageId":"1635","endLine":19,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":4,"column":8,"nodeType":"1672","messageId":"1630","endLine":4,"endColumn":37},{"ruleId":"1627","severity":1,"message":"1628","line":6,"column":43,"nodeType":"1629","messageId":"1630","endLine":6,"endColumn":54},{"ruleId":"1707","severity":2,"message":"1708","line":15,"column":16,"nodeType":"1709","messageId":"1710","endLine":15,"endColumn":34},{"ruleId":"1627","severity":1,"message":"1628","line":8,"column":39,"nodeType":"1629","messageId":"1630","endLine":8,"endColumn":50},{"ruleId":"1707","severity":2,"message":"1708","line":15,"column":14,"nodeType":"1709","messageId":"1710","endLine":15,"endColumn":39},{"ruleId":"1707","severity":2,"message":"1708","line":36,"column":14,"nodeType":"1709","messageId":"1710","endLine":36,"endColumn":39},{"ruleId":null,"fatal":true,"severity":2,"message":"1711"},{"ruleId":"1613","severity":1,"message":"1712","line":3,"column":3,"nodeType":"1615","endLine":3,"endColumn":30},{"ruleId":"1613","severity":1,"message":"1713","line":4,"column":3,"nodeType":"1615","endLine":4,"endColumn":20},{"ruleId":"1613","severity":1,"message":"1714","line":7,"column":3,"nodeType":"1615","endLine":7,"endColumn":27},{"ruleId":"1613","severity":1,"message":"1715","line":12,"column":3,"nodeType":"1615","endLine":12,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":17,"column":27,"nodeType":"1629","messageId":"1630","endLine":17,"endColumn":38},{"ruleId":"1627","severity":1,"message":"1628","line":4,"column":40,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":51},{"ruleId":"1627","severity":1,"message":"1628","line":40,"column":39,"nodeType":"1629","messageId":"1630","endLine":40,"endColumn":50},{"ruleId":"1627","severity":1,"message":"1628","line":79,"column":24,"nodeType":"1629","messageId":"1630","endLine":79,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1628","line":3,"column":24,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":35},{"ruleId":"1627","severity":1,"message":"1628","line":21,"column":21,"nodeType":"1629","messageId":"1630","endLine":21,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":29,"column":1,"nodeType":"1672","messageId":"1630","endLine":29,"endColumn":36},{"ruleId":"1627","severity":1,"message":"1628","line":31,"column":29,"nodeType":"1629","messageId":"1630","endLine":34,"endColumn":5},{"ruleId":"1613","severity":1,"message":"1716","line":35,"column":11,"nodeType":"1615","endLine":35,"endColumn":20},{"ruleId":"1632","severity":1,"message":"1633","line":50,"column":64,"nodeType":"1634","messageId":"1635","endLine":50,"endColumn":67},{"ruleId":"1627","severity":1,"message":"1628","line":69,"column":44,"nodeType":"1629","messageId":"1630","endLine":72,"endColumn":5},{"ruleId":"1632","severity":1,"message":"1633","line":93,"column":68,"nodeType":"1634","messageId":"1635","endLine":93,"endColumn":71},{"ruleId":"1627","severity":1,"message":"1628","line":113,"column":51,"nodeType":"1629","messageId":"1630","endLine":113,"endColumn":75},{"ruleId":"1707","severity":2,"message":"1708","line":138,"column":24,"nodeType":"1709","messageId":"1710","endLine":138,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":141,"column":21,"nodeType":"1615","messageId":"1719","endLine":141,"endColumn":43,"fix":"1720"},{"ruleId":"1637","severity":1,"message":"1638","line":155,"column":27,"nodeType":"1639","messageId":"1640","endLine":155,"endColumn":42},{"ruleId":"1707","severity":2,"message":"1708","line":208,"column":24,"nodeType":"1709","messageId":"1710","endLine":208,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":211,"column":21,"nodeType":"1615","messageId":"1719","endLine":211,"endColumn":43,"fix":"1721"},{"ruleId":"1637","severity":1,"message":"1638","line":225,"column":27,"nodeType":"1639","messageId":"1640","endLine":225,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":299,"column":97,"nodeType":"1634","messageId":"1635","endLine":299,"endColumn":100},{"ruleId":"1707","severity":2,"message":"1708","line":303,"column":24,"nodeType":"1709","messageId":"1710","endLine":303,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":306,"column":21,"nodeType":"1615","messageId":"1719","endLine":306,"endColumn":43,"fix":"1722"},{"ruleId":"1637","severity":1,"message":"1638","line":320,"column":27,"nodeType":"1639","messageId":"1640","endLine":320,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":347,"column":119,"nodeType":"1634","messageId":"1635","endLine":347,"endColumn":122},{"ruleId":"1707","severity":2,"message":"1708","line":351,"column":24,"nodeType":"1709","messageId":"1710","endLine":351,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":354,"column":21,"nodeType":"1615","messageId":"1719","endLine":354,"endColumn":43,"fix":"1723"},{"ruleId":"1637","severity":1,"message":"1638","line":368,"column":27,"nodeType":"1639","messageId":"1640","endLine":368,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":395,"column":138,"nodeType":"1634","messageId":"1635","endLine":395,"endColumn":141},{"ruleId":"1707","severity":2,"message":"1708","line":399,"column":24,"nodeType":"1709","messageId":"1710","endLine":399,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":402,"column":21,"nodeType":"1615","messageId":"1719","endLine":402,"endColumn":43,"fix":"1724"},{"ruleId":"1637","severity":1,"message":"1638","line":416,"column":27,"nodeType":"1639","messageId":"1640","endLine":416,"endColumn":42},{"ruleId":"1632","severity":1,"message":"1633","line":469,"column":138,"nodeType":"1634","messageId":"1635","endLine":469,"endColumn":141},{"ruleId":"1707","severity":2,"message":"1708","line":473,"column":24,"nodeType":"1709","messageId":"1710","endLine":473,"endColumn":42},{"ruleId":"1717","severity":2,"message":"1718","line":476,"column":21,"nodeType":"1615","messageId":"1719","endLine":476,"endColumn":43,"fix":"1725"},{"ruleId":"1637","severity":1,"message":"1638","line":490,"column":27,"nodeType":"1639","messageId":"1640","endLine":490,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":539,"column":5,"nodeType":"1672","messageId":"1630","endLine":539,"endColumn":99},{"ruleId":"1694","severity":2,"message":"1695","line":549,"column":16,"nodeType":"1639","messageId":"1697","endLine":549,"endColumn":22,"fix":"1726"},{"ruleId":"1637","severity":1,"message":"1638","line":549,"column":16,"nodeType":"1639","messageId":"1640","endLine":549,"endColumn":22},{"ruleId":"1694","severity":2,"message":"1695","line":550,"column":22,"nodeType":"1639","messageId":"1697","endLine":550,"endColumn":28,"fix":"1727"},{"ruleId":"1637","severity":1,"message":"1638","line":550,"column":22,"nodeType":"1639","messageId":"1640","endLine":550,"endColumn":28},{"ruleId":"1694","severity":2,"message":"1695","line":553,"column":16,"nodeType":"1639","messageId":"1697","endLine":553,"endColumn":22,"fix":"1728"},{"ruleId":"1637","severity":1,"message":"1638","line":553,"column":16,"nodeType":"1639","messageId":"1640","endLine":553,"endColumn":22},{"ruleId":"1637","severity":1,"message":"1638","line":554,"column":22,"nodeType":"1639","messageId":"1640","endLine":554,"endColumn":28},{"ruleId":"1694","severity":2,"message":"1695","line":554,"column":22,"nodeType":"1639","messageId":"1697","endLine":554,"endColumn":28,"fix":"1729"},{"ruleId":"1694","severity":2,"message":"1695","line":558,"column":22,"nodeType":"1639","messageId":"1697","endLine":558,"endColumn":28,"fix":"1730"},{"ruleId":"1637","severity":1,"message":"1638","line":558,"column":22,"nodeType":"1639","messageId":"1640","endLine":558,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1638","line":559,"column":16,"nodeType":"1639","messageId":"1640","endLine":559,"endColumn":22},{"ruleId":"1694","severity":2,"message":"1695","line":559,"column":16,"nodeType":"1639","messageId":"1697","endLine":559,"endColumn":22,"fix":"1731"},{"ruleId":"1637","severity":1,"message":"1638","line":561,"column":22,"nodeType":"1639","messageId":"1640","endLine":561,"endColumn":28},{"ruleId":"1694","severity":2,"message":"1695","line":561,"column":22,"nodeType":"1639","messageId":"1697","endLine":561,"endColumn":28,"fix":"1732"},{"ruleId":"1694","severity":2,"message":"1695","line":568,"column":22,"nodeType":"1639","messageId":"1697","endLine":568,"endColumn":28,"fix":"1733"},{"ruleId":"1637","severity":1,"message":"1638","line":568,"column":22,"nodeType":"1639","messageId":"1640","endLine":568,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":575,"column":20,"nodeType":"1629","messageId":"1630","endLine":575,"endColumn":74},{"ruleId":"1694","severity":2,"message":"1695","line":581,"column":22,"nodeType":"1639","messageId":"1697","endLine":581,"endColumn":28,"fix":"1734"},{"ruleId":"1637","severity":1,"message":"1638","line":581,"column":22,"nodeType":"1639","messageId":"1640","endLine":581,"endColumn":28},{"ruleId":"1627","severity":1,"message":"1628","line":587,"column":23,"nodeType":"1629","messageId":"1630","endLine":587,"endColumn":50},{"ruleId":"1694","severity":2,"message":"1695","line":593,"column":22,"nodeType":"1639","messageId":"1697","endLine":593,"endColumn":28,"fix":"1735"},{"ruleId":"1637","severity":1,"message":"1638","line":593,"column":22,"nodeType":"1639","messageId":"1640","endLine":593,"endColumn":28},{"ruleId":"1694","severity":2,"message":"1695","line":598,"column":22,"nodeType":"1639","messageId":"1697","endLine":598,"endColumn":28,"fix":"1736"},{"ruleId":"1637","severity":1,"message":"1638","line":598,"column":22,"nodeType":"1639","messageId":"1640","endLine":598,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1638","line":600,"column":16,"nodeType":"1639","messageId":"1640","endLine":600,"endColumn":22},{"ruleId":"1694","severity":2,"message":"1695","line":600,"column":16,"nodeType":"1639","messageId":"1697","endLine":600,"endColumn":22,"fix":"1737"},{"ruleId":"1637","severity":1,"message":"1638","line":619,"column":24,"nodeType":"1639","messageId":"1640","endLine":619,"endColumn":45},{"ruleId":"1637","severity":1,"message":"1638","line":620,"column":30,"nodeType":"1639","messageId":"1640","endLine":620,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":623,"column":24,"nodeType":"1639","messageId":"1640","endLine":623,"endColumn":45},{"ruleId":"1637","severity":1,"message":"1638","line":624,"column":30,"nodeType":"1639","messageId":"1640","endLine":624,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":628,"column":30,"nodeType":"1639","messageId":"1640","endLine":628,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":629,"column":24,"nodeType":"1639","messageId":"1640","endLine":629,"endColumn":45},{"ruleId":"1637","severity":1,"message":"1638","line":631,"column":30,"nodeType":"1639","messageId":"1640","endLine":631,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":638,"column":30,"nodeType":"1639","messageId":"1640","endLine":638,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":643,"column":30,"nodeType":"1639","messageId":"1640","endLine":643,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":646,"column":30,"nodeType":"1639","messageId":"1640","endLine":646,"endColumn":51},{"ruleId":"1637","severity":1,"message":"1638","line":647,"column":24,"nodeType":"1639","messageId":"1640","endLine":647,"endColumn":45},{"ruleId":"1627","severity":1,"message":"1628","line":656,"column":31,"nodeType":"1629","messageId":"1630","endLine":656,"endColumn":42},{"ruleId":"1637","severity":1,"message":"1638","line":661,"column":24,"nodeType":"1639","messageId":"1640","endLine":661,"endColumn":28},{"ruleId":"1637","severity":1,"message":"1638","line":668,"column":33,"nodeType":"1639","messageId":"1640","endLine":668,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":692,"column":31,"nodeType":"1629","messageId":"1630","endLine":692,"endColumn":42},{"ruleId":"1637","severity":1,"message":"1638","line":693,"column":35,"nodeType":"1639","messageId":"1640","endLine":693,"endColumn":42},{"ruleId":"1637","severity":1,"message":"1638","line":695,"column":33,"nodeType":"1639","messageId":"1640","endLine":695,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":3,"column":24,"nodeType":"1629","messageId":"1630","endLine":3,"endColumn":29},{"ruleId":"1613","severity":1,"message":"1738","line":9,"column":3,"nodeType":"1615","endLine":9,"endColumn":29},{"ruleId":"1627","severity":1,"message":"1628","line":91,"column":3,"nodeType":"1636","messageId":"1630","endLine":91,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1628","line":101,"column":3,"nodeType":"1636","messageId":"1630","endLine":101,"endColumn":16},{"ruleId":"1627","severity":1,"message":"1628","line":112,"column":19,"nodeType":"1629","messageId":"1630","endLine":112,"endColumn":47},{"ruleId":"1632","severity":1,"message":"1633","line":134,"column":14,"nodeType":"1634","messageId":"1635","endLine":134,"endColumn":17},{"ruleId":"1627","severity":1,"message":"1628","line":154,"column":3,"nodeType":"1636","messageId":"1630","endLine":154,"endColumn":56},{"ruleId":"1637","severity":1,"message":"1638","line":197,"column":31,"nodeType":"1639","messageId":"1640","endLine":197,"endColumn":43},{"ruleId":"1637","severity":1,"message":"1638","line":222,"column":35,"nodeType":"1639","messageId":"1640","endLine":222,"endColumn":56},{"ruleId":"1637","severity":1,"message":"1638","line":235,"column":34,"nodeType":"1639","messageId":"1640","endLine":235,"endColumn":46},{"ruleId":"1627","severity":1,"message":"1628","line":255,"column":3,"nodeType":"1636","messageId":"1630","endLine":255,"endColumn":44},{"ruleId":"1627","severity":1,"message":"1628","line":268,"column":3,"nodeType":"1636","messageId":"1630","endLine":268,"endColumn":39},{"ruleId":"1627","severity":1,"message":"1628","line":326,"column":3,"nodeType":"1636","messageId":"1630","endLine":326,"endColumn":27},{"ruleId":"1627","severity":1,"message":"1628","line":339,"column":3,"nodeType":"1636","messageId":"1630","endLine":339,"endColumn":40},{"ruleId":"1632","severity":1,"message":"1633","line":379,"column":39,"nodeType":"1634","messageId":"1635","endLine":379,"endColumn":42},{"ruleId":"1627","severity":1,"message":"1628","line":433,"column":3,"nodeType":"1636","messageId":"1630","endLine":433,"endColumn":74},{"ruleId":"1739","severity":2,"message":"1740","line":501,"column":22,"nodeType":"1741","messageId":"1742","endLine":501,"endColumn":70},{"ruleId":"1637","severity":1,"message":"1638","line":537,"column":10,"nodeType":"1639","messageId":"1640","endLine":537,"endColumn":38},{"ruleId":"1632","severity":1,"message":"1633","line":3,"column":42,"nodeType":"1634","messageId":"1635","endLine":3,"endColumn":45},{"ruleId":"1632","severity":1,"message":"1633","line":34,"column":71,"nodeType":"1634","messageId":"1635","endLine":34,"endColumn":74},{"ruleId":"1627","severity":1,"message":"1628","line":4,"column":36,"nodeType":"1629","messageId":"1630","endLine":4,"endColumn":41},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","'runTestFirebaseConnectionDatabase' is defined but never used.","'runTestFirebaseCredentialsStorage' is defined but never used.","'runTestCAIdentityWithAuthorityProviderGenerator' is defined but never used.","'runTestCAConnectionFirebase' is defined but never used.","'runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider' is defined but never used.","'runTestErrorExtended' is defined but never used.","'runTestSwarmConnection' is defined but never used.","'runTestSwarmConnectionIPFS' is defined but never used.","'runTestSwarmStoreOrbitDBConnection' is defined but never used.","'runTestValidateMessagingTimestampsTest' is defined but never used.","'runTestHttpRequest' is defined but never used.","@typescript-eslint/explicit-function-return-type","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'any' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","FunctionExpression","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","unexpected","'TCACryptoKeyPairsExported' is defined but never used.","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'CONST_VALIDATION_SCHEMES_URL' is defined but never used.","'TCentralAuthorityUserCryptoCredentials' is defined but never used.","'signInResult' is assigned a value but never used.","'TCentralAuthorityUserCryptoCredentialsExported' is defined but never used.","'CA_IDENTITY_CREDENTIALS_STORAGE_FULL_NAME' is defined but never used.","'importCryptoCredentialsFromExportedFromat' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'dataValidatorUtilUUIDV4' is defined but never used.","'CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH' is defined but never used.","'status' is assigned a value but never used.","'TSecretStoreConfiguration' is defined but never used.","'encodingDown' is defined but never used.","'ownKeyOf' is defined but never used.","'TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES' is defined but never used.","'Multiaddr' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","'CentralAuthorityIdentity' is defined but never used.","Unexpected empty async method 'load'.","'IdentityProvider' is defined but never used.","FunctionDeclaration","no-useless-rename","Destructuring assignment databases unnecessarily renamed.","Property",{"range":"1743","text":"1744"},"'encryptNative' is defined but never used.","'decryptNative' is defined but never used.","'exportKeyPairAsString' is defined but never used.","'importKeyPairFromString' is defined but never used.","'encryptToString' is defined but never used.","'decryptFromString' is defined but never used.","'encryptToTypedArray' is defined but never used.","'calculateHash' is defined but never used.","'arrayBufferToBase64' is defined but never used.","'testEncryption' is assigned a value but never used.","'Mocha' is defined but never used.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'exportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","@typescript-eslint/no-unnecessary-type-assertion","This assertion is unnecessary since it does not change the type of the expression.","TSAsExpression","unnecessaryAssertion",{"range":"1745","text":"1746"},{"range":"1747","text":"1746"},"'generateCryptoCredentials' is defined but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","'credentials' is assigned a value but never used.","'ICentralAuthorityUserProfile' is defined but never used.",{"range":"1748","text":"1746"},"@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.","MemberExpression","unbound","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js.\nThe file must be included in at least one of the projects provided.","'importPasswordKeyFromString' is defined but never used.","'exportPasswordKey' is defined but never used.","'encryptDataToArrayBuffer' is defined but never used.","'decryptDataWithKeyNative' is defined but never used.","'testValue' is assigned a value but never used.","prefer-const","'readyEmitted' is never reassigned. Use 'const' instead.","useConst",{"range":"1749","text":"1750"},{"range":"1751","text":"1750"},{"range":"1752","text":"1750"},{"range":"1753","text":"1750"},{"range":"1754","text":"1750"},{"range":"1755","text":"1750"},{"range":"1756","text":"1746"},{"range":"1757","text":"1746"},{"range":"1758","text":"1746"},{"range":"1759","text":"1746"},{"range":"1760","text":"1746"},{"range":"1761","text":"1746"},{"range":"1762","text":"1746"},{"range":"1763","text":"1746"},{"range":"1764","text":"1746"},{"range":"1765","text":"1746"},{"range":"1766","text":"1746"},{"range":"1767","text":"1746"},"'TPseudoNTPClassResponseRaw' is defined but never used.","@typescript-eslint/await-thenable","Unexpected `await` of a non-Promise (non-\"Thenable\") value.","AwaitExpression","await",[27905,27925],"databases",[9411,9435],"",[10219,10243],[5613,5641],[7072,7075],"const",[10363,10366],[15013,15016],[17212,17215],[19488,19491],[23003,23006],[26227,26228],[26359,26360],[26466,26467],[26598,26599],[26714,26715],[26772,26773],[26981,26982],[27289,27290],[27701,27702],[28010,28011],[28178,28179],[28286,28287]]