[{"/home/paul/projects/decentrilized-protocol/src/App.tsx":"1","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"2","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"3","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"4","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"5","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"6","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"7","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"8","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"9","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"10","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"11","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"12","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"13","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"14","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"15","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"16","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"17","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"18","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"19","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"20","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"21","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"22","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"23","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"24","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"25","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"26","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"27","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"28","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"29","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"30","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"31","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"32","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"33","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"34","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"35","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"36","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"37","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"38","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"39","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"40","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"41","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"42","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"43","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"44","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"45","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts":"46","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"47","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"48","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"49","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"50","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"51","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"52","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"53","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"54","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"55","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"56","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"57","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"58","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"59","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"60","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"61","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"62","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"63","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"64","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"65","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"66","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"67","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"68","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"69","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"70","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"71","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"72","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts":"73","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"74","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"75","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts":"76","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"77","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"78","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"79","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"80","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"81","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"82","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"83","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"84","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"85","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"86","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"87","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"88","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"89","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"90","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"91","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"92","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"93","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"94","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"95","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"96","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"97","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"98","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts":"99","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts":"100","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts":"101","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts":"102","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts":"103","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts":"104","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts":"105","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts":"106","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts":"107","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts":"108","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"109","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"110","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"111","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"112","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"113","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"114","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"115","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"116","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"117","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"118","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"119","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"120","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"121","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"122","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"123","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"124","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"125","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"126","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"127","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"128","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"129","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"130","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts":"131","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"132","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"133","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"134","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"135","/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts":"136","/home/paul/projects/decentrilized-protocol/src/index.tsx":"137","/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts":"138","/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts":"139","/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts":"140","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts":"141","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"142","/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts":"143","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts":"144","/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts":"145","/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts":"146","/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts":"147","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts":"148","/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts":"149","/home/paul/projects/decentrilized-protocol/src/types/main.types.ts":"150","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts":"151","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts":"152","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts":"153","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts":"154","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts":"155","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts":"156","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts":"157","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts":"158","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"159","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"160","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"161","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts":"162","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"163","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"164","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts":"165","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"166","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts":"167","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"168","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"169","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"170","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"171","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"172","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"173","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts":"174","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"175","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"176","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts":"177","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts":"178","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"179","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"180","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts":"181","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"182","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"183","/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts":"184","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"185","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"186","/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts":"187","/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"188","/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts":"189","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts":"190","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts":"191","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts":"192","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts":"193","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts":"194","/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts":"195","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts":"196","/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts":"197","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"198","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts":"199","/home/paul/projects/decentrilized-protocol/src/App.test.tsx":"200","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts":"201","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts":"202","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts":"203","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts":"204","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts":"205","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts":"206","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts":"207","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts":"208","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts":"209","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts":"210","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts":"211","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts":"212","/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts":"213","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts":"214","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts":"215","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js":"216","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts":"217","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts":"218","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts":"219","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts":"220","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts":"221","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts":"222","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts":"223","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"224","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"225","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"226","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"227","/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts":"228","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts":"229","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"230","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"231","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"232","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"233","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"234","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"235","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"236","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"237","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"238","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"239","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"240","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"241","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"242","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"243","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"244","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"245","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"246","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"247","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts":"248","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts":"249","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"250","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"251","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"252","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"253","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"254","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"255","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"256","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts":"257","/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"258","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts":"259","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"260","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"261","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"262","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"263","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"264","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"265","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"266","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"267","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"268","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"269","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"270","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"271","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"272","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"273","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"274","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"275","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts":"276","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"277","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"278","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts":"279","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts":"280","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts":"281","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"282","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"283","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"284","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"285","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v1.test.ts":"286","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v2.test.ts":"287","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.anonymousely.ts":"288","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.utils.firebase.ts":"289","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.const.ts":"290","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.ts":"291","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test.ts":"292","/home/paul/projects/decentrilized-protocol/src/test/common-utils-date-time-synced.test.ts":"293","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils-url.test.ts":"294","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.const.ts":"295","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.ts":"296","/home/paul/projects/decentrilized-protocol/src/test/salt-generation-utils.test/salt-generation-utils.test.ts":"297","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test.ts":"298","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"299","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"300","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"301","/home/paul/projects/decentrilized-protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"302","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.const.ts":"303","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.ts":"304","/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.types.ts":"305","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"306","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"307","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"308","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"309","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"310","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.const.ts":"311","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.ts":"312","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.types.ts":"313","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"314","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.types.ts":"315","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"316","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"317","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts":"318","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"319","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts":"320","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.const.ts":"321","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts":"322","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-check-value.ts":"323","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-validation-error.ts":"324"},{"size":5740,"mtime":1579466248885,"results":"325","hashOfConfig":"326"},{"size":608,"mtime":1579380503139,"results":"327","hashOfConfig":"326"},{"size":235,"mtime":1579371532267,"results":"328","hashOfConfig":"326"},{"size":1329,"mtime":1579371532267,"results":"329","hashOfConfig":"326"},{"size":2819,"mtime":1579371532267,"results":"330","hashOfConfig":"326"},{"size":1636,"mtime":1579371532267,"results":"331","hashOfConfig":"326"},{"size":3466,"mtime":1579371532267,"results":"332","hashOfConfig":"326"},{"size":4421,"mtime":1579371532267,"results":"333","hashOfConfig":"326"},{"size":1311,"mtime":1579371532271,"results":"334","hashOfConfig":"326"},{"size":7950,"mtime":1579371532271,"results":"335","hashOfConfig":"326"},{"size":1874,"mtime":1579371532271,"results":"336","hashOfConfig":"326"},{"size":2547,"mtime":1579371532271,"results":"337","hashOfConfig":"326"},{"size":728,"mtime":1579371532271,"results":"338","hashOfConfig":"326"},{"size":1648,"mtime":1579371532271,"results":"339","hashOfConfig":"326"},{"size":191,"mtime":1579371532271,"results":"340","hashOfConfig":"326"},{"size":2582,"mtime":1579371532271,"results":"341","hashOfConfig":"326"},{"size":978,"mtime":1579371532271,"results":"342","hashOfConfig":"326"},{"size":58,"mtime":1579371532271,"results":"343","hashOfConfig":"326"},{"size":2147,"mtime":1579371532271,"results":"344","hashOfConfig":"326"},{"size":216,"mtime":1579371532271,"results":"345","hashOfConfig":"326"},{"size":2025,"mtime":1579371532271,"results":"346","hashOfConfig":"326"},{"size":66,"mtime":1579371532271,"results":"347","hashOfConfig":"326"},{"size":2725,"mtime":1579371532271,"results":"348","hashOfConfig":"326"},{"size":900,"mtime":1579371532271,"results":"349","hashOfConfig":"326"},{"size":751,"mtime":1579371532271,"results":"350","hashOfConfig":"326"},{"size":187,"mtime":1579371532271,"results":"351","hashOfConfig":"326"},{"size":1579,"mtime":1579371532271,"results":"352","hashOfConfig":"326"},{"size":738,"mtime":1579371532275,"results":"353","hashOfConfig":"326"},{"size":224,"mtime":1579371532275,"results":"354","hashOfConfig":"326"},{"size":379,"mtime":1579371532275,"results":"355","hashOfConfig":"326"},{"size":2670,"mtime":1579371532275,"results":"356","hashOfConfig":"326"},{"size":781,"mtime":1579371532275,"results":"357","hashOfConfig":"326"},{"size":1934,"mtime":1579371532275,"results":"358","hashOfConfig":"326"},{"size":671,"mtime":1579371532275,"results":"359","hashOfConfig":"326"},{"size":215,"mtime":1579371532275,"results":"360","hashOfConfig":"326"},{"size":340,"mtime":1579371532275,"results":"361","hashOfConfig":"326"},{"size":3790,"mtime":1579371532275,"results":"362","hashOfConfig":"326"},{"size":1720,"mtime":1579371532275,"results":"363","hashOfConfig":"326"},{"size":676,"mtime":1579371532275,"results":"364","hashOfConfig":"326"},{"size":224,"mtime":1579371532275,"results":"365","hashOfConfig":"326"},{"size":76,"mtime":1579371532275,"results":"366","hashOfConfig":"326"},{"size":3995,"mtime":1579371532275,"results":"367","hashOfConfig":"326"},{"size":1035,"mtime":1579371532279,"results":"368","hashOfConfig":"326"},{"size":6273,"mtime":1579371669116,"results":"369","hashOfConfig":"326"},{"size":2890,"mtime":1579371669116,"results":"370","hashOfConfig":"326"},{"size":24430,"mtime":1580041895478,"results":"371","hashOfConfig":"326"},{"size":311,"mtime":1579371532279,"results":"372","hashOfConfig":"326"},{"size":14225,"mtime":1579371669116,"results":"373","hashOfConfig":"326"},{"size":1182,"mtime":1579371532279,"results":"374","hashOfConfig":"326"},{"size":145,"mtime":1579371532279,"results":"375","hashOfConfig":"326"},{"size":4334,"mtime":1579371532279,"results":"376","hashOfConfig":"326"},{"size":110,"mtime":1579371532279,"results":"377","hashOfConfig":"326"},{"size":77,"mtime":1579371532279,"results":"378","hashOfConfig":"326"},{"size":75,"mtime":1579371532283,"results":"379","hashOfConfig":"326"},{"size":717,"mtime":1579371532283,"results":"380","hashOfConfig":"326"},{"size":306,"mtime":1579371532283,"results":"381","hashOfConfig":"326"},{"size":385,"mtime":1579371532283,"results":"382","hashOfConfig":"326"},{"size":130,"mtime":1579371532283,"results":"383","hashOfConfig":"326"},{"size":4321,"mtime":1579463435500,"results":"384","hashOfConfig":"326"},{"size":3891,"mtime":1579371532287,"results":"385","hashOfConfig":"326"},{"size":3547,"mtime":1579371532287,"results":"386","hashOfConfig":"326"},{"size":7618,"mtime":1579371532287,"results":"387","hashOfConfig":"326"},{"size":4867,"mtime":1579371532287,"results":"388","hashOfConfig":"326"},{"size":453,"mtime":1579371532287,"results":"389","hashOfConfig":"326"},{"size":310,"mtime":1579371532287,"results":"390","hashOfConfig":"326"},{"size":14405,"mtime":1579465549389,"results":"391","hashOfConfig":"326"},{"size":3800,"mtime":1579371532287,"results":"392","hashOfConfig":"326"},{"size":665,"mtime":1579371532287,"results":"393","hashOfConfig":"326"},{"size":4181,"mtime":1579371532287,"results":"394","hashOfConfig":"326"},{"size":1589,"mtime":1579371532287,"results":"395","hashOfConfig":"326"},{"size":504,"mtime":1579371532287,"results":"396","hashOfConfig":"326"},{"size":1490,"mtime":1579371532291,"results":"397","hashOfConfig":"326"},{"size":32718,"mtime":1579371532291,"results":"398","hashOfConfig":"326"},{"size":1469,"mtime":1579371532291,"results":"399","hashOfConfig":"326"},{"size":290,"mtime":1579371532291,"results":"400","hashOfConfig":"326"},{"size":28938,"mtime":1579371532291,"results":"401","hashOfConfig":"326"},{"size":1061,"mtime":1579371532291,"results":"402","hashOfConfig":"326"},{"size":1467,"mtime":1579371532295,"results":"403","hashOfConfig":"326"},{"size":1403,"mtime":1579371532295,"results":"404","hashOfConfig":"326"},{"size":4370,"mtime":1579371532295,"results":"405","hashOfConfig":"326"},{"size":8907,"mtime":1579371532295,"results":"406","hashOfConfig":"326"},{"size":1851,"mtime":1579371532295,"results":"407","hashOfConfig":"326"},{"size":10977,"mtime":1579371532295,"results":"408","hashOfConfig":"326"},{"size":114,"mtime":1579371532295,"results":"409","hashOfConfig":"326"},{"size":35,"mtime":1579371532295,"results":"410","hashOfConfig":"326"},{"size":51,"mtime":1579371532295,"results":"411","hashOfConfig":"326"},{"size":48,"mtime":1579371532295,"results":"412","hashOfConfig":"326"},{"size":35,"mtime":1579371532295,"results":"413","hashOfConfig":"326"},{"size":33,"mtime":1579371532295,"results":"414","hashOfConfig":"326"},{"size":31,"mtime":1579371532295,"results":"415","hashOfConfig":"326"},{"size":30,"mtime":1579371532295,"results":"416","hashOfConfig":"326"},{"size":37,"mtime":1579371532295,"results":"417","hashOfConfig":"326"},{"size":40,"mtime":1579371532295,"results":"418","hashOfConfig":"326"},{"size":25,"mtime":1579371532295,"results":"419","hashOfConfig":"326"},{"size":28,"mtime":1579371532295,"results":"420","hashOfConfig":"326"},{"size":29,"mtime":1579371532295,"results":"421","hashOfConfig":"326"},{"size":5821,"mtime":1579371532299,"results":"422","hashOfConfig":"326"},{"size":2201,"mtime":1579371532299,"results":"423","hashOfConfig":"326"},{"size":76,"mtime":1579371532299,"results":"424","hashOfConfig":"326"},{"size":780,"mtime":1579371532299,"results":"425","hashOfConfig":"326"},{"size":1208,"mtime":1579371532299,"results":"426","hashOfConfig":"326"},{"size":465,"mtime":1579371532303,"results":"427","hashOfConfig":"326"},{"size":46,"mtime":1579371532303,"results":"428","hashOfConfig":"326"},{"size":4093,"mtime":1579371532303,"results":"429","hashOfConfig":"326"},{"size":34,"mtime":1579371532303,"results":"430","hashOfConfig":"326"},{"size":29,"mtime":1579371532303,"results":"431","hashOfConfig":"326"},{"size":894,"mtime":1579371532303,"results":"432","hashOfConfig":"326"},{"size":20,"mtime":1579371532307,"results":"433","hashOfConfig":"326"},{"size":20,"mtime":1579371532307,"results":"434","hashOfConfig":"326"},{"size":270,"mtime":1579371532307,"results":"435","hashOfConfig":"326"},{"size":7019,"mtime":1579371532307,"results":"436","hashOfConfig":"326"},{"size":2052,"mtime":1579371532307,"results":"437","hashOfConfig":"326"},{"size":1153,"mtime":1579371532307,"results":"438","hashOfConfig":"326"},{"size":15830,"mtime":1579371532307,"results":"439","hashOfConfig":"326"},{"size":2293,"mtime":1579371532307,"results":"440","hashOfConfig":"326"},{"size":126,"mtime":1579371532307,"results":"441","hashOfConfig":"326"},{"size":2744,"mtime":1579371532307,"results":"442","hashOfConfig":"326"},{"size":157,"mtime":1579371532307,"results":"443","hashOfConfig":"326"},{"size":677,"mtime":1579371532307,"results":"444","hashOfConfig":"326"},{"size":1607,"mtime":1579371532307,"results":"445","hashOfConfig":"326"},{"size":763,"mtime":1579371532307,"results":"446","hashOfConfig":"326"},{"size":2693,"mtime":1579371532307,"results":"447","hashOfConfig":"326"},{"size":158,"mtime":1579371532307,"results":"448","hashOfConfig":"326"},{"size":542,"mtime":1579371532307,"results":"449","hashOfConfig":"326"},{"size":8597,"mtime":1579371532307,"results":"450","hashOfConfig":"326"},{"size":286,"mtime":1579371532307,"results":"451","hashOfConfig":"326"},{"size":2536,"mtime":1579371532307,"results":"452","hashOfConfig":"326"},{"size":36344,"mtime":1579371532311,"results":"453","hashOfConfig":"326"},{"size":1768,"mtime":1579371532311,"results":"454","hashOfConfig":"326"},{"size":54,"mtime":1579371532311,"results":"455","hashOfConfig":"326"},{"size":228,"mtime":1579371532311,"results":"456","hashOfConfig":"326"},{"size":1713,"mtime":1579371532311,"results":"457","hashOfConfig":"326"},{"size":480,"mtime":1579371532311,"results":"458","hashOfConfig":"326"},{"size":56,"mtime":1579371532311,"results":"459","hashOfConfig":"326"},{"size":1262,"mtime":1579371532311,"results":"460","hashOfConfig":"326"},{"size":592,"mtime":1579371532311,"results":"461","hashOfConfig":"326"},{"size":168,"mtime":1579371532311,"results":"462","hashOfConfig":"326"},{"size":40,"mtime":1579371532311,"results":"463","hashOfConfig":"326"},{"size":2348,"mtime":1579371532319,"results":"464","hashOfConfig":"326"},{"size":3237,"mtime":1579371532319,"results":"465","hashOfConfig":"326"},{"size":2982,"mtime":1579371532319,"results":"466","hashOfConfig":"326"},{"size":343,"mtime":1579371532319,"results":"467","hashOfConfig":"326"},{"size":1529,"mtime":1579371532319,"results":"468","hashOfConfig":"326"},{"size":1525,"mtime":1579371532323,"results":"469","hashOfConfig":"326"},{"size":534,"mtime":1579371532323,"results":"470","hashOfConfig":"326"},{"size":215,"mtime":1579371532323,"results":"471","hashOfConfig":"326"},{"size":646,"mtime":1579371532323,"results":"472","hashOfConfig":"326"},{"size":23,"mtime":1579371532323,"results":"473","hashOfConfig":"326"},{"size":11028,"mtime":1579371532323,"results":"474","hashOfConfig":"326"},{"size":393,"mtime":1579371532323,"results":"475","hashOfConfig":"326"},{"size":2965,"mtime":1579371532323,"results":"476","hashOfConfig":"326"},{"size":261,"mtime":1579371532323,"results":"477","hashOfConfig":"326"},{"size":937,"mtime":1579371532327,"results":"478","hashOfConfig":"326"},{"size":338,"mtime":1579371532327,"results":"479","hashOfConfig":"326"},{"size":2973,"mtime":1579371532327,"results":"480","hashOfConfig":"326"},{"size":215,"mtime":1579371532327,"results":"481","hashOfConfig":"326"},{"size":314,"mtime":1579371532327,"results":"482","hashOfConfig":"326"},{"size":38,"mtime":1579371532327,"results":"483","hashOfConfig":"326"},{"size":66,"mtime":1579371532327,"results":"484","hashOfConfig":"326"},{"size":3866,"mtime":1579371532327,"results":"485","hashOfConfig":"326"},{"size":178,"mtime":1579371532327,"results":"486","hashOfConfig":"326"},{"size":89,"mtime":1579371532327,"results":"487","hashOfConfig":"326"},{"size":532,"mtime":1579371532327,"results":"488","hashOfConfig":"326"},{"size":63,"mtime":1579371532327,"results":"489","hashOfConfig":"326"},{"size":50,"mtime":1579371532327,"results":"490","hashOfConfig":"326"},{"size":1290,"mtime":1579371532327,"results":"491","hashOfConfig":"326"},{"size":136,"mtime":1579371532327,"results":"492","hashOfConfig":"326"},{"size":1614,"mtime":1579371532327,"results":"493","hashOfConfig":"326"},{"size":9208,"mtime":1579371532327,"results":"494","hashOfConfig":"326"},{"size":50,"mtime":1579371532327,"results":"495","hashOfConfig":"326"},{"size":1935,"mtime":1579371532327,"results":"496","hashOfConfig":"326"},{"size":2157,"mtime":1579371532327,"results":"497","hashOfConfig":"326"},{"size":986,"mtime":1579371532327,"results":"498","hashOfConfig":"326"},{"size":48,"mtime":1579371532327,"results":"499","hashOfConfig":"326"},{"size":281,"mtime":1579371532327,"results":"500","hashOfConfig":"326"},{"size":5319,"mtime":1579371669116,"results":"501","hashOfConfig":"326"},{"size":961,"mtime":1579371532331,"results":"502","hashOfConfig":"326"},{"size":1800,"mtime":1579371532331,"results":"503","hashOfConfig":"326"},{"size":2313,"mtime":1579371532331,"results":"504","hashOfConfig":"326"},{"size":4319,"mtime":1579371532331,"results":"505","hashOfConfig":"326"},{"size":141,"mtime":1579371532331,"results":"506","hashOfConfig":"326"},{"size":6608,"mtime":1579371532331,"results":"507","hashOfConfig":"326"},{"size":50,"mtime":1579371532331,"results":"508","hashOfConfig":"326"},{"size":547,"mtime":1579371669116,"results":"509","hashOfConfig":"326"},{"size":230,"mtime":1579371532331,"results":"510","hashOfConfig":"326"},{"size":1337,"mtime":1579371532331,"results":"511","hashOfConfig":"326"},{"size":75,"mtime":1579371532331,"results":"512","hashOfConfig":"326"},{"size":560,"mtime":1579371532331,"results":"513","hashOfConfig":"326"},{"size":718,"mtime":1579371532331,"results":"514","hashOfConfig":"326"},{"size":3088,"mtime":1579371532331,"results":"515","hashOfConfig":"326"},{"size":5791,"mtime":1579371532331,"results":"516","hashOfConfig":"326"},{"size":2493,"mtime":1579371532331,"results":"517","hashOfConfig":"326"},{"size":2097,"mtime":1579371532331,"results":"518","hashOfConfig":"326"},{"size":473,"mtime":1579371532331,"results":"519","hashOfConfig":"326"},{"size":575,"mtime":1579371532331,"results":"520","hashOfConfig":"326"},{"size":462,"mtime":1579371532331,"results":"521","hashOfConfig":"326"},{"size":3990,"mtime":1579371532331,"results":"522","hashOfConfig":"326"},{"size":1042,"mtime":1579371532335,"results":"523","hashOfConfig":"326"},{"size":1175,"mtime":1579383342424,"results":"524","hashOfConfig":"326"},{"size":248,"mtime":1574620670429,"results":"525","hashOfConfig":"526"},{"size":10837,"mtime":1578253700121,"results":"527","hashOfConfig":"526"},{"size":1117,"mtime":1576086673744,"results":"528","hashOfConfig":"526"},{"size":9511,"mtime":1578253700121,"results":"529","hashOfConfig":"526"},{"size":5207,"mtime":1578253700121,"results":"530","hashOfConfig":"526"},{"size":11166,"mtime":1578253700121,"results":"531","hashOfConfig":"526"},{"size":2098,"mtime":1574620670465,"results":"532","hashOfConfig":"526"},{"size":10461,"mtime":1578306232457,"results":"533","hashOfConfig":"526"},{"size":6061,"mtime":1578215948373,"results":"534","hashOfConfig":"526"},{"size":428,"mtime":1574620670469,"results":"535","hashOfConfig":"526"},{"size":198,"mtime":1575729809255,"results":"536","hashOfConfig":"526"},{"size":3057,"mtime":1574620670469,"results":"537","hashOfConfig":"526"},{"size":55,"mtime":1574620670469,"results":"538","hashOfConfig":"526"},{"size":2409,"mtime":1574797996143,"results":"539","hashOfConfig":"526"},{"size":1789,"mtime":1574797996143,"results":"540","hashOfConfig":"526"},{"size":3452,"mtime":1574797996143,"results":"541","hashOfConfig":"526"},{"size":1228,"mtime":1574620863009,"results":"542","hashOfConfig":"526"},{"size":4388,"mtime":1578250137875,"results":"543","hashOfConfig":"526"},{"size":2100,"mtime":1574620670469,"results":"544","hashOfConfig":"526"},{"size":1560,"mtime":1578250137875,"results":"545","hashOfConfig":"526"},{"size":4625,"mtime":1578253700121,"results":"546","hashOfConfig":"526"},{"size":31394,"mtime":1578253700121,"results":"547","hashOfConfig":"526"},{"size":1642,"mtime":1574620670473,"results":"548","hashOfConfig":"526"},{"size":134,"mtime":1574797996147,"results":"549","hashOfConfig":"526"},{"size":839,"mtime":1579371532287,"results":"550","hashOfConfig":"326"},{"size":15598,"mtime":1579371532291,"results":"551","hashOfConfig":"326"},{"size":3120,"mtime":1579371532291,"results":"552","hashOfConfig":"326"},{"size":514,"mtime":1579371532291,"results":"553","hashOfConfig":"326"},{"size":78,"mtime":1579371532311,"results":"554","hashOfConfig":"326"},{"size":72,"mtime":1579371532311,"results":"555","hashOfConfig":"326"},{"size":434,"mtime":1579371532311,"results":"556","hashOfConfig":"326"},{"size":2419,"mtime":1579371532327,"results":"557","hashOfConfig":"326"},{"size":594,"mtime":1579371532299,"results":"558","hashOfConfig":"326"},{"size":54,"mtime":1579371532299,"results":"559","hashOfConfig":"326"},{"size":529,"mtime":1579371532303,"results":"560","hashOfConfig":"326"},{"size":53,"mtime":1579371532303,"results":"561","hashOfConfig":"326"},{"size":699,"mtime":1579371532303,"results":"562","hashOfConfig":"326"},{"size":2280,"mtime":1579371532303,"results":"563","hashOfConfig":"326"},{"size":249,"mtime":1579371532303,"results":"564","hashOfConfig":"326"},{"size":803,"mtime":1579371532303,"results":"565","hashOfConfig":"326"},{"size":1893,"mtime":1579371532303,"results":"566","hashOfConfig":"326"},{"size":214,"mtime":1579371532303,"results":"567","hashOfConfig":"326"},{"size":738,"mtime":1579371532303,"results":"568","hashOfConfig":"326"},{"size":49,"mtime":1579371532303,"results":"569","hashOfConfig":"326"},{"size":1122,"mtime":1579371532303,"results":"570","hashOfConfig":"326"},{"size":60,"mtime":1579371532303,"results":"571","hashOfConfig":"326"},{"size":9632,"mtime":1579371532303,"results":"572","hashOfConfig":"326"},{"size":260,"mtime":1579371532303,"results":"573","hashOfConfig":"326"},{"size":266,"mtime":1579371532327,"results":"574","hashOfConfig":"326"},{"size":453,"mtime":1579371532327,"results":"575","hashOfConfig":"326"},{"size":33,"mtime":1579371532267,"results":"576","hashOfConfig":"326"},{"size":602,"mtime":1579371532267,"results":"577","hashOfConfig":"326"},{"size":43,"mtime":1579371532267,"results":"578","hashOfConfig":"326"},{"size":163,"mtime":1579371532267,"results":"579","hashOfConfig":"326"},{"size":1081,"mtime":1579371532275,"results":"580","hashOfConfig":"326"},{"size":1962,"mtime":1579371532275,"results":"581","hashOfConfig":"326"},{"size":1742,"mtime":1579371532275,"results":"582","hashOfConfig":"326"},{"size":27,"mtime":1579371532311,"results":"583","hashOfConfig":"326"},{"size":1749,"mtime":1579371532311,"results":"584","hashOfConfig":"326"},{"size":3785,"mtime":1579371532315,"results":"585","hashOfConfig":"326"},{"size":360,"mtime":1579371532275,"results":"586","hashOfConfig":"326"},{"size":1786,"mtime":1579371532275,"results":"587","hashOfConfig":"326"},{"size":1588,"mtime":1579371669116,"results":"588","hashOfConfig":"326"},{"size":15111,"mtime":1579371669116,"results":"589","hashOfConfig":"326"},{"size":2944,"mtime":1579371669116,"results":"590","hashOfConfig":"326"},{"size":30591,"mtime":1579371669116,"results":"591","hashOfConfig":"326"},{"size":19264,"mtime":1579371669116,"results":"592","hashOfConfig":"326"},{"size":651,"mtime":1579371532279,"results":"593","hashOfConfig":"326"},{"size":746,"mtime":1579371532279,"results":"594","hashOfConfig":"326"},{"size":24757,"mtime":1579466414947,"results":"595","hashOfConfig":"326"},{"size":3538,"mtime":1579466427479,"results":"596","hashOfConfig":"326"},{"size":868,"mtime":1579371532283,"results":"597","hashOfConfig":"326"},{"size":181,"mtime":1579371532283,"results":"598","hashOfConfig":"326"},{"size":192,"mtime":1579371532283,"results":"599","hashOfConfig":"326"},{"size":1290,"mtime":1579371532283,"results":"600","hashOfConfig":"326"},{"size":575,"mtime":1579371532283,"results":"601","hashOfConfig":"326"},{"size":527,"mtime":1579466276810,"results":"602","hashOfConfig":"326"},{"size":758,"mtime":1579371532283,"results":"603","hashOfConfig":"326"},{"size":333,"mtime":1579371532283,"results":"604","hashOfConfig":"326"},{"size":186,"mtime":1579371532331,"results":"605","hashOfConfig":"326"},{"size":3133,"mtime":1579371532331,"results":"606","hashOfConfig":"326"},{"size":132,"mtime":1579371532331,"results":"607","hashOfConfig":"326"},{"size":298,"mtime":1579371532291,"results":"608","hashOfConfig":"326"},{"size":1497,"mtime":1579371532291,"results":"609","hashOfConfig":"326"},{"size":1440,"mtime":1579371532291,"results":"610","hashOfConfig":"326"},{"size":563,"mtime":1579371532291,"results":"611","hashOfConfig":"326"},{"size":9276,"mtime":1578253700121,"results":"612","hashOfConfig":"526"},{"size":7510,"mtime":1578253700121,"results":"613","hashOfConfig":"526"},{"size":3563,"mtime":1578253700121,"results":"614","hashOfConfig":"526"},{"size":3958,"mtime":1578253700121,"results":"615","hashOfConfig":"526"},{"size":2595,"mtime":1576607687457,"results":"616","hashOfConfig":"526"},{"size":11871,"mtime":1578253700121,"results":"617","hashOfConfig":"526"},{"size":8978,"mtime":1576607687457,"results":"618","hashOfConfig":"526"},{"size":4046,"mtime":1575197547567,"results":"619","hashOfConfig":"526"},{"size":1222,"mtime":1576607687457,"results":"620","hashOfConfig":"526"},{"size":548,"mtime":1575054389462,"results":"621","hashOfConfig":"526"},{"size":2895,"mtime":1575054389462,"results":"622","hashOfConfig":"526"},{"size":7011,"mtime":1578215948373,"results":"623","hashOfConfig":"526"},{"size":15553,"mtime":1575231081809,"results":"624","hashOfConfig":"526"},{"size":17618,"mtime":1580035697477,"results":"625","hashOfConfig":"326"},{"size":1907,"mtime":1579462461049,"results":"626","hashOfConfig":"326"},{"size":783,"mtime":1579371532283,"results":"627","hashOfConfig":"326"},{"size":206,"mtime":1579371532311,"results":"628","hashOfConfig":"326"},{"size":46,"mtime":1579371532287,"results":"629","hashOfConfig":"326"},{"size":5218,"mtime":1579371532287,"results":"630","hashOfConfig":"326"},{"size":1151,"mtime":1579371532287,"results":"631","hashOfConfig":"326"},{"size":80,"mtime":1579371532291,"results":"632","hashOfConfig":"326"},{"size":5189,"mtime":1579371532291,"results":"633","hashOfConfig":"326"},{"size":216,"mtime":1579371532291,"results":"634","hashOfConfig":"326"},{"size":5946,"mtime":1579371532291,"results":"635","hashOfConfig":"326"},{"size":1569,"mtime":1579371532291,"results":"636","hashOfConfig":"326"},{"size":1153,"mtime":1579371532295,"results":"637","hashOfConfig":"326"},{"size":643,"mtime":1579371532295,"results":"638","hashOfConfig":"326"},{"size":1322,"mtime":1579371532295,"results":"639","hashOfConfig":"326"},{"size":1417,"mtime":1579371532295,"results":"640","hashOfConfig":"326"},{"size":5225,"mtime":1579381888518,"results":"641","hashOfConfig":"326"},{"size":15922,"mtime":1580039189084,"results":"642","hashOfConfig":"326"},{"size":1944,"mtime":1579371669116,"results":"643","hashOfConfig":"326"},{"size":500,"mtime":1579371669116,"results":"644","hashOfConfig":"326"},{"size":8796,"mtime":1579371669116,"results":"645","hashOfConfig":"326"},{"size":573,"mtime":1579380554020,"results":"646","hashOfConfig":"326"},{"size":1937,"mtime":1580039518672,"results":"647","hashOfConfig":"326"},{"size":255,"mtime":1579465527285,"results":"648","hashOfConfig":"326"},{"size":72,"mtime":1580040596345,"results":"649","hashOfConfig":"326"},{"size":566,"mtime":1579383263559,"results":"650","hashOfConfig":"326"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1oyszo4",{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"657","messages":"658","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"729","messages":"730","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"758","messages":"759","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"807","messages":"808","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"814"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"825"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"876"},{"filePath":"877","messages":"878","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"902","messages":"903","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"931","messages":"932","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933"},{"filePath":"934","messages":"935","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"936"},{"filePath":"937","messages":"938","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"939","messages":"940","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"941","messages":"942","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"943","messages":"944","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"945","messages":"946","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"947","messages":"948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"949","messages":"950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"951","messages":"952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"953","messages":"954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"971","messages":"972","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"973","messages":"974","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"975","messages":"976","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"977"},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"990"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"993","messages":"994","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998"},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1001","messages":"1002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1051"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1056"},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1077"},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1080"},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1085"},{"filePath":"1086","messages":"1087","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jkhww0",{"filePath":"1096","messages":"1097","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1098"},{"filePath":"1099","messages":"1100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1101"},{"filePath":"1102","messages":"1103","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1104"},{"filePath":"1105","messages":"1106","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1107"},{"filePath":"1108","messages":"1109","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1110"},{"filePath":"1111","messages":"1112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1113","messages":"1114","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1115"},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124"},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1129","messages":"1130","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1131"},{"filePath":"1132","messages":"1133","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1134"},{"filePath":"1135","messages":"1136","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1144","messages":"1145","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1146"},{"filePath":"1147","messages":"1148","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1149"},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1158"},{"filePath":"1159","messages":"1160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1161"},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1182","messages":"1183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1186","messages":"1187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1188","messages":"1189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1194","messages":"1195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1196","messages":"1197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1198","messages":"1199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1200","messages":"1201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1206","messages":"1207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1208","messages":"1209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1210","messages":"1211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1212","messages":"1213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1214","messages":"1215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1216","messages":"1217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1218","messages":"1219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1220","messages":"1221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1224","messages":"1225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1226","messages":"1227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1230","messages":"1231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1232","messages":"1233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1234","messages":"1235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1236","messages":"1237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1238","messages":"1239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1242","messages":"1243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1244","messages":"1245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1246"},{"filePath":"1247","messages":"1248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1259"},{"filePath":"1260","messages":"1261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1262","messages":"1263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1264","messages":"1265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1266","messages":"1267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1268","messages":"1269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1270","messages":"1271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1274","messages":"1275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1280"},{"filePath":"1281","messages":"1282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1283","messages":"1284","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1285"},{"filePath":"1286","messages":"1287","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1288"},{"filePath":"1289","messages":"1290","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1291"},{"filePath":"1292","messages":"1293","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1294"},{"filePath":"1295","messages":"1296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1297","messages":"1298","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1299"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302"},{"filePath":"1303","messages":"1304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1305","messages":"1306","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1307"},{"filePath":"1308","messages":"1309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1310","messages":"1311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1312"},{"filePath":"1313","messages":"1314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1315","messages":"1316","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1317"},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1328","messages":"1329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1330","messages":"1331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1332","messages":"1333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1334","messages":"1335","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1336"},{"filePath":"1337","messages":"1338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1339","messages":"1340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1341","messages":"1342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1343","messages":"1344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1345","messages":"1346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1347","messages":"1348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1349","messages":"1350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1351","messages":"1352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1355","messages":"1356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1357","messages":"1358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1359","messages":"1360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1361","messages":"1362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1363","messages":"1364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1365","messages":"1366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1367","messages":"1368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1369","messages":"1370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/decentrilized-protocol/src/App.tsx",["1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398"],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["1399","1400","1401"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["1402"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["1403"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File([result], extension || 'unknown', {\n          type: mimeType || undefined,\n        });\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["1404","1405","1406"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport { ownValueOf } from 'types/helper.types';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["1407","1408"],"import { isURL } from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!isURL(url)) {\n      return new Error('The url is not valid');\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["1409"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["1410","1411"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport type TCentralAuthorityUserLogin = string;\n\nexport type TCentralAuthorityUserPassword = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: TCentralAuthorityUserLogin;\n  password: TCentralAuthorityUserPassword;\n}\n\n/**\n * this credentials used to authorize the user on a central authority\n * provider service and getting access to a local data encrypted.\n * The secret login property used to encrypt some part of a local data\n * and may be empty. If it's empty then user identity value will be used\n * for encryption. But it may take no effect cause it is public value\n * in most cases.\n */\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME]?: string;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor() {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["1412"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["1413"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["1414"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["1415","1416","1417"],"import { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from './../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const {\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authorityProviderURI,\n  } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["1418"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts",["1419","1420"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["1421","1422","1423","1424","1425"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["1426"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["1427","1428","1429","1430","1431","1432","1433"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["1434","1435","1436","1437"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["1438"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  exportKeyPairAsString as exportKeyPairDataSignAsString,\n  exportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair),\n    exportKeyPairDataSignAsString(signDataKeyPair),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["1439","1440"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["1441","1442","1443","1444"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  TCentralAuthorityUserCryptoCredentialsExported,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  checkIsCryptoKeyPairs,\n  checkIsCryptoKeyPairsExportedAsString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairsExportedAsString(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["1445"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts",["1446","1447","1448"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SecretStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["1449"],"import Multiaddr from 'multiaddr';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\nimport { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES } from './swarm-connection-class-subclass-ipfs.signal-star.conf';\n\nexport enum SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS {\n  FLOODSUB = 'floodsub',\n  GOSSIPPSUB = 'gossipsub',\n}\n\n//https://github.com/ipfs/js-ipfs/blob/master/doc/config.md#api\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT = {\n  Addresses: {\n    // if a dommain used then '/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'\n    Swarm: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES,\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n    ],\n    API: '',\n    Gateway: '',\n    Delegates: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10,\n    },\n    webRTCStar: {\n      Enabled: true,\n    },\n  },\n  Bootstrap: [\n    ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  ],\n  Pubsub: {\n    Enabled: true,\n    Router: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS.GOSSIPPSUB,\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500,\n    },\n  },\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["1450"],"import { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT } from './swarm-connection-class-subclass-ipfs.browser.conf';\nimport { getLibPeerToPeer } from './swarm-connection-class-subclass-ipfs.libp2p.conf';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL =\n  'https://cdn.jsdelivr.net/npm/ipfs/dist/index.js';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT = {\n  init: {\n    emptyRepo: true, // TODO - set to false\n    //privateKey TODO - create PeerId instance by the user's public and private keys\n  },\n  start: true,\n  pass: '', // TODO - use the password for it,\n  silent: false, // TODO - set true on production\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  preload: {\n    enabled: true,\n    addresses: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  config: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT,\n  libp2p: getLibPeerToPeer,\n};\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT = 2000;\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS = 3;\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["1451"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as WebSocketStar from 'libp2p-websocket-star';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as SECIO from 'libp2p-secio';\nimport * as WStar from 'libp2p-webrtc-star';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebSocketStar transport and give it our PeerId, straight from the ipfs node\n  const wstar = new WStar({\n    id: peerInfo.id,\n  });\n  const wsstar = new WebSocketStar({\n    id: peerInfo.id,\n  });\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  // Websocket connections failed cause CORS policy\n  // const delegatePeerRouterWS = new DelegatedPeerRouter(\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n  // const delegateContentRouterWS = new DelegatedContentRouter(\n  //   peerInfo.id,\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n\n  console.warn('IPFS delegate node config HTTP');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP);\n  console.warn('IPFS delegate node config HTTP-WS');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS);\n\n  // Build and return our libp2p node\n  return new Libp2p({\n    peerInfo,\n    peerBook,\n    /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n    switch: {\n      denyTTL: 2 * 60 * 1e3, // 2 minute base\n      denyAttempts: 5, // back off 5 times\n      maxParallelDials: 100,\n      maxColdCalls: 25,\n      dialTimeout: 20e3,\n    },\n    // Lets limit the connection managers peers and have it check peer health less frequently\n    connectionManager: {\n      minPeers: 25,\n      maxPeers: 100,\n      pollInterval: 5000,\n    },\n    modules: {\n      transport: [wstar, wsstar],\n      streamMuxer: [MPLEX, SPDY],\n      connEncryption: [SECIO],\n      peerDiscovery: [Bootstrap, wstar.discovery, wsstar.discovery],\n      dht: KadDHT,\n      // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n      pubsub: PubSubGossip,\n      contentRouting: [\n        delegateContentRouter,\n        // TODO - CORS failed for websocket // delegateContentRouterWS,\n      ],\n      peerRouting: [\n        delegatePeerRouter,\n        // TODO - CORS failed for websocket // delegatePeerRouterWS,\n      ],\n    },\n    config: {\n      peerDiscovery: {\n        // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n        autoDial: true,\n        mdns: {\n          interval: 10000,\n          enabled: true,\n        },\n        bootstrap: {\n          interval: 30e3,\n          enabled: true,\n          list: bootstrapList,\n        },\n        webrtcStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n        webSocketStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n      },\n      // Turn on relay with hop active so we can connect to more peers\n      // implements the circuit-relay mechanism that allows nodes that\n      // don't speak the same protocol to communicate using a third relay node.\n      // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n      // can be forund on here\n      // https://github.com/libp2p/specs/tree/master/relay\n      /**\n       * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n       *\n       * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n       * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n       */\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true,\n        },\n      },\n      /**\n       * Create a new KadDHT.\n       *\n       * @param {Switch} sw libp2p-switch instance\n       * @param {object} options DHT options\n       * @param {number} options.kBucketSize k-bucket size (default 20)\n       * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n       * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n       * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n       * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n       * @param {randomWalkOptions} options.randomWalk randomWalk options\n       */\n      /**\n       * Random walk options\n       *\n       * @typedef {Object} randomWalkOptions\n       * @property {boolean} enabled discovery enabled (default: true)\n       * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n       * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n       * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n       * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n       */\n      dht: {\n        enabled: true,\n        kBucketSize: 20,\n        concurrency: 5,\n        randomWalk: {\n          queriesPerPeriod: 2,\n          enabled: true,\n          interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n          timeout: 2e3, // End the query quickly since we're running so frequently\n        },\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true,\n        signMessages: true,\n        strictSigning: true,\n      },\n    },\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["1452","1453","1454"],"import {\n  ISwarmConnectionSubclass,\n  ESwarmConnectionSubclassStatus,\n  IIPFSSpecificOptions,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS,\n} from './swarm-connection-class-subclass-ipfs.const';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport * as Ipfs from 'types/ipfs.types';\n\nexport class SwarmConnectionSubclassIPFS\n  extends getStatusClass<typeof ESwarmConnectionSubclassStatus>({\n    errorStatus: ESwarmConnectionSubclassStatus.ERROR,\n    instanceName: 'SwarmConnectionSubclassIPFS',\n  })\n  implements ISwarmConnectionSubclass {\n  protected IPFS?: any;\n\n  protected options?: IIPFSSpecificOptions;\n\n  protected connection?: Ipfs.IPFS;\n\n  public isClosed: boolean = false;\n\n  protected reconnectionAttempt: number = 0;\n\n  public get isConnected(): boolean {\n    const { isClosed, connection } = this;\n\n    return !isClosed && !!connection && !!connection.isOnline();\n  }\n\n  public getNativeConnection(): Ipfs.IPFS | undefined {\n    return this.connection;\n  }\n\n  public async close(): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:close');\n    if (isClosed) {\n      return true;\n    }\n    this.setConnectionClosed();\n    await this.stopCurrentConnection();\n    return true;\n  }\n\n  public async connect(\n    options: IIPFSSpecificOptions\n  ): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The connection was closed previousely');\n    }\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      console.error(setOptionsResult);\n      return this.setErrorStatus('Failed to set the options');\n    }\n\n    const scriptLoadingResult = await this.preloadIpfsModule();\n\n    console.warn('ipfs:connect');\n    if (scriptLoadingResult instanceof Error) {\n      console.error(scriptLoadingResult);\n      return this.setErrorStatus('Failed to preload the IPFS library');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect\n      const connectionResult = await this.reconnect();\n\n      if (connectionResult instanceof Error) {\n        console.error(connectionResult);\n        return this.setErrorStatus('Failed to connect the first time');\n      }\n    }\n    return true;\n  }\n\n  protected setConnectionClosed() {\n    console.warn('Ipfs connection is closed');\n    this.isClosed = true;\n    this.setStatus(ESwarmConnectionSubclassStatus.CLOSE);\n  }\n\n  protected setOptions(options?: IIPFSSpecificOptions): Error | boolean {\n    if (!options || typeof options.password !== 'string') {\n      return new Error(\n        'An options and a password must be specified to encrypt the provate data'\n      );\n    }\n    this.options = options;\n    return true;\n  }\n\n  protected setIpfsConstructor(IPFS: any) {\n    this.IPFS = IPFS;\n  }\n\n  protected setIpfsConnection(ipfsNode: Ipfs.IPFS) {\n    this.connection = ipfsNode;\n    // unset the listeners for the node,\n    // cause it may be already set\n    this.unsetListeners(ipfsNode);\n    // set listeners for an events\n    // emitted by the IPFS node\n    this.setListeners(ipfsNode);\n  }\n\n  protected unsetCurrentConnection(ipfsNode?: Ipfs.IPFS) {\n    const { connection } = this;\n\n    if (ipfsNode) {\n      if (ipfsNode === connection) {\n        this.connection = undefined;\n      }\n      if (ipfsNode) {\n        this.unsetListeners(ipfsNode);\n      }\n    }\n  }\n\n  protected async preloadIpfsModule(): Promise<Error | boolean> {\n    let ipfsModule: unknown | Error;\n\n    try {\n      ipfsModule = await import('ipfs');\n    } catch (err) {\n      ipfsModule = err as Error;\n    }\n\n    if (ipfsModule instanceof Error) {\n      console.error(\n        `Failed to load the IPFS main script from the source ${SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL}`\n      );\n      return ipfsModule;\n    }\n    if (!ipfsModule || typeof (ipfsModule as any).create !== 'function') {\n      return new Error('Failed to load an instance of IPFS');\n    }\n    this.setIpfsConstructor(ipfsModule);\n    return true;\n  }\n\n  protected handleStarted = () => {\n    console.warn('IPFS connection to the swarm was started');\n    this.setStatus(ESwarmConnectionSubclassStatus.STARTED);\n  };\n\n  protected handleError = async (error?: Error) => {\n    if (error) {\n      console.error(\n        'An error has occured with the IPFS swarm connection subclass'\n      );\n      console.error(error);\n    }\n  };\n\n  protected handleInitialized = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    this.setStatus(ESwarmConnectionSubclassStatus.INITIALIZED);\n  };\n\n  protected handleStop = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.setStatus(ESwarmConnectionSubclassStatus.STOP);\n      this.reconnect();\n    }\n  };\n\n  protected setListeners(\n    connection: Ipfs.IPFS,\n    isSetListeners: boolean = true\n  ) {\n    const methodName = isSetListeners ? 'on' : 'off';\n\n    connection[methodName]('start', this.handleStarted);\n    connection[methodName]('init', this.handleInitialized);\n    connection[methodName]('error', this.handleError);\n    connection[methodName]('stop', this.handleStop);\n  }\n\n  protected unsetListeners = (connection: Ipfs.IPFS) => {\n    this.setListeners(connection, false);\n  };\n\n  protected async createConnection(): Promise<Error | boolean> {\n    console.warn('create a new IPFS connection to the swarm');\n    const { IPFS, options } = this;\n\n    if (IPFS) {\n      const connection: Ipfs.IPFS = await IPFS.create({\n        ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n        pass: options ? options.password : null, // password from options\n      });\n\n      // this is working connection\n      // const connection: Ipfs.IPFS = await IPFS.create({\n      //   \"preload\":\n      //   {\"enabled\":false},\n      //   \"config\":{\"Addresses\":{\"Swarm\":[\"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"]}},\n      //   \"repo\":\"orbit-chat-ipfs-dfffd\",\n      //   \"EXPERIMENTAL\": {\n      //     \"pubsub\":true,\n      //   }}\n      // );\n\n      if (connection instanceof Error) {\n        console.error('Failed to create a new IPFS node');\n        return connection;\n      }\n      this.setIpfsConnection(connection);\n      console.warn('IPFS node config');\n      console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT);\n      return true;\n    }\n    return new Error('Ipfs was not loaded as a dynamic module previousely');\n  }\n\n  protected async startConnection(): Promise<Error | boolean> {\n    const { connection, isClosed } = this;\n\n    if (isClosed) {\n      return new Error('Unable to start connection closed previousely');\n    }\n    if (!connection) {\n      return new Error(\n        'There is no connection to the IPFS, it must be created before start'\n      );\n    }\n    try {\n      await Promise.race([\n        timeout(SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT),\n        connection.ready,\n      ]);\n    } catch (err) {\n      console.error(err);\n\n      // if failed to start or a timeout has reached\n      // stop the connection\n      const stopConnectionResult = await this.stopConnection(connection);\n\n      if (stopConnectionResult instanceof Error) {\n        this.setErrorStatus(\n          'Failed to stop the connection during creating a new one'\n        );\n        return stopConnectionResult;\n      }\n      return err;\n    }\n\n    const nodeId = await connection.id();\n\n    if (!nodeId) {\n      return new Error('Failed to start node id connection');\n    }\n    console.warn(`Ipfs node was started as: /n ${nodeId}`);\n    return true;\n  }\n\n  protected async stopConnection(connection: Ipfs.IPFS): Promise<Error | void> {\n    console.warn('Stop the connection');\n    try {\n      connection.stop();\n    } catch (err) {\n      console.error(new Error('Failed to stop the ipfs node'));\n      return err;\n    }\n  }\n\n  async stopCurrentConnection(): Promise<Error | void> {\n    const { connection } = this;\n\n    if (connection) {\n      // if the current connection is exists, then stop it\n      // unset the connection and it's listeners\n      this.unsetCurrentConnection(connection);\n      const connectionStopResult = await this.stopConnection(connection);\n\n      if (connectionStopResult instanceof Error) {\n        console.error(connectionStopResult);\n        return connectionStopResult;\n      }\n    }\n  }\n\n  protected incReconnectionAttempt() {\n    this.reconnectionAttempt += 1;\n    console.warn('ipfs:incReconnectionAttempt');\n  }\n\n  protected resetReconnectionAttempt() {\n    this.reconnectionAttempt = 0;\n    console.warn('ipfs:resetReconnectionAttempt');\n  }\n\n  protected async reconnect(): Promise<Error | boolean> {\n    console.warn('ipfs:reconnect');\n    this.incReconnectionAttempt();\n    if (\n      this.reconnectionAttempt >\n      SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS\n    ) {\n      await this.close();\n      this.setStatus(ESwarmConnectionSubclassStatus.CONNECTION_FAILED);\n      return new Error('Failed to connect to the SWARM throught the IPFS');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect once again\n      console.error(startResult);\n      return this.reconnect();\n    }\n    this.resetReconnectionAttempt();\n    return true;\n  }\n\n  protected async start(): Promise<Error | boolean> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:start');\n    if (isClosed) {\n      return new Error(\n        'Unable to connect to the swarm if the connection was closed before'\n      );\n    }\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTING);\n\n    // stop the current connection if exists\n    const stopConnectionResult = await this.stopCurrentConnection();\n\n    if (stopConnectionResult instanceof Error) {\n      this.setErrorStatus('Failed to stop the previous connection');\n    }\n\n    // create a new connection to the ipfs\n    const createConnectionResult = await this.createConnection();\n\n    if (createConnectionResult instanceof Error) {\n      this.setErrorStatus(createConnectionResult);\n      return new Error('Failed to create a new connection');\n    }\n\n    const startConnectionResult = await this.startConnection();\n\n    if (startConnectionResult instanceof Error) {\n      this.setErrorStatus(startConnectionResult);\n      return new Error('Failed to start the connection');\n    }\n    // if started succesfully\n    // then set the status that the node\n    // was started succesfully\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTED);\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts",["1455","1456"],"import { ISwarmMessageSubclassRawConstructorOptions } from './swarm-message-subclass-raw-constructor.types';\n\nexport class SwarmMessageSubclassRawConstructor {\n  constructor(options: ISwarmMessageSubclassRawConstructorOptions) {}\n\n  protected validateOptions(\n    options: ISwarmMessageSubclassRawConstructorOptions\n  ): Error | boolean {\n    if (!options) {\n      return new Error('An options must be provided');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n\n    // const {\n    //     typ: string | number;\n    //     pld: string | Buffer;\n    //     uid: string;\n    //     iss: string;\n    //     k: CryptoKey;\n    // } = options;\n\n    // if (!typ) {\n    //     return new Error();\n    // }\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts",["1457"],"import CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserIdentity,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\n/**\n * @property { string | number } typ - type of the message\n * @property { string | Buffer } pld - payload of the message\n * @property { string | CentralAuthorityIdentity } uid - the user identifier\n * @property { string } iss - the issuer service\n * @property { CryptoKey } k - the crypto key used to sign the data\n *\n * @export\n * @interface ISwarmMessageSubclassRawConstructorOptions\n */\nexport interface ISwarmMessageSubclassRawConstructorOptions {\n  typ: string | number;\n  pld: string | Buffer;\n  uid:\n    | TCentralAuthorityUserCryptoCredentials\n    | TCentralAuthorityUserIdentity\n    | ICAUserUniqueIdentifierDescriptionWithOptionalVersion;\n  iss: string;\n  k: CryptoKey;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["1458"],"import OrbitDB from 'orbit-db';\nimport AccessController from 'orbit-db-access-controllers/src/access-controller-interface';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions,\n  TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback,\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport class SwarmStoreConnectorOrbitDBSubclassAccessController<\n  T\n> extends AccessController {\n  // Returns the type of the access controller\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE;\n  }\n  /**\n   * create and preload an instance\n   * of the SwarmStoreConnectorOrbitDBSubclassAccessController\n   *\n   * @static\n   * @template T\n   * @param {OrbitDB} orbitdb\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>} [options={}]\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public static async create<T>(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ): Promise<SwarmStoreConnectorOrbitDBSubclassAccessController<T>> {\n    return new SwarmStoreConnectorOrbitDBSubclassAccessController<T>(\n      orbitdb,\n      options\n    );\n  }\n\n  // if true then anyone have access\n  // to the database\n  protected _isPublic: boolean = false;\n\n  protected _grantAccessCallback?: TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback<\n    T\n  >;\n\n  protected _orbitdb?: OrbitDB;\n\n  protected _options?: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    T\n  >;\n\n  constructor(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ) {\n    super();\n    this._orbitdb = orbitdb;\n    this.setOptions(options);\n  }\n\n  /**\n   * Called by the databases (the log) to see if entry should\n   * be allowed in the database. Return true if the entry is allowed,\n   * false is not allowed.\n   *\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async canAppend(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      console.warn(\n        `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::entry have an unknown format`\n      );\n      return false;\n    }\n\n    // Write keys and admins keys are allowed\n    const { _options, _isPublic } = this;\n\n    if (_isPublic) {\n      return this.checkAccess(entry, identityProvider);\n    }\n\n    if (!_options) {\n      return false;\n    }\n\n    const { identity } = entry;\n    const { id: userPerformedActionOnEntryId } = identity;\n    const { write: accessListForUsers } = _options;\n\n    // If the ACL contains the writer's public key or it contains '*'\n    if (\n      accessListForUsers &&\n      accessListForUsers.includes(userPerformedActionOnEntryId)\n    ) {\n      return this.checkAccess(entry, identityProvider);\n    }\n    return false;\n  }\n\n  /**\n   *  return manifest params\n   *\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async save(): Promise<\n    ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest\n  > {\n    return {};\n  }\n\n  /**\n   * check if the entry have the common fields\n   * used to verfy the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {entry is LogEntry<T>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyEntryFormat(entry: LogEntry<T>): entry is LogEntry<T> {\n    if (!entry || typeof entry !== 'object') {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n\n    if (!id) {\n      return false;\n    }\n    if (payload === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * validate the identiry provided by the entity\n   *\n   * @protected\n   * @param {IdentityJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyIdentity(\n    identity: IdentityJson,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    return (identityProvider as any).verifyIdentity(identity);\n  }\n\n  /**\n   * validate the entity format and\n   * check the access on it for the\n   * identity provided\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async verifyEntity(entry: LogEntry<T>): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n    const { _grantAccessCallback } = this;\n\n    if (typeof _grantAccessCallback === 'function') {\n      return _grantAccessCallback(payload, id);\n    }\n    return true;\n  }\n\n  /**\n   * validates the enetry and verify the user have\n   * the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async checkAccess(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    try {\n      if (!this.verifyEntryFormat(entry)) {\n        return false;\n      }\n\n      const { identity } = entry;\n      const validateIdentityResult = await this.verifyIdentity(\n        identity,\n        identityProvider\n      );\n\n      if (validateIdentityResult !== true) {\n        return false;\n      }\n      return this.verifyEntity(entry);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  protected setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>\n  ) {\n    if (options) {\n      const { write, grantAcess } = options;\n\n      if (write instanceof Array) {\n        if (write.includes('*')) {\n          this._isPublic = true;\n        }\n      } else {\n        console.warn(\n          `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::Noone have access on the database`\n        );\n      }\n      if (typeof grantAcess === 'function') {\n        if (grantAcess.length !== 2) {\n          console.warn(\n            `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::A grant access callback must receives 2 arguments generally, but receives ${grantAcess.length}`\n          );\n        }\n        this._grantAccessCallback = grantAcess;\n      }\n      this._options = options;\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["1459","1460","1461","1462","1463"],"import * as orbitDbModule from 'orbit-db';\nimport OrbitDbFeedStore from 'orbit-db-feedstore';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseEvents,\n  ISwarmStoreConnectorOrbitDbDatabaseValue,\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions,\n  TFeedStoreHash,\n} from './swarm-store-connector-orbit-db-subclass-database.types';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  ESwarmConnectorOrbitDbDatabaseEventNames,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX,\n  EOrbidDBFeedSoreEvents,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT,\n} from './swarm-store-connector-orbit-db-subclass-database.const';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport { ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\n\nexport class SwarmStoreConnectorOrbitDBDatabase<\n  TFeedStoreType\n> extends EventEmitter<\n  ISwarmStoreConnectorOrbitDbDatabaseEvents<\n    SwarmStoreConnectorOrbitDBDatabase<TFeedStoreType>\n  >\n> {\n  // is loaded fully and ready to use\n  public isReady: boolean = false;\n\n  // whether is closed\n  public isClosed: boolean = false;\n\n  // a name of the database\n  public dbName: string = '';\n\n  private isFullyLoaded: boolean = false;\n\n  private options?: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>;\n\n  protected orbitDb?: orbitDbModule.OrbitDB;\n\n  protected database?: OrbitDbFeedStore<TFeedStoreType>;\n\n  constructor(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>,\n    orbitDb: orbitDbModule.OrbitDB\n  ) {\n    super();\n    this.setOptions(options);\n    this.setOrbitDbInstance(orbitDb);\n  }\n\n  public async connect(): Promise<Error | void> {\n    this.unsetReadyState();\n\n    const dbStoreCreationResult = await this.createDbInstance();\n\n    if (dbStoreCreationResult instanceof Error) {\n      return dbStoreCreationResult;\n    }\n\n    const loadDbResult = await dbStoreCreationResult.load(\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT\n    );\n\n    if ((loadDbResult as unknown) instanceof Error) {\n      console.error(loadDbResult);\n      return this.onFatalError(\n        'The fatal error has occurred on databse loading',\n        'connect'\n      );\n    }\n  }\n\n  public async close(): Promise<Error | void> {\n    const closeCurrentStoreResult = await this.closeCurrentStore();\n\n    this.unsetReadyState();\n    this.isClosed = true;\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, this);\n    this.unsetAllListenersForEvents();\n    if (closeCurrentStoreResult instanceof Error) {\n      return closeCurrentStoreResult;\n    }\n  }\n\n  public async add(value: TFeedStoreType): Promise<string | Error> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hash = await database.add(value);\n\n      if (typeof hash !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value stored'\n        );\n      }\n      return hash;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(\n    hash: TFeedStoreHash\n  ): Promise<\n    Error | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType> | void\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    try {\n      const e = database.get(hash);\n\n      if (e instanceof Error) {\n        return new Error('An error has occurred on get the data from the key');\n      }\n      if (e) {\n        return this.parseValueStored(e);\n      }\n    } catch (err) {\n      return err;\n    }\n    return undefined;\n  }\n\n  public async remove(hash: TFeedStoreHash): Promise<Error | void> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hashRemoved = await database.remove(hash);\n\n      if (typeof hashRemoved !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value removed'\n        );\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async iterator(\n    options?: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  ): Promise<\n    | Error\n    | Array<\n        ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType> | Error | void\n      >\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    const iteratorOptionsRes =\n      options ||\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT;\n\n    return database\n      .iterator(iteratorOptionsRes)\n      .collect()\n      .map(this.parseValueStored);\n  }\n\n  protected parseValueStored = (\n    e: LogEntry<TFeedStoreType>\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType>\n    | Error\n    | void => {\n    const { payload, identity, hash } = e;\n\n    if (payload) {\n      return {\n        id: identity.id,\n        value: payload.value,\n        hash,\n      };\n    } else {\n      return new Error('An unknown fromat of the data stored');\n    }\n  };\n\n  private getDbStoreInstance(): Error | OrbitDbFeedStore<TFeedStoreType> {\n    const { isReady, database } = this;\n\n    if (!isReady) {\n      return new Error('The store is not ready to use');\n    }\n    if (!database) {\n      return this.emitError('The database store instance is empty');\n    }\n    return database;\n  }\n\n  private setReadyState(isReady: boolean = true) {\n    this.isReady = isReady;\n  }\n\n  private unsetReadyState() {\n    this.setReadyState(false);\n  }\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(EOrbidDBFeedSoreEvents).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitError(\n    error: Error | string,\n    mehodName?: string,\n    isFatal: boolean = false\n  ): Error {\n    const err = typeof error === 'string' ? new Error() : error;\n    const eventName = isFatal\n      ? ESwarmConnectorOrbitDbDatabaseEventNames.FATAL\n      : ESwarmConnectorOrbitDbDatabaseEventNames.ERROR;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(eventName, err);\n    return err;\n  }\n\n  protected onFatalError(error: Error | string, methodName: string) {\n    this.unsetReadyState();\n    this.emitError(error, methodName, true);\n\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.close();\n    }\n    return this.emitError(\n      'The database closed cause a fatal error',\n      methodName,\n      true\n    );\n  }\n\n  protected emitEvent(\n    event: ESwarmConnectorOrbitDbDatabaseEventNames,\n    ...args: any[]\n  ) {\n    const { options } = this;\n    const { dbName } = options!;\n\n    this.emit(event, dbName, ...args);\n  }\n\n  private getFeedStoreOptions(): IStoreOptions | undefined | Error {\n    return SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION;\n  }\n\n  private emitFullyLoaded() {\n    if (!this.isFullyLoaded) {\n      this.isFullyLoaded = true;\n      this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.LOADING, 100);\n    }\n  }\n\n  protected logStore = () => {\n    const { database } = this;\n    const posts = database!.iterator({ limit: -1 }).collect();\n\n    console.log('STORE::READY--');\n    posts.forEach((post: any) => {\n      if (post && post.identity) {\n        console.log(post.identity.id);\n      }\n    });\n    console.log('--STORE::READY');\n  };\n\n  private handleFeedStoreReady = () => {\n    this.emitFullyLoaded();\n    this.setReadyState();\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.READY);\n    this.logStore();\n  };\n\n  private handleFeedStoreLoaded = () => {\n    // emit event that the database local copy was fully loaded\n    this.emitFullyLoaded();\n  };\n\n  private handleFeedStoreLoadProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    total: number\n  ) => {\n    // emit event database local copy loading progress\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.LOADING, progress);\n  };\n\n  private handleFeedStoreReplicated = () => {\n    // emit event that the db updated, cause it\n    // was replicated with another peer db copy\n    const { dbName } = this;\n\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE, dbName);\n    this.logStore();\n  };\n\n  private handleFeedStoreClosed = () => {\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.unsetReadyState();\n      this.emitError(\n        'The instance was closed unexpected',\n        'handleFeedStoreClosed'\n      );\n      this.restartStore();\n    }\n  };\n\n  private async closeInstanceOfStore(\n    storeInstance: OrbitDbFeedStore<TFeedStoreType>\n  ): Promise<Error | void> {\n    if (!storeInstance) {\n      return new Error('An instance of the store must be specified');\n    }\n    this.unsetFeedStoreEventListeners(storeInstance);\n    try {\n      await storeInstance.close();\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Fatal error has occurred on close the instance of the Feed store'\n      );\n    }\n  }\n\n  private async closeCurrentStore(): Promise<Error | void> {\n    const { database } = this;\n\n    if (database) {\n      const closeStoreResult = await this.closeInstanceOfStore(database);\n\n      if (closeStoreResult instanceof Error) {\n        console.error(closeStoreResult);\n        return new Error(\n          'Failed to close the current instance of the Database store'\n        );\n      }\n      this.database = undefined;\n    }\n  }\n\n  // restart the store\n  private async restartStore(): Promise<Error | void> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The store was closed previousely');\n    }\n\n    const currentStoreStopResult = await this.closeCurrentStore();\n\n    if (currentStoreStopResult instanceof Error) {\n      console.error(currentStoreStopResult);\n      return this.onFatalError(\n        'Failed to restart the Database cause failed to close the store instance',\n        'restartStore'\n      );\n    }\n    return this.connect();\n  }\n\n  private handleFeedStoreReplicateInProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    have: unknown\n  ) => {\n    console.warn(`handleFeedStoreReplicateInProgress::\n            addr: ${address}\n            hash: ${hash}\n            progress: ${progress}\n        `);\n    this.logStore();\n  };\n\n  private setFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>,\n    isSet = true\n  ): Error | void {\n    if (!feedStore) {\n      return new Error('An instance of the FeedStore must be specified');\n    }\n    if (!feedStore.events) {\n      return new Error('An unknown API of the FeedStore');\n    }\n    if (\n      typeof feedStore.events.addListener !== 'function' ||\n      typeof feedStore.events.removeListener !== 'function'\n    ) {\n      return new Error('An unknown API of the FeedStore events');\n    }\n\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.READY,\n      this.handleFeedStoreReady\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD,\n      this.handleFeedStoreLoaded\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD_PROGRESS,\n      this.handleFeedStoreLoadProgress\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATED,\n      this.handleFeedStoreReplicated\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.CLOSE,\n      this.handleFeedStoreClosed\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATE_PROGRESS,\n      this.handleFeedStoreReplicateInProgress\n    );\n  }\n\n  private unsetFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>\n  ) {\n    this.setFeedStoreEventListeners(feedStore, false);\n  }\n\n  private getAccessControllerOptions(): ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    TFeedStoreType\n  > {\n    const { options } = this;\n    const resultedOptions: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<TFeedStoreType> = {\n      type: SwarmStoreConnectorOrbitDBSubclassAccessController.type,\n    };\n\n    if (!options) {\n      return resultedOptions;\n    }\n\n    const { isPublic, write, grantAcess } = options;\n\n    if (isPublic) {\n      resultedOptions.write = ['*'];\n    } else if (write instanceof Array) {\n      resultedOptions.write = write.filter(\n        (identity) => identity && typeof identity === 'string'\n      );\n    }\n    if (typeof grantAcess === 'function') {\n      if (grantAcess.length !== 2) {\n        console.warn(\n          'The grant access callback function must have 2 arguments'\n        );\n      }\n      resultedOptions.grantAcess = grantAcess;\n    }\n    return resultedOptions;\n  }\n\n  private async createDbInstance(): Promise<\n    Error | OrbitDbFeedStore<TFeedStoreType>\n  > {\n    try {\n      const { orbitDb, options } = this;\n\n      if (!orbitDb) {\n        return this.onFatalError(\n          'There is no intance of the OrbitDb is specified',\n          'createDbInstance'\n        );\n      }\n\n      const { dbName } = options!;\n\n      if (!dbName) {\n        return this.onFatalError(\n          'A name of the database must be specified',\n          'createDbInstance'\n        );\n      }\n\n      const dbFeedStoreOptions = this.getFeedStoreOptions();\n\n      if (dbFeedStoreOptions instanceof Error) {\n        return this.onFatalError(\n          dbFeedStoreOptions,\n          'createDbInstance::getFeedStoreOptions'\n        );\n      }\n\n      const db = await orbitDb.feed<TFeedStoreType>(dbName, {\n        ...SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n        accessController: this.getAccessControllerOptions(),\n      });\n\n      if (db instanceof Error) {\n        return this.onFatalError(db, 'createDbInstance::feed store creation');\n      }\n\n      const setStoreListenersResult = this.setFeedStoreEventListeners(db);\n\n      if (setStoreListenersResult instanceof Error) {\n        return this.onFatalError(\n          setStoreListenersResult,\n          'createDbInstance::set feed store listeners'\n        );\n      }\n      this.database = db;\n      return db;\n    } catch (err) {\n      return this.onFatalError(err, 'createDbInstance');\n    }\n  }\n\n  private setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  ): void | Error {\n    if (!options) {\n      return this.onFatalError('Options must be specified', 'setOptions');\n    }\n\n    const { dbName } = options;\n\n    if (typeof dbName !== 'string') {\n      return this.onFatalError(\n        'A name of the database must be specified',\n        'setOptions'\n      );\n    }\n    this.options = options;\n    this.dbName = dbName;\n  }\n\n  private setOrbitDbInstance(orbitDb: orbitDbModule.OrbitDB): void | Error {\n    if (!orbitDb) {\n      return this.onFatalError(\n        'An instance of orbit db must be specified',\n        'setOrbitDbInstance'\n      );\n    }\n    this.orbitDb = orbitDb;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["1464","1465","1466","1467"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    const verifyResult = await KeystoreClass.verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["1468"],"import { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { validateCryptoKeyCredentials } from './../../../../../secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: IStorageProviderOptions;\n\n  protected secretStorage?: InstanceType<typeof SecretStorage>;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<IStorageProviderOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (isClose) {\n      throw new Error('The instance was closed before');\n    }\n    if (isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public async close(cb?: TCallbackError): Promise<void> {\n    this.setIsClose();\n\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del(key: string, cb?: TCallbackError) {\n    return this.put(key, '', cb);\n  }\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      await this.disconnectSecretStorage();\n    }\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected getSecretStorage(): Error | SecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<IStorageProviderOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    } else if ((credentials as ISecretStoreCredentials).password) {\n      const credentialsValidationResult = SecretStorage.validateCredentials(\n        credentials as ISecretStoreCredentials\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::credentials not valid');\n      }\n      this.credentials = credentials as ISecretStoreCredentials;\n    }\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n    this.unsetSecretStorage();\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",["1469"],"import { SwarmStoreConnectorOrbitDBSubclassIdentityProvider } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport enum ESwarmStoreConnectorOrbitDBEventNames {\n  /**\n   * fired before connecting to the swarm\n   */\n  CONNECTING = 'CONNECTING',\n  /**\n   * firing on the ready state change\n   * if the 'isReady' flag is true\n   * then the instance can be used to read\n   * a data from the database, if the flag\n   * is false, then the instance can be used\n   * to read/write a data.\n   * */\n  STATE_CHANGE = 'STATE_CHANGE',\n  /**\n   * a data was updated in the database and must\n   * be query to get a a new results.\n   * Arguments:\n   * 1) String - name of the database\n   */\n  UPDATE = 'UPDATE',\n  /**\n   * emit when connection to the\n   * database was opened\n   * arguments:\n   * 1) dbName = name of a database opened\n   */\n  READY = 'READY',\n  /**\n   * the instance closed and can't be used\n   * to read/write\n   */\n  CLOSE = 'CLOSE',\n  /**\n   * the instance closed and can't be used\n   * to read/write\n   * * Arguments:\n   * 1) string - name of the database closed\n   * 2) object - instance closed\n   */\n  CLOSE_DATABASE = 'CLOSE_DATABASE',\n  /**\n   * emitted when loading the database from the local data\n   * Arguments:\n   * 1) Number - percentage\n   */\n  LOADING = 'LOADING',\n  /**\n   * an error has occured on any operation\n   * emits with the argument equals to an error\n   */\n  ERROR = 'ERROR',\n}\n\n/**\n * time out before the connection to the swarm throught\n * an ipfs will be timed out\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS = 120000;\n\n/**\n * timeout for open a single database\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS = 30000;\n\n/**\n * maximum attempts to open connection with the database\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX = 3;\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE =\n  SwarmStoreConnectorOrbitDBSubclassIdentityProvider.type;\n\n// prefix used in logs\nexport const SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX =\n  'SwarmStoreConnctotOrbitDB';\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME =\n  '___SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME';\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY =\n  'SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY';\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["1470","1471","1472"],"import OrbitDB from 'orbit-db';\nimport Identities from 'orbit-db-identity-provider';\nimport AccessControllers from 'orbit-db-access-controllers';\nimport { Keystore } from 'orbit-db-keystore';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  ESwarmStoreConnectorOrbitDBEventNames,\n  SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX,\n  SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY,\n} from './swarm-store-connector-orbit-db.const';\nimport { IPFS } from 'types/ipfs.types';\nimport { SwarmStoreConnectorOrbitDBSubclassIdentityProvider } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport {\n  ISwarmStoreConnectorOrbitDBOptions,\n  ISwarmStoreConnectorOrbitDBConnectionOptions,\n  TESwarmStoreConnectorOrbitDBEvents,\n} from './swarm-store-connector-orbit-db.types';\nimport { timeout, delay } from 'utils/common-utils/common-utils-timer';\nimport { SwarmStoreConnectorOrbitDBDatabase } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodArgument,\n} from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { ESwarmConnectorOrbitDbDatabaseEventNames } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';\nimport { commonUtilsArrayDeleteFromArray } from 'utils/common-utils/common-utils';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStorageConnectorOrbitDBSublassKeyStore } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore';\nimport { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport class SwarmStoreConnectorOrbitDB<\n  ISwarmDatabaseValueTypes\n> extends EventEmitter<TESwarmStoreConnectorOrbitDBEvents> {\n  private static isLoadedCustomIdentityProvider: boolean = false;\n\n  private static isLoadedCustomAccessController: boolean = false;\n\n  private static loadCustomIdentityProvider() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider) {\n      Identities.addIdentityProvider(\n        SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n      );\n      SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider = true;\n    }\n  }\n\n  private static loadCustomAccessController() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController) {\n      AccessControllers.addAccessController({\n        AccessController: SwarmStoreConnectorOrbitDBSubclassAccessController,\n      });\n      SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController = true;\n    }\n  }\n\n  public isReady: boolean = false;\n\n  public isClosed: boolean = false;\n\n  protected userId: string = '';\n\n  protected directory: string = SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY;\n\n  protected identity?: any;\n\n  protected connectionOptions?: ISwarmStoreConnectorOrbitDBConnectionOptions;\n\n  protected options?: ISwarmStoreConnectorOrbitDBOptions<\n    ISwarmDatabaseValueTypes\n  >;\n\n  protected ipfs?: IPFS; // instance of the IPFS connected through\n\n  protected orbitDb?: OrbitDB; // instance of the OrbitDB\n\n  protected databases: SwarmStoreConnectorOrbitDBDatabase<\n    ISwarmDatabaseValueTypes\n  >[] = [];\n\n  protected identityKeystore?: Keystore;\n\n  protected storage?: ISwarmStoreConnectorOrbitDBSubclassStorageFabric;\n\n  public constructor(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    super();\n    SwarmStoreConnectorOrbitDB.loadCustomIdentityProvider();\n    SwarmStoreConnectorOrbitDB.loadCustomAccessController();\n    this.applyOptions(options);\n  }\n\n  /**\n     * waiting for the connection to the swarm, load the database locally\n     * and ready to use it\n    /**\n     *\n     *\n     * @param {ISwarmStoreConnectorOrbitDBConnectionOptions} connectionOptions\n     * @returns {(Promise<void | Error>)}\n     * @memberof SwarmStoreConnectorOrbitDB\n     */\n  public connect = async (\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): Promise<void | Error> => {\n    const resultCreateIdentity = await this.createIdentity();\n\n    if (resultCreateIdentity instanceof Error) {\n      console.error(resultCreateIdentity);\n      return this.emitError('Failed to create an identity');\n    }\n\n    const disconnectFromSwarmResult = await this.disconnectFromSwarm();\n\n    if (disconnectFromSwarmResult instanceof Error) {\n      return disconnectFromSwarmResult;\n    }\n\n    const setConnectionOptionsResult = this.setConnectionOptions(\n      connectionOptions\n    );\n\n    if (setConnectionOptionsResult instanceof Error) {\n      return setConnectionOptionsResult;\n    }\n\n    const connectToSwarmResult = await this.connectToSwarm();\n\n    if (connectToSwarmResult instanceof Error) {\n      return connectToSwarmResult;\n    }\n\n    // close the current connections to the databases if exists\n    const closeExistingDatabaseesOpened = await this.closeDatabases();\n\n    if (closeExistingDatabaseesOpened instanceof Error) {\n      return this.emitError(closeExistingDatabaseesOpened, 'openDatabases');\n    }\n\n    // stop the current instance of OrbitDB\n    // if it exists\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n\n    if (stopOrbitDBResult instanceof Error) {\n      return stopOrbitDBResult;\n    }\n\n    // create a new OrbitDB instance\n    const createOrbitDbResult = await this.createOrbitDBInstance();\n\n    if (createOrbitDbResult instanceof Error) {\n      return createOrbitDbResult;\n    }\n\n    // create OrbitDB databases\n    const createDatabases = await this.openDatabases();\n\n    if (createDatabases instanceof Error) {\n      return createDatabases;\n    }\n    // set the database is ready to query\n    this.setIsReady(true);\n  };\n\n  public openDatabase = async (\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    openAttempt: number = 0,\n    checkOptionsIsExists: boolean = true\n  ): Promise<void | Error> => {\n    const { orbitDb, isClosed } = this;\n\n    if (!orbitDb) {\n      return new Error('There is no instance of OrbitDB');\n    }\n    if (isClosed) {\n      return new Error(\"Can't open a database for the connection opened\");\n    }\n\n    // add options in the main setting only\n    // if options are not exists already\n    // in the list. If options are exists\n    // this may mean that the database was\n    // opened but still not ready to use and\n    // waiting when it will be ready to use.\n    const checkDbOptionsResult = checkOptionsIsExists\n      ? this.setDbOptionsIfNotExists(dbOptions)\n      : this.setDbOptions(dbOptions);\n\n    // options checked and set for valid\n    // calculation of the progress percent\n    if (checkDbOptionsResult instanceof Error) {\n      return checkDbOptionsResult;\n    }\n\n    const { dbName } = dbOptions;\n    const db = this.getDbConnectionExists(dbName);\n\n    if (db) {\n      this.unsetOptionsForDatabase(dbName);\n      return new Error(`A database named as ${dbName} is already exists`);\n    }\n\n    const database = new SwarmStoreConnectorOrbitDBDatabase<\n      ISwarmDatabaseValueTypes\n    >(dbOptions, orbitDb);\n\n    this.setListenersDatabaseEvents(database);\n\n    const databaseOpenResult = await this.waitDatabaseOpened(database);\n\n    if (databaseOpenResult instanceof Error) {\n      await this.closeDatabase(database); // close the connection to the database\n      await delay(300);\n      if (\n        openAttempt >\n        SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX\n      ) {\n        return this.handleErrorOnDbOpen(\n          database,\n          'The max nunmber of connection attempts has reached'\n        );\n      }\n\n      const openDatabaseResult = await this.openDatabase(\n        dbOptions,\n        (openAttempt += 1)\n      );\n\n      if (openDatabaseResult instanceof Error) {\n        return this.handleErrorOnDbOpen(database, openDatabaseResult);\n      }\n    }\n    this.databases.push(database);\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.READY, dbOptions.dbName);\n  };\n\n  public async closeDb(dbName: string): Promise<Error | void> {\n    const db = this.getDbConnection(dbName);\n\n    if (db) {\n      return this.closeDatabase(db);\n    }\n    return new Error(`The database named ${dbName} was not found`);\n  }\n\n  /**\n   * make a request to a database by it's name\n   * and a method to execute\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public request = async (\n    dbName: string,\n    dbMethod: TSwarmStoreConnectorOrbitDbDatabaseMathodNames,\n    arg: TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<Error | any> => {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The Swarm connection was closed');\n    }\n\n    const dbConnection = await this.waitingDbOpened(dbName);\n\n    if (dbConnection instanceof Error) {\n      console.error(dbConnection);\n      return this.emitError(\n        new Error('Failed to get an opened connection to the database')\n      );\n    }\n    return dbConnection[dbMethod](arg as any);\n  };\n\n  /**\n   * close all connections with databases\n   * and the Swarm store\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public close = async (): Promise<Error | void> => {\n    this.setIsClosed();\n\n    const closeAllDatabasesResult = await this.closeDatabases();\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n    let err;\n\n    if (closeAllDatabasesResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close all databases connections');\n    }\n    if (stopOrbitDBResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close the current instanceof OrbitDB');\n    }\n    this.unsetAllListenersForEvents();\n    if (err) {\n      return this.emitError(\n        'Failed to close normally the connection to the swarm store'\n      );\n    }\n  };\n  protected setIsClosed = () => {\n    this.setNotReady();\n    this.isClosed = true;\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.CLOSE);\n  };\n\n  /**\n   * return an opened connection with the database by it's name\n   * if exists and undefined if it is not exists\n   * @readonly\n   * @protected\n   * @type {(SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void)}\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  protected getDbConnection = (\n    dbName: string,\n    checkIsOpen: boolean = true\n  ): SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void => {\n    const { databases } = this;\n\n    return databases.find((db) => {\n      return (\n        db &&\n        db.dbName === dbName &&\n        (!checkIsOpen || (!db.isClosed && !!db.isReady))\n      );\n    });\n  };\n\n  /**\n   * returns a database if exists into the list\n   * of the databases which were opened.\n   * This method do not check whether db\n   * closed and ready.\n   * @protected\n   * @param {string} dbName\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getDbConnectionExists(dbName: string) {\n    return this.getDbConnection(dbName, false);\n  }\n\n  protected handleDbClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): void {\n    if (database) {\n      const { dbName } = database;\n\n      this.unsetListenersDatabaseEvents(database);\n      this.unsetOptionsForDatabase(dbName);\n      this.deleteDatabaseFromList(database);\n    }\n  }\n\n  protected handleErrorOnDbOpen(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    error: Error | string\n  ): Error {\n    if (database) {\n      const { dbName } = database;\n\n      this.handleDbClose(database);\n      console.error(\n        `An error has occurred while database named ${dbName} opening`\n      );\n      console.error(error);\n    }\n    return this.emitError(error);\n  }\n\n  /**\n   * waiting till connection to the database\n   * will be opened or failed. If a db will\n   * not be ready during a timeout return error.\n   * @protected\n   * @param {string} dbName\n   * @returns {(Promise<Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected async waitingDbOpened(\n    dbName: string\n  ): Promise<\n    Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  > {\n    const { getDbConnection } = this;\n    const db = getDbConnection(dbName);\n\n    if (db) {\n      return db;\n    } else {\n      const removeListener = this.removeListener.bind(this);\n\n      return new Promise((res) => {\n        let timeout: undefined | NodeJS.Timer;\n        function removeListners() {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          removeListener(\n            ESwarmConnectorOrbitDbDatabaseEventNames.READY,\n            onReady\n          );\n          removeListener(\n            ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n            onClose\n          );\n        }\n        function onReady(dbNameReady: string) {\n          if (dbNameReady === dbName) {\n            const db = getDbConnection(dbName);\n\n            if (db) {\n              removeListners();\n              res(db);\n            }\n          }\n        }\n        function onClose() {\n          removeListners();\n          res(new Error('The Swarm store was closed'));\n        }\n\n        timeout = setTimeout(() => {\n          removeListners();\n          res(new Error());\n        }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n        this.once(ESwarmConnectorOrbitDbDatabaseEventNames.READY, onReady);\n        this.once(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, onClose);\n      });\n    }\n  }\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(ESwarmStoreConnectorOrbitDBEventNames).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitDatabaseClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (database) {\n      const { dbName } = database;\n\n      console.warn(`Database named ${dbName} was closed`);\n      this.emit(\n        ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE,\n        dbName,\n        database\n      );\n    }\n  }\n\n  protected emitError(error: Error | string, mehodName?: string): Error {\n    const err = typeof error === 'string' ? new Error(error) : error;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.ERROR, err);\n    return err;\n  }\n\n  private setIsReady(isReady: boolean = false) {\n    this.isReady = isReady;\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.STATE_CHANGE, isReady);\n  }\n\n  /**\n   * set the flag this instance\n   * is not ready to make a\n   * request to databases\n   * @protected\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setReady() {\n    this.setIsReady(true);\n  }\n\n  protected setNotReady() {\n    this.setIsReady(false);\n  }\n\n  /**\n   * delete the database from the list\n   * of opened databases\n   * @protected\n   * @param {SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>} database\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected deleteDatabaseFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    const { databases } = this;\n\n    if (databases && databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(databases, database);\n    }\n  }\n\n  protected checkDbOptions(\n    options: unknown\n  ): options is ISwarmStoreConnectorOrbitDbDatabaseOptions<\n    ISwarmDatabaseValueTypes\n  > {\n    if (options != null && typeof options === 'object') {\n      const { dbName } = options as { dbName: string };\n\n      return !!dbName && typeof dbName === 'string';\n    }\n    return false;\n  }\n\n  /**\n   * apply options provided for the\n   * instance\n   *\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDBOptions} options\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error - throw an error if the options are not valid\n   */\n  private applyOptions(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('The options must be an object');\n    }\n\n    this.options = options;\n\n    const { id, credentials, directory } = options;\n\n    if (!id) {\n      console.warn(new Error('The user id is not provided'));\n    } else {\n      this.userId = id;\n    }\n    if (typeof directory === 'string') {\n      this.directory = directory;\n    }\n    if (credentials) {\n      // if credentials provided, then\n      // create the secret keystorage\n      this.createIdentityKeystores(credentials);\n      // create secret storage fabric\n      this.createStorage(credentials);\n    }\n  }\n\n  /**\n   * create keystores for identity provider\n   * throw an error if not valid\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @returns {void}\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error\n   */\n  private createIdentityKeystores(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    const validateCredentialsResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (validateCredentialsResult instanceof Error) {\n      console.error(validateCredentialsResult);\n      throw new Error(\n        'createIdentityKeystores::credentials provided are not valid'\n      );\n    }\n\n    const { directory, userId } = this;\n    const identityKeystorePrefix = `${directory}/${userId}`;\n    const identityKeystore = this.createKeystore(\n      credentials,\n      identityKeystorePrefix\n    );\n\n    if (identityKeystore instanceof Error) {\n      console.error(identityKeystore);\n      throw new Error('Failed on create identity keystore');\n    }\n    this.identityKeystore = identityKeystore;\n  }\n\n  /**\n   * create a Storage fabric which is\n   * used by the OrbitDB instance\n   * to generate Cache for a\n   * Keystore and various databases\n   * to read/write values from the\n   * local persistent Cache\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws\n   */\n  private createStorage(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    const validateCredentialsResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (!credentials || validateCredentialsResult instanceof Error) {\n      console.error(validateCredentialsResult);\n      throw new Error(\n        'createIdentityKeystores::credentials provided are not valid'\n      );\n    }\n\n    this.storage = new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n      credentials\n    );\n  }\n\n  protected createKeystore(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials'],\n    keystoreNamePrefix?: string\n  ): Keystore | Error {\n    const keystoreName = `${keystoreNamePrefix ||\n      ''}${SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME}`;\n\n    if (!credentials) {\n      return this.emitError('createKeystore::A Credentials must be provided');\n    }\n    return new SwarmStorageConnectorOrbitDBSublassKeyStore({\n      credentials,\n      store: keystoreName,\n    });\n  }\n\n  /**\n   * create identity for the user. If the userid\n   * is provided then the identity will be created\n   * by the value of the user id.\n   *\n   * @private\n   * @returns {(Promise<Error | void>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private async createIdentity(): Promise<Error | void> {\n    const { userId } = this;\n\n    try {\n      const identity = await Identities.createIdentity({\n        type: SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n        id: userId ? userId : undefined,\n        keystore: this.identityKeystore,\n      });\n\n      if (!userId) {\n        this.userId = identity.id;\n        console.warn(`The user id created automatically is ${userId}`);\n      }\n      if (identity instanceof Error) {\n        return identity;\n      }\n      this.identity = identity;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * return index of the options\n   * for a database name is exists\n   * in the main databases options\n   * (in this.options.databases)\n   * @protected\n   * @param {string} dbName\n   * @returns {number | -1}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getIdxDbOptions(dbName: string): number {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        return databases.findIndex(\n          (db) => !!db && typeof db === 'object' && db.dbName === dbName\n        );\n      }\n    }\n    return -1;\n  }\n\n  protected unsetOptionsForDatabase(dbName: string) {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        const idx = this.getIdxDbOptions(dbName);\n\n        databases.splice(idx, 1);\n      }\n    }\n  }\n\n  /**\n   * set the Database store options in\n   * the main options (this.options.databases)\n   * of all databases\n   * @protected\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} dbOptions\n   * @param {boolean} [checkIfExists=false]\n   * @returns {(void | Error)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setDbOptions(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    checkIfExists: boolean = false\n  ): void | Error {\n    if (!this.checkDbOptions(dbOptions)) {\n      return new Error('The database options have a wrong format');\n    }\n\n    if (checkIfExists) {\n      const { dbName } = dbOptions;\n      const idxExisting = this.getIdxDbOptions(dbName);\n\n      if (idxExisting !== -1) {\n        return new Error(`\n          Options for the database ${dbName} is already exists.\n          May be the database was opened but still not be in ready state\n        `);\n      }\n    }\n\n    const { options } = this;\n\n    if (!options) {\n      this.applyOptions({\n        ...this.options,\n        id: '',\n        databases: [dbOptions],\n      } as ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>);\n      return;\n    }\n\n    const { databases } = options;\n\n    if (databases instanceof Array) {\n      const { dbName } = dbOptions;\n\n      this.unsetOptionsForDatabase(dbName);\n      databases.push(dbOptions);\n    } else {\n      options.databases = [dbOptions];\n    }\n  }\n\n  protected setDbOptionsIfNotExists(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): void | Error {\n    return this.setDbOptions(dbOptions, true);\n  }\n\n  private async closeDatabase(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | void> {\n    this.unsetListenersDatabaseEvents(database);\n\n    const { dbName } = database;\n\n    this.unsetOptionsForDatabase(dbName);\n    this.deleteDatabaseFromList(database);\n\n    const closeDatabaseResult = await database.close();\n\n    if (closeDatabaseResult instanceof Error) {\n      return this.emitError(closeDatabaseResult);\n    }\n    this.emitDatabaseClose(database);\n  }\n\n  private setConnectionOptions(\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): void | Error {\n    if (!connectionOptions) {\n      return this.emitError('Connection options must be specified');\n    }\n\n    const { ipfs } = connectionOptions;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of ipfs must be specified in the connection options'\n      );\n    }\n    this.ipfs = ipfs;\n  }\n\n  private unsetSwarmConnectionOptions() {\n    this.ipfs = undefined;\n    this.connectionOptions = undefined;\n  }\n\n  private async disconnectFromSwarm(): Promise<Error | void> {\n    console.warn(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::disconnectFromTheSwarm`\n    );\n    this.unsetSwarmConnectionOptions();\n    this.setNotReady();\n  }\n\n  private async connectToSwarm(): Promise<Error | void> {\n    const { ipfs } = this;\n\n    if (!ipfs) {\n      return this.emitError('An instance of the IPFS must be specified');\n    }\n    try {\n      // wait when the ipfs will be ready to use\n      await Promise.race([\n        ipfs.ready,\n        timeout(SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS),\n      ]);\n    } catch (err) {\n      return this.emitError(err);\n    }\n  }\n\n  private async stopOrbitDBInsance(): Promise<Error | void> {\n    const { orbitDb } = this;\n\n    if (orbitDb) {\n      try {\n        await orbitDb.stop();\n        this.setNotReady();\n        this.orbitDb = undefined;\n      } catch (err) {\n        return this.emitError(err, 'stopOrbitDBInsance');\n      }\n    }\n  }\n\n  private async createOrbitDBInstance(): Promise<Error | void> {\n    const { ipfs, identity, storage } = this;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of IPFS must exists',\n        'createOrbitDBInstance'\n      );\n    }\n    try {\n      if (!OrbitDB) {\n        return this.emitError('A constructor of the OrbitDb is not provided');\n      }\n      if (!identity) {\n        return this.emitError('An identity must be specified');\n      }\n\n      const instanceOfOrbitDB = await OrbitDB.createInstance(ipfs, {\n        identity,\n        storage,\n      });\n\n      if (instanceOfOrbitDB instanceof Error) {\n        return this.emitError(\n          instanceOfOrbitDB,\n          'createOrbitDBInstance::error has occurred in the \"createInstance\" method'\n        );\n      }\n      this.orbitDb = instanceOfOrbitDB;\n    } catch (err) {\n      return this.emitError(\n        err,\n        'createOrbitDBInstance::failed to create the instance of OrbitDB'\n      );\n    }\n  }\n\n  protected getDbOptions(\n    dbName: string\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseOptions<ISwarmDatabaseValueTypes>\n    | void\n    | Error {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'An options is not specified for the database',\n        `getDbOptions::${dbName}`\n      );\n    }\n\n    const { databases } = options;\n\n    return databases.find((option) => option && option.dbName === dbName);\n  }\n\n  protected stop(): Promise<Error | void> {\n    this.setNotReady();\n    return this.closeDatabases();\n  }\n\n  /**\n   * open database and not check if an options are\n   * exists for the database (replace if exists)\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} optionsForDb\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private openDatabaseNotCheckOptionsExists(\n    optionsForDb: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<void | Error> {\n    return this.openDatabase(optionsForDb, 0, false);\n  }\n\n  private async restartDbConnection(\n    dbName: string,\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<void | Error> {\n    //try to restart the database\n    const optionsForDb = this.getDbOptions(dbName);\n\n    this.unsetListenersDatabaseEvents(database);\n    if (optionsForDb instanceof Error || !optionsForDb) {\n      this.emitError(\n        'Failed to get options to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n\n    const startDbResult = await this.openDatabaseNotCheckOptionsExists(\n      optionsForDb\n    );\n\n    if (startDbResult instanceof Error) {\n      this.emitError(\n        'Failed to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n  }\n\n  protected removeDbFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (this.databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(this.databases, database);\n    }\n  }\n\n  private handleDatabaseStoreClosed = (\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) => {\n    if (database) {\n      const { dbName } = database;\n\n      this.emitError(\n        'Database closed unexpected',\n        `handleDatabaseStoreClosed::${dbName}`\n      );\n      this.handleDbClose(database);\n      this.restartDbConnection(dbName, database);\n    }\n  };\n\n  private handleLoadingProgress = (dbName: string, progress: number): void => {\n    /* \n            databases - is a list of the databases opened already\n            it means that the loading progress for this databases\n            is 100%\n        */\n    const { databases, options } = this;\n    let currentProgressInPercent = 0;\n\n    if (options) {\n      /* \n                overallDatabases - is a list of all databases\n                which are must be opened\n            */\n      const { databases: overallDatabases } = options;\n      // the progress which will be reached\n      // on all the databases will be opened\n      const overallProgressToReach = overallDatabases.length * 100;\n      // progress reached at this time\n      const currentProgress =\n        (databases ? databases.length : 0) * 100 + progress;\n      // the progress reached at this time in a percentage\n      currentProgressInPercent = currentProgress\n        ? (overallProgressToReach / currentProgress) * 100\n        : 0;\n    }\n    console.log(\n      `Swarm store connector::handleLoadingProgress::${dbName}::progress::${progress}`\n    );\n    this.emit(\n      ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n      currentProgressInPercent\n    );\n  };\n\n  private handleDatabaseUpdated = (dbName: string) => {\n    this.emit(ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE, dbName);\n  };\n\n  private async setListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    isSet: boolean = true\n  ): Promise<Error | void> {\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n      this.handleDatabaseStoreClosed\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.LOADING,\n      this.handleLoadingProgress\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE,\n      this.handleDatabaseUpdated\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.FATAL,\n      this.handleDatabaseStoreClosed\n    );\n  }\n\n  private async unsetListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | void> {\n    this.setListenersDatabaseEvents(database, false);\n  }\n\n  private async closeDatabases(): Promise<Error | void> {\n    const { databases } = this;\n\n    // set that the orbit db is not ready to use\n    this.setNotReady();\n    if (!databases || !databases.length) {\n      return;\n    }\n\n    try {\n      let idx = 0;\n      const databasesToClose = [...databases];\n      const len = databasesToClose.length;\n\n      for (; idx < len; idx += 1) {\n        const db = databasesToClose[idx];\n        const dbCloseResult = await this.closeDatabase(db);\n\n        if (dbCloseResult instanceof Error) {\n          console.error(this.emitError(dbCloseResult));\n          this.emitError(\n            'An error has occurred on closing the database',\n            'closeDatabases'\n          );\n        }\n      }\n      this.databases = [];\n    } catch (err) {\n      return err;\n    }\n  }\n\n  private waitDatabaseOpened(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | boolean> {\n    return new Promise<Error | boolean>(async (res) => {\n      let timeout: NodeJS.Timer | undefined = undefined;\n\n      function usetListeners() {\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.READY,\n          res\n        );\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n          res\n        );\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.FATAL,\n          res\n        );\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = undefined;\n      }\n\n      timeout = setTimeout(() => {\n        usetListeners();\n        res(\n          new Error('Failed to open the database cause the timeout has reached')\n        );\n      }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n      try {\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, () => {\n          usetListeners();\n          res(new Error('Database was closed'));\n        });\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.FATAL, () => {\n          usetListeners();\n          res(new Error('A fatal error has occurred while open the database'));\n        });\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.READY, () => {\n          usetListeners();\n          res(true);\n        });\n\n        //connect to the database\n        // and wait for an events from it\n        const connectResult = await database.connect();\n\n        if (connectResult instanceof Error) {\n          usetListeners();\n          console.error(connectResult);\n          return this.emitError('The database.connect method was failed');\n        }\n      } catch (err) {\n        console.error(err);\n        usetListeners();\n        res(err);\n      }\n    });\n  }\n\n  private async openDatabases(): Promise<Error | void> {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'The options must be specified to open the databases'\n      );\n    }\n\n    const { databases } = options;\n    const databasesOptions = [...databases];\n\n    if (!(databasesOptions instanceof Array) || !databasesOptions.length) {\n      return this.emitError('The options for databases must be specified');\n    }\n\n    try {\n      let idx = 0;\n      const len = databasesOptions.length;\n\n      for (; idx < len; idx += 1) {\n        const options = databasesOptions[idx];\n        const startResultStatus = await this.openDatabaseNotCheckOptionsExists(\n          options\n        );\n\n        if (startResultStatus instanceof Error) {\n          console.error(startResultStatus);\n          await this.closeDatabases();\n          return new Error('Failed to open the database');\n        }\n      }\n    } catch (err) {\n      await this.closeDatabases();\n      return this.emitError(err);\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/index.tsx",[],"/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts",["1473","1474","1475","1476","1477","1478","1479","1480","1481","1482"],"import {\n  generateKeyPair,\n  encryptNative,\n  decryptNative,\n  exportKeyPairAsString,\n  importKeyPairFromString,\n  encryptToString,\n  decryptFromString,\n  encryptToTypedArray,\n} from 'utils/encryption-utils';\nimport { calculateHash } from 'utils/hash-calculation-utils';\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n\nconst testEncryption = async () => {\n  const kPair = await generateKeyPair();\n\n  if (kPair instanceof Error) {\n    console.error(kPair);\n  } else {\n    /** THE FIRST USE-CASE */\n    // console.log('export key pair', kPair);\n    // const dataToChiper = '245';\n    // const encryptedData = await encryptNative(\n    //   kPair.publicKey,\n    //   decode(btoa(dataToChiper))\n    // );\n    // if (encryptedData instanceof Error) {\n    //   console.error(encryptedData);\n    // } else {\n    //   const decryptedData = await decryptNative(\n    //     kPair.privateKey,\n    //     decode(encode(encryptedData))\n    //   );\n    //   if (decryptedData instanceof Error) {\n    //     console.error(decryptedData);\n    //   } else {\n    //     console.log('decrypted', atob(encode(decryptedData)));\n    //   }\n    //\n    /** THE SECOND USE-CASE */\n    // const exportedKeyPairString = await exportKeyPairAsString(kPair);\n    // console.log(exportedKeyPairString);\n    // const importedKeyPair = await importKeyPairFromString(\n    //   exportedKeyPairString\n    // );\n    // if (importedKeyPair instanceof Error) {\n    //   throw importedKeyPair;\n    // }\n    // const encryptedStringByExported = await encryptToString(\n    //   importedKeyPair,\n    //   'this is a long long text'\n    // );\n    // const encryptedStringByImported = await encryptToTypedArray(\n    //   exportedKeyPairString,\n    //   'this is a long long text'\n    // );\n    // console.log('encryptedStringByExported', encryptedStringByExported);\n    // console.log('encryptedStringByImported', encryptedStringByImported);\n    // if (!(encryptedStringByExported instanceof Error)) {\n    //   const decrypted = await decryptFromString(\n    //     importedKeyPair,\n    //     encryptedStringByExported\n    //   );\n    //   if (!(decrypted instanceof Error)) {\n    //     console.log('decrypted', decrypted);\n    //   }\n    // }\n    /** HASH CALCULATION */\n    // const hashStrOnce = await calculateHash({ d: 1 });\n    // const hashStrTwice = await calculateHash({ d: 1 });\n    // console.log(hashStrOnce);\n    // console.log(hashStrTwice);\n    // if (hashStrTwice !== hashStrOnce) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n    /** HASH CALCULATION STRING */\n    // const stringData =\n    //   '\"1233465)()09850MNLKADFNDSLKJGN%$%^$^#&#^@&*^)(&$#^&%*#%\"';\n    // const hashStrThird = await calculateHash(stringData);\n    // const hashStrFourth = await calculateHash(stringData);\n    // console.log(hashStrThird);\n    // console.log(hashStrFourth);\n    // if (hashStrThird !== hashStrFourth) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n  }\n};\n// testEncryption();\n","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts",["1483"],"/* global mocha */\nimport { lazyLoadScript } from 'utils/lazy-loading-utils/lazy-loading-utils';\nimport Mocha from 'mocha';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\n\nconst MOCHA_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/mocha/6.2.1/mocha.min.js';\n\nexport async function initializeMocha() {\n  const mochaNode = document.createElement('div');\n\n  mochaNode.id = 'mocha';\n  document.body.prepend(mochaNode);\n  try {\n    await lazyLoadScript(MOCHA_CDN_URL);\n  } catch (err) {\n    console.error('Failed to load Mocha from cdn');\n    return err;\n  }\n\n  const mochaSetupScript = document.createElement('script');\n\n  mochaSetupScript.type = 'text/javascript';\n  mochaSetupScript.className = 'mocha-init';\n  mochaSetupScript.innerHTML = `\n        mocha.setup({\n            ui: 'bdd',\n            globals: ['globalThis']\n        });\n        mocha.checkLeaks();\n    `;\n  document.body.append(mochaSetupScript);\n  chai.use(chaiAsPromised);\n}\n\ntype TCallbackMochaRun = (failures: number) => void;\n\nexport function runMocha(\n  showErrorsOverlay: boolean = true,\n  cb?: TCallbackMochaRun\n) {\n  // it's necessary to disable\n  // error overlay to run test\n  // with mocha\n  if (!showErrorsOverlay) {\n    const hideErrorFrameStyle = document.createElement('style');\n\n    hideErrorFrameStyle.type = 'text/css';\n    hideErrorFrameStyle.innerHTML = `\n            body > iframe {\n                display: none;\n            }\n        `;\n    document.head.appendChild(hideErrorFrameStyle);\n  }\n  mocha.run(cb);\n}\n","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts",["1484","1485"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/main.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts",["1486","1487","1488"],"import 'orbit-db-keystore';\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore {\n    status: string;\n    open(): Promise<void>;\n    close(): Promise<void>;\n    put(k: string, v: any): Promise<void>;\n    get(k: string): string | Uint8Array;\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStore;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n}\n","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts",["1489","1490"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts",["1491","1492"],"export const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["1493","1494","1495"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  isJWK,\n  getJWK,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await exportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return exportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const exportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await exportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  try {\n    const res = await exportKeyPair(keyPair);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = async (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModule.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, true);\n\nexport const importPrivateKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        ),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (isCryptoKeyPairImported(keyPairObject)) {\n        return importKeyPair(keyPairObject);\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return importKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const getKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const importEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return importKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return importKey(jwk);\n    } else if (typeof key === 'string') {\n      return importKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const convertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await importEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return exportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["1496"],"import { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType, exportKey } from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModule.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["1497"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<boolean | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModule.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyFromString = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES | object,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<boolean | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n\n  return verifyNative(k, d, s);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["1498","1499","1500","1501","1502"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["1503","1504","1505","1506","1507","1508"],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["1509"],"import { cryptoModule } from './main.crypto-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return window.crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["1510"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      return importKeyPair(keyPairObject);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts",["1511","1512"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts",["1513","1514"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM = 'SHA-512';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts",["1515"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts",["1516","1517"],"/home/paul/projects/decentrilized-protocol/src/App.test.tsx",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts",["1518"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { signToString, verifyFromString } from 'utils/data-sign-utils';\nimport {\n  getPublicKeysFromCryptoKeyPairs,\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  encryptNative,\n  decryptNative,\n} from 'utils/encryption-utils/encryption-utils';\nimport { TCACryptoKeyPairs } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const runTestEncryptData = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | true> => {\n  const dataToEncode = 'data to encode';\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n  } = keyPairs;\n  const dataToEncodeTypeedArray = stringToTypedArray(dataToEncode);\n\n  if (dataToEncodeTypeedArray instanceof Error) {\n    console.error(dataToEncodeTypeedArray);\n    console.error('Failed to convert data to typed array');\n    return;\n  }\n\n  const encryptedData = await encryptNative(\n    encryptionKeyPair.publicKey,\n    dataToEncodeTypeedArray\n  );\n\n  if (encryptedData instanceof Error) {\n    console.error('Cant encrypt data with the key pair generated');\n    console.error(encryptedData);\n    return;\n  }\n\n  const decryptedData = await decryptNative(\n    encryptionKeyPair.privateKey,\n    encryptedData\n  );\n\n  if (decryptedData instanceof Error) {\n    console.error('Cant decrypt data encrypted with a generated key pairs');\n    console.error(decryptedData);\n    return;\n  }\n\n  const decryptedString = typedArrayToString(decryptedData);\n\n  if (decryptedString instanceof Error) {\n    console.error(decryptedString);\n    console.error(\n      'Failed to convert a string decrypted as array buffer to a DOMString'\n    );\n  }\n\n  if (decryptedString !== dataToEncode) {\n    console.error(\n      `Decrypted data is invalid. Expected: ${dataToEncode}, but ${decryptedString} was received`\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestDataSign = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | boolean> => {\n  const dataToSign = {\n    hello: 'test hello',\n  };\n  const { [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair } = keyPairs;\n  const signString = await signToString(signKeyPair, dataToSign);\n\n  if (signString instanceof Error) {\n    console.error('Failed to sign the string');\n    console.error(signString);\n    return;\n  }\n  if (typeof signString !== 'string') {\n    console.error('Failed to sign the data as a string');\n    return;\n  }\n\n  const verifyDataResult = await verifyFromString(\n    signKeyPair,\n    dataToSign,\n    signString\n  );\n\n  if (verifyDataResult instanceof Error) {\n    console.error('Failed to verify the data signed');\n    console.error(verifyDataResult);\n    return;\n  }\n  if (verifyDataResult !== true) {\n    console.error('The wrong result was given by the verifyFromString');\n    console.error(verifyDataResult);\n    return;\n  }\n\n  const wrongDataVerifyResult = await verifyFromString(\n    signKeyPair,\n    'Wrong data',\n    signString\n  );\n\n  if (wrongDataVerifyResult instanceof Error) {\n    console.error('Failed to verify a non original string data');\n    console.error(wrongDataVerifyResult);\n    return;\n  }\n  if (wrongDataVerifyResult !== false) {\n    console.error('The wrong result of non origin string verification');\n    return;\n  }\n  return true;\n};\n\nexport const runTestForKeyPairs = async (\n  keyPairs: any\n): Promise<undefined | boolean> => {\n  if (keyPairs instanceof Error) {\n    console.error('Cant generate a crypto key pair');\n    console.error(keyPairs);\n    return;\n  }\n\n  if ((await runTestEncryptData(keyPairs)) !== true) {\n    return;\n  }\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    return;\n  }\n\n  const exportedKeyPairs = await exportKeyPairsAsString(keyPairs);\n\n  if (exportedKeyPairs instanceof Error) {\n    console.error('failed to export the key pair');\n    console.error(exportedKeyPairs);\n    return;\n  }\n  if (typeof exportedKeyPairs !== 'string') {\n    console.error('exportedKeyPairs does not exported in a string format');\n    return;\n  }\n\n  const importedKeyPairs = await importKeyPairsFromString(exportedKeyPairs);\n\n  if (!checkIsCryptoKeyPairs(importedKeyPairs)) {\n    console.error('A wrong format of the imported key pairs');\n    return;\n  }\n  if (importedKeyPairs instanceof Error) {\n    console.error('Failed to import key pairs from string');\n    return;\n  }\n  console.log('run tests for the imported from the exported string key pairs');\n  if ((await runTestEncryptData(importedKeyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs fot data sign'\n  );\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs fot data sign'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        privateKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        privateKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** --data sign test */\n  console.log(\n    'run tests encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    console.error('Cant get public keys from crypto key pairs');\n    console.error(publicKeys);\n    return;\n  }\n\n  console.log(\n    'run tests public keys encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey: publicKeys[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME],\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests public keys for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: publicKeys[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME],\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  console.warn('Central authority keys tests are succeed');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts",["1519"],"import { generateCryptoCredentialsV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const CA_CONNECTION_FIREBASE_CONFIG = {\n  apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n  authDomain: 'protocol-f251b.firebaseapp.com',\n  databaseURL: 'https://protocol-f251b.firebaseio.com',\n  projectId: 'protocol-f251b',\n  storageBucket: '',\n  messagingSenderId: '275196342406',\n  appId: '1:275196342406:web:40b79d671c50af57',\n};\n\nexport const CA_CONNECTION_FIREBASE_CONFIG_WATCHA3 = {\n  apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n  authDomain: 'watcha3-191815.firebaseapp.com',\n  databaseURL: 'https://watcha3-191815.firebaseio.com',\n  projectId: 'watcha3-191815',\n  storageBucket: 'watcha3-191815.appspot.com',\n  messagingSenderId: '271822572791',\n  appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n};\n\nexport const CA_CONNECTION_FIREBASE_USER_CREDENTIALS = {\n  login: 'akulich.p@gmail.com',\n  password: '123456',\n};\n\nexport const CA_CONNECTION_FIREBASE_CREDENTIALS = CA_CONNECTION_FIREBASE_USER_CREDENTIALS;\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts",["1520"],"import { CAConnectionFirestoreUtilsCredentialsStrorage } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  compareCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CONFIG_WATCHA3,\n} from './central-authority-connection.test.firebase.const';\nimport { ICAUserUniqueIdentifierMetadata } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAConnectionSignUpCredentials } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\n\nconst runTestFirebaseCredentialsStorageVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc?: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>,\n  firebaseConnectionOptions: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('runTestFirebaseCredentialsStorage::start');\n  let credentialsForInit;\n  if (generateCryptoCredentialsWithUserIdentityFunc) {\n    credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc({\n      authorityProviderURI: firebaseConnectionOptions.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    });\n  }\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const firebaseConnection = await connectWithFirebase(\n    {\n      ...firebaseCredentials,\n      cryptoCredentials: credentialsForInit,\n    },\n    firebaseConnectionOptions\n  );\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const credetntialsStoreConnectionToFirebase = new CAConnectionFirestoreUtilsCredentialsStrorage(\n    firebaseConnection\n  );\n\n  if (credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await credetntialsStoreConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const credentialsForUser = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n  if (credentialsForUser instanceof Error) {\n    console.error(credentialsForUser);\n    console.error('Failed to get credentials for the current user');\n    return;\n  }\n  if (credentialsForUser) {\n    const credentialsFromLocalStorage = localStorage.getItem(\n      `______test___firebase_acc___${firebaseCredentials.login}`\n    );\n\n    if (typeof credentialsFromLocalStorage === 'string') {\n      const credentialsFromLocalStorageParsed = await importCryptoCredentialsFromAString(\n        credentialsFromLocalStorage\n      );\n\n      if (\n        credentialsFromLocalStorageParsed &&\n        !(credentialsFromLocalStorageParsed instanceof Error)\n      ) {\n        if (\n          (await compareCryptoCredentials(\n            credentialsFromLocalStorageParsed,\n            credentialsForUser\n          )) !== true\n        ) {\n          console.error('compareCryptoCredentials returs the invalid result');\n          return;\n        }\n      }\n    } else {\n      const credentialsSerialized = await exportCryptoCredentialsToString(\n        credentialsForUser\n      );\n\n      if (credentialsSerialized instanceof Error) {\n        console.error('Failed to serialize the credentials');\n        return;\n      }\n      localStorage.setItem(\n        `______test___firebase_acc___${firebaseCredentials.login}`,\n        credentialsSerialized\n      );\n    }\n  }\n\n  const credentials = await (\n    generateCryptoCredentialsWithUserIdentityFunc ||\n    generateCryptoCredentialsWithUserIdentityV2\n  )({\n    authorityProviderURI: firebaseConnectionOptions.databaseURL,\n    userUniqueIdentifier:\n      generateCryptoCredentialsWithUserIdentityFunc ===\n      generateCryptoCredentialsWithUserIdentityV2\n        ? firebaseCredentials.login\n        : !generateCryptoCredentialsWithUserIdentityFunc\n        ? '123412'\n        : undefined,\n  });\n\n  if (credentials instanceof Error) {\n    console.error('Failed to generate crypto credentials');\n    return;\n  }\n  if ((await compareCryptoCredentials(credentials, credentials)) !== true) {\n    console.error('compareCryptoCredentials returs the invalid result');\n    return;\n  }\n\n  const setCredentialsResult = await credetntialsStoreConnectionToFirebase.setUserCredentials(\n    credentials\n  );\n\n  if (setCredentialsResult instanceof Error) {\n    console.error(setCredentialsResult);\n    console.error('Failed to set credentials');\n    return;\n  }\n  if (\n    credentialsForUser &&\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user created and stored once must be immputable anyway'\n    );\n    return;\n  }\n\n  if (!credentialsForUser) {\n    const credentialsForUserAfterSetANewOne = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n    if (credentialsForUserAfterSetANewOne instanceof Error) {\n      console.error(credentialsForUser);\n      console.error('Failed to get credentials for the current user');\n      return;\n    }\n    if (!credentialsForUserAfterSetANewOne) {\n      console.error(\n        'Credentials for the current must exists cause it was set before'\n      );\n      return;\n    }\n    if (\n      (await compareCryptoCredentials(\n        credentialsForUserAfterSetANewOne,\n        credentialsForUserAfterSetANewOne\n      )) !== true\n    ) {\n      console.error(\n        'Credentials for the user created and stored once must be immputable anyway'\n      );\n      return;\n    }\n  }\n\n  const userId = getUserIdentityByCryptoCredentials(setCredentialsResult);\n\n  if (userId instanceof Error) {\n    console.error(userId);\n    console.error('Failed to get user id by crypto credentials');\n    return;\n  }\n\n  const getCredentialsResult = await credetntialsStoreConnectionToFirebase.getUserCredentials(\n    userId\n  );\n\n  if (!getCredentialsResult) {\n    console.error(\n      'There is no credentials stored before was found in the Firebsae database'\n    );\n    return;\n  }\n  if (getCredentialsResult instanceof Error) {\n    console.error('Failed to read credentials from the Firebase database');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      getCredentialsResult\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user got by the user id must be immputable the same as the credentials set by the user on sign up flow'\n    );\n    return;\n  }\n\n  const firebaseConnectionNext = await connectWithFirebase({\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  });\n\n  if (!(firebaseConnectionNext instanceof Error)) {\n    console.error(\n      'The next attemp to connect under the same account must be failed'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestFirebaseCredentialsStorage = async () => {\n  // if (\n  //   !(await runTestFirebaseCredentialsStorageVersion(\n  //     {\n  //       login: 'rehodip223@mailhub.pro',\n  //       password: '123456',\n  //     },\n  //     generateCryptoCredentialsWithUserIdentityV1\n  //   ))\n  // ) {\n  //   console.error('Failed test for user identity V1');\n  //   return;\n  // }\n  // if (\n  //   !(await runTestFirebaseCredentialsStorageVersion(\n  //     {\n  //       login: 'pefik89126@mailhub.pro',\n  //       password: '123456',\n  //     },\n  //     generateCryptoCredentialsWithUserIdentityV2\n  //   ))\n  // ) {\n  //   console.error('Failed test for user identity V2');\n  //   return;\n  // }\n  if (\n    !(await runTestFirebaseCredentialsStorageVersion(\n      {\n        login: 'yaxida4519@email1.pro',\n        password: '123456',\n      },\n      undefined,\n      CA_CONNECTION_FIREBASE_CONFIG_WATCHA3\n    ))\n  ) {\n    console.error('Failed test for user identity V2');\n    return;\n  }\n  console.warn('runTestFirebaseCredentialsStorage::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts",["1521"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport CAConnectionWithFirebaseUtilDatabase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst connectToFirebase = async (): Promise<CAConnectionWithFirebaseUtilDatabase | void> => {\n  // TODO - replace the credentials with the existing\n  const login = 'i2ga8r+7mc075w0nc9ns@sharklasers.com';\n  const password = '123456';\n  const firebaseConnection = await connectWithFirebase({\n    login,\n    password,\n  });\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    console.error(new Error('Failed to connect with firebase'));\n    return;\n  }\n\n  const databaseConnectionToFirebase = new CAConnectionWithFirebaseUtilDatabase();\n\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await databaseConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n  return databaseConnectionToFirebase;\n};\n\nexport const runTestFirebaseConnectionDatabase = async () => {\n  console.warn('runTestFirebaseConnectionDatabase::start');\n  const databaseConnectionToFirebase = await connectToFirebase();\n\n  if (!databaseConnectionToFirebase) {\n    return;\n  }\n\n  const randomUUID = generateUUID();\n  const testKey = `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${randomUUID}`;\n  const testData = {\n    testData: 'testData',\n  };\n\n  const setValueResult = await databaseConnectionToFirebase.setValue(\n    testKey,\n    testData\n  );\n\n  if (setValueResult instanceof Error) {\n    console.error(setValueResult);\n    return setValueResult;\n  }\n\n  const readValueResult = await databaseConnectionToFirebase.getValue(testKey);\n\n  if (readValueResult instanceof Error) {\n    console.error(readValueResult);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (!readValueResult || typeof readValueResult !== 'object') {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResult as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseConnectionDatabase::success');\n\n  const disconnectResult = await databaseConnectionToFirebase.disconnect();\n\n  if (disconnectResult instanceof Error) {\n    console.error(disconnectResult);\n    console.error('An error has occured on disconnect from the database');\n    return;\n  }\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'isConnected must be false after disconnected from the database'\n    );\n    return;\n  }\n\n  const databaseConnectionToFirebaseAfterDisconnection = await connectToFirebase();\n\n  if (!databaseConnectionToFirebaseAfterDisconnection) {\n    console.error(\n      'It must be alllowed to create a new instance of the connection after disconnected from the Firebase'\n    );\n    return;\n  }\n\n  const readValueResultAfterReconnect = await databaseConnectionToFirebaseAfterDisconnection.getValue(\n    testKey\n  );\n\n  if (readValueResultAfterReconnect instanceof Error) {\n    console.error(readValueResultAfterReconnect);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (\n    !readValueResultAfterReconnect ||\n    typeof readValueResultAfterReconnect !== 'object'\n  ) {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResultAfterReconnect as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n\n  const newInstanceDisconnectResult = await databaseConnectionToFirebaseAfterDisconnection.disconnect();\n\n  if (newInstanceDisconnectResult instanceof Error) {\n    console.error(newInstanceDisconnectResult);\n    return;\n  }\n\n  const newInstanceConnectResult = await databaseConnectionToFirebaseAfterDisconnection.connect();\n\n  if (!(newInstanceConnectResult instanceof Error)) {\n    console.error(\n      'It\\'s not allowed to reconnect to the Firebase by calling of the \"connect\" method'\n    );\n    return;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts",["1522"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  connectWithFirebase,\n  deleteTheUserFromCA,\n} from './central-authority-connection.utils.firebase';\nimport {\n  CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n  CA_CONNECTION_FIREBASE_CONFIG,\n} from './central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  ICAConnectionUserAuthorizedResult,\n  ICAConnectionSignUpCredentials,\n} from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  generateCryptoCredentialsWithUserIdentityV1,\n  generateCryptoCredentialsWithUserIdentityV2,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { ICAUserUniqueIdentifierMetadata } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\nconst runTestCAConnectionFirebaseChangeEmailForVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>\n) => {\n  const credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc(\n    {\n      authorityProviderURI: CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    }\n  );\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const credentials = {\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  // TODO - it's necessary to use an email\n  // which can be accessed\n  const userProfileWithEmailTest = {\n    name: `Test account ${Date.now()}`,\n    email: 'cogej95883@mail1web.org',\n  };\n  const updateProfileWithEmailResult = await (connectionFirebase as any).setProfileData(\n    userProfileWithEmailTest\n  );\n\n  if (updateProfileWithEmailResult instanceof Error) {\n    console.error('Failed to set the profile (with a email) data');\n    return;\n  }\n  if (userProfileWithEmailTest.name !== updateProfileWithEmailResult.name) {\n    console.error('Name was not updated in the profile');\n    return;\n  }\n  if (userProfileWithEmailTest.email !== updateProfileWithEmailResult.email) {\n    console.error('The email was not updated in the profile');\n    return;\n  }\n  if (connectionFirebase.isAuthorized) {\n    console.error(\n      'isAuthorized connection flag must be false on email value changed'\n    );\n    return;\n  }\n  return true;\n};\n\nconst runTestCAConnectionFirebaseForVersion = async (\n  firebaseCredentials: ICAConnectionSignUpCredentials,\n  generateCryptoCredentialsWithUserIdentityFunc: (\n    identityMetadata: ICAUserUniqueIdentifierMetadata\n  ) => Promise<TCentralAuthorityUserCryptoCredentials | Error>\n) => {\n  console.warn('CA connection firebase test started');\n  const credentialsForInit = await generateCryptoCredentialsWithUserIdentityFunc(\n    {\n      authorityProviderURI: CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n      userUniqueIdentifier:\n        generateCryptoCredentialsWithUserIdentityFunc ===\n        generateCryptoCredentialsWithUserIdentityV2\n          ? firebaseCredentials.login\n          : undefined,\n    }\n  );\n\n  if (credentialsForInit instanceof Error) {\n    console.error(credentialsForInit);\n    console.error(\n      'Failed to generate a credentials to initialize the new user'\n    );\n    return;\n  }\n\n  const credentials = {\n    ...firebaseCredentials,\n    cryptoCredentials: credentialsForInit,\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n  console.warn('CA connection firebase test succeed');\n\n  //check profile update result\n  const userProfileTestWOEmailAndPhoneNumber: Partial<ICentralAuthorityUserProfile> = {\n    name: 'Paul',\n    photoURL:\n      'https://cdn.dribbble.com/users/199982/screenshots/4044699/furkan-avatar-dribbble.png',\n  };\n  const updateProfileResult = await (connectionFirebase as any).setProfileData(\n    userProfileTestWOEmailAndPhoneNumber\n  );\n\n  if (updateProfileResult instanceof Error) {\n    console.error('Failed tp set the profile (without a email) data');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (\n    userProfileTestWOEmailAndPhoneNumber.photoURL !==\n    updateProfileResult.photoURL\n  ) {\n    console.error('The photo URL was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (userProfileTestWOEmailAndPhoneNumber.name !== updateProfileResult.name) {\n    console.error('Name was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n\n  const deleteTheUserResult = await deleteTheUserFromCA(\n    connectionFirebase,\n    credentials\n  );\n\n  if (deleteTheUserResult instanceof Error) {\n    console.error(deleteTheUserResult);\n    return new Error('Failed to delete the user from the Firebase authority');\n  }\n  return true;\n};\n\nexport const runTestCAConnectionFirebase = async () => {\n  // TODO - to run full test it's necessary to change\n  // the credentials to a new\n  const credentialsTest1 = {\n    login: 'xamali6554@mail-help.net',\n    password: '123456',\n  };\n  const resultTestVersion1 = await runTestCAConnectionFirebaseForVersion(\n    credentialsTest1,\n    generateCryptoCredentialsWithUserIdentityV1\n  );\n\n  if (resultTestVersion1 !== true) {\n    console.warn('CA connection firebase for the identity V1 test failed');\n    return;\n  }\n  console.warn('CA connection firebase for the identity V1 test success');\n  const credentialsTest1EmailChange = {\n    login: 'hogano8384@swift-mail.net',\n    password: '123456',\n  };\n  const resultTestVersion1EmailChange = await runTestCAConnectionFirebaseChangeEmailForVersion(\n    credentialsTest1EmailChange,\n    generateCryptoCredentialsWithUserIdentityV1\n  );\n\n  if (resultTestVersion1EmailChange !== true) {\n    console.warn(\n      'CA connection firebase for the identity V1 email change test failed'\n    );\n    return;\n  }\n  console.warn(\n    'CA connection firebase for the identity V1 email change test succeed'\n  );\n  const credentialsTest2 = {\n    login: 'sisarar105@mail-help.net',\n    password: '123456',\n  };\n  const resultTestVersion2 = await runTestCAConnectionFirebaseForVersion(\n    credentialsTest2,\n    generateCryptoCredentialsWithUserIdentityV2\n  );\n\n  if (resultTestVersion2 !== true) {\n    console.warn('CA connection firebase for the identity V2 test failed');\n    return;\n  }\n  const credentialsTest2EmailChange = {\n    login: 'lodajab497@max-mail.org',\n    password: '123456',\n  };\n  const resultTestVersion2EmailChange = await runTestCAConnectionFirebaseChangeEmailForVersion(\n    credentialsTest2EmailChange,\n    generateCryptoCredentialsWithUserIdentityV2\n  );\n\n  if (resultTestVersion2EmailChange !== true) {\n    console.warn(\n      'CA connection firebase for the identity V1 email change test failed'\n    );\n    return;\n  }\n  console.warn(\n    'CA connection firebase for the identity V1 email change test succeed'\n  );\n  console.warn('CA connection firebase for the identity V2 test success');\n};\n\nexport const runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider = async () => {\n  console.error('runTestCAConnectionFirebaseWithoutCryptoCredentials::start');\n  const connectionFirebase = await connectWithFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  const {\n    cryptoCredentials: cryptoCredentialsGenerated,\n  } = connectionFirebase.authResult as ICAConnectionUserAuthorizedResult;\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsGenerated)) {\n    console.error(\n      'Invalida crypto credentials generated by Firebase CA connection'\n    );\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = new CentralAuthorityIdentity(\n    cryptoCredentialsGenerated\n  );\n\n  if (!userIdentityByCryptoCredentials.isValid) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n  const {\n    identityDescription: userIdentityDescription,\n  } = userIdentityByCryptoCredentials;\n\n  if (userIdentityDescription instanceof Error) {\n    console.error(userIdentityDescription);\n    console.error('Failed to parse the identity generated');\n    return;\n  }\n\n  const { authorityProviderURI } = userIdentityDescription;\n\n  if (authorityProviderURI !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL) {\n    console.error(\n      'The url of the Firebase authority provider from generated identity is not valid'\n    );\n    return;\n  }\n  const signOutResult = await connectionFirebase.signOut();\n  if (signOutResult instanceof Error) {\n    console.error(signOutResult);\n    console.error('Failed to sign out');\n    return;\n  }\n\n  const authorizeResultWithCredentialsGenerated = await connectionFirebase.authorize(\n    {\n      ...CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n      cryptoCredentials: cryptoCredentialsGenerated,\n    }\n  );\n  if (authorizeResultWithCredentialsGenerated instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n\n  const {\n    cryptoCredentials: cryptoCredentialsFromAuthorization,\n  } = authorizeResultWithCredentialsGenerated;\n  if (\n    (await compareCryptoCredentials(\n      cryptoCredentialsFromAuthorization,\n      cryptoCredentialsGenerated\n    )) !== true\n  ) {\n    console.error(\n      'Crypto credentials returned after success authorization must be same as provided (if not stored before)'\n    );\n    return;\n  }\n  console.warn('runTestCAConnectionFirebaseWithoutCryptoCredentials::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts",["1523"],"import { CentralAuthorityIdentityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  getUserCredentialsByUserIdentityAndCryptoKeys,\n  exportCryptoCredentialsToString,\n  compareCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\n\nconst runCACredentialsIdentityStorageTestForCredentials = async (\n  storageInstance: CentralAuthorityIdentityCredentialsStorage,\n  testIdentityDescription:\n    | ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n    | TCentralAuthorityUserIdentity\n): Promise<boolean | undefined> => {\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key Pairs');\n    return;\n  }\n\n  const setInStorageResult = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n  const caCryptoCredentialsTestRead = await storageInstance.getCredentials(\n    identityTest\n  );\n\n  if (setInStorageResult instanceof Error) {\n    if (!(caCryptoCredentialsTestRead instanceof Error)) {\n      console.error(\n        'If the set in storage result was wrong, than get from the storage result must be also wrong'\n      );\n    }\n    console.error(setInStorageResult);\n    return;\n  }\n  if (caCryptoCredentialsTestRead instanceof Error) {\n    console.error(caCryptoCredentialsTestRead);\n    console.error('Failed to read the crypto credentials saved previosely');\n    return;\n  }\n  if (!caCryptoCredentialsTestRead) {\n    console.error(\n      'The crypto credentials saved previousely have an empty value stored'\n    );\n    return;\n  }\n\n  const identityValue = getUserIdentityByCryptoCredentials(\n    caCryptoCredentialsTestRead\n  );\n\n  if (identityValue instanceof Error) {\n    console.error(identityValue);\n    console.error('There is a broken identity value was stored');\n    return;\n  }\n  if (identityValue !== identityTest) {\n    console.error('The identity stored have a wrong value not same as stred');\n    return;\n  }\n\n  const caCredentialsTest = getUserCredentialsByUserIdentityAndCryptoKeys(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (caCredentialsTest instanceof Error) {\n    console.error(caCredentialsTest);\n    console.error(\n      'Failed to create CACryproCredentials by the identity and test key pairs'\n    );\n    return;\n  }\n\n  const storeResultCaCryptoCredentials = await storageInstance.setCredentials(\n    caCredentialsTest\n  );\n\n  if (storeResultCaCryptoCredentials instanceof Error) {\n    console.error(storeResultCaCryptoCredentials);\n    console.error('Failed to store the CACryptoCredentials format');\n    return;\n  }\n  if (storeResultCaCryptoCredentials !== false) {\n    console.error(\n      'Crypto credentials for the same identity must not be rewritten'\n    );\n    return;\n  }\n\n  const caCryptoCredentialsExportedToStringTest = await exportCryptoCredentialsToString(\n    caCredentialsTest\n  );\n\n  if (caCryptoCredentialsExportedToStringTest instanceof Error) {\n    console.error(caCryptoCredentialsExportedToStringTest);\n    console.error('Failed to export CACryptoCredentials to a string');\n    return;\n  }\n\n  const storeResultCaCryptoCredentialsExportedToString = await storageInstance.setCredentials(\n    caCryptoCredentialsExportedToStringTest\n  );\n\n  if (storeResultCaCryptoCredentialsExportedToString instanceof Error) {\n    console.error(storeResultCaCryptoCredentialsExportedToString);\n    console.error(\n      'Failed to store the CACryptoCredentials exported to a string format'\n    );\n    return;\n  }\n  if (storeResultCaCryptoCredentialsExportedToString !== false) {\n    console.error(\n      'Crypto credentials (exported as string) for the same identity must not be rewritten'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runCACredentialsIdentityStorageTest = async () => {\n  console.warn('Storage identity test was started');\n\n  const conectionCredentials: ISecretStoreCredentials = {\n    login: 'login@value',\n    password: '123456',\n  };\n  const storageInstance = new CentralAuthorityIdentityCredentialsStorage();\n  const connectionResult = await storageInstance.connect(conectionCredentials);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error(new Error('Failed to connect to the storage'));\n    return;\n  }\n\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const resultFirst = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescription\n  );\n\n  if (resultFirst !== true) {\n    console.error('Test for the first credentials was failed');\n    return;\n  }\n\n  const testIdentityDescriptionSame = {\n    ...testIdentityDescription,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const caIdentityValue = new CentralAuthorityIdentity(testIdentityDescription);\n  const caIdentityValueSame = new CentralAuthorityIdentity(\n    testIdentityDescriptionSame\n  );\n\n  const resCredentialsValue = await storageInstance.getCredentials(\n    caIdentityValue.toString()\n  );\n\n  if (resCredentialsValue instanceof Error) {\n    console.error(resCredentialsValue);\n    console.error('Failed to read credentials');\n    return;\n  }\n  if (!resCredentialsValue) {\n    console.error('Failed to read credentials which are stored before');\n    return;\n  }\n\n  const resSameCredentialsValue = await storageInstance.getCredentials(\n    caIdentityValueSame.toString()\n  );\n\n  if (resSameCredentialsValue instanceof Error) {\n    console.error(resCredentialsValue);\n    console.error('Failed to read credentials');\n    return;\n  }\n  if (!resSameCredentialsValue) {\n    console.error('Failed to read credentials which are stored before');\n    return;\n  }\n  if (!compareCryptoCredentials(resCredentialsValue, resSameCredentialsValue)) {\n    console.error(\n      'A crypto credentials must be the same and independent from the CAIdentity version'\n    );\n    return;\n  }\n  if (\n    resCredentialsValue.userIdentity === resSameCredentialsValue.userIdentity\n  ) {\n    console.error(\n      'The user identity must not be the same cause the version is different'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionTwo = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n      'https://google1.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: 'WWW@WWW.RU',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const resultTwo = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionTwo\n  );\n\n  if (resultTwo !== true) {\n    console.error('Test for the second credentials was failed');\n    return;\n  }\n  console.warn('Test for a wrong identity valie started');\n  const testIdentityDescriptionWrongFormat = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: '',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultMustBeFailed = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionWrongFormat\n  );\n\n  // undefined must be\n  if (resultMustBeFailed) {\n    console.error('Test for a wrong identity valie must failed');\n    return;\n  }\n  console.warn('Test for a wrong identity value succeed');\n\n  const storageDisconnectResult = await storageInstance.disconnect();\n\n  if (storageDisconnectResult instanceof Error) {\n    console.error(storageDisconnectResult);\n    console.error('Failed to disconnect');\n    return;\n  }\n\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n\n  if (!identityTest) {\n    console.error(identityTest);\n    console.error(\n      'Failed to generate test identity string on disconnected storage test'\n    );\n    return;\n  }\n\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key pairs on disconnected storage test');\n    return;\n  }\n\n  const setCredentialsResultDisconnected = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (!(setCredentialsResultDisconnected instanceof Error)) {\n    console.error(\n      'Execution of the setCredentials method must failed on disconnected storage'\n    );\n    return;\n  }\n\n  const getCredentialsResultDisconnected = await storageInstance.getCredentials(\n    identityTest\n  );\n\n  if (!(getCredentialsResultDisconnected instanceof Error)) {\n    console.error(\n      'Execution of the getCredentials method must failed on disconnected storage'\n    );\n    return;\n  }\n  console.warn('Storage identity test was succes');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts",["1524"],"import { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst ITERATIONS_COUNT = 60000;\nconst CACHE_CAPACITY = 200;\n\nexport const runTestCachingDecorator = async () => {\n  const values: { [k: string]: string } = {};\n\n  let idx = 0;\n  while (idx < ITERATIONS_COUNT) {\n    values[generateUUID()] = generateUUID();\n    idx += 1;\n  }\n\n  class CachingDecoratorTestClass {\n    @caching(CACHE_CAPACITY)\n    async getValue(key: string): Promise<string | undefined> {\n      return (values as any)[key];\n    }\n  }\n\n  const instance = new CachingDecoratorTestClass();\n  let iteration = 0;\n\n  idx = 0;\n  const keysValues = Object.keys(values);\n  let k;\n\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2 + keysValues.length / 4);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 3 + keysValues.length / 5);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = keysValues.length;\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  console.error('Test for caching decorator succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts",["1525"],"import { SwarmConnectionSubclassIPFS } from 'classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD } from './ipfs-swarm-connection.const';\n\nexport const runTestSwarmConnectionIPFS = async () => {\n  await initializeMocha();\n\n  describe('ipfs swarm connection', () => {\n    it('create ipfs swarm connection', async () => {\n      const connection = new SwarmConnectionSubclassIPFS();\n      const password = SWARM_CONNECTION_PASSWORD;\n\n      try {\n        expect(connection.connect).to.be.a('function');\n        await assert.becomes(\n          connection.connect({\n            password,\n          }),\n          true,\n          'Connection to the swarm was not established'\n        );\n        expect(connection.isConnected).to.equal(true);\n        await assert.becomes(\n          connection.close(),\n          true,\n          'Connection to the swarm was not closed succesfully'\n        );\n        expect(connection.isConnected).to.equal(false);\n        await expect(\n          connection.connect({\n            password,\n          })\n        ).to.eventually.be.an.instanceOf(Error);\n        assert(\n          connection.isClosed === true,\n          'Connection isClosed flag must be true, after the connection was closed previousely'\n        );\n        assert(\n          connection.isConnected === false,\n          'Connection isConnected flag must be false, after the connection was closed previousely'\n        );\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n  });\n  runMocha();\n};\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts",["1526","1527"],"import { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport {\n  ESwarmConnectionClassSubclassType,\n  ESwarmConnectionSubclassStatus,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport { expect, assert } from 'chai';\nimport {\n  SWARM_CONNECTION_PASSWORD,\n  SWARM_CONNECTION_OPTIONS,\n} from './ipfs-swarm-connection.const';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from 'classes/basic-classes/status-class-base/status-class-base.const';\n\nexport const runTestSwarmConnection = async () => {\n  describe('swarm connection:: ipfs', () => {\n    it('create ipfs swarm connection', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n      try {\n        await assert.becomes(\n          connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS),\n          true,\n          'Failed to connect to the Swarm with ipfs'\n        );\n        expect(connectionToSwarm.isConnected).to.equal(true);\n        await assert.becomes(\n          connectionToSwarm.close(),\n          true,\n          'Connection to the swarm was not closed succesfully'\n        );\n        expect(connectionToSwarm.isConnected).to.equal(false);\n        await expect(\n          connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS)\n        ).to.eventually.be.an.instanceOf(Error);\n        assert(\n          connectionToSwarm.isClosed === true,\n          'Connection isClosed flag must be true, after the connection was closed previousely'\n        );\n        assert(\n          connectionToSwarm.isConnected === false,\n          'Connection isConnected flag must be false, after the connection was closed previousely'\n        );\n        return Promise.resolve();\n      } catch (err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n\n    it('swarm connection: check status', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n\n      const connectionOptions = {\n        type: ESwarmConnectionClassSubclassType.IPFS,\n        subclassOptions: {\n          password: SWARM_CONNECTION_PASSWORD,\n        },\n      };\n\n      try {\n        const { statusEmitter } = connectionToSwarm;\n        const statusesEmitted: ESwarmConnectionSubclassStatus[] = [];\n\n        expect(statusEmitter).to.be.an.instanceof(EventEmitter);\n        statusEmitter.addListener(STATUS_CLASS_STATUS_CHANGE_EVENT, (status) =>\n          statusesEmitted.push(status)\n        );\n        await assert.becomes(\n          connectionToSwarm.connect(connectionOptions),\n          true,\n          ''\n        );\n        expect(statusesEmitted)\n          .to.be.an('array')\n          .to.include.members([\n            ESwarmConnectionSubclassStatus.CONNECTED,\n            ESwarmConnectionSubclassStatus.CONNECTING,\n            ESwarmConnectionSubclassStatus.STARTED,\n          ]);\n        return Promise.resolve();\n      } catch (err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js",["1528"],"const admin = require('firebase-admin');\nconst serviceKey = require('./firebase.serviceKey.json');\n\nconst removeAllUsers = async () => {\n  const initResult = await admin.initializeApp({\n    credential: admin.credential.cert(serviceKey),\n    databaseURL: 'https://protocol-f251b.firebaseio.com',\n  });\n\n  if (initResult instanceof Error) {\n    console.error(initResult);\n    return new Error(\"Can't initialize the application\");\n  }\n\n  function deleteUser(uid) {\n    admin\n      .auth()\n      .deleteUser(uid)\n      .then(function() {\n        console.log('Successfully deleted user', uid);\n      })\n      .catch(function(error) {\n        console.log('Error deleting user:', error);\n      });\n  }\n\n  function getAllUsers(nextPageToken) {\n    admin\n      .auth()\n      .listUsers(100, nextPageToken)\n      .then(function(listUsersResult) {\n        listUsersResult.users.forEach(function(userRecord) {\n          let uid = userRecord.toJSON().uid;\n          deleteUser(uid);\n        });\n        if (listUsersResult.pageToken) {\n          getAllUsers(listUsersResult.pageToken);\n        }\n      })\n      .catch(function(error) {\n        console.log('Error listing users:', error);\n      });\n  }\n  getAllUsers();\n};\n\nremoveAllUsers();\n","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts",["1529"],"import { ISwarmStoreConnectorOrbitDBOptions } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport {\n  ISecretStorageOptions,\n  ISecretStoreCredentials,\n} from 'classes/secret-storage-class/secret-storage-class.types';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME =\n  'database_test';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME =\n  'database_test_2';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME =\n  'database_test_3';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: false,\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n      grantAcess: async (entity, id) => {\n        return true;\n      },\n    },\n  ],\n};\n\nconst USER_ID_KEY = '____userId';\nconst TEST_VALUE_KEY = '____test_value';\nfunction promptUserIdAndTestValue() {\n  const userIdStored = localStorage.getItem(USER_ID_KEY);\n\n  if (!userIdStored) {\n    const userId = String(window.prompt('user id', 'test1'));\n\n    localStorage.setItem(USER_ID_KEY, userId);\n  }\n\n  const testValueStored = localStorage.getItem(TEST_VALUE_KEY);\n\n  if (!testValueStored) {\n    const tstv = String(window.prompt('test value', 'tv'));\n\n    localStorage.setItem(TEST_VALUE_KEY, tstv);\n  }\n}\npromptUserIdAndTestValue();\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE = `${localStorage.getItem(\n  TEST_VALUE_KEY\n)}${new Date()}`;\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n  id: localStorage.getItem(USER_ID_KEY),\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER,\n  id: localStorage.getItem(USER_ID_KEY),\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO = {\n  dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n  isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE = {\n  dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n  isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n      isPublic: true,\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n  databases: [\n    {\n      dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n      isPublic: true,\n    },\n    {\n      ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n      isPublic: true,\n      grantAcess: async (entity, id): Promise<boolean> => {\n        return !!entity && !!id;\n      },\n    },\n  ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE = {\n  ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER,\n  id: localStorage.getItem(USER_ID_KEY),\n  credentials: {\n    login: 'user@login.com',\n    password: '123456',\n  },\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS: Required<ISecretStorageOptions> = {\n  dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS: ISecretStoreCredentials = {\n  login: 'login.com',\n  password: '123456',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS: Required<ISecretStorageOptions> = {\n  dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts",["1530"],"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { IPFS } from 'types/ipfs.types';\nimport ipfs from 'ipfs';\nimport { expect, assert } from 'chai';\nimport { SwarmStoreConnectorOrbitDB } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db';\nimport {\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n  SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE,\n  SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n} from './swarm-storage-orbit-db.test.const';\nimport { SWARM_CONNECTION_OPTIONS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.const';\nimport { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmStoreConnectorOrbitDBEventNames } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const';\nimport { ISwarmStoreConnectorOrbitDbDatabaseValue } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON } from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport const testDatabase = async (\n  connection: SwarmStoreConnectorOrbitDB<string>,\n  dbName: string\n) => {\n  const addValueHash = await connection.request(\n    dbName,\n    'add',\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n  );\n\n  expect(addValueHash).to.be.a('string');\n\n  const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n    dbName,\n    'get',\n    addValueHash\n  );\n\n  expect(getValueByHashResult.id).to.be.equal(\n    (connection as any).orbitDb.identity.id\n  );\n  expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n  expect(getValueByHashResult.value).to.be.equal(\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n  );\n\n  await expect(\n    connection.request(dbName, 'remove', addValueHash)\n  ).eventually.not.rejected.not.be.an('error');\n\n  const getValueByHashAfterRemoveResult = await connection.request(\n    dbName,\n    'get',\n    addValueHash\n  );\n\n  assert(\n    getValueByHashAfterRemoveResult == null,\n    'The value removed before must be empty'\n  );\n};\n\nexport const testDatabaseWithRandomValue = async (\n  connection: SwarmStoreConnectorOrbitDB<string>,\n  dbName: string\n) => {\n  let i = 0;\n\n  while ((i += 1) <= 5) {\n    const testValue = `${new Date()}--test-value`;\n    const addValueHash = await connection.request(dbName, 'add', testValue);\n\n    expect(addValueHash).to.be.a('string');\n\n    const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n      dbName,\n      'get',\n      addValueHash\n    );\n\n    expect(getValueByHashResult.id).to.be.equal(\n      (connection as any).orbitDb.identity.id\n    );\n    expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n    expect(getValueByHashResult.value).to.be.equal(testValue);\n\n    await expect(\n      connection.request(dbName, 'remove', addValueHash)\n    ).eventually.not.rejected.not.be.an('error');\n\n    const getValueByHashAfterRemoveResult = await connection.request(\n      dbName,\n      'get',\n      addValueHash\n    );\n\n    assert(\n      getValueByHashAfterRemoveResult == null,\n      'The value removed before must be empty'\n    );\n  }\n};\n\nexport const runTestSwarmStoreOrbitDBConnection = async (name?: string) => {\n  describe('swarm store: orbit db', () => {\n    let ipfsConnection: IPFS | undefined;\n\n    beforeEach(async function() {\n      this.timeout(60000);\n      const swarmConnection = new SwarmConnection();\n\n      expect(swarmConnection).to.be.an.instanceof(SwarmConnection);\n      await assert.becomes(\n        swarmConnection.connect(SWARM_CONNECTION_OPTIONS),\n        true,\n        ''\n      );\n      expect(swarmConnection.isConnected).to.equal(true);\n\n      ipfsConnection = swarmConnection.getNativeConnection();\n\n      expect(ipfsConnection).to.be.an.instanceof(ipfs);\n    });\n\n    if (\n      !name ||\n      name === 'create swarm store OrbitDB connector - 3 databases'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database, check database close'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database, check database close', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n\n        //\n        await expect(\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO\n          )\n        ).to.eventually.be.undefined;\n        await expect(\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO\n          )\n        ).to.eventually.be.an('error');\n\n        //\n        const result = await Promise.all([\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE\n          ),\n          connection.openDatabase(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE\n          ),\n        ]);\n\n        expect(result)\n          .to.be.an('array')\n          .that.has.property('length', 2);\n        assert(result[0] == null, 'The first instance must be started');\n        expect(result[1]).to.be.an.instanceof(Error);\n\n        let isEmitDbClose: boolean = false;\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE,\n          (dbName: string) => {\n            if (\n              dbName ===\n              SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n            ) {\n              isEmitDbClose = true;\n            }\n          }\n        );\n        await expect(\n          connection.closeDb(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n          )\n        ).to.eventually.eq(undefined);\n        expect(isEmitDbClose).to.be.equal(true);\n        await expect(\n          connection.request(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            'get',\n            '111'\n          )\n        ).to.eventually.be.an('Error');\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database with custom identity'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database with custom identity', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 1 database with custom acccess provider'\n    ) {\n      it('create swarm store OrbitDB connector - 1 database with custom acccess provider', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabase(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n\n    if (\n      !name ||\n      name ===\n        'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore -- with random loop'\n    ) {\n      it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n        expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n        const connection = new SwarmStoreConnectorOrbitDB<string>(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any\n        );\n\n        expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n        expect(connection.connect).to.be.a('function');\n\n        let fullProgressEmitted: boolean = false;\n        const readyEmitted: string[] = [];\n\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n          (loadingProgress: number) => {\n            if (loadingProgress === 100) {\n              fullProgressEmitted = true;\n            }\n          }\n        );\n        connection.on(\n          ESwarmStoreConnectorOrbitDBEventNames.READY,\n          (dbName: string) => {\n            if (dbName) {\n              readyEmitted.push(dbName);\n            }\n          }\n        );\n\n        await expect(\n          connection.connect({\n            ipfs: ipfsConnection!,\n          })\n        ).to.be.not.eventually.an.instanceof(Error);\n\n        expect(connection.isClosed).to.be.equal(false);\n        expect(connection.isReady).to.be.equal(true);\n        assert(\n          (fullProgressEmitted as boolean) === true,\n          'The event 100% loading progress does not emitted'\n        );\n        expect(readyEmitted)\n          .to.be.an('array')\n          .that.include.all.members(\n            SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(\n              (db) => db.dbName\n            )\n          );\n\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME\n        );\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME\n        );\n        await testDatabaseWithRandomValue(\n          connection,\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME\n        );\n\n        let isCloseEmitted: boolean = false;\n\n        connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](\n          ESwarmStoreConnectorOrbitDBEventNames.CLOSE,\n          () => {\n            isCloseEmitted = true;\n          }\n        );\n\n        await expect(connection.close()).to.eventually.be.undefined;\n\n        assert(\n          (isCloseEmitted as boolean) === true,\n          'The close event must be emitted on SwarmStoreConnector close'\n        );\n\n        const addValueHashAfterClose = await connection.request(\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n          'add',\n          SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE\n        );\n\n        expect(addValueHashAfterClose).to.be.an('error');\n      }).timeout(70000);\n    }\n  });\n\n  async function testCache(\n    cache: SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  ) {\n    const testKey = '___test_key__cache';\n    const testValue = '___test_value_cache';\n\n    expect(cache).to.be.an.instanceof(\n      SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n    );\n    expect(cache.db).to.deep.equal({\n      status:\n        SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN,\n    });\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    await expect(cache.get(testKey)).to.be.eventually.oneOf([\n      testValue,\n      undefined,\n    ]);\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    await expect(cache.put(testKey, testValue)).to.eventually.be.fulfilled;\n    await expect(cache.open()).to.eventually.be.fulfilled;\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n    );\n    // TODO - must provide storing values as buffer fo the SecretStorage\n    await expect(cache.get(testKey)).to.be.eventually.equal(testValue);\n\n    const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n    const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n    await expect(cache.put(testKeyRandom, testValueRandom)).to.eventually.be\n      .fulfilled;\n    // TODO - must provide storing values as buffer fo the SecretStorage\n\n    let cbCalledTimes = 0;\n    const cb = (err: Error | undefined, value: string | undefined) => {\n      if (!err) {\n        cbCalledTimes += Number(!!value);\n      }\n    };\n\n    await expect(cache.get(testKeyRandom, cb)).to.be.eventually.equal(\n      testValueRandom\n    );\n    expect(cbCalledTimes).to.equal(1);\n\n    const cbErr = (err: Error | undefined) => {\n      if (!err) {\n        cbCalledTimes += 1;\n      }\n    };\n\n    await expect(cache.del(testKeyRandom, cbErr)).to.be.eventually.equal(\n      undefined\n    );\n    expect(cbCalledTimes).to.equal(2);\n    await expect(cache.close(cbErr)).to.eventually.be.fulfilled;\n    expect(cbCalledTimes).to.equal(3);\n    expect(cache.status).to.be.equal(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE\n    );\n  }\n\n  describe('swarm store:: orbit db:: subclasses', () => {\n    if (\n      !name ||\n      name ===\n        'subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter', async () => {\n        let secretStorageAdapter:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n        const testKey = '___test_key';\n        const testValue = '___test_value';\n\n        expect(() => {\n          secretStorageAdapter = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS\n          );\n        }).to.not.throw();\n        expect(secretStorageAdapter).to.be.an.instanceof(\n          SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n        );\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        await expect(\n          secretStorageAdapter!.get(testKey)\n        ).to.be.eventually.oneOf([testValue, undefined]);\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        await expect(secretStorageAdapter!.put(testKey, testValue)).to\n          .eventually.be.fulfilled;\n        await expect(secretStorageAdapter!.open()).to.eventually.be.fulfilled;\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        );\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(secretStorageAdapter!.get(testKey)).to.be.eventually.equal(\n          testValue\n        );\n\n        const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n        const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n        await expect(secretStorageAdapter!.put(testKeyRandom, testValueRandom))\n          .to.eventually.be.fulfilled;\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(\n          secretStorageAdapter!.get(testKeyRandom)\n        ).to.be.eventually.equal(testValueRandom);\n        await expect(secretStorageAdapter!.close()).to.eventually.be.fulfilled;\n        expect(secretStorageAdapter!.status).to.be.equal(\n          SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE\n        );\n      }).timeout(10000);\n    }\n    if (\n      !name ||\n      name === 'subclass swarm-store-connector-orbit-db-subclass-storage-cache'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-storage-cache', async () => {\n        const password = '123456';\n        const login = 'user@login.com';\n        let key: CryptoKey;\n        let cache:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n        await expect(\n          (async () => {\n            const secretStorage = new SecretStorage();\n            key = (await secretStorage.generateCryptoKey({\n              login,\n              password,\n            })) as CryptoKey;\n            return key;\n          })()\n        ).to.eventually.be.fulfilled;\n\n        expect(key!).to.be.an.instanceOf(CryptoKey);\n        expect(() => {\n          cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n            { key },\n            SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS\n          );\n        }).to.not.throw();\n        await testCache(cache!);\n      }).timeout(10000);\n    }\n    if (\n      !name ||\n      name === 'subclass swarm-store-connector-orbit-db-subclass-storage-fabric'\n    ) {\n      it('subclass swarm-store-connector-orbit-db-subclass-storage-fabric', async () => {\n        const login = 'user@login.com';\n        const password = '123456';\n        const cachePath = '___cachePath_test';\n        const passwordFailed = '12345';\n\n        expect(() => {\n          new SwarmStoreConnectorOrbitDBSubclassStorageFabric({\n            login,\n            password: passwordFailed,\n          });\n        }).to.throw();\n\n        let fabric: undefined | SwarmStoreConnectorOrbitDBSubclassStorageFabric;\n        let cache:\n          | undefined\n          | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n        expect(() => {\n          fabric = new SwarmStoreConnectorOrbitDBSubclassStorageFabric({\n            login,\n            password,\n          });\n        }).not.to.throw();\n        expect(fabric).to.be.instanceOf(\n          SwarmStoreConnectorOrbitDBSubclassStorageFabric\n        );\n        await expect(\n          (async () => {\n            cache = (await fabric!.createStore(\n              cachePath\n            )) as SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n          })()\n        ).to.eventually.be.fulfilled;\n        await testCache(cache!);\n      }).timeout(10000);\n    }\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["1531","1532","1533","1534","1535","1536"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["1537","1538"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["1539"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["1540","1541","1542","1543"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["1544"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport { isURL } from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return isURL(configuration.databaseURL);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["1545","1546"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["1547"],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["1548","1549"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport { isURL } from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["1550"],"import { ISecretStoreCredentialsCryptoKey } from './../../secret-storage-class.types';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkIsStorageProviderInstance = (\n  storageProviderInstance: any\n): Error | boolean => {\n  if (!storageProviderInstance || typeof storageProviderInstance !== 'object') {\n    return new Error('Storage provider must be an object');\n  }\n\n  const { connect, get, set, disconnect } = storageProviderInstance;\n\n  if (\n    typeof connect !== 'function' ||\n    typeof get !== 'function' ||\n    typeof set !== 'function' ||\n    typeof disconnect !== 'function'\n  ) {\n    return new Error(\n      'The instance has a wrong implemntation of a StorageProvider interface'\n    );\n  }\n  return true;\n};\n\nexport const validateCryptoKeyCredentials = (\n  credentials?: ISecretStoreCredentialsCryptoKey\n): void | Error => {\n  if (!credentials) {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must not be empty'\n    );\n  }\n  if (typeof credentials !== 'object') {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must be an object'\n    );\n  }\n\n  const { key } = credentials;\n\n  if (!key) {\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be provided to authorize'\n    );\n  }\n  if (key instanceof CryptoKey) {\n    return;\n  }\n  return new Error(\n    'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v1.test.ts",["1551"],"import { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { generateCryptoCredentialsWithUserIdentityV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { CA_CONNECTION_FIREBASE_CONFIG } from '../central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { getUserIdentityByCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { validateUserIdentityInstance } from './central-authority-identity.utils';\n\nexport const runTestCAIdentityV1 = async () => {\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValue = new CentralAuthorityIdentity(testIdentityDescription);\n\n  if (!validateUserIdentityInstance(identityValue, testIdentityDescription)) {\n    console.error('Failed to create an instance of CAIdentity');\n    return;\n  }\n\n  const { identityDescritptionSerialized } = identityValue;\n  const identityFromIdentityString = new CentralAuthorityIdentity(\n    identityDescritptionSerialized as string\n  );\n\n  if (\n    !validateUserIdentityInstance(\n      identityFromIdentityString,\n      testIdentityDescription\n    )\n  ) {\n    console.error(\n      'Failed to create an instance of CAIdentity from identityDescritptionSerialized of the test Identity description'\n    );\n    return;\n  }\n\n  const { id: userIdentifier } = identityFromIdentityString;\n\n  if (userIdentifier instanceof Error || typeof userIdentifier !== 'string') {\n    console.error(\n      'The user identifier (id) prop must not be an error for a valid identity'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongGUID = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19a#',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValueFromWrongGUID = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongGUID\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongGUID,\n      testIdentityDescriptionWithWrongGUID\n    )\n  ) {\n    console.error(\n      'Wrong guid value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongURL = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  };\n  const identityValueFromWrongURL = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongURL,\n      testIdentityDescriptionWithWrongURL\n    )\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongURL =\n    '01htt://googlecom76d55caf-fc4a-41a9-8844-19877dcb19ad';\n  const identityValueFromStringWrongURL = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongURL, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'htt://googlecom',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n    })\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongURL as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for a wrong authority url'\n    );\n    return;\n  }\n  const testIdentityStringnWithWrongUUID =\n    '01https://google.com76d55caf-fc4a-41a9-8*44-19877dcb19ad';\n  const identityValueFromStringWrongUUID = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongUUID\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongUUID, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n        'https://google.com',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8*44-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n    })\n  ) {\n    console.error(\n      'Wrong UUID value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongUUID as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error('The userIdentifier prop must be an error for a wrong uuid');\n    return;\n  }\n  const testIdentityStringnWithWrongVersionUnsupported =\n    '11https://google.com76d55caf-fc4a-41a9-8144-19877dcb19ad';\n  const identityValueFromStringWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongVersionUnsupported\n  );\n  const testIdentityDescriptionWithVersionUnsupported = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8144-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: '99',\n  };\n  if (\n    validateUserIdentityInstance(\n      identityValueFromStringWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  const identityValueFromIdentityDescriptionWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithVersionUnsupported\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromIdentityDescriptionWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromIdentityDescriptionWrongVersionUnsupported as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for unsupported identity version'\n    );\n    return;\n  }\n  console.warn('The user identity description test is succesfull');\n};\n\nexport const runTestCAIdentityWithAuthorityProviderGeneratorV1 = async () => {\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:started');\n\n  const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV1({\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n      CA_CONNECTION_FIREBASE_CONFIG.databaseURL,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['01'],\n  });\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = getUserIdentityByCryptoCredentials(\n    cryptoCredentials\n  );\n  const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n  if (!caUserIdentity.isValid) {\n    console.error('User identity generated is not valid');\n    return;\n  }\n  const stringifiedIdentity = caUserIdentity.toString();\n\n  if (stringifiedIdentity === '') {\n    console.error(stringifiedIdentity);\n    console.error('Failed to parse the identity');\n    return;\n  }\n  if (stringifiedIdentity !== userIdentityByCryptoCredentials) {\n    console.error('Parsed identity is not valid');\n    return;\n  }\n  const identityDescriptionParsed = caUserIdentity.identityDescription;\n\n  if (identityDescriptionParsed instanceof Error) {\n    console.error(identityDescriptionParsed);\n    console.error('Failed to get description by identity string');\n    return;\n  }\n  if (\n    identityDescriptionParsed[\n      CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n    ] !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL\n  ) {\n    console.error('Wrong authority provider url got from the identity string');\n    return;\n  }\n  console.warn('runTestCAIdentityWithAuthorityProviderGenerator:success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity-v2.test.ts",["1552"],"import { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSIONS,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { validateUserIdentityInstance } from './central-authority-identity.utils';\nimport { CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const';\n\nexport const testIdentity = (userIdOnAuthProvider: string): void | boolean => {\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: userIdOnAuthProvider,\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValue = new CentralAuthorityIdentity(testIdentityDescription);\n\n  if (!validateUserIdentityInstance(identityValue, testIdentityDescription)) {\n    console.error('Failed to create an instance of CAIdentity');\n    return;\n  }\n\n  const { identityDescritptionSerialized } = identityValue;\n  const identityFromIdentityString = new CentralAuthorityIdentity(\n    identityDescritptionSerialized as string\n  );\n\n  if (\n    !validateUserIdentityInstance(\n      identityFromIdentityString,\n      testIdentityDescription\n    )\n  ) {\n    console.error(\n      'Failed to create an instance of CAIdentity from identityDescritptionSerialized of the test Identity description'\n    );\n    return;\n  }\n\n  const { id: userIdentifier } = identityFromIdentityString;\n\n  if (userIdentifier instanceof Error || typeof userIdentifier !== 'string') {\n    console.error(\n      'The user identifier (id) prop must not be an error for a valid identity'\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestCAIdentityV2 = async () => {\n  if (!testIdentity(generateUUID())) {\n    console.error('UUIDv4 must be valid as user login on the auth server');\n    return;\n  }\n  if (!testIdentity('nnn@gmail.com')) {\n    console.error('email must be valid as user login on the auth server');\n    return;\n  }\n  if (!testIdentity('#$%^&_()[]___@_.33.333..__3')) {\n    console.error(\n      'the login format must be valid as user login on the auth server'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongLogin = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '.11',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValueFromWrongLogin = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongLogin\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongLogin,\n      testIdentityDescriptionWithWrongLogin\n    )\n  ) {\n    console.error(\n      'Wrong guid value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityDescriptionWithWrongURL = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'googlecom',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n      '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n  };\n  const identityValueFromWrongURL = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromWrongURL,\n      testIdentityDescriptionWithWrongURL\n    )\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier description'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongURL = `02htt://googlecom${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}76d55caf-fc4a-41a9-8844-19877dcb19ad`;\n  const identityValueFromStringWrongURL = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongURL\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongURL, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'htt://googlecom',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]:\n        '76d55caf-fc4a-41a9-8844-19877dcb19ad',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n    })\n  ) {\n    console.error(\n      'Wrong url value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongURL as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for a wrong authority url'\n    );\n    return;\n  }\n\n  const testIdentityStringnWithWrongLogin = `02https://google.com${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}.44`;\n  const identityValueFromStringWrongLogin = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongLogin\n  );\n\n  if (\n    validateUserIdentityInstance(identityValueFromStringWrongLogin, {\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n        'https://google.com',\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '.44',\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSIONS['02'],\n    })\n  ) {\n    console.error(\n      'Wrong UUID value does not recognized in the identifier string'\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromStringWrongLogin as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error('The userIdentifier prop must be an error for a wrong uuid');\n    return;\n  }\n  const testIdentityStringnWithWrongVersionUnsupported = `99https://google.com${CA_USER_IDENTITY_V2_AUTH_PROVIDER_URL_DELIMETER}121`;\n  const identityValueFromStringWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityStringnWithWrongVersionUnsupported\n  );\n  const testIdentityDescriptionWithVersionUnsupported = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: '121',\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: '99',\n  };\n  if (\n    validateUserIdentityInstance(\n      identityValueFromStringWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  const identityValueFromIdentityDescriptionWrongVersionUnsupported = new CentralAuthorityIdentity(\n    testIdentityDescriptionWithVersionUnsupported\n  );\n\n  if (\n    validateUserIdentityInstance(\n      identityValueFromIdentityDescriptionWrongVersionUnsupported,\n      testIdentityDescriptionWithVersionUnsupported\n    )\n  ) {\n    console.error(\n      `The version unsupported 99 does not recognized in the identifier string`\n    );\n    return;\n  }\n  if (\n    !(\n      (identityValueFromIdentityDescriptionWrongVersionUnsupported as CentralAuthorityIdentity)\n        .id instanceof Error\n    )\n  ) {\n    console.error(\n      'The user identifier (id) prop must be an error for unsupported identity version'\n    );\n    return;\n  }\n  console.warn('The user identity description test is succesfull');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.anonymousely.ts",["1553"],"import {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CONFIG_WATCHA3,\n} from './central-authority-connection.test.firebase.const';\nimport CAConnectionWithFirebase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\nimport { connectWithFirebase } from './central-authority-connection.utils.firebase';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nconst connectToFirebaseAnonymousely = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n): Promise<Error | CAConnectionWithFirebase> => {\n  const connectionFirebase = new CAConnectionWithFirebase();\n  const connectionResult = await connectionFirebase.connect(firebaseParams);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return new Error('Failed connection to the firebase app account');\n  }\n  if (connectionFirebase.status !== CA_CONNECTION_STATUS.CONNECTED) {\n    return new Error('CONNECTED status must be set on connection succeed');\n  }\n  return connectionFirebase;\n};\n\nexport const runTestForFirebaseConfig = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('test runTestConnectToFirebaseAnonymousely is started');\n  const connectionToFirebase = await connectWithFirebase(\n    {\n      login: 'yaxida4519@email1.pro',\n      password: '123456',\n    },\n    firebaseParams\n  );\n\n  if (connectionToFirebase instanceof Error) {\n    return connectionToFirebase;\n  }\n\n  const userCryptoCredentials = connectionToFirebase.cryptoCredentials;\n  const disconnectResult = await connectionToFirebase.disconnect();\n\n  if (!userCryptoCredentials) {\n    return new Error('The user crypto credentials are empty');\n  }\n  if (disconnectResult instanceof Error) {\n    return disconnectResult;\n  }\n\n  const connectAnonymousely = await connectToFirebaseAnonymousely(\n    firebaseParams\n  );\n\n  if (connectAnonymousely instanceof Error) {\n    return connectAnonymousely;\n  }\n\n  const userCredentials = await connectAnonymousely.getUserCredentials(\n    userCryptoCredentials.userIdentity\n  );\n\n  if (userCredentials instanceof Error) {\n    return userCredentials;\n  }\n  if (!userCredentials) {\n    return new Error(\n      'User crypto credentials must be returned even if the user is not authorized'\n    );\n  }\n  if (!compareCryptoCredentials(userCryptoCredentials, userCredentials)) {\n    return new Error(\n      'User crypto credentials must be the same with the credentials when the user is authorized'\n    );\n  }\n\n  const anonymouselyDisconnect = await connectAnonymousely.disconnect();\n\n  if (anonymouselyDisconnect instanceof Error) {\n    return anonymouselyDisconnect;\n  }\n};\n\nexport const runTestConnectToFirebaseAnonymousely = async () => {\n  const resTestFirebaseV1 = await runTestForFirebaseConfig(\n    CA_CONNECTION_FIREBASE_CONFIG\n  );\n\n  if (resTestFirebaseV1 instanceof Error) {\n    return resTestFirebaseV1;\n  }\n\n  const resTestFirebaseV2 = await runTestForFirebaseConfig(\n    CA_CONNECTION_FIREBASE_CONFIG_WATCHA3\n  );\n\n  if (resTestFirebaseV2 instanceof Error) {\n    return resTestFirebaseV2;\n  }\n\n  console.warn('test runTestConnectToFirebaseAnonymousely was succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.utils.firebase.ts",["1554"],"import { CAConnectionWithFirebase } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase';\nimport {\n  CA_CONNECTION_FIREBASE_CONFIG,\n  CA_CONNECTION_FIREBASE_CREDENTIALS,\n} from './central-authority-connection.test.firebase.const';\nimport { ICAConnectionSignUpCredentials } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport { CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport const connectToFirebase = async (\n  firebaseParams: typeof CA_CONNECTION_FIREBASE_CONFIG = CA_CONNECTION_FIREBASE_CONFIG\n): Promise<Error | CAConnectionWithFirebase> => {\n  const connectionFirebase = new CAConnectionWithFirebase();\n  const connectionResult = await connectionFirebase.connect(firebaseParams);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return new Error('Failed connection to the firebase app account');\n  }\n  if (!connectionFirebase.isConnected) {\n    return new Error(\n      'isConnected status flag must be truthly on connection succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const aurhorizeWithCredentials = async (\n  authCredentials: ICAConnectionSignUpCredentials,\n  connectionFirebase: CAConnectionWithFirebase\n): Promise<Error | CAConnectionWithFirebase> => {\n  const authorizeResult = await connectionFirebase.authorize(authCredentials);\n\n  if (\n    authorizeResult instanceof ErrorExtendedBaseClass &&\n    authorizeResult.code === CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n  ) {\n    alert('Please, veriy your email');\n    return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n  }\n  if (authorizeResult instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  return connectionFirebase;\n};\n\nexport const connectAndAuthorizeInFirebase = async (\n  authCredentials: ICAConnectionSignUpCredentials,\n  firebaseParams?: typeof CA_CONNECTION_FIREBASE_CONFIG\n): Promise<CAConnectionWithFirebase | Error> => {\n  const connectionFirebase = await connectToFirebase(firebaseParams);\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n  return aurhorizeWithCredentials(authCredentials, connectionFirebase);\n};\n\n/**\n * connect to firebase with credentials\n * defined\n */\nexport const connectWithFirebase = async (\n  authCredentials: ICAConnectionSignUpCredentials = CA_CONNECTION_FIREBASE_CREDENTIALS,\n  firebaseParams?: typeof CA_CONNECTION_FIREBASE_CONFIG\n) => {\n  console.warn('CA connection firebase test started');\n\n  if (authCredentials instanceof Error) {\n    return authCredentials;\n  }\n\n  const connectionFirebase = await connectAndAuthorizeInFirebase(\n    authCredentials,\n    firebaseParams\n  );\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return connectionFirebase;\n  }\n\n  return connectionFirebase;\n};\n\nexport const deleteTheUserFromCA = async (\n  connectionFirebase: CAConnectionWithFirebase,\n  authCredentials: ICAConnectionSignUpCredentials\n): Promise<boolean | Error> => {\n  if (connectionFirebase instanceof CAConnectionWithFirebase) {\n    const deleteResult = await connectionFirebase.delete(authCredentials);\n\n    if (deleteResult instanceof Error) {\n      console.error(deleteResult);\n      return new Error('Failed to delete the user from the Firebase authority');\n    }\n    return true;\n  }\n  return new Error('The connection to the firebase is not valid');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test.ts",["1555"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { expect, assert } from 'chai';\nimport { CAConnectionsPool } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool';\nimport {\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF_INVALID,\n  CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF_INVALID,\n} from './central-authority-connections-pool.test.const';\nimport CAConnectionWithFirebase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase';\nimport { CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.const';\nimport { IAuthProviderConnectionConfiguration } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types';\nimport { delay } from 'utils/common-utils/common-utils-timer';\n\nexport const runTestCAConnectionsPoolTest = () => {\n  describe('central-authority-connections-pool module test', () => {\n    describe('test constructor for the class', () => {\n      it('valid configurations for the auth providers - should not throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).not.to.throw();\n      });\n      it('invalid configurations for the auth providers - should throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({} as any);\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF_INVALID,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF_INVALID,\n            ],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              {\n                ...CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n                caProviderUrl: '',\n              },\n            ],\n          });\n        }).to.throw();\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              {\n                ...CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n                caProvider: 1000 as any,\n              },\n            ],\n          });\n        }).to.throw();\n      });\n      it('valid configurations for the same auth providers - should throw', () => {\n        expect(() => {\n          new CAConnectionsPool({\n            providers: [\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n              CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            ],\n          });\n        }).to.throw();\n      });\n    });\n    describe('test connect and disconnect methods method', async () => {\n      let connectionPool: CAConnectionsPool;\n\n      beforeEach(() => {\n        connectionPool = new CAConnectionsPool({\n          providers: [\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF,\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF,\n          ],\n        });\n      });\n\n      // afterEach(async () => {\n      //   if (connectionPool) {\n      //     await connectionPool.close();\n      //   }\n      // });\n\n      // it('connect to a valid auth provider url and close the connection pool to disconnect from all connected providers', async () => {\n      //   await expect(\n      //     connectionPool.connect(\n      //       CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n      //     )\n      //   ).to.eventually.not.be.an('error');\n      //   await expect(connectionPool.close()).to.eventually.not.be.an('error');\n      // });\n      // it('connect method to invalid auth provider url - should return error', async () => {\n      //   await expect(async () =>\n      //     connectionPool.connect(null as any)\n      //   ).to.not.throw();\n      //   await expect(async () => connectionPool.connect('')).to.not.throw();\n      //   await expect(async () =>\n      //     connectionPool.connect(0 as any)\n      //   ).to.not.throw();\n      //   await expect(connectionPool.connect(0 as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      //   await expect(connectionPool.connect({} as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      //   await expect(connectionPool.connect('' as any)).to.eventually.be.an(\n      //     'error'\n      //   );\n      // });\n\n      async function runTestForConnectionConfiguration(\n        conf: IAuthProviderConnectionConfiguration\n      ) {\n        const connectionFirebaseWatcha = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        expect(connectionFirebaseWatcha).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            conf.caProvider\n          ]\n        );\n\n        const connectionFirebaseWatchaSame = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        assert(\n          connectionFirebaseWatcha === connectionFirebaseWatchaSame,\n          'Connection to the same url must rerurn the same connection if not disconnected before'\n        );\n\n        await expect(\n          connectionPool.disconnect(conf.caProviderUrl)\n        ).to.eventually.not.be.an('error');\n\n        const connectionFirebaseWatchaNext = await connectionPool.connect(\n          conf.caProviderUrl\n        );\n\n        expect(connectionFirebaseWatchaNext).to.be.an.instanceof(\n          CAConnectionWithFirebase\n        );\n        assert(\n          connectionFirebaseWatchaNext !== connectionFirebaseWatchaSame,\n          'Connection to the same url must not return the same connection if disconnected before'\n        );\n      }\n\n      // it('connect method to a valid auth provider url - should connect and disconnect', async () => {\n      //   await runTestForConnectionConfiguration(\n      //     CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n      //   );\n      //   await runTestForConnectionConfiguration(\n      //     CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n      //   );\n      // }).timeout(10000);\n\n      it('authorize method to a valid auth provider url - should authorize and disconnect', async () => {\n        const credentials = {\n          login: 'vovit83253@mailfile.org',\n          password: '123456',\n        };\n        const connectionWithAuthProvider = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        expect(connectionWithAuthProvider).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n\n        const connectionWithAuthProviderSecond = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        assert(\n          connectionWithAuthProviderSecond === connectionWithAuthProvider,\n          'The same connection must be returned if authorized to the same auth provider'\n        );\n        await expect(connectionPool.signOut()).to.eventually.not.be.an('error');\n\n        const connectionWithAuthProviderThird = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentials\n        );\n\n        expect(connectionWithAuthProviderThird).to.be.an.instanceof(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        assert(\n          connectionWithAuthProvider !== connectionWithAuthProviderThird,\n          'After the sign out from the connection pool another connection shoul be returned after another authorization'\n        );\n\n        const connectionWithAuthProviderFourth = await connectionPool.connect(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n        );\n\n        assert(\n          connectionWithAuthProviderThird === connectionWithAuthProviderFourth,\n          'Connection to the same provider must be the same as connection after the authorization'\n        );\n\n        await expect(\n          connectionPool.authorize(\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl,\n            credentials\n          )\n        ).to.eventually.be.an('error');\n\n        const connectionToAnotherProvider = await connectionPool.connect(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl\n        );\n\n        expect(connectionToAnotherProvider).to.be.an.instanceof(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        await expect(\n          connectionPool.disconnect(\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_WATCHA_AUTH_PROVIDER_CONF.caProviderUrl\n          )\n        ).to.eventually.not.be.an('error');\n        debugger;\n        await delay(1000);\n        const credentialsAnotherProvider = {\n          login: 'cemilic688@themail3.net',\n          password: '123456',\n        };\n        const authConnectionToAnotherProvider = await connectionPool.authorize(\n          CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF.caProviderUrl,\n          credentialsAnotherProvider\n        );\n        debugger;\n        expect(authConnectionToAnotherProvider).to.be.an.instanceOf(\n          CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n            CA_CONNECTOINS_CONNECTIONS_POOL_TEST_FIREBASE_DB_PROTOCOL_AUTH_PROVIDER_CONF\n              .caProvider\n          ]\n        );\n        assert(\n          authConnectionToAnotherProvider === connectionToAnotherProvider,\n          'After authorization connection to the auth provider must not be created again and must be reused connection opened before'\n        );\n        await expect(connectionPool.signOut()).to.eventually.not.be.an('error');\n        debugger;\n      }).timeout(120000);\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test.ts",["1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569"],"import { expect } from 'chai';\nimport {\n  validateCAConnectionAuthProviderType,\n  validateCAConnectionAuthProviderUrl,\n  validateCAConnectionAuthProviderConnectionConfiguration,\n} from 'classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils';\nimport { CA_CONNECTION_AUTH_PROVIDERS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.const';\n\nexport const runTestCAConnectionsUtilsValidators = () => {\n  describe('Test of the central-authority-connections-utils.validators', () => {\n    describe('Test of the validateCAConnectionAuthProviderType', () => {\n      it('validateCAConnectionAuthProviderType not throw', () => {\n        expect(() => {\n          validateCAConnectionAuthProviderType('fff');\n        }).not.to.throw();\n        expect(() => {\n          validateCAConnectionAuthProviderType(null);\n        }).not.to.throw();\n        expect(() => {\n          validateCAConnectionAuthProviderType({});\n        }).not.to.throw();\n      });\n\n      it('validateCAConnectionAuthProviderType return true for valid providers', () => {\n        expect(\n          validateCAConnectionAuthProviderType(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE\n          )\n        ).to.be.equal(true);\n      });\n\n      it('validateCAConnectionAuthProviderType return for unvalid providers', () => {\n        expect(validateCAConnectionAuthProviderType(1000)).to.be.equal(false);\n        expect(validateCAConnectionAuthProviderType('')).to.be.equal(false);\n      });\n    });\n\n    describe('Test of the validateCAConnectionAuthProviderUrl', () => {\n      it('validateCAConnectionAuthProviderUrl should not throw', () => {\n        expect(() =>\n          validateCAConnectionAuthProviderUrl(undefined as any)\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderUrl({} as any)\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderUrl(0 as any)\n        ).to.not.throw();\n      });\n      it('validateCAConnectionAuthProviderUrl should return true for a valid urls', () => {\n        expect(\n          validateCAConnectionAuthProviderUrl(\n            'https://watcha3-191815.firebaseio.com'\n          )\n        ).to.be.equal(true);\n        expect(\n          validateCAConnectionAuthProviderUrl(\n            'https://protocol-f251b.firebaseio.com'\n          )\n        ).to.be.equal(true);\n      });\n      it('validateCAConnectionAuthProviderUrl should return false for invalid urls', () => {\n        expect(\n          validateCAConnectionAuthProviderUrl('fds://watcha3-191815.firebaseio')\n        ).to.be.equal(false);\n        expect(validateCAConnectionAuthProviderUrl('https://com')).to.be.equal(\n          false\n        );\n      });\n    });\n\n    describe('Test of the validateCAConnectionAuthProviderConnectionConfiguration', () => {\n      it('validateCAConnectionAuthProviderConnectionConfiguration should not throw', () => {\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            undefined as any,\n            undefined as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            {} as any,\n            {} as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            0 as any,\n            0 as any\n          )\n        ).to.not.throw();\n        expect(() =>\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            '' as any,\n            '' as any\n          )\n        ).to.not.throw();\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return true for a valid configuration', () => {\n        const validConfigurationOne = {\n          apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n        const validConfigurationTwo = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://watcha3-191815.firebaseio.com',\n          projectId: 'watcha3-191815',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            validConfigurationOne\n          )\n        ).to.be.equal(true);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            validConfigurationTwo\n          )\n        ).to.be.equal(true);\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return false for invalid configuration', () => {\n        const inValidConfigurationNoAPIKey = {\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n        const inVvalidConfigurationIvalidDatabaseURL = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://com',\n          projectId: 'watcha3-191815',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n        const inVvalidConfigurationAppIDIsNumber = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          databaseURL: 'https://watcha3-191815.firebaseio.com',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: 0,\n        };\n        const inVvalidConfigurationInvalidDatabaseURLTwo = {\n          apiKey: 'AIzaSyCmjgbWZjUcDYxV2d0DxbiuroFrftW7qrQ',\n          authDomain: 'watcha3-191815.firebaseapp.com',\n          projectId: 'watcha3-191815',\n          databaseURL: 'firebaseio. ',\n          storageBucket: 'watcha3-191815.appspot.com',\n          messagingSenderId: '271822572791',\n          appId: '1:271822572791:web:2e31bfd34ccabe551597f2',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inValidConfigurationNoAPIKey\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationIvalidDatabaseURL\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationAppIDIsNumber\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            CA_CONNECTION_AUTH_PROVIDERS.FIREBASE,\n            inVvalidConfigurationInvalidDatabaseURLTwo\n          )\n        ).to.be.equal(false);\n      });\n      it('validateCAConnectionAuthProviderConnectionConfiguration should return false for invalid auth provider type', () => {\n        const validConfigurationOne = {\n          apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n          authDomain: 'protocol-f251b.firebaseapp.com',\n          databaseURL: 'https://protocol-f251b.firebaseio.com',\n          projectId: 'protocol-f251b',\n          storageBucket: '',\n          messagingSenderId: '275196342406',\n          appId: '1:275196342406:web:40b79d671c50af57',\n        };\n\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            10000,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            {} as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            '' as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n        expect(\n          validateCAConnectionAuthProviderConnectionConfiguration(\n            undefined as any,\n            validConfigurationOne\n          )\n        ).to.be.equal(false);\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils-date-time-synced.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils-url.test.ts",["1570","1571","1572"],"import { expect } from 'chai';\nimport { normalizeUrl } from 'utils/common-utils/common-utils-url';\n\nexport const runTestCommonUtilsURL = () => {\n  describe('Test common-utils-url', () => {\n    describe('normalizeUrl function tets', () => {\n      it('normalizeUrl should not throw', () => {\n        expect(() => normalizeUrl(undefined as any)).to.not.throw();\n        expect(() => normalizeUrl(0 as any)).to.not.throw();\n        expect(() => normalizeUrl({} as any)).to.not.throw();\n        expect(() => normalizeUrl('gg')).to.not.throw();\n      });\n      it('normalizeUrl protocol normalize', () => {\n        expect(normalizeUrl('test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('www.test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('https://test.com')).to.equal('https://test.com');\n        expect(normalizeUrl('http://test.com')).to.equal('http://test.com');\n      });\n      it('normalizeUrl sort query', () => {\n        expect(normalizeUrl('https://www.test.com?b=2&a=1')).to.equal(\n          'https://test.com/?a=1&b=2'\n        );\n        expect(normalizeUrl('http://www.test.com?2=2&1=1')).to.equal(\n          'http://test.com/?1=1&2=2'\n        );\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/pseudo-ntp-class.test/pseudo-ntp-class.test.ts",["1573"],"import { expect } from 'chai';\nimport { PseudoNTPClass } from 'classes/pseudo-ntp-class/pseudo-ntp-class';\nimport { PSEUDO_NTP_CLASS_SERVERS_POOL } from './pseudo-ntp-class.test.const';\n\nexport const runTestPseudoNtpClass = () => {\n  describe('Tests for pseudo ntp class', () => {\n    it('Check constructor not failed the defaults', () => {\n      expect(\n        () =>\n          new PseudoNTPClass({\n            serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n          })\n      ).to.not.throw();\n    });\n\n    it('Check call of the start() method not failed', () => {\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n      });\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n    });\n\n    it(`Check the event ${PseudoNTPClass.Event.TIME_SYNC} emitted`, async () => {\n      const maxOffsetSeconds = 10;\n      const syncIntervalS = 10;\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n        maxOffsetErrorS: maxOffsetSeconds,\n        syncIntervalS,\n      });\n      const eventName = PseudoNTPClass.Event.TIME_SYNC;\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n      await expect(\n        new Promise((res, rej) => {\n          const timeout = setTimeout(() => {\n            pseudoNTP.removeAllListeners(eventName);\n            rej(new Error('Timed out'));\n          }, syncIntervalS * 1000);\n          pseudoNTP.addListener(eventName, (diffSeconds) => {\n            if (timeout) {\n              clearTimeout(timeout);\n            }\n            if (diffSeconds > maxOffsetSeconds) {\n              res(diffSeconds);\n            } else {\n              rej(new Error('The difference is less than the maximum error'));\n            }\n          });\n        })\n      ).to.eventually.fulfilled.with.a('number');\n    }).timeout(60000);\n\n    it(`Check the event ${PseudoNTPClass.Event.TIME_SYNC} emitted multiple times during an interval`, async () => {\n      const mustCalledTimes = 3;\n      const maxOffsetSeconds = 10;\n      const syncIntervalS = 3;\n      const pseudoNTP = new PseudoNTPClass({\n        serversPool: [...PSEUDO_NTP_CLASS_SERVERS_POOL],\n        maxOffsetErrorS: maxOffsetSeconds,\n        syncIntervalS,\n      });\n      const eventName = PseudoNTPClass.Event.TIME_SYNC;\n      let timesEmitted = 0;\n\n      expect(() => pseudoNTP.start()).not.to.throw();\n      await expect(\n        new Promise((res, rej) => {\n          const timeout = setTimeout(() => {\n            pseudoNTP.removeAllListeners(eventName);\n            rej(new Error('Timed out'));\n          }, syncIntervalS * 1000 * (mustCalledTimes + 1));\n          pseudoNTP.addListener(eventName, () => {\n            timesEmitted += 1;\n            if (timesEmitted >= mustCalledTimes) {\n              res();\n            }\n          });\n        })\n      ).to.eventually.fulfilled;\n    }).timeout(120000);\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/test/salt-generation-utils.test/salt-generation-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test.ts",["1574","1575","1576","1577","1578","1579"],"import SwarmMessageSubclassFieldsValidator from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator';\nimport { expect } from 'chai';\nimport { AssertionError } from 'assert';\nimport { SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const';\nimport { getDateNowInSeconds } from 'utils/common-utils/common-utils-date-time-synced';\nimport {\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES,\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES,\n} from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const';\nimport { TSwarmMessagePayloadSerialized } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { OmitType, ConstructorType } from 'types/helper.types';\nimport { bytesInInteger } from 'utils/common-utils/common-utils-number';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { SWARM_MESSAGE_SUBCLASS_VALIDATOR_USER_IDENTITY_SERIALIZED_MAX_LENGTH } from 'classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const';\n\nexport const runSwarmMessageFieldsValidator = () => {\n  describe('SwarmMessageSubclassFieldsValidator tests', () => {\n    it('check constructor with no options not throws', () => {\n      expect(() => {\n        new SwarmMessageSubclassFieldsValidator();\n      }).not.to.throw();\n    });\n\n    describe('validate user identity', () => {\n      let messageValidator: any;\n\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n      it('CentralAuthorityIdentity with UUID stringified - should not throw', () => {\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n            'https://google.com',\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString)\n        ).to.not.throw();\n      });\n      it('CentralAuthorityIdentity with UUID stringified but not valid - should throw', () => {\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]:\n            'https://google.com',\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString + '--')\n        ).to.throw(AssertionError);\n      });\n      it('CentralAuthorityIdentity with UUID stringified but too large - should throw', () => {\n        const uidProviderURl = `https://go${new Array(\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_USER_IDENTITY_SERIALIZED_MAX_LENGTH\n        ).join('o')}ogle.com`;\n        const testIdentityDescription = {\n          [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: uidProviderURl,\n          [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n        };\n        const uid = new CentralAuthorityIdentity(testIdentityDescription);\n\n        expect(uid.isValid).to.equal(true);\n\n        const userIdString = uid.toString();\n\n        expect(() =>\n          messageValidator.validateUserIdentifier(userIdString)\n        ).to.throw(AssertionError);\n      });\n      it('empty string - should throw', () => {\n        expect(() => messageValidator.validateUserIdentifier('')).to.throw(\n          AssertionError\n        );\n      });\n      it('empty - should throw', () => {\n        expect(() => messageValidator.validateUserIdentifier()).to.throw(\n          AssertionError\n        );\n        expect(() => messageValidator.validateUserIdentifier(null)).to.throw(\n          AssertionError\n        );\n      });\n    });\n\n    describe('validate payload', () => {\n      let messageValidator: any;\n\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n\n      const validatePayloadConstructorType = (\n        PayloadConstructor: ConstructorType<\n          OmitType<TSwarmMessagePayloadSerialized, string | number[]>\n        >\n      ) => {\n        it(`validate empty ${PayloadConstructor} - should throw`, () => {\n          const payload = new PayloadConstructor(0);\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} greater than max length - should throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES + 1\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} less than min length - should throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES - 1\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n        it(`validate not empty ${PayloadConstructor} greater than min length and less than the max length - should not throw`, () => {\n          const payload = new PayloadConstructor(\n            SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES + 5\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.not.throw();\n        });\n      };\n\n      validatePayloadConstructorType(ArrayBuffer);\n      validatePayloadConstructorType(Uint8Array);\n      validatePayloadConstructorType(SharedArrayBuffer);\n\n      it(`validate empty number[] - should throw`, () => {\n        const payload: number[] = [];\n\n        expect(() => {\n          messageValidator.validatePayload(payload);\n        }).to.throw(AssertionError);\n      });\n\n      const generateArrayOfLength = <T = number>(len: number, it: T): T[] => {\n        const arr: T[] = [];\n        let idx = 0;\n\n        while ((idx += 1) < len) {\n          arr.push(it);\n        }\n        return arr;\n      };\n      const testArrayOfNumbers = (num: number) => {\n        const bytesInNumber = bytesInInteger(num);\n\n        if (typeof bytesInNumber !== 'number') {\n          throw new Error('Failed to calculate the bytes count for the number');\n        }\n\n        it(`validate empty number[] - should throw`, () => {\n          const payload: number[] = [];\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n\n        it(`validate not empty number[] greater than max length cause ${num} is ${bytesInNumber} bytes - should throw`, () => {\n          const payload: number[] = generateArrayOfLength(\n            Math.round(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES /\n                bytesInNumber\n            ) + 2,\n            num\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.throw(AssertionError);\n        });\n\n        it(`validate not empty number[] less than max length cause ${num} is ${bytesInNumber} bytes - should not throw`, () => {\n          const payload: number[] = generateArrayOfLength(\n            Math.round(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MAX_LENGTH_BYTES /\n                bytesInNumber\n            ) - 2,\n            num\n          );\n\n          expect(() => {\n            messageValidator.validatePayload(payload);\n          }).to.not.throw();\n        });\n      };\n\n      testArrayOfNumbers(255);\n      testArrayOfNumbers(65537);\n      testArrayOfNumbers(4294967295);\n      testArrayOfNumbers(4294967296);\n\n      it('empty string - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload('');\n        }).to.throw();\n      });\n\n      it('string with length less than min - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload(\n            generateArrayOfLength<string>(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES - 1,\n              ''\n            )\n          );\n        }).to.throw(AssertionError);\n      });\n\n      it('string with length greater than max - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload(\n            generateArrayOfLength<string>(\n              SWARM_MESSAGE_SUBCLASS_VALIDATOR_PAYLOAD_MIN_LENGTH_BYTES + 1,\n              ''\n            )\n          );\n        }).to.throw(AssertionError);\n      });\n\n      it('empty - should throw', () => {\n        expect(() => {\n          messageValidator.validatePayload();\n        }).to.throw(AssertionError);\n        expect(() => {\n          messageValidator.validatePayload(null);\n        }).to.throw(AssertionError);\n      });\n    });\n\n    describe('validate timestamps', () => {\n      let fieldsValidator: any;\n\n      beforeEach(() => {\n        fieldsValidator = new SwarmMessageSubclassFieldsValidator();\n      });\n\n      it(`timestamp less than min on the ${SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds +\n        1} seconds - should throw`, () => {\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds -\n          1;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(lessThanMinTimestamp)\n        ).to.throw(AssertionError);\n      });\n\n      it('timestamp equal to minimum - should not throw cause an error allowed', () => {\n        const eqToMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(eqToMinTimestamp)\n        ).not.to.throw(AssertionError);\n      });\n\n      it(`timestamp less than min on the ${SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds -\n        1} - should not throw cause in the interval of error allowed`, () => {\n        const fieldsValidator = new SwarmMessageSubclassFieldsValidator({\n          timestampValidationOptions: {\n            ttlSeconds: 0,\n          },\n        });\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.maxDiffErrorSeconds +\n          1;\n\n        expect(() =>\n          (fieldsValidator as any).validateTimestamp(lessThanMinTimestamp)\n        ).to.not.throw(AssertionError);\n      });\n\n      it('timestamp is not an integer - should throw', () => {\n        const lessThanMinTimestamp =\n          SWARM_MESSAGE_SUBCLASS_VALIDATOR_TIMESTAMP_OPTIONS_DEFAULT.minValue -\n          0.1;\n\n        expect(() =>\n          fieldsValidator.validateTimestamp(lessThanMinTimestamp)\n        ).to.throw(AssertionError);\n      });\n\n      it('timestamp equals to the current - should not throw', () => {\n        expect(() =>\n          fieldsValidator.validateTimestamp(getDateNowInSeconds())\n        ).to.not.throw(AssertionError);\n      });\n    });\n\n    describe('validate type', () => {\n      const messageType1 = 'type1';\n      const messageType2 = 'type2';\n      const messageAllowedTypes = [messageType1, messageType2];\n      let messageValidator: any;\n\n      it('message validator constructor - shoult not throw', () => {\n        expect(\n          () =>\n            (messageValidator = new SwarmMessageSubclassFieldsValidator({\n              typesList: messageAllowedTypes,\n            }))\n        ).to.not.throw();\n      });\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator({\n          typesList: messageAllowedTypes,\n        });\n      });\n      it('message with allowed type - should not throw', () => {\n        expect(() =>\n          messageValidator.validateType(messageType1)\n        ).to.not.throw();\n        expect(() =>\n          messageValidator.validateType(messageType2)\n        ).to.not.throw();\n      });\n      it('message with not allowed type - should throw', () => {\n        expect(() =>\n          messageValidator.validateType(`${messageType1}-wrong`)\n        ).to.throw(AssertionError);\n        expect(() =>\n          messageValidator.validateType(`${messageType2}-wrong`)\n        ).to.throw(AssertionError);\n      });\n    });\n\n    describe('validate issuer', () => {\n      const messageIssuer1 = 'type1';\n      const messageIssuer2 = 'type2';\n      const messageAllowedIssuer = [messageIssuer1, messageIssuer2];\n      let messageValidator: any;\n\n      it('message validator constructor - shoult not throw', () => {\n        expect(\n          () =>\n            (messageValidator = new SwarmMessageSubclassFieldsValidator({\n              issuersList: messageAllowedIssuer,\n            }))\n        ).to.not.throw();\n      });\n      beforeEach(() => {\n        messageValidator = new SwarmMessageSubclassFieldsValidator({\n          issuersList: messageAllowedIssuer,\n        });\n      });\n      it('message with allowed issuer - should not throw', () => {\n        expect(() =>\n          messageValidator.validateIssuer(messageIssuer1)\n        ).to.not.throw();\n        expect(() =>\n          messageValidator.validateIssuer(messageIssuer2)\n        ).to.not.throw();\n      });\n      it('message with not allowed issuer - should throw', () => {\n        expect(() =>\n          messageValidator.validateIssuer(`${messageIssuer1}-wrong`)\n        ).to.throw(AssertionError);\n        expect(() =>\n          messageValidator.validateIssuer(`${messageIssuer2}-wrong`)\n        ).to.throw(AssertionError);\n      });\n    });\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["1580","1581"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../storage-providers.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const dbNameRes =\n      dbName || SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n    const levelStorage = levelup(leveljs(dbNameRes));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelup(leveljs(dbNameRes));\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-check-value.ts",["1582"],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-validation-error.ts",[],{"ruleId":"1583","severity":1,"message":"1584","line":2,"column":8,"nodeType":"1585","endLine":2,"endColumn":12},{"ruleId":"1583","severity":1,"message":"1586","line":5,"column":10,"nodeType":"1585","endLine":5,"endColumn":43},{"ruleId":"1583","severity":1,"message":"1587","line":6,"column":10,"nodeType":"1585","endLine":6,"endColumn":43},{"ruleId":"1583","severity":1,"message":"1588","line":8,"column":3,"nodeType":"1585","endLine":8,"endColumn":52},{"ruleId":"1583","severity":1,"message":"1589","line":9,"column":3,"nodeType":"1585","endLine":9,"endColumn":22},{"ruleId":"1583","severity":1,"message":"1590","line":12,"column":3,"nodeType":"1585","endLine":12,"endColumn":30},{"ruleId":"1583","severity":1,"message":"1591","line":13,"column":3,"nodeType":"1585","endLine":13,"endColumn":77},{"ruleId":"1583","severity":1,"message":"1592","line":15,"column":10,"nodeType":"1585","endLine":15,"endColumn":30},{"ruleId":"1583","severity":1,"message":"1593","line":16,"column":10,"nodeType":"1585","endLine":16,"endColumn":32},{"ruleId":"1583","severity":1,"message":"1594","line":17,"column":10,"nodeType":"1585","endLine":17,"endColumn":36},{"ruleId":"1583","severity":1,"message":"1595","line":19,"column":10,"nodeType":"1585","endLine":19,"endColumn":44},{"ruleId":"1583","severity":1,"message":"1596","line":20,"column":10,"nodeType":"1585","endLine":20,"endColumn":48},{"ruleId":"1583","severity":1,"message":"1597","line":21,"column":10,"nodeType":"1585","endLine":21,"endColumn":28},{"ruleId":"1583","severity":1,"message":"1598","line":22,"column":10,"nodeType":"1585","endLine":22,"endColumn":31},{"ruleId":"1583","severity":1,"message":"1599","line":23,"column":10,"nodeType":"1585","endLine":23,"endColumn":33},{"ruleId":"1583","severity":1,"message":"1600","line":24,"column":10,"nodeType":"1585","endLine":24,"endColumn":40},{"ruleId":"1583","severity":1,"message":"1601","line":25,"column":10,"nodeType":"1585","endLine":25,"endColumn":29},{"ruleId":"1583","severity":1,"message":"1602","line":26,"column":10,"nodeType":"1585","endLine":26,"endColumn":45},{"ruleId":"1583","severity":1,"message":"1603","line":27,"column":10,"nodeType":"1585","endLine":27,"endColumn":45},{"ruleId":"1583","severity":1,"message":"1604","line":28,"column":10,"nodeType":"1585","endLine":28,"endColumn":31},{"ruleId":"1583","severity":1,"message":"1605","line":29,"column":10,"nodeType":"1585","endLine":29,"endColumn":38},{"ruleId":"1583","severity":1,"message":"1606","line":30,"column":10,"nodeType":"1585","endLine":30,"endColumn":42},{"ruleId":"1583","severity":1,"message":"1607","line":44,"column":10,"nodeType":"1585","endLine":44,"endColumn":26},{"ruleId":"1583","severity":1,"message":"1608","line":45,"column":10,"nodeType":"1585","endLine":45,"endColumn":27},{"ruleId":"1583","severity":1,"message":"1609","line":46,"column":10,"nodeType":"1585","endLine":46,"endColumn":30},{"ruleId":"1583","severity":1,"message":"1610","line":47,"column":10,"nodeType":"1585","endLine":47,"endColumn":36},{"ruleId":"1583","severity":1,"message":"1611","line":48,"column":10,"nodeType":"1585","endLine":48,"endColumn":44},{"ruleId":"1583","severity":1,"message":"1612","line":50,"column":10,"nodeType":"1585","endLine":50,"endColumn":32},{"ruleId":"1583","severity":1,"message":"1613","line":2,"column":10,"nodeType":"1585","endLine":2,"endColumn":13},{"ruleId":"1614","severity":1,"message":"1615","line":9,"column":56,"nodeType":"1616","messageId":"1617","endLine":9,"endColumn":59},{"ruleId":"1614","severity":1,"message":"1615","line":15,"column":55,"nodeType":"1616","messageId":"1617","endLine":15,"endColumn":58},{"ruleId":"1618","severity":1,"message":"1619","line":87,"column":15,"nodeType":"1620","messageId":"1621","endLine":87,"endColumn":27},{"ruleId":"1583","severity":1,"message":"1622","line":32,"column":9,"nodeType":"1585","endLine":32,"endColumn":15},{"ruleId":"1583","severity":1,"message":"1623","line":8,"column":10,"nodeType":"1585","endLine":8,"endColumn":20},{"ruleId":"1614","severity":1,"message":"1615","line":77,"column":27,"nodeType":"1616","messageId":"1617","endLine":77,"endColumn":30},{"ruleId":"1614","severity":1,"message":"1615","line":78,"column":39,"nodeType":"1616","messageId":"1617","endLine":78,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":98,"column":36,"nodeType":"1620","messageId":"1621","endLine":98,"endColumn":40},{"ruleId":"1614","severity":1,"message":"1615","line":130,"column":38,"nodeType":"1616","messageId":"1617","endLine":130,"endColumn":41},{"ruleId":"1583","severity":1,"message":"1624","line":38,"column":7,"nodeType":"1585","endLine":38,"endColumn":17},{"ruleId":"1625","severity":1,"message":"1626","line":63,"column":3,"nodeType":"1627","endLine":63,"endColumn":19},{"ruleId":"1628","severity":1,"message":"1629","line":63,"column":17,"nodeType":"1630","messageId":"1631"},{"ruleId":"1583","severity":1,"message":"1632","line":3,"column":3,"nodeType":"1585","endLine":3,"endColumn":41},{"ruleId":"1583","severity":1,"message":"1633","line":1,"column":10,"nodeType":"1585","endLine":1,"endColumn":39},{"ruleId":"1614","severity":1,"message":"1615","line":2,"column":7,"nodeType":"1616","messageId":"1617","endLine":2,"endColumn":10},{"ruleId":"1614","severity":1,"message":"1615","line":13,"column":12,"nodeType":"1616","messageId":"1617","endLine":13,"endColumn":15},{"ruleId":"1614","severity":1,"message":"1615","line":47,"column":28,"nodeType":"1616","messageId":"1617","endLine":47,"endColumn":31},{"ruleId":"1614","severity":1,"message":"1615","line":67,"column":28,"nodeType":"1616","messageId":"1617","endLine":67,"endColumn":31},{"ruleId":"1614","severity":1,"message":"1615","line":35,"column":58,"nodeType":"1616","messageId":"1617","endLine":35,"endColumn":61},{"ruleId":"1583","severity":1,"message":"1634","line":4,"column":10,"nodeType":"1585","endLine":4,"endColumn":32},{"ruleId":"1583","severity":1,"message":"1635","line":20,"column":10,"nodeType":"1585","endLine":20,"endColumn":43},{"ruleId":"1618","severity":1,"message":"1619","line":44,"column":14,"nodeType":"1620","messageId":"1621","endLine":44,"endColumn":19},{"ruleId":"1618","severity":1,"message":"1619","line":44,"column":14,"nodeType":"1620","messageId":"1621","endLine":44,"endColumn":18},{"ruleId":"1614","severity":1,"message":"1615","line":158,"column":29,"nodeType":"1616","messageId":"1617","endLine":158,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":188,"column":29,"nodeType":"1616","messageId":"1617","endLine":188,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":225,"column":20,"nodeType":"1616","messageId":"1617","endLine":225,"endColumn":23},{"ruleId":"1583","severity":1,"message":"1636","line":4,"column":10,"nodeType":"1585","endLine":4,"endColumn":30},{"ruleId":"1614","severity":1,"message":"1615","line":37,"column":32,"nodeType":"1616","messageId":"1617","endLine":37,"endColumn":35},{"ruleId":"1618","severity":1,"message":"1619","line":103,"column":13,"nodeType":"1620","messageId":"1621","endLine":103,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1619","line":103,"column":13,"nodeType":"1620","messageId":"1621","endLine":103,"endColumn":22},{"ruleId":"1618","severity":1,"message":"1619","line":134,"column":13,"nodeType":"1620","messageId":"1621","endLine":134,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1619","line":134,"column":13,"nodeType":"1620","messageId":"1621","endLine":134,"endColumn":22},{"ruleId":"1618","severity":1,"message":"1619","line":152,"column":30,"nodeType":"1620","messageId":"1621","endLine":152,"endColumn":40},{"ruleId":"1618","severity":1,"message":"1619","line":152,"column":30,"nodeType":"1620","messageId":"1621","endLine":152,"endColumn":39},{"ruleId":"1614","severity":1,"message":"1615","line":19,"column":58,"nodeType":"1616","messageId":"1617","endLine":19,"endColumn":61},{"ruleId":"1614","severity":1,"message":"1615","line":34,"column":13,"nodeType":"1616","messageId":"1617","endLine":34,"endColumn":16},{"ruleId":"1614","severity":1,"message":"1615","line":64,"column":13,"nodeType":"1616","messageId":"1617","endLine":64,"endColumn":16},{"ruleId":"1614","severity":1,"message":"1615","line":87,"column":15,"nodeType":"1616","messageId":"1617","endLine":87,"endColumn":18},{"ruleId":"1583","severity":1,"message":"1637","line":11,"column":3,"nodeType":"1585","endLine":11,"endColumn":23},{"ruleId":"1614","severity":1,"message":"1615","line":217,"column":30,"nodeType":"1616","messageId":"1617","endLine":217,"endColumn":33},{"ruleId":"1614","severity":1,"message":"1615","line":250,"column":28,"nodeType":"1616","messageId":"1617","endLine":250,"endColumn":31},{"ruleId":"1614","severity":1,"message":"1615","line":18,"column":62,"nodeType":"1616","messageId":"1617","endLine":18,"endColumn":65},{"ruleId":"1614","severity":1,"message":"1615","line":29,"column":22,"nodeType":"1616","messageId":"1617","endLine":29,"endColumn":25},{"ruleId":"1614","severity":1,"message":"1615","line":75,"column":22,"nodeType":"1616","messageId":"1617","endLine":75,"endColumn":25},{"ruleId":"1614","severity":1,"message":"1615","line":114,"column":38,"nodeType":"1616","messageId":"1617","endLine":114,"endColumn":41},{"ruleId":"1614","severity":1,"message":"1615","line":6,"column":16,"nodeType":"1616","messageId":"1617","endLine":6,"endColumn":19},{"ruleId":"1583","severity":1,"message":"1638","line":546,"column":38,"nodeType":"1585","endLine":546,"endColumn":44},{"ruleId":"1583","severity":1,"message":"1638","line":858,"column":38,"nodeType":"1585","endLine":858,"endColumn":44},{"ruleId":"1614","severity":1,"message":"1615","line":972,"column":34,"nodeType":"1616","messageId":"1617","endLine":972,"endColumn":37},{"ruleId":"1583","severity":1,"message":"1639","line":1,"column":8,"nodeType":"1585","endLine":1,"endColumn":17},{"ruleId":"1583","severity":1,"message":"1640","line":5,"column":3,"nodeType":"1585","endLine":5,"endColumn":70},{"ruleId":"1614","severity":1,"message":"1615","line":24,"column":40,"nodeType":"1616","messageId":"1617","endLine":24,"endColumn":43},{"ruleId":"1614","severity":1,"message":"1615","line":22,"column":20,"nodeType":"1616","messageId":"1617","endLine":22,"endColumn":23},{"ruleId":"1614","severity":1,"message":"1615","line":108,"column":38,"nodeType":"1616","messageId":"1617","endLine":108,"endColumn":41},{"ruleId":"1614","severity":1,"message":"1615","line":150,"column":46,"nodeType":"1616","messageId":"1617","endLine":150,"endColumn":49},{"ruleId":"1625","severity":1,"message":"1626","line":4,"column":3,"nodeType":"1627","endLine":4,"endColumn":70},{"ruleId":"1628","severity":1,"message":"1629","line":4,"column":68,"nodeType":"1630","messageId":"1631"},{"ruleId":"1583","severity":1,"message":"1641","line":1,"column":8,"nodeType":"1585","endLine":1,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":161,"column":33,"nodeType":"1616","messageId":"1617","endLine":161,"endColumn":36},{"ruleId":"1614","severity":1,"message":"1615","line":268,"column":14,"nodeType":"1616","messageId":"1617","endLine":268,"endColumn":17},{"ruleId":"1618","severity":1,"message":"1619","line":271,"column":24,"nodeType":"1620","messageId":"1621","endLine":271,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":289,"column":19,"nodeType":"1620","messageId":"1621","endLine":289,"endColumn":28},{"ruleId":"1614","severity":1,"message":"1615","line":292,"column":26,"nodeType":"1616","messageId":"1617","endLine":292,"endColumn":29},{"ruleId":"1618","severity":1,"message":"1619","line":511,"column":26,"nodeType":"1620","messageId":"1621","endLine":511,"endColumn":34},{"ruleId":"1614","severity":1,"message":"1615","line":84,"column":11,"nodeType":"1616","messageId":"1617","endLine":84,"endColumn":14},{"ruleId":"1618","severity":1,"message":"1619","line":94,"column":23,"nodeType":"1620","messageId":"1621","endLine":94,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":100,"column":27,"nodeType":"1620","messageId":"1621","endLine":100,"endColumn":36},{"ruleId":"1614","severity":1,"message":"1615","line":100,"column":40,"nodeType":"1616","messageId":"1617","endLine":100,"endColumn":43},{"ruleId":"1628","severity":1,"message":"1642","line":158,"column":23,"nodeType":"1630","messageId":"1631"},{"ruleId":"1583","severity":1,"message":"1643","line":2,"column":10,"nodeType":"1585","endLine":2,"endColumn":26},{"ruleId":"1614","severity":1,"message":"1615","line":76,"column":24,"nodeType":"1616","messageId":"1617","endLine":76,"endColumn":27},{"ruleId":"1614","severity":1,"message":"1615","line":271,"column":22,"nodeType":"1616","messageId":"1617","endLine":271,"endColumn":25},{"ruleId":"1614","severity":1,"message":"1615","line":286,"column":42,"nodeType":"1616","messageId":"1617","endLine":286,"endColumn":45},{"ruleId":"1583","severity":1,"message":"1644","line":3,"column":3,"nodeType":"1585","endLine":3,"endColumn":16},{"ruleId":"1583","severity":1,"message":"1645","line":4,"column":3,"nodeType":"1585","endLine":4,"endColumn":16},{"ruleId":"1583","severity":1,"message":"1646","line":5,"column":3,"nodeType":"1585","endLine":5,"endColumn":24},{"ruleId":"1583","severity":1,"message":"1647","line":6,"column":3,"nodeType":"1585","endLine":6,"endColumn":26},{"ruleId":"1583","severity":1,"message":"1648","line":7,"column":3,"nodeType":"1585","endLine":7,"endColumn":18},{"ruleId":"1583","severity":1,"message":"1649","line":8,"column":3,"nodeType":"1585","endLine":8,"endColumn":20},{"ruleId":"1583","severity":1,"message":"1650","line":9,"column":3,"nodeType":"1585","endLine":9,"endColumn":22},{"ruleId":"1583","severity":1,"message":"1651","line":11,"column":10,"nodeType":"1585","endLine":11,"endColumn":23},{"ruleId":"1583","severity":1,"message":"1652","line":13,"column":10,"nodeType":"1585","endLine":13,"endColumn":29},{"ruleId":"1583","severity":1,"message":"1653","line":23,"column":7,"nodeType":"1585","endLine":23,"endColumn":21},{"ruleId":"1583","severity":1,"message":"1654","line":3,"column":8,"nodeType":"1585","endLine":3,"endColumn":13},{"ruleId":"1614","severity":1,"message":"1615","line":15,"column":6,"nodeType":"1616","messageId":"1617","endLine":15,"endColumn":9},{"ruleId":"1614","severity":1,"message":"1615","line":25,"column":48,"nodeType":"1616","messageId":"1617","endLine":25,"endColumn":51},{"ruleId":"1614","severity":1,"message":"1615","line":8,"column":23,"nodeType":"1616","messageId":"1617","endLine":8,"endColumn":26},{"ruleId":"1614","severity":1,"message":"1615","line":15,"column":23,"nodeType":"1616","messageId":"1617","endLine":15,"endColumn":26},{"ruleId":"1614","severity":1,"message":"1615","line":16,"column":21,"nodeType":"1616","messageId":"1617","endLine":16,"endColumn":24},{"ruleId":"1614","severity":1,"message":"1615","line":40,"column":25,"nodeType":"1616","messageId":"1617","endLine":40,"endColumn":28},{"ruleId":"1614","severity":1,"message":"1615","line":48,"column":18,"nodeType":"1616","messageId":"1617","endLine":48,"endColumn":21},{"ruleId":"1614","severity":1,"message":"1615","line":1,"column":37,"nodeType":"1616","messageId":"1617","endLine":1,"endColumn":40},{"ruleId":"1614","severity":1,"message":"1615","line":5,"column":34,"nodeType":"1616","messageId":"1617","endLine":5,"endColumn":37},{"ruleId":"1583","severity":1,"message":"1655","line":23,"column":3,"nodeType":"1585","endLine":23,"endColumn":8},{"ruleId":"1583","severity":1,"message":"1656","line":24,"column":3,"nodeType":"1585","endLine":24,"endColumn":9},{"ruleId":"1614","severity":1,"message":"1615","line":32,"column":8,"nodeType":"1616","messageId":"1617","endLine":32,"endColumn":11},{"ruleId":"1583","severity":1,"message":"1657","line":11,"column":24,"nodeType":"1585","endLine":11,"endColumn":33},{"ruleId":"1583","severity":1,"message":"1658","line":4,"column":3,"nodeType":"1585","endLine":4,"endColumn":21},{"ruleId":"1614","severity":1,"message":"1615","line":10,"column":41,"nodeType":"1616","messageId":"1617","endLine":10,"endColumn":44},{"ruleId":"1614","severity":1,"message":"1615","line":14,"column":41,"nodeType":"1616","messageId":"1617","endLine":14,"endColumn":44},{"ruleId":"1614","severity":1,"message":"1615","line":20,"column":44,"nodeType":"1616","messageId":"1617","endLine":20,"endColumn":47},{"ruleId":"1614","severity":1,"message":"1615","line":24,"column":43,"nodeType":"1616","messageId":"1617","endLine":24,"endColumn":46},{"ruleId":"1614","severity":1,"message":"1615","line":28,"column":47,"nodeType":"1616","messageId":"1617","endLine":28,"endColumn":50},{"ruleId":"1614","severity":1,"message":"1615","line":15,"column":32,"nodeType":"1616","messageId":"1617","endLine":15,"endColumn":35},{"ruleId":"1614","severity":1,"message":"1615","line":17,"column":42,"nodeType":"1616","messageId":"1617","endLine":17,"endColumn":45},{"ruleId":"1614","severity":1,"message":"1615","line":25,"column":58,"nodeType":"1616","messageId":"1617","endLine":25,"endColumn":61},{"ruleId":"1614","severity":1,"message":"1615","line":58,"column":8,"nodeType":"1616","messageId":"1617","endLine":58,"endColumn":11},{"ruleId":"1614","severity":1,"message":"1615","line":81,"column":36,"nodeType":"1616","messageId":"1617","endLine":81,"endColumn":39},{"ruleId":"1614","severity":1,"message":"1615","line":84,"column":35,"nodeType":"1616","messageId":"1617","endLine":84,"endColumn":38},{"ruleId":"1583","severity":1,"message":"1657","line":14,"column":24,"nodeType":"1585","endLine":14,"endColumn":33},{"ruleId":"1614","severity":1,"message":"1615","line":23,"column":8,"nodeType":"1616","messageId":"1617","endLine":23,"endColumn":11},{"ruleId":"1583","severity":1,"message":"1659","line":3,"column":3,"nodeType":"1585","endLine":3,"endColumn":68},{"ruleId":"1583","severity":1,"message":"1660","line":12,"column":3,"nodeType":"1585","endLine":12,"endColumn":33},{"ruleId":"1583","severity":1,"message":"1661","line":1,"column":10,"nodeType":"1585","endLine":1,"endColumn":38},{"ruleId":"1583","severity":1,"message":"1662","line":2,"column":10,"nodeType":"1585","endLine":2,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":7,"column":66,"nodeType":"1616","messageId":"1617","endLine":7,"endColumn":69},{"ruleId":"1614","severity":1,"message":"1615","line":25,"column":57,"nodeType":"1616","messageId":"1617","endLine":25,"endColumn":60},{"ruleId":"1614","severity":1,"message":"1615","line":35,"column":10,"nodeType":"1616","messageId":"1617","endLine":35,"endColumn":13},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":"1583","severity":1,"message":"1664","line":1,"column":10,"nodeType":"1585","endLine":1,"endColumn":37},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":"1614","severity":1,"message":"1615","line":19,"column":25,"nodeType":"1616","messageId":"1617","endLine":19,"endColumn":28},{"ruleId":"1665","severity":2,"message":"1666","line":15,"column":16,"nodeType":"1667","messageId":"1668","endLine":15,"endColumn":34},{"ruleId":"1665","severity":2,"message":"1666","line":21,"column":14,"nodeType":"1667","messageId":"1668","endLine":21,"endColumn":39},{"ruleId":"1665","severity":2,"message":"1666","line":58,"column":14,"nodeType":"1667","messageId":"1668","endLine":58,"endColumn":39},{"ruleId":null,"fatal":true,"severity":2,"message":"1669"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":"1614","severity":1,"message":"1615","line":143,"column":14,"nodeType":"1616","messageId":"1617","endLine":143,"endColumn":17},{"ruleId":"1618","severity":1,"message":"1619","line":206,"column":31,"nodeType":"1620","messageId":"1621","endLine":206,"endColumn":43},{"ruleId":"1618","severity":1,"message":"1619","line":231,"column":35,"nodeType":"1620","messageId":"1621","endLine":231,"endColumn":56},{"ruleId":"1618","severity":1,"message":"1619","line":244,"column":34,"nodeType":"1620","messageId":"1621","endLine":244,"endColumn":46},{"ruleId":"1614","severity":1,"message":"1615","line":388,"column":39,"nodeType":"1616","messageId":"1617","endLine":388,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":546,"column":10,"nodeType":"1620","messageId":"1621","endLine":546,"endColumn":38},{"ruleId":"1614","severity":1,"message":"1615","line":3,"column":42,"nodeType":"1616","messageId":"1617","endLine":3,"endColumn":45},{"ruleId":"1614","severity":1,"message":"1615","line":34,"column":71,"nodeType":"1616","messageId":"1617","endLine":34,"endColumn":74},{"ruleId":"1583","severity":1,"message":"1670","line":391,"column":9,"nodeType":"1585","endLine":391,"endColumn":21},{"ruleId":"1618","severity":1,"message":"1619","line":187,"column":14,"nodeType":"1620","messageId":"1621","endLine":187,"endColumn":47},{"ruleId":"1618","severity":1,"message":"1619","line":213,"column":26,"nodeType":"1620","messageId":"1621","endLine":213,"endColumn":76},{"ruleId":"1618","severity":1,"message":"1619","line":213,"column":26,"nodeType":"1620","messageId":"1621","endLine":213,"endColumn":75},{"ruleId":"1614","severity":1,"message":"1615","line":322,"column":17,"nodeType":"1616","messageId":"1617","endLine":322,"endColumn":20},{"ruleId":"1614","severity":1,"message":"1615","line":7,"column":18,"nodeType":"1616","messageId":"1617","endLine":7,"endColumn":21},{"ruleId":"1671","severity":1,"message":"1672","line":317,"column":21,"nodeType":"1673","messageId":"1674","endLine":326,"endColumn":16},{"ruleId":"1671","severity":1,"message":"1672","line":327,"column":22,"nodeType":"1673","messageId":"1674","endLine":330,"endColumn":16},{"ruleId":"1583","severity":1,"message":"1675","line":1,"column":10,"nodeType":"1585","endLine":1,"endColumn":44},{"ruleId":"1614","severity":1,"message":"1615","line":10,"column":19,"nodeType":"1616","messageId":"1617","endLine":10,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":26,"column":19,"nodeType":"1616","messageId":"1617","endLine":26,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":4,"column":28,"nodeType":"1616","messageId":"1617","endLine":4,"endColumn":31},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":null,"fatal":true,"severity":2,"message":"1663"},{"ruleId":"1614","severity":1,"message":"1615","line":41,"column":60,"nodeType":"1616","messageId":"1617","endLine":41,"endColumn":63},{"ruleId":"1614","severity":1,"message":"1615","line":44,"column":53,"nodeType":"1616","messageId":"1617","endLine":44,"endColumn":56},{"ruleId":"1614","severity":1,"message":"1615","line":47,"column":52,"nodeType":"1616","messageId":"1617","endLine":47,"endColumn":55},{"ruleId":"1614","severity":1,"message":"1615","line":76,"column":26,"nodeType":"1616","messageId":"1617","endLine":76,"endColumn":29},{"ruleId":"1614","severity":1,"message":"1615","line":77,"column":26,"nodeType":"1616","messageId":"1617","endLine":77,"endColumn":29},{"ruleId":"1614","severity":1,"message":"1615","line":82,"column":19,"nodeType":"1616","messageId":"1617","endLine":82,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":83,"column":19,"nodeType":"1616","messageId":"1617","endLine":83,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":88,"column":18,"nodeType":"1616","messageId":"1617","endLine":88,"endColumn":21},{"ruleId":"1614","severity":1,"message":"1615","line":89,"column":18,"nodeType":"1616","messageId":"1617","endLine":89,"endColumn":21},{"ruleId":"1614","severity":1,"message":"1615","line":94,"column":19,"nodeType":"1616","messageId":"1617","endLine":94,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":95,"column":19,"nodeType":"1616","messageId":"1617","endLine":95,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":212,"column":19,"nodeType":"1616","messageId":"1617","endLine":212,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":218,"column":19,"nodeType":"1616","messageId":"1617","endLine":218,"endColumn":22},{"ruleId":"1614","severity":1,"message":"1615","line":224,"column":26,"nodeType":"1616","messageId":"1617","endLine":224,"endColumn":29},{"ruleId":"1614","severity":1,"message":"1615","line":8,"column":48,"nodeType":"1616","messageId":"1617","endLine":8,"endColumn":51},{"ruleId":"1614","severity":1,"message":"1615","line":9,"column":40,"nodeType":"1616","messageId":"1617","endLine":9,"endColumn":43},{"ruleId":"1614","severity":1,"message":"1615","line":10,"column":41,"nodeType":"1616","messageId":"1617","endLine":10,"endColumn":44},{"ruleId":"1583","severity":1,"message":"1676","line":70,"column":17,"nodeType":"1585","endLine":70,"endColumn":24},{"ruleId":"1614","severity":1,"message":"1615","line":30,"column":29,"nodeType":"1616","messageId":"1617","endLine":30,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":101,"column":29,"nodeType":"1616","messageId":"1617","endLine":101,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":257,"column":28,"nodeType":"1616","messageId":"1617","endLine":257,"endColumn":31},{"ruleId":"1614","severity":1,"message":"1615","line":297,"column":31,"nodeType":"1616","messageId":"1617","endLine":297,"endColumn":34},{"ruleId":"1614","severity":1,"message":"1615","line":322,"column":29,"nodeType":"1616","messageId":"1617","endLine":322,"endColumn":32},{"ruleId":"1614","severity":1,"message":"1615","line":359,"column":29,"nodeType":"1616","messageId":"1617","endLine":359,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":144,"column":26,"nodeType":"1620","messageId":"1621","endLine":144,"endColumn":39},{"ruleId":"1618","severity":1,"message":"1619","line":168,"column":26,"nodeType":"1620","messageId":"1621","endLine":168,"endColumn":39},{"ruleId":"1614","severity":1,"message":"1615","line":1,"column":33,"nodeType":"1616","messageId":"1617","endLine":1,"endColumn":36},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","'runTestFirebaseConnectionDatabase' is defined but never used.","'runTestFirebaseCredentialsStorage' is defined but never used.","'runTestCAIdentityWithAuthorityProviderGeneratorV1' is defined but never used.","'runTestCAIdentityV1' is defined but never used.","'runTestCAConnectionFirebase' is defined but never used.","'runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider' is defined but never used.","'runTestErrorExtended' is defined but never used.","'runTestSwarmConnection' is defined but never used.","'runTestSwarmConnectionIPFS' is defined but never used.","'runTestSwarmStoreOrbitDBConnection' is defined but never used.","'runTestValidateMessagingTimestampsTest' is defined but never used.","'runTestHttpRequest' is defined but never used.","'runTestPseudoNtpClass' is defined but never used.","'runTestClientTimeSynced' is defined but never used.","'runSwarmMessageFieldsValidator' is defined but never used.","'runTestCAIdentityV2' is defined but never used.","'runCACredentialsIdentityStorageTest' is defined but never used.","'runTestCAConnectionsUtilsValidators' is defined but never used.","'runTestCommonUtilsURL' is defined but never used.","'runTestCAConnectionsPoolTest' is defined but never used.","'runTestCASwarmCredentilsProvider' is defined but never used.","'runTestSaltUtils' is defined but never used.","'testKeyGeneration' is defined but never used.","'runTestSecretStorage' is defined but never used.","'runTestEncryptionKeysUtils' is defined but never used.","'runTestAuthorityStorageCurrentUser' is defined but never used.","'runTestOpenStorageTest' is defined but never used.","'any' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'ErrorExtendedBaseClass' is defined but never used.","'ICAConnectionUserAuthorizedResult' is defined but never used.","'CA_CONNECTION_STATUS' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'status' is assigned a value but never used.","'Multiaddr' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","'CentralAuthorityIdentity' is defined but never used.","Unexpected empty async method 'load'.","'IdentityProvider' is defined but never used.","'encryptNative' is defined but never used.","'decryptNative' is defined but never used.","'exportKeyPairAsString' is defined but never used.","'importKeyPairFromString' is defined but never used.","'encryptToString' is defined but never used.","'decryptFromString' is defined but never used.","'encryptToTypedArray' is defined but never used.","'calculateHash' is defined but never used.","'arrayBufferToBase64' is defined but never used.","'testEncryption' is assigned a value but never used.","'Mocha' is defined but never used.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'exportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used.","Parsing error: path.replace is not a function","'generateCryptoCredentialsV1' is defined but never used.","@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.","MemberExpression","unbound","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js.\nThe file must be included in at least one of the projects provided.","'signInResult' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'timeout' is assigned a value but never used."]