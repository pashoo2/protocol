[{"/home/paul/projects/protocol/docs/assets/js/main.js":"1","/home/paul/projects/protocol/docs/assets/js/search.js":"2","/home/paul/projects/protocol/module-build/index.js":"3","/home/paul/projects/protocol/module-build/module-build.js":"4","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"5","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"6","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"7","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"8","/home/paul/projects/protocol/src/backog-classes/channel-authority-class/index.ts":"9","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts":"10","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts":"11","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts":"12","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts":"13","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts":"14","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"15","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts":"16","/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts":"17","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"18","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"19","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts":"20","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"21","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"22","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"23","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"24","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"25","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"26","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"27","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"28","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts":"29","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts":"30","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"31","/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"32","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts":"33","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"34","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"35","/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"36","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts":"37","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts":"38","/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts":"39","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/index.ts":"40","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"41","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"42","/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"43","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"44","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts":"45","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"46","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts":"47","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"48","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"49","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"50","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"51","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts":"52","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"53","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts":"54","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"55","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"56","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts":"57","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"58","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"59","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"60","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"61","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts":"62","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"63","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"64","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts":"65","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"66","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"67","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts":"68","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"69","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"70","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"71","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"72","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts":"73","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"74","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts":"75","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"76","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts":"77","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"78","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"79","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"80","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"81","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts":"82","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"83","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"84","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"85","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts":"86","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts":"87","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.ts":"88","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts":"89","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.const.ts":"90","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"91","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.types.ts":"92","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts":"93","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"94","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts":"95","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"96","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"97","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"98","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts":"99","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"100","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"101","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts":"102","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"103","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"104","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts":"105","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts":"106","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts":"107","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"108","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"109","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"110","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts":"111","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"112","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"113","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts":"114","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"115","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"116","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"117","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts":"118","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"119","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"120","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts":"121","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"122","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"123","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"124","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"125","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"126","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts":"127","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"128","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"129","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts":"130","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"131","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"132","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"133","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts":"134","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts":"135","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"136","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"137","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"138","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts":"139","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts":"140","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts":"141","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"142","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"143","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts":"144","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"145","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"146","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"147","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"148","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"149","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"150","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts":"151","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts":"152","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts":"153","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"154","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts":"155","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts":"156","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"157","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts":"158","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"159","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"160","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts":"161","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"162","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"163","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts":"164","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts":"165","/home/paul/projects/protocol/src/classes/central-authority-class/index.ts":"166","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts":"167","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.ts":"168","/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts":"169","/home/paul/projects/protocol/src/classes/connection-bridge/index.ts":"170","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts":"171","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts":"172","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts":"173","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts":"174","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts":"175","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts":"176","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts":"177","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts":"178","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts":"179","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts":"180","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.ts":"181","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts":"182","/home/paul/projects/protocol/src/classes/filestorage-class/index.ts":"183","/home/paul/projects/protocol/src/classes/index.ts":"184","/home/paul/projects/protocol/src/classes/open-storage/index.ts":"185","/home/paul/projects/protocol/src/classes/open-storage/open-storage.const.ts":"186","/home/paul/projects/protocol/src/classes/open-storage/open-storage.ts":"187","/home/paul/projects/protocol/src/classes/open-storage/open-storage.types.ts":"188","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/index.ts":"189","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"190","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"191","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"192","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"193","/home/paul/projects/protocol/src/classes/safe-storage-class/index.ts":"194","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"195","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts":"196","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"197","/home/paul/projects/protocol/src/classes/secret-storage-class/index.ts":"198","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts":"199","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts":"200","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"201","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"202","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts":"203","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"204","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts":"205","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"206","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"207","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts":"208","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"209","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/index.ts":"210","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts":"211","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts":"212","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts":"213","/home/paul/projects/protocol/src/classes/storage-providers/index.ts":"214","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts":"215","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"216","/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"217","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts":"218","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"219","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"220","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts":"221","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"222","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.const.ts":"223","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.ts":"224","/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.types.ts":"225","/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts":"226","/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"227","/home/paul/projects/protocol/src/classes/swarm-message/index.ts":"228","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts":"229","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts":"230","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts":"231","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts":"232","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts":"233","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts":"234","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts":"235","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts":"236","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts":"237","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts":"238","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts":"239","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts":"240","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts":"241","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts":"242","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts":"243","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts":"244","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts":"245","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts":"246","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts":"247","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts":"248","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts":"249","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"250","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"251","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts":"252","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"253","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"254","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts":"255","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"256","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"257","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"258","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts":"259","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"260","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"261","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"262","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts":"263","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"264","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"265","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts":"266","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"267","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"268","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"269","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"270","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts":"271","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts":"272","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts":"273","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts":"274","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts":"275","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts":"276","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts":"277","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts":"278","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts":"279","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts":"280","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts":"281","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts":"282","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts":"283","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts":"284","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts":"285","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts":"286","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts":"287","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts":"288","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts":"289","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts":"290","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts":"291","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts":"292","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts":"293","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts":"294","/home/paul/projects/protocol/src/classes/swarm-message-store/index.ts":"295","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts":"296","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts":"297","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts":"298","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts":"299","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts":"300","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts":"301","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts":"302","/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts":"303","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/index.ts":"304","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-message-encrypted-cache.utils.ts":"305","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.const.ts":"306","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts":"307","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts":"308","/home/paul/projects/protocol/src/classes/swarm-store-class/index.ts":"309","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts":"310","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts":"311","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"312","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts":"313","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts":"314","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts":"315","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts":"316","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"317","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"318","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"319","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts":"320","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"321","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"322","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"323","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts":"324","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"325","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"326","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts":"327","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"328","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"329","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"330","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts":"331","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"332","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts":"333","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"334","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"335","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts":"336","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"337","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"338","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"339","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"340","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"341","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"342","/home/paul/projects/protocol/src/components/app-render.tsx":"343","/home/paul/projects/protocol/src/components/app.tsx":"344","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts":"345","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx":"346","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts":"347","/home/paul/projects/protocol/src/components/connect-to-swarm/index.ts":"348","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx":"349","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts":"350","/home/paul/projects/protocol/src/components/filestore-add-file/index.ts":"351","/home/paul/projects/protocol/src/components/sensitive-data-storage/index.ts":"352","/home/paul/projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx":"353","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-main.ts":"354","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"355","/home/paul/projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"356","/home/paul/projects/protocol/src/const/common-date-time/index.ts":"357","/home/paul/projects/protocol/src/const/common-values/common-values-env.ts":"358","/home/paul/projects/protocol/src/const/common-values/common-values.ts":"359","/home/paul/projects/protocol/src/const/common-values/index.ts":"360","/home/paul/projects/protocol/src/const/const-api-conf.ts":"361","/home/paul/projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"362","/home/paul/projects/protocol/src/const/const-crypto-keys/index.ts":"363","/home/paul/projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"364","/home/paul/projects/protocol/src/const/const-validation-regex/index.ts":"365","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"366","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"367","/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"368","/home/paul/projects/protocol/src/const/const-validation-schemes/index.ts":"369","/home/paul/projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"370","/home/paul/projects/protocol/src/const/const-validation-values/index.ts":"371","/home/paul/projects/protocol/src/const/const-values-restrictions-common.ts":"372","/home/paul/projects/protocol/src/dev.ts":"373","/home/paul/projects/protocol/src/index.ts":"374","/home/paul/projects/protocol/src/prod.ts":"375","/home/paul/projects/protocol/src/react-app-env.d.ts":"376","/home/paul/projects/protocol/src/types/channels.types.ts":"377","/home/paul/projects/protocol/src/types/common.types.ts":"378","/home/paul/projects/protocol/src/types/encryption-keys.types.ts":"379","/home/paul/projects/protocol/src/types/helper.types.ts":"380","/home/paul/projects/protocol/src/types/index.d.ts":"381","/home/paul/projects/protocol/src/types/ipfs.d.ts":"382","/home/paul/projects/protocol/src/types/ipfs.types.d.ts":"383","/home/paul/projects/protocol/src/types/libp2p-bootstrap.d.ts":"384","/home/paul/projects/protocol/src/types/libp2p-delegated-content-routing.d.ts":"385","/home/paul/projects/protocol/src/types/libp2p-delegated-peer-routing.d.ts":"386","/home/paul/projects/protocol/src/types/libp2p-gossipsub.d.ts":"387","/home/paul/projects/protocol/src/types/libp2p-kad-dht.d.ts":"388","/home/paul/projects/protocol/src/types/libp2p-mdns.d.ts":"389","/home/paul/projects/protocol/src/types/libp2p-secio.d.ts":"390","/home/paul/projects/protocol/src/types/libp2p-spdy.d.ts":"391","/home/paul/projects/protocol/src/types/libp2p-stardust.d.ts":"392","/home/paul/projects/protocol/src/types/libp2p-tcp.d.ts":"393","/home/paul/projects/protocol/src/types/libp2p-webrtc-direct.d.ts":"394","/home/paul/projects/protocol/src/types/libp2p-webrtc-star.d.ts":"395","/home/paul/projects/protocol/src/types/libp2p-websocket-star.d.ts":"396","/home/paul/projects/protocol/src/types/libp2p-websockets.d.ts":"397","/home/paul/projects/protocol/src/types/libp2p.d.ts":"398","/home/paul/projects/protocol/src/types/main.types.ts":"399","/home/paul/projects/protocol/src/types/multiaddr.d.ts":"400","/home/paul/projects/protocol/src/types/orbit-db-cache.d.ts":"401","/home/paul/projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts":"402","/home/paul/projects/protocol/src/types/orbit-db-keystore.d.ts":"403","/home/paul/projects/protocol/src/types/orbit-db-storage-adapter.d.ts":"404","/home/paul/projects/protocol/src/types/pull-mplex.d.ts":"405","/home/paul/projects/protocol/src/types/storage.types.ts":"406","/home/paul/projects/protocol/src/types/users.types.ts":"407","/home/paul/projects/protocol/src/utils/common-utils/common-utils-array.ts":"408","/home/paul/projects/protocol/src/utils/common-utils/common-utils-check-value.ts":"409","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"410","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time.ts":"411","/home/paul/projects/protocol/src/utils/common-utils/common-utils-main.ts":"412","/home/paul/projects/protocol/src/utils/common-utils/common-utils-number.ts":"413","/home/paul/projects/protocol/src/utils/common-utils/common-utils-objects.ts":"414","/home/paul/projects/protocol/src/utils/common-utils/common-utils-timer.ts":"415","/home/paul/projects/protocol/src/utils/common-utils/common-utils-url.ts":"416","/home/paul/projects/protocol/src/utils/common-utils/common-utils.ts":"417","/home/paul/projects/protocol/src/utils/common-utils/index.ts":"418","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"419","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"420","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"421","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts":"422","/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts":"423","/home/paul/projects/protocol/src/utils/data-cache-utils/index.ts":"424","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"425","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"426","/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts":"427","/home/paul/projects/protocol/src/utils/data-compression-utils/index.ts":"428","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"429","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts":"430","/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"431","/home/paul/projects/protocol/src/utils/data-sign-utils/index.ts":"432","/home/paul/projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"433","/home/paul/projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"434","/home/paul/projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"435","/home/paul/projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"436","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"437","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts":"438","/home/paul/projects/protocol/src/utils/data-validators-utils/index.ts":"439","/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"440","/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"441","/home/paul/projects/protocol/src/utils/encryption-keys-utils/index.ts":"442","/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts":"443","/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts":"444","/home/paul/projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"445","/home/paul/projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"446","/home/paul/projects/protocol/src/utils/encryption-utils/encryption-utils.ts":"447","/home/paul/projects/protocol/src/utils/encryption-utils/index.ts":"448","/home/paul/projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"449","/home/paul/projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"450","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.const.ts":"451","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.ts":"452","/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.types.ts":"453","/home/paul/projects/protocol/src/utils/files-utils/files-utils-download.ts":"454","/home/paul/projects/protocol/src/utils/files-utils/files-utils-size.ts":"455","/home/paul/projects/protocol/src/utils/files-utils/index.ts":"456","/home/paul/projects/protocol/src/utils/firebase-utils/firebase-utils.ts":"457","/home/paul/projects/protocol/src/utils/firebase-utils/index.ts":"458","/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"459","/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"460","/home/paul/projects/protocol/src/utils/hash-calculation-utils/index.ts":"461","/home/paul/projects/protocol/src/utils/identity-utils/identity-utils.ts":"462","/home/paul/projects/protocol/src/utils/identity-utils/index.ts":"463","/home/paul/projects/protocol/src/utils/index.ts":"464","/home/paul/projects/protocol/src/utils/ipfs-utils/index.ts":"465","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/index.js":"466","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.const.ts":"467","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.ts":"468","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts":"469","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts":"470","/home/paul/projects/protocol/src/utils/lazy-loading-utils/index.ts":"471","/home/paul/projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"472","/home/paul/projects/protocol/src/utils/main-utils.ts":"473","/home/paul/projects/protocol/src/utils/password-utils/decrypt.password-utils.ts":"474","/home/paul/projects/protocol/src/utils/password-utils/derive-key.password-utils.ts":"475","/home/paul/projects/protocol/src/utils/password-utils/encrypt.password-utils.ts":"476","/home/paul/projects/protocol/src/utils/password-utils/index.ts":"477","/home/paul/projects/protocol/src/utils/password-utils/password-utils.const.ts":"478","/home/paul/projects/protocol/src/utils/password-utils/password-utils.types.ts":"479","/home/paul/projects/protocol/src/utils/string-encoding-utils.ts":"480","/home/paul/projects/protocol/src/utils/string-utilities.ts":"481","/home/paul/projects/protocol/src/utils/typed-array-utils.ts":"482","/home/paul/projects/protocol/src/utils/validation-utils/index.ts":"483","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"484","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts":"485","/home/paul/projects/protocol/src/utils/validation-utils/validation-utils.ts":"486","/home/paul/projects/protocol/src/components/database-component/database-component.tsx":"487","/home/paul/projects/protocol/src/components/database-component/index.ts":"488","/home/paul/projects/protocol/src/components/database-component/message-component/index.ts":"489","/home/paul/projects/protocol/src/components/database-component/message-component/message-component.tsx":"490"},{"size":315454,"mtime":1596130938122,"results":"491","hashOfConfig":"492"},{"size":3256798,"mtime":1596130938134,"results":"493","hashOfConfig":"492"},{"size":44,"mtime":1594985692484,"results":"494","hashOfConfig":"492"},{"size":2379,"mtime":1594985692484,"results":"495","hashOfConfig":"492"},{"size":33,"mtime":1596228865129,"results":"496","hashOfConfig":"497"},{"size":602,"mtime":1596228865129,"results":"498","hashOfConfig":"497"},{"size":43,"mtime":1596228865129,"results":"499","hashOfConfig":"497"},{"size":163,"mtime":1596228865129,"results":"500","hashOfConfig":"497"},{"size":93,"mtime":1596228865129,"results":"501","hashOfConfig":"497"},{"size":216,"mtime":1596228865129,"results":"502","hashOfConfig":"497"},{"size":3259,"mtime":1596228865129,"results":"503","hashOfConfig":"497"},{"size":1937,"mtime":1596228865129,"results":"504","hashOfConfig":"497"},{"size":561,"mtime":1596228865129,"results":"505","hashOfConfig":"497"},{"size":140,"mtime":1596228865129,"results":"506","hashOfConfig":"497"},{"size":615,"mtime":1596228865129,"results":"507","hashOfConfig":"497"},{"size":606,"mtime":1596228865129,"results":"508","hashOfConfig":"497"},{"size":52,"mtime":1596228865129,"results":"509","hashOfConfig":"497"},{"size":235,"mtime":1596228865129,"results":"510","hashOfConfig":"497"},{"size":1329,"mtime":1596228865129,"results":"511","hashOfConfig":"497"},{"size":95,"mtime":1596228865129,"results":"512","hashOfConfig":"497"},{"size":2819,"mtime":1596228865129,"results":"513","hashOfConfig":"497"},{"size":1636,"mtime":1596228865129,"results":"514","hashOfConfig":"497"},{"size":4314,"mtime":1596228865129,"results":"515","hashOfConfig":"497"},{"size":4372,"mtime":1596228865129,"results":"516","hashOfConfig":"497"},{"size":1314,"mtime":1596228865129,"results":"517","hashOfConfig":"497"},{"size":8094,"mtime":1596228865129,"results":"518","hashOfConfig":"497"},{"size":1874,"mtime":1596228865129,"results":"519","hashOfConfig":"497"},{"size":2614,"mtime":1596228865129,"results":"520","hashOfConfig":"497"},{"size":193,"mtime":1596228865129,"results":"521","hashOfConfig":"497"},{"size":89,"mtime":1596228865129,"results":"522","hashOfConfig":"497"},{"size":728,"mtime":1596228865129,"results":"523","hashOfConfig":"497"},{"size":1648,"mtime":1596228865129,"results":"524","hashOfConfig":"497"},{"size":146,"mtime":1596228865129,"results":"525","hashOfConfig":"497"},{"size":191,"mtime":1596228865129,"results":"526","hashOfConfig":"497"},{"size":2582,"mtime":1596228865129,"results":"527","hashOfConfig":"497"},{"size":978,"mtime":1596228865129,"results":"528","hashOfConfig":"497"},{"size":103,"mtime":1596228865129,"results":"529","hashOfConfig":"497"},{"size":4922,"mtime":1596228865129,"results":"530","hashOfConfig":"497"},{"size":2663,"mtime":1596228865129,"results":"531","hashOfConfig":"497"},{"size":125,"mtime":1596228865129,"results":"532","hashOfConfig":"497"},{"size":58,"mtime":1596228865129,"results":"533","hashOfConfig":"497"},{"size":2081,"mtime":1596228865129,"results":"534","hashOfConfig":"497"},{"size":216,"mtime":1596228865129,"results":"535","hashOfConfig":"497"},{"size":2025,"mtime":1596228865129,"results":"536","hashOfConfig":"497"},{"size":785,"mtime":1596228865129,"results":"537","hashOfConfig":"497"},{"size":66,"mtime":1596228865129,"results":"538","hashOfConfig":"497"},{"size":185,"mtime":1596228865129,"results":"539","hashOfConfig":"497"},{"size":3031,"mtime":1596228865129,"results":"540","hashOfConfig":"497"},{"size":900,"mtime":1596228865129,"results":"541","hashOfConfig":"497"},{"size":881,"mtime":1596228865129,"results":"542","hashOfConfig":"497"},{"size":187,"mtime":1596228865129,"results":"543","hashOfConfig":"497"},{"size":237,"mtime":1596228865129,"results":"544","hashOfConfig":"497"},{"size":1579,"mtime":1596228865129,"results":"545","hashOfConfig":"497"},{"size":81,"mtime":1596228865129,"results":"546","hashOfConfig":"497"},{"size":360,"mtime":1596228865129,"results":"547","hashOfConfig":"497"},{"size":1786,"mtime":1596228865129,"results":"548","hashOfConfig":"497"},{"size":169,"mtime":1596228865129,"results":"549","hashOfConfig":"497"},{"size":738,"mtime":1596228865129,"results":"550","hashOfConfig":"497"},{"size":224,"mtime":1596228865129,"results":"551","hashOfConfig":"497"},{"size":379,"mtime":1596228865129,"results":"552","hashOfConfig":"497"},{"size":2670,"mtime":1596228865129,"results":"553","hashOfConfig":"497"},{"size":293,"mtime":1596228865129,"results":"554","hashOfConfig":"497"},{"size":781,"mtime":1596228865129,"results":"555","hashOfConfig":"497"},{"size":1934,"mtime":1596228865129,"results":"556","hashOfConfig":"497"},{"size":157,"mtime":1596228865129,"results":"557","hashOfConfig":"497"},{"size":1081,"mtime":1596228865129,"results":"558","hashOfConfig":"497"},{"size":1962,"mtime":1596228865129,"results":"559","hashOfConfig":"497"},{"size":157,"mtime":1596228865129,"results":"560","hashOfConfig":"497"},{"size":671,"mtime":1596228865129,"results":"561","hashOfConfig":"497"},{"size":215,"mtime":1596228865129,"results":"562","hashOfConfig":"497"},{"size":340,"mtime":1596228865129,"results":"563","hashOfConfig":"497"},{"size":3790,"mtime":1596228865129,"results":"564","hashOfConfig":"497"},{"size":281,"mtime":1596228865129,"results":"565","hashOfConfig":"497"},{"size":1720,"mtime":1596228865129,"results":"566","hashOfConfig":"497"},{"size":70,"mtime":1596228865129,"results":"567","hashOfConfig":"497"},{"size":1742,"mtime":1596228865129,"results":"568","hashOfConfig":"497"},{"size":70,"mtime":1596228865129,"results":"569","hashOfConfig":"497"},{"size":684,"mtime":1596228865129,"results":"570","hashOfConfig":"497"},{"size":224,"mtime":1596228865129,"results":"571","hashOfConfig":"497"},{"size":76,"mtime":1596228865129,"results":"572","hashOfConfig":"497"},{"size":3995,"mtime":1596228865129,"results":"573","hashOfConfig":"497"},{"size":293,"mtime":1596228865129,"results":"574","hashOfConfig":"497"},{"size":1035,"mtime":1596228865129,"results":"575","hashOfConfig":"497"},{"size":7347,"mtime":1596228865129,"results":"576","hashOfConfig":"497"},{"size":2890,"mtime":1596228865129,"results":"577","hashOfConfig":"497"},{"size":185,"mtime":1596228865129,"results":"578","hashOfConfig":"497"},{"size":2194,"mtime":1596228865129,"results":"579","hashOfConfig":"497"},{"size":32602,"mtime":1597688661598,"results":"580","hashOfConfig":"497"},{"size":6918,"mtime":1597688616150,"results":"581","hashOfConfig":"497"},{"size":132,"mtime":1596228865129,"results":"582","hashOfConfig":"497"},{"size":38705,"mtime":1597688661858,"results":"583","hashOfConfig":"497"},{"size":261,"mtime":1596228865129,"results":"584","hashOfConfig":"497"},{"size":62,"mtime":1596228865129,"results":"585","hashOfConfig":"497"},{"size":20633,"mtime":1596228865129,"results":"586","hashOfConfig":"497"},{"size":83,"mtime":1596228865129,"results":"587","hashOfConfig":"497"},{"size":311,"mtime":1596228865129,"results":"588","hashOfConfig":"497"},{"size":14817,"mtime":1596228865129,"results":"589","hashOfConfig":"497"},{"size":1182,"mtime":1596228865129,"results":"590","hashOfConfig":"497"},{"size":263,"mtime":1596228865129,"results":"591","hashOfConfig":"497"},{"size":145,"mtime":1596228865129,"results":"592","hashOfConfig":"497"},{"size":4334,"mtime":1596228865133,"results":"593","hashOfConfig":"497"},{"size":151,"mtime":1596228865133,"results":"594","hashOfConfig":"497"},{"size":651,"mtime":1596228865133,"results":"595","hashOfConfig":"497"},{"size":756,"mtime":1596228865133,"results":"596","hashOfConfig":"497"},{"size":155,"mtime":1596228865133,"results":"597","hashOfConfig":"497"},{"size":231,"mtime":1596228865133,"results":"598","hashOfConfig":"497"},{"size":79,"mtime":1596228865133,"results":"599","hashOfConfig":"497"},{"size":110,"mtime":1596228865133,"results":"600","hashOfConfig":"497"},{"size":77,"mtime":1596228865133,"results":"601","hashOfConfig":"497"},{"size":75,"mtime":1596228865133,"results":"602","hashOfConfig":"497"},{"size":285,"mtime":1596228865133,"results":"603","hashOfConfig":"497"},{"size":717,"mtime":1596228865133,"results":"604","hashOfConfig":"497"},{"size":306,"mtime":1596228865133,"results":"605","hashOfConfig":"497"},{"size":346,"mtime":1596228865133,"results":"606","hashOfConfig":"497"},{"size":385,"mtime":1596228865133,"results":"607","hashOfConfig":"497"},{"size":333,"mtime":1596228865133,"results":"608","hashOfConfig":"497"},{"size":130,"mtime":1596228865133,"results":"609","hashOfConfig":"497"},{"size":186,"mtime":1596228865133,"results":"610","hashOfConfig":"497"},{"size":26530,"mtime":1597688662002,"results":"611","hashOfConfig":"497"},{"size":4012,"mtime":1597688662046,"results":"612","hashOfConfig":"497"},{"size":115,"mtime":1596228865133,"results":"613","hashOfConfig":"497"},{"size":758,"mtime":1596228865133,"results":"614","hashOfConfig":"497"},{"size":868,"mtime":1596228865133,"results":"615","hashOfConfig":"497"},{"size":181,"mtime":1596228865133,"results":"616","hashOfConfig":"497"},{"size":192,"mtime":1596228865133,"results":"617","hashOfConfig":"497"},{"size":1300,"mtime":1596228865133,"results":"618","hashOfConfig":"497"},{"size":123,"mtime":1596228865133,"results":"619","hashOfConfig":"497"},{"size":579,"mtime":1596228865133,"results":"620","hashOfConfig":"497"},{"size":4767,"mtime":1597688662086,"results":"621","hashOfConfig":"497"},{"size":111,"mtime":1596228865133,"results":"622","hashOfConfig":"497"},{"size":900,"mtime":1596228865133,"results":"623","hashOfConfig":"497"},{"size":19491,"mtime":1596228865133,"results":"624","hashOfConfig":"497"},{"size":2065,"mtime":1596228865133,"results":"625","hashOfConfig":"497"},{"size":224,"mtime":1596228865133,"results":"626","hashOfConfig":"497"},{"size":70,"mtime":1596228865133,"results":"627","hashOfConfig":"497"},{"size":1588,"mtime":1596228865133,"results":"628","hashOfConfig":"497"},{"size":15836,"mtime":1596228865133,"results":"629","hashOfConfig":"497"},{"size":3718,"mtime":1596228865133,"results":"630","hashOfConfig":"497"},{"size":248,"mtime":1596228865133,"results":"631","hashOfConfig":"497"},{"size":78,"mtime":1596228865133,"results":"632","hashOfConfig":"497"},{"size":126,"mtime":1596228865133,"results":"633","hashOfConfig":"497"},{"size":16199,"mtime":1596228865133,"results":"634","hashOfConfig":"497"},{"size":1944,"mtime":1596228865133,"results":"635","hashOfConfig":"497"},{"size":135,"mtime":1596228865133,"results":"636","hashOfConfig":"497"},{"size":3963,"mtime":1596228865133,"results":"637","hashOfConfig":"497"},{"size":3616,"mtime":1596228865133,"results":"638","hashOfConfig":"497"},{"size":7635,"mtime":1596228865133,"results":"639","hashOfConfig":"497"},{"size":4936,"mtime":1596228865133,"results":"640","hashOfConfig":"497"},{"size":453,"mtime":1596228865133,"results":"641","hashOfConfig":"497"},{"size":310,"mtime":1596228865133,"results":"642","hashOfConfig":"497"},{"size":365,"mtime":1596228865133,"results":"643","hashOfConfig":"497"},{"size":3256,"mtime":1596228865133,"results":"644","hashOfConfig":"497"},{"size":255,"mtime":1596228865133,"results":"645","hashOfConfig":"497"},{"size":14855,"mtime":1596228865133,"results":"646","hashOfConfig":"497"},{"size":206,"mtime":1596228865133,"results":"647","hashOfConfig":"497"},{"size":117,"mtime":1596228865133,"results":"648","hashOfConfig":"497"},{"size":3800,"mtime":1596228865133,"results":"649","hashOfConfig":"497"},{"size":65,"mtime":1596228865133,"results":"650","hashOfConfig":"497"},{"size":665,"mtime":1596228865133,"results":"651","hashOfConfig":"497"},{"size":4724,"mtime":1596228865133,"results":"652","hashOfConfig":"497"},{"size":129,"mtime":1596228865133,"results":"653","hashOfConfig":"497"},{"size":1589,"mtime":1596228865133,"results":"654","hashOfConfig":"497"},{"size":504,"mtime":1596228865133,"results":"655","hashOfConfig":"497"},{"size":115,"mtime":1596228865133,"results":"656","hashOfConfig":"497"},{"size":180,"mtime":1596228865133,"results":"657","hashOfConfig":"497"},{"size":243,"mtime":1596228865133,"results":"658","hashOfConfig":"497"},{"size":2330,"mtime":1597514290391,"results":"659","hashOfConfig":"497"},{"size":19471,"mtime":1597514290391,"results":"660","hashOfConfig":"497"},{"size":5611,"mtime":1596229427362,"results":"661","hashOfConfig":"497"},{"size":37,"mtime":1596228865133,"results":"662","hashOfConfig":"497"},{"size":252,"mtime":1596228865133,"results":"663","hashOfConfig":"497"},{"size":2827,"mtime":1596228865133,"results":"664","hashOfConfig":"497"},{"size":403,"mtime":1596228865133,"results":"665","hashOfConfig":"497"},{"size":296,"mtime":1596228865133,"results":"666","hashOfConfig":"497"},{"size":352,"mtime":1596228865133,"results":"667","hashOfConfig":"497"},{"size":7138,"mtime":1596228865133,"results":"668","hashOfConfig":"497"},{"size":1533,"mtime":1596228865133,"results":"669","hashOfConfig":"497"},{"size":296,"mtime":1596228865133,"results":"670","hashOfConfig":"497"},{"size":51,"mtime":1596228865133,"results":"671","hashOfConfig":"497"},{"size":1371,"mtime":1596228865133,"results":"672","hashOfConfig":"497"},{"size":5084,"mtime":1596228865133,"results":"673","hashOfConfig":"497"},{"size":8365,"mtime":1596228865133,"results":"674","hashOfConfig":"497"},{"size":125,"mtime":1596228865133,"results":"675","hashOfConfig":"497"},{"size":381,"mtime":1596228865133,"results":"676","hashOfConfig":"497"},{"size":110,"mtime":1596228865133,"results":"677","hashOfConfig":"497"},{"size":46,"mtime":1596228865133,"results":"678","hashOfConfig":"497"},{"size":5218,"mtime":1596228865133,"results":"679","hashOfConfig":"497"},{"size":1237,"mtime":1596229427362,"results":"680","hashOfConfig":"497"},{"size":165,"mtime":1596228865133,"results":"681","hashOfConfig":"497"},{"size":839,"mtime":1596228865133,"results":"682","hashOfConfig":"497"},{"size":15598,"mtime":1596228865133,"results":"683","hashOfConfig":"497"},{"size":3120,"mtime":1596228865133,"results":"684","hashOfConfig":"497"},{"size":514,"mtime":1596228865133,"results":"685","hashOfConfig":"497"},{"size":128,"mtime":1596228865133,"results":"686","hashOfConfig":"497"},{"size":1490,"mtime":1596228865133,"results":"687","hashOfConfig":"497"},{"size":32729,"mtime":1596228865133,"results":"688","hashOfConfig":"497"},{"size":1469,"mtime":1596228865133,"results":"689","hashOfConfig":"497"},{"size":181,"mtime":1596228865133,"results":"690","hashOfConfig":"497"},{"size":160,"mtime":1596228865133,"results":"691","hashOfConfig":"497"},{"size":111,"mtime":1596228865137,"results":"692","hashOfConfig":"497"},{"size":298,"mtime":1596228865137,"results":"693","hashOfConfig":"497"},{"size":1497,"mtime":1596228865137,"results":"694","hashOfConfig":"497"},{"size":51,"mtime":1596228865137,"results":"695","hashOfConfig":"497"},{"size":1440,"mtime":1596228865137,"results":"696","hashOfConfig":"497"},{"size":55,"mtime":1596228865137,"results":"697","hashOfConfig":"497"},{"size":563,"mtime":1596228865137,"results":"698","hashOfConfig":"497"},{"size":363,"mtime":1596228865137,"results":"699","hashOfConfig":"497"},{"size":31216,"mtime":1597514290391,"results":"700","hashOfConfig":"497"},{"size":4378,"mtime":1597514290395,"results":"701","hashOfConfig":"497"},{"size":50,"mtime":1596228865137,"results":"702","hashOfConfig":"497"},{"size":198,"mtime":1596228865137,"results":"703","hashOfConfig":"497"},{"size":4903,"mtime":1596228865137,"results":"704","hashOfConfig":"497"},{"size":1186,"mtime":1596228865137,"results":"705","hashOfConfig":"497"},{"size":325,"mtime":1596228865137,"results":"706","hashOfConfig":"497"},{"size":111,"mtime":1596228865137,"results":"707","hashOfConfig":"497"},{"size":80,"mtime":1596228865137,"results":"708","hashOfConfig":"497"},{"size":6259,"mtime":1596228865137,"results":"709","hashOfConfig":"497"},{"size":119,"mtime":1596228865137,"results":"710","hashOfConfig":"497"},{"size":216,"mtime":1596228865137,"results":"711","hashOfConfig":"497"},{"size":7065,"mtime":1596228865137,"results":"712","hashOfConfig":"497"},{"size":57,"mtime":1596228865137,"results":"713","hashOfConfig":"497"},{"size":3103,"mtime":1596228865137,"results":"714","hashOfConfig":"497"},{"size":1153,"mtime":1596228865137,"results":"715","hashOfConfig":"497"},{"size":643,"mtime":1596228865137,"results":"716","hashOfConfig":"497"},{"size":2034,"mtime":1596229427362,"results":"717","hashOfConfig":"497"},{"size":59,"mtime":1596228865137,"results":"718","hashOfConfig":"497"},{"size":3122,"mtime":1596228865137,"results":"719","hashOfConfig":"497"},{"size":234,"mtime":1596228865137,"results":"720","hashOfConfig":"497"},{"size":2057,"mtime":1596228865137,"results":"721","hashOfConfig":"497"},{"size":14053,"mtime":1596228865137,"results":"722","hashOfConfig":"497"},{"size":8959,"mtime":1596228865137,"results":"723","hashOfConfig":"497"},{"size":157,"mtime":1596228865137,"results":"724","hashOfConfig":"497"},{"size":105,"mtime":1596228865137,"results":"725","hashOfConfig":"497"},{"size":7139,"mtime":1596228865137,"results":"726","hashOfConfig":"497"},{"size":2532,"mtime":1596228865137,"results":"727","hashOfConfig":"497"},{"size":173,"mtime":1596228865137,"results":"728","hashOfConfig":"497"},{"size":76,"mtime":1596228865137,"results":"729","hashOfConfig":"497"},{"size":11327,"mtime":1596228865137,"results":"730","hashOfConfig":"497"},{"size":4943,"mtime":1596228865137,"results":"731","hashOfConfig":"497"},{"size":313,"mtime":1596228865137,"results":"732","hashOfConfig":"497"},{"size":226,"mtime":1596228865137,"results":"733","hashOfConfig":"497"},{"size":714,"mtime":1596228865137,"results":"734","hashOfConfig":"497"},{"size":163,"mtime":1596228865137,"results":"735","hashOfConfig":"497"},{"size":308,"mtime":1596228865137,"results":"736","hashOfConfig":"497"},{"size":773,"mtime":1596228865137,"results":"737","hashOfConfig":"497"},{"size":165,"mtime":1596228865137,"results":"738","hashOfConfig":"497"},{"size":129,"mtime":1596228865137,"results":"739","hashOfConfig":"497"},{"size":832,"mtime":1596228865137,"results":"740","hashOfConfig":"497"},{"size":203,"mtime":1596228865137,"results":"741","hashOfConfig":"497"},{"size":551,"mtime":1596228865137,"results":"742","hashOfConfig":"497"},{"size":54,"mtime":1596228865137,"results":"743","hashOfConfig":"497"},{"size":201,"mtime":1596228865137,"results":"744","hashOfConfig":"497"},{"size":552,"mtime":1596228865137,"results":"745","hashOfConfig":"497"},{"size":53,"mtime":1596228865137,"results":"746","hashOfConfig":"497"},{"size":275,"mtime":1596228865137,"results":"747","hashOfConfig":"497"},{"size":494,"mtime":1596228865137,"results":"748","hashOfConfig":"497"},{"size":2310,"mtime":1596228865137,"results":"749","hashOfConfig":"497"},{"size":249,"mtime":1596228865137,"results":"750","hashOfConfig":"497"},{"size":281,"mtime":1596228865137,"results":"751","hashOfConfig":"497"},{"size":803,"mtime":1596228865137,"results":"752","hashOfConfig":"497"},{"size":1917,"mtime":1596228865137,"results":"753","hashOfConfig":"497"},{"size":214,"mtime":1596228865137,"results":"754","hashOfConfig":"497"},{"size":175,"mtime":1596228865137,"results":"755","hashOfConfig":"497"},{"size":890,"mtime":1596228865137,"results":"756","hashOfConfig":"497"},{"size":49,"mtime":1596228865137,"results":"757","hashOfConfig":"497"},{"size":299,"mtime":1596228865137,"results":"758","hashOfConfig":"497"},{"size":260,"mtime":1596228865137,"results":"759","hashOfConfig":"497"},{"size":1914,"mtime":1596228865137,"results":"760","hashOfConfig":"497"},{"size":60,"mtime":1596228865137,"results":"761","hashOfConfig":"497"},{"size":13939,"mtime":1596228865137,"results":"762","hashOfConfig":"497"},{"size":3837,"mtime":1596228865137,"results":"763","hashOfConfig":"497"},{"size":151,"mtime":1596228865137,"results":"764","hashOfConfig":"497"},{"size":6686,"mtime":1596228865137,"results":"765","hashOfConfig":"497"},{"size":1544,"mtime":1596228865137,"results":"766","hashOfConfig":"497"},{"size":760,"mtime":1596228865137,"results":"767","hashOfConfig":"497"},{"size":3561,"mtime":1596228865137,"results":"768","hashOfConfig":"497"},{"size":2165,"mtime":1596228865137,"results":"769","hashOfConfig":"497"},{"size":271,"mtime":1596228865137,"results":"770","hashOfConfig":"497"},{"size":109,"mtime":1596228865137,"results":"771","hashOfConfig":"497"},{"size":189,"mtime":1596228865137,"results":"772","hashOfConfig":"497"},{"size":206,"mtime":1596228865137,"results":"773","hashOfConfig":"497"},{"size":117,"mtime":1596228865137,"results":"774","hashOfConfig":"497"},{"size":209,"mtime":1596228865137,"results":"775","hashOfConfig":"497"},{"size":210,"mtime":1596228865137,"results":"776","hashOfConfig":"497"},{"size":115,"mtime":1596228865137,"results":"777","hashOfConfig":"497"},{"size":201,"mtime":1596228865137,"results":"778","hashOfConfig":"497"},{"size":212,"mtime":1596228865137,"results":"779","hashOfConfig":"497"},{"size":123,"mtime":1596228865137,"results":"780","hashOfConfig":"497"},{"size":221,"mtime":1596228865137,"results":"781","hashOfConfig":"497"},{"size":216,"mtime":1596228865137,"results":"782","hashOfConfig":"497"},{"size":159,"mtime":1596228865141,"results":"783","hashOfConfig":"497"},{"size":99,"mtime":1596228865141,"results":"784","hashOfConfig":"497"},{"size":713,"mtime":1596228865141,"results":"785","hashOfConfig":"497"},{"size":199,"mtime":1596228865141,"results":"786","hashOfConfig":"497"},{"size":177,"mtime":1596228865137,"results":"787","hashOfConfig":"497"},{"size":125,"mtime":1596228865137,"results":"788","hashOfConfig":"497"},{"size":52,"mtime":1596228865137,"results":"789","hashOfConfig":"497"},{"size":3447,"mtime":1597264097800,"results":"790","hashOfConfig":"497"},{"size":72,"mtime":1596228865137,"results":"791","hashOfConfig":"497"},{"size":6119,"mtime":1597264097800,"results":"792","hashOfConfig":"497"},{"size":1566,"mtime":1596230527577,"results":"793","hashOfConfig":"497"},{"size":20517,"mtime":1597264097800,"results":"794","hashOfConfig":"497"},{"size":7776,"mtime":1597264097800,"results":"795","hashOfConfig":"497"},{"size":105,"mtime":1596228865141,"results":"796","hashOfConfig":"497"},{"size":2914,"mtime":1596228865141,"results":"797","hashOfConfig":"497"},{"size":316,"mtime":1596228865141,"results":"798","hashOfConfig":"497"},{"size":6539,"mtime":1596229427362,"results":"799","hashOfConfig":"497"},{"size":4123,"mtime":1596229427362,"results":"800","hashOfConfig":"497"},{"size":168,"mtime":1596228865141,"results":"801","hashOfConfig":"497"},{"size":3630,"mtime":1596232458553,"results":"802","hashOfConfig":"497"},{"size":23162,"mtime":1597261807746,"results":"803","hashOfConfig":"497"},{"size":10823,"mtime":1596229427362,"results":"804","hashOfConfig":"497"},{"size":50,"mtime":1596228865141,"results":"805","hashOfConfig":"497"},{"size":226,"mtime":1596228865141,"results":"806","hashOfConfig":"497"},{"size":534,"mtime":1596228865141,"results":"807","hashOfConfig":"497"},{"size":245,"mtime":1596228865141,"results":"808","hashOfConfig":"497"},{"size":270,"mtime":1596228865141,"results":"809","hashOfConfig":"497"},{"size":7071,"mtime":1597264097800,"results":"810","hashOfConfig":"497"},{"size":2161,"mtime":1597264097800,"results":"811","hashOfConfig":"497"},{"size":218,"mtime":1596228865141,"results":"812","hashOfConfig":"497"},{"size":1238,"mtime":1596229427362,"results":"813","hashOfConfig":"497"},{"size":28144,"mtime":1597264097800,"results":"814","hashOfConfig":"497"},{"size":4818,"mtime":1596233084418,"results":"815","hashOfConfig":"497"},{"size":161,"mtime":1596228865141,"results":"816","hashOfConfig":"497"},{"size":126,"mtime":1596228865141,"results":"817","hashOfConfig":"497"},{"size":2905,"mtime":1596228865141,"results":"818","hashOfConfig":"497"},{"size":218,"mtime":1596228865141,"results":"819","hashOfConfig":"497"},{"size":157,"mtime":1596228865141,"results":"820","hashOfConfig":"497"},{"size":677,"mtime":1596228865141,"results":"821","hashOfConfig":"497"},{"size":1470,"mtime":1596228865141,"results":"822","hashOfConfig":"497"},{"size":73,"mtime":1596228865141,"results":"823","hashOfConfig":"497"},{"size":792,"mtime":1596228865141,"results":"824","hashOfConfig":"497"},{"size":155,"mtime":1596228865141,"results":"825","hashOfConfig":"497"},{"size":3803,"mtime":1596228865141,"results":"826","hashOfConfig":"497"},{"size":205,"mtime":1596228865141,"results":"827","hashOfConfig":"497"},{"size":287,"mtime":1596228865141,"results":"828","hashOfConfig":"497"},{"size":542,"mtime":1596228865141,"results":"829","hashOfConfig":"497"},{"size":9243,"mtime":1596228865141,"results":"830","hashOfConfig":"497"},{"size":286,"mtime":1596228865141,"results":"831","hashOfConfig":"497"},{"size":1178,"mtime":1596228865141,"results":"832","hashOfConfig":"497"},{"size":38686,"mtime":1597261808090,"results":"833","hashOfConfig":"497"},{"size":1740,"mtime":1596228865141,"results":"834","hashOfConfig":"497"},{"size":260,"mtime":1596228865141,"results":"835","hashOfConfig":"497"},{"size":439,"mtime":1596228865141,"results":"836","hashOfConfig":"497"},{"size":2568,"mtime":1596231902358,"results":"837","hashOfConfig":"497"},{"size":11082,"mtime":1597514290395,"results":"838","hashOfConfig":"497"},{"size":709,"mtime":1596228865141,"results":"839","hashOfConfig":"497"},{"size":122,"mtime":1596228865141,"results":"840","hashOfConfig":"497"},{"size":4077,"mtime":1596228865141,"results":"841","hashOfConfig":"497"},{"size":1044,"mtime":1596228865141,"results":"842","hashOfConfig":"497"},{"size":38,"mtime":1596228865141,"results":"843","hashOfConfig":"497"},{"size":42,"mtime":1596228865141,"results":"844","hashOfConfig":"497"},{"size":1397,"mtime":1596228865141,"results":"845","hashOfConfig":"497"},{"size":72,"mtime":1596228865141,"results":"846","hashOfConfig":"497"},{"size":434,"mtime":1596228865141,"results":"847","hashOfConfig":"497"},{"size":54,"mtime":1596228865141,"results":"848","hashOfConfig":"497"},{"size":148,"mtime":1596228865141,"results":"849","hashOfConfig":"497"},{"size":27,"mtime":1596228865141,"results":"850","hashOfConfig":"497"},{"size":228,"mtime":1596228865141,"results":"851","hashOfConfig":"497"},{"size":71,"mtime":1596228865141,"results":"852","hashOfConfig":"497"},{"size":78,"mtime":1596228865141,"results":"853","hashOfConfig":"497"},{"size":206,"mtime":1596228865141,"results":"854","hashOfConfig":"497"},{"size":37,"mtime":1596228865141,"results":"855","hashOfConfig":"497"},{"size":1749,"mtime":1596228865141,"results":"856","hashOfConfig":"497"},{"size":49,"mtime":1596228865141,"results":"857","hashOfConfig":"497"},{"size":1713,"mtime":1596228865141,"results":"858","hashOfConfig":"497"},{"size":480,"mtime":1596228865141,"results":"859","hashOfConfig":"497"},{"size":56,"mtime":1596228865141,"results":"860","hashOfConfig":"497"},{"size":153,"mtime":1596228865141,"results":"861","hashOfConfig":"497"},{"size":1262,"mtime":1596228865141,"results":"862","hashOfConfig":"497"},{"size":58,"mtime":1596228865141,"results":"863","hashOfConfig":"497"},{"size":592,"mtime":1596228865141,"results":"864","hashOfConfig":"497"},{"size":113,"mtime":1596228865141,"results":"865","hashOfConfig":"497"},{"size":27,"mtime":1597514290395,"results":"866","hashOfConfig":"497"},{"size":27,"mtime":1596228865141,"results":"867","hashOfConfig":"497"},{"size":40,"mtime":1596228865141,"results":"868","hashOfConfig":"497"},{"size":534,"mtime":1596228865141,"results":"869","hashOfConfig":"497"},{"size":163,"mtime":1596228865141,"results":"870","hashOfConfig":"497"},{"size":215,"mtime":1596228865141,"results":"871","hashOfConfig":"497"},{"size":838,"mtime":1596228865141,"results":"872","hashOfConfig":"497"},{"size":385,"mtime":1596228865141,"results":"873","hashOfConfig":"497"},{"size":23,"mtime":1596228865141,"results":"874","hashOfConfig":"497"},{"size":11616,"mtime":1596228865141,"results":"875","hashOfConfig":"497"},{"size":35,"mtime":1596228865141,"results":"876","hashOfConfig":"497"},{"size":51,"mtime":1596228865141,"results":"877","hashOfConfig":"497"},{"size":48,"mtime":1596228865141,"results":"878","hashOfConfig":"497"},{"size":35,"mtime":1596228865141,"results":"879","hashOfConfig":"497"},{"size":33,"mtime":1596228865141,"results":"880","hashOfConfig":"497"},{"size":1466,"mtime":1596229427366,"results":"881","hashOfConfig":"497"},{"size":31,"mtime":1596228865141,"results":"882","hashOfConfig":"497"},{"size":30,"mtime":1596228865141,"results":"883","hashOfConfig":"497"},{"size":256,"mtime":1596228865141,"results":"884","hashOfConfig":"497"},{"size":237,"mtime":1596228865141,"results":"885","hashOfConfig":"497"},{"size":88,"mtime":1596228865141,"results":"886","hashOfConfig":"497"},{"size":37,"mtime":1596228865141,"results":"887","hashOfConfig":"497"},{"size":40,"mtime":1596228865141,"results":"888","hashOfConfig":"497"},{"size":274,"mtime":1596228865141,"results":"889","hashOfConfig":"497"},{"size":25,"mtime":1596228865141,"results":"890","hashOfConfig":"497"},{"size":393,"mtime":1596228865141,"results":"891","hashOfConfig":"497"},{"size":28,"mtime":1596228865141,"results":"892","hashOfConfig":"497"},{"size":2965,"mtime":1596228865145,"results":"893","hashOfConfig":"497"},{"size":261,"mtime":1596228865145,"results":"894","hashOfConfig":"497"},{"size":1233,"mtime":1596228865145,"results":"895","hashOfConfig":"497"},{"size":43,"mtime":1596228865145,"results":"896","hashOfConfig":"497"},{"size":29,"mtime":1596228865145,"results":"897","hashOfConfig":"497"},{"size":199,"mtime":1596229427366,"results":"898","hashOfConfig":"497"},{"size":338,"mtime":1596228865145,"results":"899","hashOfConfig":"497"},{"size":3371,"mtime":1596228865145,"results":"900","hashOfConfig":"497"},{"size":72,"mtime":1596228865145,"results":"901","hashOfConfig":"497"},{"size":2441,"mtime":1596228865145,"results":"902","hashOfConfig":"497"},{"size":266,"mtime":1596228865145,"results":"903","hashOfConfig":"497"},{"size":70,"mtime":1596228865145,"results":"904","hashOfConfig":"497"},{"size":453,"mtime":1596228865145,"results":"905","hashOfConfig":"497"},{"size":1540,"mtime":1596228865145,"results":"906","hashOfConfig":"497"},{"size":345,"mtime":1596228865145,"results":"907","hashOfConfig":"497"},{"size":527,"mtime":1596228865145,"results":"908","hashOfConfig":"497"},{"size":38,"mtime":1596228865145,"results":"909","hashOfConfig":"497"},{"size":404,"mtime":1596228865145,"results":"910","hashOfConfig":"497"},{"size":66,"mtime":1596228865145,"results":"911","hashOfConfig":"497"},{"size":3866,"mtime":1596228865145,"results":"912","hashOfConfig":"497"},{"size":178,"mtime":1596228865145,"results":"913","hashOfConfig":"497"},{"size":176,"mtime":1596228865145,"results":"914","hashOfConfig":"497"},{"size":89,"mtime":1596228865145,"results":"915","hashOfConfig":"497"},{"size":91,"mtime":1596228865145,"results":"916","hashOfConfig":"497"},{"size":532,"mtime":1596228865145,"results":"917","hashOfConfig":"497"},{"size":63,"mtime":1596228865145,"results":"918","hashOfConfig":"497"},{"size":50,"mtime":1596228865145,"results":"919","hashOfConfig":"497"},{"size":142,"mtime":1596228865145,"results":"920","hashOfConfig":"497"},{"size":1750,"mtime":1596228865145,"results":"921","hashOfConfig":"497"},{"size":136,"mtime":1596228865145,"results":"922","hashOfConfig":"497"},{"size":2250,"mtime":1596228865145,"results":"923","hashOfConfig":"497"},{"size":303,"mtime":1596228865145,"results":"924","hashOfConfig":"497"},{"size":13200,"mtime":1596228865145,"results":"925","hashOfConfig":"497"},{"size":497,"mtime":1596228865145,"results":"926","hashOfConfig":"497"},{"size":1992,"mtime":1596228865145,"results":"927","hashOfConfig":"497"},{"size":2317,"mtime":1596228865145,"results":"928","hashOfConfig":"497"},{"size":986,"mtime":1596228865145,"results":"929","hashOfConfig":"497"},{"size":48,"mtime":1596228865145,"results":"930","hashOfConfig":"497"},{"size":90,"mtime":1596228865145,"results":"931","hashOfConfig":"497"},{"size":281,"mtime":1596228865145,"results":"932","hashOfConfig":"497"},{"size":6713,"mtime":1596228865145,"results":"933","hashOfConfig":"497"},{"size":89,"mtime":1596228865145,"results":"934","hashOfConfig":"497"},{"size":1920,"mtime":1596228865145,"results":"935","hashOfConfig":"497"},{"size":2301,"mtime":1596228865145,"results":"936","hashOfConfig":"497"},{"size":2307,"mtime":1596228865145,"results":"937","hashOfConfig":"497"},{"size":4384,"mtime":1596228865145,"results":"938","hashOfConfig":"497"},{"size":141,"mtime":1596228865145,"results":"939","hashOfConfig":"497"},{"size":405,"mtime":1596228865145,"results":"940","hashOfConfig":"497"},{"size":10164,"mtime":1596228865145,"results":"941","hashOfConfig":"497"},{"size":153,"mtime":1596228865145,"results":"942","hashOfConfig":"497"},{"size":186,"mtime":1596228865145,"results":"943","hashOfConfig":"497"},{"size":3133,"mtime":1596228865145,"results":"944","hashOfConfig":"497"},{"size":132,"mtime":1596228865145,"results":"945","hashOfConfig":"497"},{"size":778,"mtime":1596228865145,"results":"946","hashOfConfig":"497"},{"size":633,"mtime":1596228865145,"results":"947","hashOfConfig":"497"},{"size":77,"mtime":1596228865145,"results":"948","hashOfConfig":"497"},{"size":547,"mtime":1596228865145,"results":"949","hashOfConfig":"497"},{"size":34,"mtime":1596228865145,"results":"950","hashOfConfig":"497"},{"size":400,"mtime":1596228865145,"results":"951","hashOfConfig":"497"},{"size":1478,"mtime":1596228865145,"results":"952","hashOfConfig":"497"},{"size":91,"mtime":1596228865145,"results":"953","hashOfConfig":"497"},{"size":75,"mtime":1596228865145,"results":"954","hashOfConfig":"497"},{"size":34,"mtime":1596228865145,"results":"955","hashOfConfig":"497"},{"size":672,"mtime":1596228865145,"results":"956","hashOfConfig":"497"},{"size":67,"mtime":1596142287416,"results":"957","hashOfConfig":"958"},{"size":81,"mtime":1596142634503,"results":"959","hashOfConfig":"958"},{"size":348,"mtime":1596142287416,"results":"960","hashOfConfig":"958"},{"size":8741,"mtime":1596142287416,"results":"961","hashOfConfig":"958"},{"size":1986,"mtime":1596142287416,"results":"962","hashOfConfig":"958"},{"size":799,"mtime":1596142287416,"results":"963","hashOfConfig":"958"},{"size":38,"mtime":1596228865145,"results":"964","hashOfConfig":"497"},{"size":560,"mtime":1596228865145,"results":"965","hashOfConfig":"497"},{"size":718,"mtime":1596228865145,"results":"966","hashOfConfig":"497"},{"size":3088,"mtime":1596228865145,"results":"967","hashOfConfig":"497"},{"size":5878,"mtime":1596228865145,"results":"968","hashOfConfig":"497"},{"size":2876,"mtime":1596228865145,"results":"969","hashOfConfig":"497"},{"size":213,"mtime":1596228865145,"results":"970","hashOfConfig":"497"},{"size":2246,"mtime":1596228865145,"results":"971","hashOfConfig":"497"},{"size":473,"mtime":1596228865145,"results":"972","hashOfConfig":"497"},{"size":575,"mtime":1596228865145,"results":"973","hashOfConfig":"497"},{"size":462,"mtime":1596228865145,"results":"974","hashOfConfig":"497"},{"size":3985,"mtime":1596228865145,"results":"975","hashOfConfig":"497"},{"size":137,"mtime":1596228865145,"results":"976","hashOfConfig":"497"},{"size":1042,"mtime":1596228865145,"results":"977","hashOfConfig":"497"},{"size":564,"mtime":1596228865145,"results":"978","hashOfConfig":"497"},{"size":1175,"mtime":1596228865145,"results":"979","hashOfConfig":"497"},{"size":4574,"mtime":1597264097800,"results":"980","hashOfConfig":"497"},{"size":38,"mtime":1596229427366,"results":"981","hashOfConfig":"497"},{"size":37,"mtime":1596229427366,"results":"982","hashOfConfig":"497"},{"size":743,"mtime":1596233084933,"results":"983","hashOfConfig":"497"},{"filePath":"984","messages":"985","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"5wmogl",{"filePath":"986","messages":"987","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"988","messages":"989","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"990","messages":"991","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xi6z5p",{"filePath":"994","messages":"995","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1006"},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043"},{"filePath":"1044","messages":"1045","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1089"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1098","messages":"1099","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1116"},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1123","messages":"1124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1142","messages":"1143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156"},{"filePath":"1157","messages":"1158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159"},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1166"},{"filePath":"1167","messages":"1168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1169","messages":"1170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1171","messages":"1172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1173","messages":"1174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1175","messages":"1176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1177","messages":"1178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1179","messages":"1180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1187"},{"filePath":"1188","messages":"1189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1194"},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1197"},{"filePath":"1198","messages":"1199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1200","messages":"1201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1204"},{"filePath":"1205","messages":"1206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1207","messages":"1208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1209","messages":"1210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1211"},{"filePath":"1212","messages":"1213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1214","messages":"1215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1216","messages":"1217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1218","messages":"1219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1220","messages":"1221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1224","messages":"1225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1226","messages":"1227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1230","messages":"1231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1232","messages":"1233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1234","messages":"1235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1236","messages":"1237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1238","messages":"1239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1242","messages":"1243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1244","messages":"1245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1246","messages":"1247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1248","messages":"1249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1250","messages":"1251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1252","messages":"1253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1254","messages":"1255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1256"},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1263","messages":"1264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1265","messages":"1266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1269","messages":"1270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1271","messages":"1272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1273","messages":"1274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1275","messages":"1276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1277","messages":"1278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1279","messages":"1280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1281","messages":"1282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1283","messages":"1284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1285","messages":"1286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1287","messages":"1288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1289","messages":"1290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1291","messages":"1292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1293","messages":"1294","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1295"},{"filePath":"1296","messages":"1297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1298"},{"filePath":"1299","messages":"1300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1301","messages":"1302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1303","messages":"1304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1305","messages":"1306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1307","messages":"1308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1309","messages":"1310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1311","messages":"1312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1313","messages":"1314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1315"},{"filePath":"1316","messages":"1317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1320","messages":"1321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1322","messages":"1323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1326","messages":"1327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1328"},{"filePath":"1329","messages":"1330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1331","messages":"1332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1333","messages":"1334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1335"},{"filePath":"1336","messages":"1337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1338","messages":"1339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1340","messages":"1341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1342","messages":"1343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1344","messages":"1345","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1346","messages":"1347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1348"},{"filePath":"1349","messages":"1350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1351","messages":"1352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1355"},{"filePath":"1356","messages":"1357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1358","messages":"1359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1360","messages":"1361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1362","messages":"1363","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1364"},{"filePath":"1365","messages":"1366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1367","messages":"1368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1369","messages":"1370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1371","messages":"1372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1373"},{"filePath":"1374","messages":"1375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1376","messages":"1377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1378"},{"filePath":"1379","messages":"1380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1381","messages":"1382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1383","messages":"1384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1385","messages":"1386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1387","messages":"1388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1389","messages":"1390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1391","messages":"1392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1393","messages":"1394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1395","messages":"1396","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1397"},{"filePath":"1398","messages":"1399","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1400"},{"filePath":"1401","messages":"1402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1403","messages":"1404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1405","messages":"1406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1407","messages":"1408","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1409"},{"filePath":"1410","messages":"1411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1412","messages":"1413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1414","messages":"1415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1416","messages":"1417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1418","messages":"1419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1420","messages":"1421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1422","messages":"1423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1424","messages":"1425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1426"},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1429","messages":"1430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1431","messages":"1432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1433","messages":"1434","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1435","messages":"1436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1437","messages":"1438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1439","messages":"1440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1441","messages":"1442","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1443"},{"filePath":"1444","messages":"1445","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1446"},{"filePath":"1447","messages":"1448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1449","messages":"1450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1451","messages":"1452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1453","messages":"1454","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1455"},{"filePath":"1456","messages":"1457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1458","messages":"1459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1460","messages":"1461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1462","messages":"1463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1464","messages":"1465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1466","messages":"1467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1468","messages":"1469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1470","messages":"1471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1472","messages":"1473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1474","messages":"1475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1476","messages":"1477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1478","messages":"1479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1480","messages":"1481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1482","messages":"1483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1484"},{"filePath":"1485","messages":"1486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1487","messages":"1488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1489","messages":"1490","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1491"},{"filePath":"1492","messages":"1493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1494"},{"filePath":"1495","messages":"1496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1497","messages":"1498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1499","messages":"1500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1501","messages":"1502","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1503"},{"filePath":"1504","messages":"1505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1506","messages":"1507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1508","messages":"1509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1510","messages":"1511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1512","messages":"1513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1514","messages":"1515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1516","messages":"1517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1518","messages":"1519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1520","messages":"1521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1522","messages":"1523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1524","messages":"1525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1526","messages":"1527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1528","messages":"1529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1530","messages":"1531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1532","messages":"1533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1534","messages":"1535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1536","messages":"1537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1538","messages":"1539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1540","messages":"1541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1542","messages":"1543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1544","messages":"1545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1546","messages":"1547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1548","messages":"1549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1550","messages":"1551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1552","messages":"1553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1554","messages":"1555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1556","messages":"1557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1558","messages":"1559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1560","messages":"1561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1562","messages":"1563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1564","messages":"1565","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1566"},{"filePath":"1567","messages":"1568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1569","messages":"1570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1571","messages":"1572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1573","messages":"1574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1575","messages":"1576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1577","messages":"1578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1579","messages":"1580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1581","messages":"1582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1583","messages":"1584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1585","messages":"1586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1587","messages":"1588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1589","messages":"1590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1591","messages":"1592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1593","messages":"1594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1595","messages":"1596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1597","messages":"1598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1599","messages":"1600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1601","messages":"1602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1603","messages":"1604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1605","messages":"1606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1607","messages":"1608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1609","messages":"1610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1611","messages":"1612","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1613"},{"filePath":"1614","messages":"1615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1616","messages":"1617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1618","messages":"1619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1620","messages":"1621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1622","messages":"1623","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1624","messages":"1625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1626","messages":"1627","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1628","messages":"1629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1630","messages":"1631","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1632","messages":"1633","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1634","messages":"1635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1636","messages":"1637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1638","messages":"1639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1640","messages":"1641","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1642"},{"filePath":"1643","messages":"1644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1645","messages":"1646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1647","messages":"1648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1649","messages":"1650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1651"},{"filePath":"1652","messages":"1653","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1654"},{"filePath":"1655","messages":"1656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1657","messages":"1658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1659","messages":"1660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1661","messages":"1662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1663","messages":"1664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1665","messages":"1666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1667","messages":"1668","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1669","messages":"1670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1671","messages":"1672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1673","messages":"1674","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1675","messages":"1676","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1677"},{"filePath":"1678","messages":"1679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1680","messages":"1681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1682","messages":"1683","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1684"},{"filePath":"1685","messages":"1686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1687","messages":"1688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1689","messages":"1690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1691","messages":"1692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1693","messages":"1694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1695","messages":"1696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1697","messages":"1698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1699","messages":"1700","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1701"},{"filePath":"1702","messages":"1703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1704","messages":"1705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1706","messages":"1707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1708","messages":"1709","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1710"},{"filePath":"1711","messages":"1712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1713","messages":"1714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1715","messages":"1716","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1717"},{"filePath":"1718","messages":"1719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1720","messages":"1721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1722","messages":"1723","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1724"},{"filePath":"1725","messages":"1726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1727","messages":"1728","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1729","messages":"1730","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1731"},{"filePath":"1732","messages":"1733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1734","messages":"1735","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1736"},{"filePath":"1737","messages":"1738","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1739"},{"filePath":"1740","messages":"1741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1742","messages":"1743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1744","messages":"1745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1746","messages":"1747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1748","messages":"1749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1750","messages":"1751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1752","messages":"1753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1754","messages":"1755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1756","messages":"1757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1758","messages":"1759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1760","messages":"1761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1762","messages":"1763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1764","messages":"1765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1766","messages":"1767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1768","messages":"1769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1770","messages":"1771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1772","messages":"1773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1774","messages":"1775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1776","messages":"1777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1778","messages":"1779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1780","messages":"1781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1782","messages":"1783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1784","messages":"1785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1786","messages":"1787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1788","messages":"1789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1790","messages":"1791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1792","messages":"1793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1794","messages":"1795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1796","messages":"1797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1798","messages":"1799","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1800"},{"filePath":"1801","messages":"1802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1803","messages":"1804","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1805","messages":"1806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1807","messages":"1808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1809","messages":"1810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1811","messages":"1812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1815","messages":"1816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1817","messages":"1818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1819","messages":"1820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1821","messages":"1822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1823","messages":"1824","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1825"},{"filePath":"1826","messages":"1827","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1828"},{"filePath":"1829","messages":"1830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1831","messages":"1832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1833","messages":"1834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1835","messages":"1836","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1837"},{"filePath":"1838","messages":"1839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1840","messages":"1841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1842","messages":"1843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1844","messages":"1845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1846","messages":"1847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1848","messages":"1849","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1850"},{"filePath":"1851","messages":"1852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1853","messages":"1854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1855","messages":"1856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1857","messages":"1858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1859","messages":"1860","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1861"},{"filePath":"1862","messages":"1863","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1864"},{"filePath":"1865","messages":"1866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1867","messages":"1868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1869","messages":"1870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1871","messages":"1872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1873","messages":"1874","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1875"},{"filePath":"1876","messages":"1877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1878","messages":"1879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1880","messages":"1881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1882","messages":"1883","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1884","messages":"1885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1886","messages":"1887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1888","messages":"1889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1890","messages":"1891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1892","messages":"1893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1894","messages":"1895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1896","messages":"1897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1898","messages":"1899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1900","messages":"1901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1902","messages":"1903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1904","messages":"1905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1906","messages":"1907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1908","messages":"1909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1910","messages":"1911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1912","messages":"1913","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1914"},{"filePath":"1915","messages":"1916","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1917"},{"filePath":"1918","messages":"1919","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1920"},{"filePath":"1921","messages":"1922","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1923"},{"filePath":"1924","messages":"1925","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1926"},{"filePath":"1927","messages":"1928","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1929","messages":"1930","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1931","messages":"1932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1933","messages":"1934","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1935"},{"filePath":"1936","messages":"1937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1938","messages":"1939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1940","messages":"1941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1942","messages":"1943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1944","messages":"1945","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1946"},{"filePath":"1947","messages":"1948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1949","messages":"1950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1951","messages":"1952","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1953"},{"filePath":"1954","messages":"1955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1956","messages":"1957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1958","messages":"1959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1960","messages":"1961","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1962","messages":"1963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1964","messages":"1965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1966","messages":"1967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1968","messages":"1969","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1970","messages":"1971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1972","messages":"1973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1974","messages":"1975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1976","messages":"1977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1978","messages":"1979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1980","messages":"1981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1982","messages":"1983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1984","messages":"1985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"slcij1",{"filePath":"1986","messages":"1987","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1988","messages":"1989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1990","messages":"1991","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1992"},{"filePath":"1993","messages":"1994","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1995"},{"filePath":"1996","messages":"1997","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1998"},{"filePath":"1999","messages":"2000","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2001","messages":"2002","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2003","messages":"2004","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2005","messages":"2006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2007","messages":"2008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2009","messages":"2010","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2011"},{"filePath":"2012","messages":"2013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2014","messages":"2015","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2016"},{"filePath":"2017","messages":"2018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2019","messages":"2020","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2021"},{"filePath":"2022","messages":"2023","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2024","messages":"2025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2026","messages":"2027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2028","messages":"2029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2030","messages":"2031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2032","messages":"2033","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2034"},{"filePath":"2035","messages":"2036","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2037","messages":"2038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2039","messages":"2040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2041","messages":"2042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/protocol/docs/assets/js/main.js",["2043"],"/home/paul/projects/protocol/docs/assets/js/search.js",["2044"],"/home/paul/projects/protocol/module-build/index.js",["2045"],"/home/paul/projects/protocol/module-build/module-build.js",["2046"],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/protocol/src/backog-classes/channel-authority-class/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts",["2047","2048","2049","2050","2051","2052","2053"],"import { ASYNC_QUEUE_BASE_CLASS_OPTIONS } from './async-queue-class-base.const';\nimport { extend } from '../../../utils/common-utils/common-utils-objects';\nimport {\n  TAsyncQueueBaseClassPromiseProviderPending,\n  TAsyncQueueBaseClassPromiseProvider,\n} from './async-queue-class-base.types';\nimport {\n  TAsyncQueueBaseClass,\n  IAsyncQueueBaseClassOptions,\n} from './async-queue-class-base.types';\nimport { getRun } from './async-queue-class-base.utils';\nimport { delay } from '../../../utils/common-utils/common-utils-timer';\nimport { TAsyncQueueBaseClassPromiseProviderBatch } from './async-queue-class-base.types';\n\nexport class AsyncQueueClassBase extends TAsyncQueueBaseClass {\n  protected queue: TAsyncQueueBaseClassPromiseProvider<any>[] = [];\n\n  protected batch: Promise<any[]> | void = undefined;\n\n  protected runPromiseProvider?: ReturnType<typeof getRun>;\n\n  constructor(options?: Partial<IAsyncQueueBaseClassOptions>) {\n    super(\n      extend(\n        options || {},\n        ASYNC_QUEUE_BASE_CLASS_OPTIONS\n      ) as IAsyncQueueBaseClassOptions\n    );\n    this.runPromiseProvider = getRun(this.options.promiseTimeout);\n  }\n\n  public do = async <T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | (T extends any[] ? Array<T | Error> : never)> => {\n    return new Promise((res) => {\n      this.queue.push(() => {\n        return this.createPromise<T>(promiseProvider)\n          .then(res)\n          .catch(res);\n      });\n      this.start();\n    });\n  };\n\n  protected async createBatch(): Promise<any[]> {\n    if (!this.queue.length) {\n      return [];\n    }\n\n    const { options } = this;\n    const promisePendingBatch = this.queue.splice(0, options.batchSize);\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    return Promise.all(\n      promisePendingBatch.map(this.runPromiseProvider)\n    ).catch((err) => new Array(promisePendingBatch.length).fill(err)); // fill with an error if the batch was rejected\n  }\n\n  protected start = async () => {\n    if (this.batch) {\n      return;\n    }\n    if (!this.queue.length) {\n      return;\n    }\n    this.batch = this.createBatch();\n    try {\n      await this.batch;\n    } catch (err) {\n      console.error('AsyncQueueClassBase::error');\n      console.error(err);\n    }\n\n    const { delayMs } = this.options;\n\n    await delay(delayMs);\n    this.batch = undefined;\n    this.start();\n  };\n\n  protected isBatch<T>(\n    promiseProvider: any\n  ): promiseProvider is TAsyncQueueBaseClassPromiseProviderBatch<T> {\n    return promiseProvider instanceof Array;\n  }\n  protected createPromise<T>(promiseProvider: any): Promise<T | Error>;\n  protected createPromise<T>(promiseProvider: any[]): Promise<Array<T | Error>>;\n  protected createPromise<T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<Array<T | Error> | T | Error> {\n    let result;\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    if (this.isBatch<T>(promiseProvider)) {\n      result = Promise.all(promiseProvider.map(this.runPromiseProvider));\n    } else {\n      result = this.runPromiseProvider(promiseProvider);\n    }\n    this.start();\n    return result;\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts",["2054","2055"],"export interface IAsyncQueueBaseClassOptions {\n  /**\n   * a number of promises in one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  batchSize: number;\n  /**\n   * timeout for a one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  promiseTimeout: number;\n  /**\n   * a delay between executing of a two batches\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  delayMs: number;\n}\n\nexport type TAsyncQueueBaseClassPromiseProvider<T> = () => Promise<T>;\n\nexport type TAsyncQueueBaseClassPromiseProviderBatch<\n  T\n> = TAsyncQueueBaseClassPromiseProvider<T>[];\n\nexport type TAsyncQueueBaseClassPromiseProviderPending<T> =\n  | TAsyncQueueBaseClassPromiseProvider<T>\n  | TAsyncQueueBaseClassPromiseProviderBatch<T>;\n\nexport interface IAsyncQueueBaseClass {\n  /**\n   * resolve promises provided in queue\n   *\n   * @template T\n   * @param {Promise<T>[]} pending\n   * @returns {(Promise<T | Error>)}\n   * @memberof IAsyncQueueBaseClass\n   */\n  do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderBatch<T>\n  ): Promise<Array<T | Error> | Error>;\n  do<T>(pending: TAsyncQueueBaseClassPromiseProvider<T>): Promise<T | Error>;\n}\n\nexport abstract class TAsyncQueueBaseClass implements IAsyncQueueBaseClass {\n  /**\n   * queue of promises pending\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract queue: TAsyncQueueBaseClassPromiseProvider<any>[];\n\n  /**\n   * the currently executing batch of a promises\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract batch: Promise<any[]> | void;\n\n  constructor(protected options: IAsyncQueueBaseClassOptions) {}\n\n  public abstract async do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | Array<T | Error>>;\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts",["2056"],"import { TAsyncQueueBaseClassPromiseProvider } from './async-queue-class-base.types';\nimport { timeout } from '../../../utils/common-utils/common-utils-timer';\n\nconst returnError = (res: any) => {\n  return res instanceof Error ? res : new Error(String(res));\n};\n\nexport const getRun = (timeoutMs: number) => <T>(\n  promiseProvider: TAsyncQueueBaseClassPromiseProvider<T>\n): Promise<T | Error> => {\n  try {\n    return Promise.race([promiseProvider(), timeout(timeoutMs)]).catch(\n      returnError\n    );\n  } catch (err) {\n    return Promise.resolve(err);\n  }\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/async-queue-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["2057","2058","2059"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/projects/protocol/src/classes/basic-classes/event-emitter-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["2060"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["2061"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\nimport { getFilenameByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected getHeader(name: string) {\n    return this.response.headers.get(name);\n  }\n\n  protected getFileNameByResponse(extension?: string | null) {\n    const contentDisposition = this.getHeader('content-disposition');\n    let fileName = '' as string | undefined;\n\n    if (contentDisposition) {\n      const fileNameMatch = /filename=\"(.+)\"/.exec(contentDisposition);\n\n      if (fileNameMatch?.length === 2) fileName = fileNameMatch[1];\n    }\n    if (!fileName) {\n      fileName = getFilenameByUrl(this.response.url);\n    }\n\n    if (extension) {\n      return fileName && fileName.endsWith(extension)\n        ? fileName\n        : `${fileName}.${extension}`;\n    }\n    return fileName;\n  }\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File(\n          [result],\n          this.getFileNameByResponse(extension) || 'unknown',\n          {\n            type: mimeType || undefined,\n          }\n        );\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["2062","2063"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["2064","2065"],"import validator from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!validator.isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!validator.isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!validator.isURL(url)) {\n      this.baseUrl = '';\n      try {\n        new URL(url); // maybe it's data url\n      } catch (err) {\n        return new Error('The url is not valid');\n      }\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["2066"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  if (urlTrimmed.startsWith('data:')) {\n    return urlTrimmed;\n  }\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/projects/protocol/src/classes/basic-classes/http-request-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/index.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["2067","2068"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\nimport { ISensitiveDataSessionStorage } from 'classes/sensitive-data-session-storage/sensitive-data-session-storage.types';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport type TCentralAuthorityUserLogin = string;\n\nexport type TCentralAuthorityUserPassword = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: TCentralAuthorityUserLogin;\n  password?: TCentralAuthorityUserPassword;\n  session?: ISensitiveDataSessionStorage;\n}\n\nexport type TCentralAuthorityUserAuthCredentialsWithPwd = Required<\n  Pick<ICentralAuthorityUserAuthCredentials, 'login' | 'password'>\n>;\n\n/**\n * this credentials used to authorize the user on a central authority\n * provider service and getting access to a local data encrypted.\n * The secret login property used to encrypt some part of a local data\n * and may be empty. If it's empty then user identity value will be used\n * for encryption. But it may take no effect cause it is public value\n * in most cases.\n */\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME]?: string;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor() {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-types/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["2069"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["2070"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["2071"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["2072","2073","2074"],"import { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from './../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const {\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authorityProviderURI,\n  } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["2075"],"import {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n  ICAIdentityCommonInstance,\n  TUserIdentityVersion,\n  TCAUserIdentityRawTypes,\n} from './central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from '../central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentitySilent } from '../central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { parseIdentity } from './central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers';\nimport { serializeIdentity } from './central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n  CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER,\n} from './central-authority-class-user-identity.const';\nimport { CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME } from '../central-authority-class-const/central-authority-class-const';\n\nexport class CentralAuthorityIdentity implements ICAIdentityCommonInstance {\n  protected _userIdentitySerialized?: Error | TCentralAuthorityUserIdentity;\n\n  protected _userIdentityParsed?: Error | ICAUserUniqueIdentifierDescription;\n\n  public isValid?: boolean;\n\n  constructor(protected _userIdentity: TCAUserIdentityRawTypes) {\n    if (_userIdentity instanceof CentralAuthorityIdentity) {\n      return _userIdentity;\n    }\n    if (!_userIdentity) {\n      return;\n    }\n\n    let identity = _userIdentity;\n\n    if (typeof _userIdentity === 'object') {\n      //check may be it is a crypto credentials object\n      const identityVal = ((_userIdentity as unknown) as any)[\n        CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME\n      ];\n\n      if (typeof identityVal === 'string') {\n        identity = identityVal;\n      }\n    }\n    if (validateUserIdentitySilent(identity)) {\n      this.parseUserIdentity(identity);\n    } else {\n      const userIdentityDescription = this.extendDescriptionWithVersion(\n        identity as ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n      );\n\n      this.serializeUserIdentityDescription(userIdentityDescription);\n    }\n  }\n\n  protected extendDescriptionWithVersion(\n    _userIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ): ICAUserUniqueIdentifierDescription {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = _userIdentityDescription;\n\n    if (!version) {\n      // extend the description with the\n      // current version\n      const result = {\n        ..._userIdentityDescription,\n        [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSION_CURRENT,\n      };\n\n      this._userIdentity = result;\n      return result as ICAUserUniqueIdentifierDescription;\n    }\n    return _userIdentityDescription as ICAUserUniqueIdentifierDescription;\n  }\n\n  public get identityDescription(): ICAUserUniqueIdentifierDescription | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentityParsed } = this;\n\n    if (!_userIdentityParsed) {\n      return new Error('Failed to parse the user identity');\n    }\n    return _userIdentityParsed;\n  }\n\n  public get identityDescritptionSerialized():\n    | TCentralAuthorityUserIdentity\n    | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentitySerialized } = this;\n\n    if (!_userIdentitySerialized) {\n      return new Error('Failed to serialize the user identity');\n    }\n    return _userIdentitySerialized;\n  }\n\n  /**\n   * uniquely identifies the user\n   */\n  public get id(): string | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { authorityProviderURI, userUniqueIdentifier } = this\n      .identityDescription as ICAUserUniqueIdentifierDescription;\n\n    return `${authorityProviderURI}${CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER}${userUniqueIdentifier}`;\n  }\n\n  public get version(): TUserIdentityVersion | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    return (((this.identityDescription as ICAUserUniqueIdentifierDescription)\n      .version ||\n      CA_USER_IDENTITY_VERSION_CURRENT) as unknown) as TUserIdentityVersion;\n  }\n\n  public toString(): TCentralAuthorityUserIdentity {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return '';\n    }\n    return this.identityDescritptionSerialized as string;\n  }\n\n  protected checkUserIdentityDescriptionIsValid = (): Error | void => {\n    const { _userIdentitySerialized, isValid, _userIdentityParsed } = this;\n    let err: Error | void;\n\n    if (!isValid) {\n      err = new Error('The identity is not valid');\n    }\n    if (!_userIdentityParsed) {\n      err = new Error('There is no user identity parsed');\n    }\n    if (_userIdentityParsed instanceof Error) {\n      err = _userIdentityParsed;\n    }\n    if (!_userIdentitySerialized) {\n      err = new Error('The identity description serialized is not defined');\n    }\n    if (_userIdentitySerialized instanceof Error) {\n      err = _userIdentitySerialized;\n    }\n    if (err instanceof Error) {\n      console.error(err);\n      return err;\n    }\n  };\n\n  protected setIdentityIsValid(): void {\n    if (this.isValid !== false) {\n      this.isValid = true;\n    }\n  }\n\n  protected parseUserIdentity(\n    userIdentity: TCentralAuthorityUserIdentity\n  ): void {\n    if (userIdentity) {\n      const parsedUserIdentity = parseIdentity(userIdentity);\n      if (parsedUserIdentity instanceof Error) {\n        console.error(parsedUserIdentity);\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = new Error(\n          'Failed to parse the user identity'\n        );\n      } else {\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = userIdentity;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identity serialized is not defined');\n\n      this._userIdentityParsed = err;\n      this._userIdentitySerialized = err;\n    }\n    this.isValid = false;\n  }\n\n  protected serializeUserIdentityDescription(\n    userIdentityDescription: ICAUserUniqueIdentifierDescription\n  ) {\n    if (userIdentityDescription) {\n      const serializedDescription = serializeIdentity(userIdentityDescription);\n\n      if (serializedDescription instanceof Error) {\n        this._userIdentityParsed = new Error(\n          'Failed to serialize the user identity description'\n        );\n        this._userIdentitySerialized = serializedDescription;\n      } else {\n        this._userIdentityParsed = userIdentityDescription;\n        this._userIdentitySerialized = serializedDescription;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identifier description is not defined');\n\n      this._userIdentitySerialized = err;\n      this._userIdentityParsed = err;\n    }\n    this.isValid = false;\n  }\n}\n\nexport default CentralAuthorityIdentity;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["2076","2077","2078","2079"],"import firebase from 'firebase';\nimport 'firebase/auth';\nimport memoize from 'lodash.memoize';\nimport CAConnectionWithFirebaseBase from '../central-authority-connection-firebase-base/central-authority-connection-firebase-base';\nimport {\n  ICAConnection,\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { getVersionOfCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_USER_IDENTITY_VERSIONS,\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentityVersion } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase.types.configuration';\nimport { CA_CONNECTION_STATUS } from '../../central-authority-connections-const/central-authority-connections-const';\n\n/**\n *\n * This is the class realized connection with the Firebase.\n * It allows to sign up and authorize on it, set a crypto credentials\n * for the user and read credentials for another users.\n * The versions of a connections to the Firebase must\n * extends this class. This implementation is compilant\n * to the V1 and V2 of the user identity.\n *\n * @export\n * @class CAConnectionWithFirebase\n * @implements {ICAConnection}\n */\nexport class CAConnectionWithFirebaseImplementation\n  extends CAConnectionWithFirebaseBase\n  implements ICAConnection {\n  public get cryptoCredentials():\n    | TCentralAuthorityUserCryptoCredentials\n    | undefined {\n    const { valueofCredentialsSignUpOnAuthorizedSuccess } = this;\n\n    if (valueofCredentialsSignUpOnAuthorizedSuccess) {\n      const { cryptoCredentials } = valueofCredentialsSignUpOnAuthorizedSuccess;\n\n      return cryptoCredentials;\n    }\n  }\n\n  public get authProviderURL() {\n    const { databaseURL } = this;\n\n    return databaseURL instanceof Error ? undefined : databaseURL;\n  }\n\n  /**\n   * the current status of the connection\n   * to the Firebase remote database\n   *\n   * @readonly\n   * @type {CA_CONNECTION_STATUS}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public get status(): CA_CONNECTION_STATUS {\n    const { isConnected, isAuthorized, isAnonymousely } = this;\n\n    if (!isConnected) {\n      return CA_CONNECTION_STATUS.DISCONNECTED;\n    }\n    if (isAuthorized) {\n      return CA_CONNECTION_STATUS.AUTHORIZED;\n    }\n    if (isAnonymousely) {\n      return CA_CONNECTION_STATUS.CONNECTED;\n    }\n    return CA_CONNECTION_STATUS.DISCONNECTED;\n  }\n\n  /**\n   * whether the user is connected anonymousely\n   * or not. User must be authorized or connected\n   * anonymousely\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected isAnonymousely = false;\n\n  protected userLogin?: string;\n\n  /**\n   * list with identity versions supported by the connection\n   *\n   * @type {Array<TUserIdentityVersion>}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected readonly supportedVersions: Array<TUserIdentityVersion> = [\n    CA_USER_IDENTITY_VERSIONS['01'],\n    CA_USER_IDENTITY_VERSIONS['02'],\n  ];\n\n  /**\n   * checks whether the identity version\n   * is supported by the connection\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public isVersionSupported = memoize(\n    (version: TUserIdentityVersion): boolean =>\n      this.supportedVersions.includes(version)\n  );\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   * To read credentials of another user authorization is not\n   * necessary.\n   * Connection will be established in the anonymous mode\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase\n  ): Promise<boolean | Error> {\n    // if there is an active apps exists then it is necessary\n    // to provide the app name, elswere the Firebase will throw\n    // an error.\n    const appName = firebase.apps.length\n      ? configuration.databaseURL\n      : undefined;\n    const resultConnection = await super.connect(configuration, appName);\n\n    if (resultConnection instanceof Error) {\n      return resultConnection;\n    }\n    return true;\n  }\n\n  public async signInAnonymousely(): Promise<Error | void> {\n    try {\n      // may be authentificated with session\n      //await this.signInWithSessionPersisted();\n      const connectAnonymouselyResult = await this.app\n        .auth()\n        .signInAnonymously();\n      if (connectAnonymouselyResult instanceof Error) {\n        return connectAnonymouselyResult;\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect anonymousely');\n    }\n\n    const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n    if (connectWithStorageResult instanceof Error) {\n      console.error(connectWithStorageResult);\n      return new Error('Failed to connect to the credentials storage');\n    }\n    this.setIsAnonymousely();\n  }\n\n  /**\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login/email/uuid.\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const { status } = this;\n\n    if (status !== CA_CONNECTION_STATUS.DISCONNECTED) {\n      const { connectionWithCredentialsStorage } = this;\n\n      return connectionWithCredentialsStorage!.getUserCredentials(userId);\n    }\n    return new Error('Not connected to the Firebase');\n  }\n\n  /**\n   * @param {ICAConnectionSignUpCredentials} firebaseCredentials\n   * @param firebaseCredentials.login - there must be an email to authorize with a Firebase account\n   * @param firebaseCredentials.password - password used for encrypt a sensitive data and authorize\n   * in the Firebase account\n   * @param profile - if provided then the user profile will be set in firebase\n   */\n  public async authorize(\n    firebaseCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return this.onAuthorizationFailed(isConnected);\n    }\n\n    let authHandleResult;\n    const { isAuthorized } = this;\n\n    if (isAuthorized) {\n      authHandleResult = this.valueofCredentialsSignUpOnAuthorizedSuccess!!;\n    } else {\n      // try to sign in with the credentials, then try to sign up\n      // const userLoggedPromise = this.waitingUserInit();\n      const signInResult = await this.signIn(firebaseCredentials);\n\n      if (signInResult instanceof Error) {\n        console.warn('Failed to sign in with the credentials given');\n\n        if (!firebaseCredentials.password) {\n          // if there is no password provided, return the error\n          return signInResult;\n        }\n\n        // if failed to sign in with the credentials\n        // try to sign up\n        const signUpResult = await this.signUp(firebaseCredentials);\n\n        if (signUpResult instanceof Error) {\n          console.error('The user was failed to sign up');\n          return this.onAuthorizationFailed(signUpResult);\n        }\n      }\n      // const user = await userLoggedPromise;\n      // if (!user) {\n      //   return new Error('Failed to get the user authorized');\n      // }\n      // if (user instanceof Error) {\n      //   return new Error('Error on login');\n      // }\n      // if (!user.emailVerified) {\n\n      // check if the account was verfied by the user\n      const isVerifiedResult = await this.chekIfVerifiedAccount();\n\n      if (isVerifiedResult instanceof Error) {\n        console.error('The account is not verified');\n        return this.onAuthorizationFailed(isVerifiedResult);\n      }\n      //}\n\n      const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n      if (connectWithStorageResult instanceof Error) {\n        console.error(connectWithStorageResult);\n        return new Error('Failed to connect to the credentials storage');\n      }\n      // set the user login to use it to generate\n      // crypto credentials\n      this.setUserLogin(firebaseCredentials.login);\n\n      let cryptoCredentials:\n        | TCentralAuthorityUserCryptoCredentials\n        | Error\n        | undefined;\n\n      if (firebaseCredentials.session) {\n        const sessionCryptoCredentials = await this.readCryptoCrdentialsFromSession(\n          firebaseCredentials.session\n        );\n\n        if (sessionCryptoCredentials instanceof Error) {\n          console.error(\n            'Failed to get credentials from the session cause the error',\n            sessionCryptoCredentials\n          );\n        }\n        cryptoCredentials = sessionCryptoCredentials;\n      }\n      // create a new credentnials for the user or return\n      // an existing.\n      // if a crytpto credentials provided in signUpCredentials\n      // it will be used to set in the Firebase credentials\n      // storage\n      if (!cryptoCredentials || cryptoCredentials instanceof Error) {\n        cryptoCredentials = await this.createOrReturnExistingCredentialsForUser(\n          firebaseCredentials\n        );\n      }\n      if (cryptoCredentials instanceof Error) {\n        console.error('Failed to get a crypto credentials valid for the user');\n        return this.onAuthorizationFailed(cryptoCredentials);\n      }\n\n      // give user's profile\n      // with a credentials\n      authHandleResult = await this.returnOnAuthorizedResult(cryptoCredentials);\n      if (firebaseCredentials.session) {\n        const setCredentialsInSessionResult = await this.setCurrentUserCryptoCredentialsInSession(\n          firebaseCredentials.session,\n          cryptoCredentials\n        );\n\n        if (setCredentialsInSessionResult instanceof Error) {\n          console.error(\n            'Failed to set the credentials in the user session',\n            setCredentialsInSessionResult\n          );\n        }\n      }\n    }\n\n    if (authHandleResult instanceof Error) {\n      return this.onAuthorizationFailed(authHandleResult);\n    }\n    // if a profile data is necessary to be set\n    // by a profile data from the arguments given\n    if (profile && !isEmptyObject(profile)) {\n      const setProfileResult = await this.setProfileData(profile);\n\n      if (setProfileResult instanceof Error) {\n        console.error(setProfileResult);\n        return this.onAuthorizationFailed('Failed to set the profile data');\n      }\n\n      // set porofile is the user's profile\n      // data stored in the firebase\n      authHandleResult = {\n        profile: setProfileResult,\n        // TODO it is necessry to set this credentials in the database\n        cryptoCredentials: authHandleResult.cryptoCredentials,\n      };\n    }\n    // set the authentification success\n    // result. To return it on the second authorization\n    // request\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authHandleResult;\n    this.setValueofCredentialsSignUpOnAuthorizedSuccess(authHandleResult);\n    this.unsetIsAnonymousely();\n    return authHandleResult;\n  }\n\n  /**\n   * disconnect from the app and sign out\n   * if authorized\n   *\n   * @returns\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public async disconnect() {\n    const { app } = this;\n    if (!app) {\n      return;\n    }\n    if ((app as any).isDeleted_) {\n      return;\n    }\n    if (this.status === CA_CONNECTION_STATUS.AUTHORIZED) {\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        return signOutResult;\n      }\n      if (signOutResult !== true) {\n        return new Error('An unknown error has occurred while sign out');\n      }\n    }\n    return this.disconnectFromTheApp();\n  }\n\n  public async delete(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (currentUser instanceof Error) {\n      console.error(currentUser);\n      return new Error('Failed to read the current user');\n    }\n    if (currentUser == null) {\n      return new Error('There is no current user');\n    }\n\n    // try to sign in with the credentials.\n    // it is required by the firebase to sign in before\n    // delete the user.\n    const signInResult = await this.signIn(firebaseCredentials);\n\n    if (signInResult instanceof Error) {\n      console.error('Failed to sign in before the user deletion');\n      return signInResult;\n    }\n\n    try {\n      const result = (await currentUser.delete()) as unknown; // or maybe deleteWithCompletion method\n\n      if (result instanceof Error) {\n        console.error(result);\n        return new Error('Failed to delete the user from the firebase');\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to delete the user from the authority');\n    }\n\n    // disconnection from the firebase\n    // is not necessry cause the firebase\n    // disconnects automatically if the user\n    // delete himself\n    return true;\n  }\n\n  /**\n   * set that connected anonymousely\n   * to the Firebase\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setIsAnonymousely() {\n    this.isAnonymousely = true;\n  }\n\n  /**\n   * unset that connected to the Firebase\n   * anonymousely\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected unsetIsAnonymousely() {\n    this.isAnonymousely = false;\n  }\n\n  protected setValueofCredentialsSignUpOnAuthorizedSuccess(\n    authResult: ICAConnectionUserAuthorizedResult\n  ) {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authResult;\n  }\n\n  protected unsetValueofCredentialsSignUpOnAuthorizedSuccess() {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  /**\n   * set identity versions which are\n   * supported by the connection\n   * instance\n   *\n   * @protected\n   * @param {Array<TUserIdentityVersion>} [supportedVersions]\n   * @returns {(Error | void)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setVersionsSupported(\n    supportedVersions?: Array<TUserIdentityVersion>\n  ): Error | void {\n    if (supportedVersions instanceof Array) {\n      const len = supportedVersions.length;\n      let idx = 0;\n      let version;\n\n      for (; idx++; len < idx) {\n        version = supportedVersions[idx];\n        if (validateUserIdentityVersion(version)) {\n          this.supportedVersions.push(version);\n        }\n        return new Error('The version is not supproted');\n      }\n    }\n    return new Error('The argument must be an Array');\n  }\n\n  protected setUserLogin(login: string) {\n    this.userLogin = login;\n  }\n\n  /**\n   * this method generates credentials compilant to the version\n   * version 2 of the user identity. The firebase app user uid\n   * is used as the user id.\n   *\n   * @protected\n   * @returns {(Promise<\n   *     Error | TCentralAuthorityUserCryptoCredentials\n   *   >)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected generateNewCryptoCredentialsForConfigurationProvidedV2 = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL, currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('The user is not defined');\n    }\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV2(\n      {\n        [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: databaseURL,\n        [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: currentUser.uid,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  /**\n   * substitute the method to support v2 identity\n   *\n   * @protected\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @returns {(Promise<Error | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    const { cryptoCredentials } = signUpCredentials;\n    const V1 = CA_USER_IDENTITY_VERSIONS['01'];\n    let credentialsForV1 = false;\n\n    if (this.isVersionSupported(V1)) {\n      credentialsForV1 =\n        CA_USER_IDENTITY_VERSION_CURRENT === CA_USER_IDENTITY_VERSIONS['01'];\n\n      if (cryptoCredentials) {\n        // check a version of the credentials\n        // to decide what to do next\n        const cryptoCredentialsVersion = getVersionOfCryptoCredentials(\n          cryptoCredentials\n        );\n\n        if (cryptoCredentialsVersion instanceof Error) {\n          console.error(cryptoCredentialsVersion);\n          return new Error(\n            'Failed to define a version of the crypto credentials'\n          );\n        }\n        if (cryptoCredentialsVersion === CA_USER_IDENTITY_VERSIONS['01']) {\n          // if the credentials version is 01 we may use the\n          // current implementation cause it is fully\n          // compilant to that version\n          credentialsForV1 = true;\n        } else {\n          credentialsForV1 = false;\n        }\n      }\n      // if a credentials for the V1 must be generated and set\n      if (credentialsForV1 === true) {\n        return this.createOrSetCredentialsInDB(signUpCredentials);\n      }\n    }\n    // if the version is not 01, then provide another implementations\n    // of the methods to generate and set the crypto credentials\n    return this.createOrSetCredentialsInDB(\n      signUpCredentials,\n      this.generateNewCryptoCredentialsForConfigurationProvidedV2\n    );\n  }\n\n  /**\n   * disconnect from the Firebase app\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async disconnectFromTheApp(): Promise<Error | void> {\n    this.unsetIsAnonymousely();\n    this.unsetValueofCredentialsSignUpOnAuthorizedSuccess();\n\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    if (app) {\n      try {\n        // delete the application to allow connect to the Firebase with the same settings\n        await app.delete();\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to disconnect from the Firebase app');\n      }\n    } else {\n      return new Error('There is no active Firebase App instance to close');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseImplementation;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["2080","2081","2082","2083","2084"],"import { CAConnectionWithFirebaseUtilDatabase } from '../central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport {\n  getUserIdentityByCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK,\n} from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport {\n  ICAConnectionFirebase,\n  ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure,\n} from './central-authority-connection-firebase-utils.credentials-storage.types';\nimport { encodeForFirebaseKey } from 'utils/firebase-utils/firebase-utils';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsValidExportedCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { ICAConnectionSignUpCredentials } from '../../../central-authority-connections.types';\n\n/**\n * This class is used for storing\n * and reading the user's credentials.\n * It also used for reading\n * credentials of another user from the\n * Firebase remote database.\n * @export\n * @class CAConnectionFirestoreUtilsCredentialsStrorage\n * @extends {CAConnectionWithFirebaseUtilDatabase}\n */\nexport class CAConnectionFirestoreUtilsCredentialsStrorage extends CAConnectionWithFirebaseUtilDatabase {\n  protected connectionToFirebase?: ICAConnectionFirebase;\n\n  protected get firebaseUserData(): firebase.User | null | Error {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { app } = this;\n\n    try {\n      return app!!.auth().currentUser;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected get firebaseUserId(): string | Error {\n    const { firebaseUserData: userData } = this;\n\n    if (userData instanceof Error) {\n      console.error(userData);\n      return new Error('Failed to read the user data from a firebase');\n    }\n    if (userData == null) {\n      return new Error('There is no user data');\n    }\n    try {\n      return userData.uid;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  constructor(connectionToFirebase: ICAConnectionFirebase) {\n    super();\n\n    this.setUpConnection(connectionToFirebase);\n  }\n\n  /**\n   * returns a string will used to store/read value of\n   * the user credentials\n   * @protected\n   * @param {string} userId\n   * @returns {string}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected getCredentialsKeyByUserId(userId: string): string {\n    return `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${encodeForFirebaseKey(\n      userId\n    )}`;\n  }\n\n  protected checkIsConnected(): boolean | Error {\n    const isConnectedToDatabase = super.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { app, connectionToFirebase } = this;\n\n    if (!connectionToFirebase) {\n      return new Error(\n        'There is no instance implements a connection to the Firebase application'\n      );\n    }\n    if (!connectionToFirebase.isConnected) {\n      return new Error(\n        'There is no active connection to the firebase appliction'\n      );\n    }\n    if (!app) {\n      return new Error('There is no app connection');\n    }\n    return true;\n  }\n\n  protected checkIsAuthorized(): boolean | Error {\n    const isConnectedToDatabase = this.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { firebaseUserId, connectionToFirebase } = this;\n\n    if (!connectionToFirebase || !connectionToFirebase.isUserSignedIn) {\n      return new Error(\n        'The user is not authorized in the Firebase application'\n      );\n    }\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('The user is not authorized');\n    }\n    return true;\n  }\n\n  protected setUpConnection(connectionToFirebase: ICAConnectionFirebase) {\n    this.connectionToFirebase = connectionToFirebase;\n\n    const app = connectionToFirebase.getApp();\n\n    if (!app) {\n      throw new Error(\n        'There is no insatnce which implements a connection to the Firebase app'\n      );\n    }\n    this.app = app;\n  }\n\n  /**\n   *\n   * check if a credentials set in the storage\n   * are in the valid format\n   * @protected\n   * @param {*} storedCredentialsValue\n   * @returns {storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected checkStoredCredentialsFormat(\n    storedCredentialsValue: any\n  ): storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n    if (storedCredentialsValue instanceof Error) {\n      console.error(storedCredentialsValue);\n      return false;\n    }\n    if (storedCredentialsValue && typeof storedCredentialsValue === 'object') {\n      const {\n        credentials,\n        [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseId,\n      } = storedCredentialsValue;\n\n      // an id set for the user by the Firebase\n      if (typeof firebaseId === 'string') {\n        if (checkIsValidExportedCryptoCredentialsToString(credentials)) {\n          return true;\n        }\n        console.error(\n          \"Credentials are't exists or invalid in the stored credentials\"\n        );\n      } else {\n        console.error(\n          'Firebase user id is not valid in the stored credentials'\n        );\n      }\n    }\n    return false;\n  }\n\n  protected async getCredentialsByValueStored(\n    storedCredentialsValue: any,\n    signUpCredentials?: ICAConnectionSignUpCredentials\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (storedCredentialsValue == null) {\n      return null;\n    }\n    if (storedCredentialsValue instanceof Error) {\n      return storedCredentialsValue;\n    }\n    if (!this.checkStoredCredentialsFormat(storedCredentialsValue)) {\n      return new Error('the value stored have an unknown format');\n    }\n\n    const { credentials: exportedCredentials } = storedCredentialsValue;\n    const importedCredentials = await importCryptoCredentialsFromAString(\n      exportedCredentials,\n      signUpCredentials?.password\n    );\n\n    if (importedCredentials instanceof Error) {\n      console.error(importedCredentials);\n      return new Error('Failed to import credentials value stored');\n    }\n    return importedCredentials;\n  }\n\n  /**\n   *\n   * filter a value stored for the user key\n   * to get a value of the credentials\n   * for the user\n   * @protected\n   * @param {{\n   *     [key: string]: any;\n   *   }} [valueStored]\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | null | Error>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected async filterCredentialsValues(\n    valueStored: Record<string, any>,\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (!valueStored) {\n      return null;\n    }\n    if (valueStored instanceof Error) {\n      return valueStored;\n    }\n\n    const keys = Object.keys(valueStored);\n\n    // if an empty object\n    if (keys.length === 0) {\n      return null;\n    }\n\n    const len = Math.min(\n      keys.length,\n      CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK\n    );\n    let idx = 0;\n    let keyValueStored;\n    let valueValueStored;\n    let credentialsImported;\n\n    // for each property of the value stored\n    // check wherether it is a valid\n    // crypto credentials\n    for (; idx < len; idx++) {\n      keyValueStored = keys[idx];\n      valueValueStored = valueStored[keyValueStored];\n      credentialsImported = await this.getCredentialsByValueStored(\n        valueValueStored,\n        signUpCredentials\n      );\n\n      if (!(credentialsImported instanceof Error)) {\n        return credentialsImported;\n      }\n    }\n    return null;\n  }\n\n  // check if there is a credentials for the current user is exists\n  // and return it if exists\n  public async getCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no connection to the database server');\n    }\n    try {\n      // read a value storerd as user's\n      // credentials in the database\n      const snapshot = await database\n        .ref(CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX)\n        .orderByChild(\n          CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY\n        )\n        .equalTo(firebaseUserId)\n        .once('value');\n      if (snapshot.exists()) {\n        const valueStored = snapshot.val();\n        return this.filterCredentialsValues(valueStored, signUpCredentials);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the user data from the database');\n    }\n    return null;\n  }\n\n  // store the credentials value\n  // for the current user\n  public async setUserCredentials(\n    credentials: TCentralAuthorityUserCryptoCredentials,\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    // check if a credentials value is\n    // already exists for the user\n    const credentialsForTheCurrentUser = await this.getCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (\n      credentialsForTheCurrentUser != null &&\n      !(credentialsForTheCurrentUser instanceof Error)\n    ) {\n      // if a credentials are already stored for the user\n      // return it\n      return credentialsForTheCurrentUser;\n    }\n\n    const userId = getUserIdentityByCryptoCredentials(credentials);\n\n    if (userId instanceof Error) {\n      console.error(userId);\n      return new Error(\"Failed to get a user's identity from the credentials\");\n    }\n    if (!signUpCredentials.password) {\n      return new Error('The password is required to encrypt the private keys');\n    }\n\n    const exportedCryptoCredentials = await exportCryptoCredentialsToString(\n      credentials,\n      undefined,\n      signUpCredentials.password\n    );\n\n    if (exportedCryptoCredentials instanceof Error) {\n      console.error(exportedCryptoCredentials);\n      return new Error('Failed to export the crypto credentials value');\n    }\n\n    // check if the user id is not exists in the database\n    // user id is a user identity\n    // TODO - it's necessary to implement on the Firebase server to check whether the user can update credentials for the userid\n    const credentialsForTheUserId = await this.getUserCredentials(userId);\n\n    if (\n      credentialsForTheUserId != null &&\n      !(credentialsForTheUserId instanceof Error)\n    ) {\n      return new Error(\n        'A crypto credentials is already exists for the user id'\n      );\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storeResult = await this.setValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue, {\n      credentials: exportedCryptoCredentials,\n      [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseUserId,\n    });\n\n    if (storeResult instanceof Error) {\n      console.error(storeResult);\n      return new Error('Failed to store the credentials in the database');\n    }\n    return credentials;\n  }\n\n  /**\n   *\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login(email)\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    if (!this.checkIsConnected()) {\n      return new Error('There is no active connection to the Firebase');\n    }\n    if (!validateUserIdentity(userId)) {\n      return new Error('The user identity is not valid');\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storedCredentialsValue = await this.getValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue);\n\n    return this.getCredentialsByValueStored(storedCredentialsValue);\n  }\n\n  // disconnect from the database\n  public async disconnect(): Promise<Error | boolean> {\n    const isConnected = this.checkIsConnected();\n\n    if (!isConnected) {\n      return true;\n    }\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no active database connection');\n    }\n    try {\n      await database.goOffline();\n    } catch (err) {\n      console.error();\n      return new Error('Failed to disconnect from the databases');\n    }\n    return true;\n  }\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["2085"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["2086","2087","2088","2089","2090","2091","2092"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["2093"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport validator from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return validator.isURL(configuration.databaseURL);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.auth.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["2094","2095"],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["2096","2097"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport validator from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return validator.isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-connections/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-storage-local/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["2098","2099","2100","2101"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any,\n  checkPrivateKeys: boolean = true\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair, checkPrivateKeys)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair, checkPrivateKeys)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["2102"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  dataSignExportKeyPairAsString as exportKeyPairDataSignAsString,\n  dataSignExportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs,\n  password?: string\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs, !!password)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair, password),\n    exportKeyPairDataSignAsString(signDataKeyPair, password),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["2103","2104"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { calcCryptoKeyPairHash } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections/central-authority-connections.types';\nimport { normalizeUrl } from '../../../../utils/common-utils/common-utils-url';\nimport { CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS } from './central-authority-utils-crypto-credentials.const';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  withoutIdentityVersion: boolean = false,\n  password?: string\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials, !!password)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys, password);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n  if (withoutIdentityVersion) {\n    const userCAIdentity = new CentralAuthorityIdentity(userIdentity);\n    const { id } = userCAIdentity;\n\n    if (id instanceof Error) {\n      return new Error('The identity is not valid');\n    }\n    cryptoCredentialsExported[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME] = id;\n  }\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\n// allow to absent for a private keys in a pairs\nexport const exportCryptoCredentialsToStringWithoutTheCAIdentityVersion = (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> =>\n  exportCryptoCredentialsToString(userCryptoCredentials, true);\n\nexport const compareAuthProvidersIdentities = (\n  ...authProvidersIds: TCAAuthProviderIdentity[]\n): boolean => {\n  const { length: len } = authProvidersIds;\n\n  if (len < 2) {\n    return true;\n  }\n\n  const firstAuthProviderId = normalizeUrl(\n    authProvidersIds[0],\n    CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n  );\n  let idx = 0;\n\n  while (++idx < len) {\n    if (\n      firstAuthProviderId !==\n      normalizeUrl(\n        authProvidersIds[idx],\n        CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const cryptoCredentialsBase = credentials[0];\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsBase)) {\n    return new Error('The crypto credentials on index 0 is not valid');\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  const userIdentityBase = new CentralAuthorityIdentity(\n    cryptoCredentialsBase[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n  );\n\n  if (!userIdentityBase.isValid) {\n    return new Error(\n      'The user identity is not valid in the crypto credentials base'\n    );\n  }\n\n  const cryptoCredentialsKeysBase =\n    cryptoCredentialsBase[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n  const cryptoCredentialsEncryptKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.encryptionKeyPair\n  );\n\n  if (cryptoCredentialsEncryptKeyPairHashBase instanceof Error) {\n    return new Error('Failed to calculate hash of the encrypt key pairs base');\n  }\n\n  const cryptoCredentialsSignKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.signDataKeyPair\n  );\n\n  if (cryptoCredentialsSignKeyPairHashBase instanceof Error) {\n    return new Error(\n      'Failed to calculate hash of the data sign key pairs base'\n    );\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let nextCryptoCredentials = null;\n  let keyPairs = null;\n  let userIdentity = null;\n  let encryptionKeyPairsHash = null;\n  let signPairsHash = null;\n\n  for (; idx < length; idx += 1) {\n    nextCryptoCredentials = credentials[idx];\n\n    if (!checkIsValidCryptoCredentials(nextCryptoCredentials)) {\n      return new Error(`The crypto credentials on index ${idx} is not valid`);\n    }\n\n    userIdentity = new CentralAuthorityIdentity(\n      nextCryptoCredentials[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n    );\n\n    if (!userIdentity.isValid) {\n      return new Error(\n        `The user identity is not valid in the crypto credentials on index ${idx}`\n      );\n    }\n    if (userIdentity.id !== userIdentityBase.id) {\n      return new Error(`The user identity are different on index ${idx}`);\n    }\n\n    keyPairs = nextCryptoCredentials[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n    encryptionKeyPairsHash = await calcCryptoKeyPairHash(\n      keyPairs.encryptionKeyPair\n    );\n\n    if (cryptoCredentialsEncryptKeyPairHashBase !== encryptionKeyPairsHash) {\n      return new Error(\n        `The encryption key pairs are different on index ${idx}`\n      );\n    }\n\n    signPairsHash = await calcCryptoKeyPairHash(keyPairs.signDataKeyPair);\n\n    if (cryptoCredentialsSignKeyPairHashBase !== signPairsHash) {\n      return new Error(`The data sign key pairs are different on index ${idx}`);\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any,\n  password?: string\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(\n    cryptoKeysExported,\n    password\n  );\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials, !!password)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any,\n  password?: string\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(\n    cryptoCredentialsExported,\n    password\n  );\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs, checkPrivateKey)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials, checkPrivateKey)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs, checkPrivateKey)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs,\n      checkPrivateKey\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity | string,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs,\n  checkPrivateKey: boolean = true\n): Promise<Error | string> => {\n  if (caIdentity instanceof CentralAuthorityIdentity) {\n    if (caIdentity.isValid) {\n      return getExportedAsStringCryptoCredentials(\n        String(caIdentity), // conver it to identity\n        cryptoCredentialsKeyPairs,\n        checkPrivateKey\n      );\n    }\n    return new Error('The CA identity is wrong');\n  }\n  return new Error('The CA identity must be an instance of caIdentity');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity,\n  checkPrivateKey: boolean = true\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials, checkPrivateKey)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  checkPrivateKey: boolean = true\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs, checkPrivateKey)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n\nexport const getUserIdentityVersion = (\n  userIdentity: TCentralAuthorityUserIdentity | CentralAuthorityIdentity\n): TUserIdentityVersion | Error => {\n  if (\n    !(userIdentity instanceof CentralAuthorityIdentity) &&\n    typeof userIdentity !== 'string'\n  ) {\n    return new Error(\n      'The userIdentity must be a string or an instance of the CentralAuthorityIdentity class'\n    );\n  }\n\n  const userIdentityObj = new CentralAuthorityIdentity(userIdentity);\n\n  if (!userIdentityObj.isValid) {\n    return new Error('The user identity is not valid');\n  }\n  return userIdentityObj.version;\n};\n\nexport const getVersionOfCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): TUserIdentityVersion | Error => {\n  const userIdentity = getUserIdentityByCryptoCredentials(cryptoCredentials);\n\n  if (userIdentity instanceof Error) {\n    return userIdentity;\n  }\n  return getUserIdentityVersion(userIdentity);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-utils-common/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["2105","2106","2107","2108","2109","2110"],"import {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserCryptoCredentialsExported,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsCryptoKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any,\n  checkPrivateKey: boolean = true\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys, checkPrivateKey)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair by a function provided\n * and user's identity\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsWithFunc = (\n  cryptoCredentials: any,\n  credentialsValidationFunction: (c: any) => boolean\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!credentialsValidationFunction(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (\n    !checkIsValidCryptoCredentialsWithFunc(\n      cryptoCredentials,\n      checkIsValidExportedCryptoCredentialsToString\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["2111"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/central-authority-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/central-authority-class/index.ts",[],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.const.ts",[],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.ts",["2112","2113","2114","2115","2116","2117","2118","2119","2120","2121","2122","2123"],"/home/paul/projects/protocol/src/classes/connection-bridge/connection-bridge.types.ts",["2124","2125"],"import {\n  ISwarmMessageStoreOptions,\n  ISwarmMessageStore,\n} from '../swarm-message-store/swarm-message-store.types';\nimport { ESwarmStoreConnector } from '../swarm-store-class/swarm-store-class.const';\nimport { ICentralAuthority } from '../central-authority-class/central-authority-class.types';\nimport { ICentralAuthorityOptions } from '../central-authority-class/central-authority-class.types';\nimport { ISwarmMessageConstructor } from '../swarm-message/swarm-message-constructor.types';\nimport { ISensitiveDataSessionStorageOptions } from 'classes/sensitive-data-session-storage/sensitive-data-session-storage.types';\nimport { ISwarmMessageConstructorWithEncryptedCacheFabric } from '../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport {\n  ISwarmMessgaeEncryptedCache,\n  ISwarmMessageEncryptedCacheFabric,\n} from '../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\n\nexport type IConnectionBridgeOptionsAuthCredentials = Omit<\n  ICentralAuthorityOptions['user']['credentials'],\n  'session'\n>;\n\nexport interface IConnectionBridgeOptionsAuth<CD extends boolean = false> {\n  /**\n   * url of an  auth provider from the auth providers pool\n   * on which the user will be authorized or registered\n   * if still had not.\n   *\n   * @type {ICentralAuthorityOptions['user']['authProviderUrl']}\n   */\n  providerUrl: ICentralAuthorityOptions['user']['authProviderUrl'];\n  /**\n   * credentials used to authorize or register on a credentials\n   * provider. If credentials are not provided, then session\n   * must be started before\n   *\n   * @type {ICentralAuthorityOptions['user']['credentials']}\n   */\n  credentials: CD extends true\n    ? IConnectionBridgeOptionsAuthCredentials\n    : IConnectionBridgeOptionsAuthCredentials | undefined | never;\n  session?: ISensitiveDataSessionStorageOptions;\n  /**\n   * this is list of auth providers will be used to authorize\n   * the user and a keys of another users connected to the\n   * swarm\n   *\n   * @type {ICentralAuthorityOptions['authProvidersPool']}\n   */\n  authProvidersPool?: ICentralAuthorityOptions['authProvidersPool'];\n}\n\nexport interface IConnectionBridgeOptions<\n  P extends ESwarmStoreConnector = ESwarmStoreConnector.OrbitDB,\n  CD extends boolean = false\n> {\n  auth: IConnectionBridgeOptionsAuth<CD>;\n  user: {\n    /**\n     * profile of the user for the central auth provider\n     *\n     * @type {ICentralAuthorityOptions['user']['profile']}\n     */\n    profile?: ICentralAuthorityOptions['user']['profile'];\n  };\n  /**\n   * this is options for a swarm databases user will be\n   * used to store a data.\n   *\n   * @type {ISwarmMessageStoreOptions<P>}\n   * @memberof IConnectionBridgeOptions\n   */\n  storage: Omit<\n    ISwarmMessageStoreOptions<P>,\n    | 'userId'\n    | 'credentials'\n    | 'messageConstructors'\n    | 'providerConnectionOptions'\n    | 'databasesListStorage'\n  >;\n  /**\n   * specify options for the swarm connection provider\n   *\n   * @memberof IConnectionBridgeOptions\n   */\n  // TODO - at now the default IPFS connection will be used\n  swarm?: any;\n}\n\nexport interface IConnectionBridge<\n  P extends ESwarmStoreConnector = ESwarmStoreConnector.OrbitDB\n> {\n  /**\n   * used to authorize the user or get\n   * a common information about the users\n   * also connected to the swarm.\n   *\n   * @type {ICentralAuthority}\n   * @memberof IConnectionBridge\n   */\n  caConnection?: ICentralAuthority;\n  /**\n   * storage allows to add or read messages from\n   * the swarm\n   *\n   * @type {ISwarmMessageStore<P>}\n   * @memberof IConnectionBridge\n   */\n  storage?: ISwarmMessageStore<P>;\n  /**\n   * allows to create messages, which can be stored in the swarm\n   *\n   * @type {ISwarmMessageConstructor}\n   * @memberof IConnectionBridge\n   */\n  messageConstructor?: ISwarmMessageConstructor;\n\n  /**\n   * Fabric which provides instances of SwarmMessageEncryptedCache,\n   * already connected to the storage and ready to use.\n   *\n   * @type {ISwarmMessageEncryptedCacheFabric}\n   * @memberof IConnectionBridge\n   */\n  swarmMessageEncryptedCacheFabric?: ISwarmMessageEncryptedCacheFabric;\n\n  /**\n   * allows to construct SwarmMessagesConstructor with support of\n   * encrypted cache storage and ready to use.\n   *\n   * @type {ISwarmMessageConstructorWithEncryptedCacheFabric}\n   * @memberof IConnectionBridge\n   */\n  swarmMessageConstructorFabric?: ISwarmMessageConstructorWithEncryptedCacheFabric;\n\n  /**\n   * Connect to central authority and swarm. If the connection\n   * will be succeed than the caConnection and storage\n   * properties will be available.\n   * If email or any other operations are necessary then\n   * the promise returned will be resolved with Error\n   * have a message with the problem description.\n   *\n   * @param {IConnectionBridgeOptions<P>} options\n   * @returns {(Promise<Error | void>)}\n   * @memberof IConnectionBridge\n   */\n  connect(options: IConnectionBridgeOptions<P>): Promise<Error | void>;\n\n  /**\n   * checks was a session started before and\n   * if it's data is available for now.\n   * If a session is availablr, the user\n   * can try to connect without credentials.\n   *\n   * @param {(ISensitiveDataSessionStorageOptions | IConnectionBridgeOptions<P>)} [options]\n   * @returns {Promise<boolean>}\n   * @memberof IConnectionBridge\n   */\n  checkSessionAvailable(\n    options?: ISensitiveDataSessionStorageOptions | IConnectionBridgeOptions<P>\n  ): Promise<boolean>;\n  /**\n   * Close all connections and release the options.\n   * The connection can't be used anymore.\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof IConnectionBridge\n   */\n  close(): Promise<Error | void>;\n}\n","/home/paul/projects/protocol/src/classes/connection-bridge/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.const.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.ts",["2126","2127"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport path from 'path';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_PROVIDER_HTTP_TYPE,\n  FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER,\n} from './filestorage-class-provider-http.const';\nimport { HTTP_REQUEST_MODE } from 'classes/basic-classes/http-request-class-base';\nimport { downloadFileByUrl } from '../../../../utils/files-utils/files-utils-download';\n\nexport class FileStorageClassProviderHTTP\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.HTTP> {\n  public type = FILE_STORAGE_PROVIDER_HTTP_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n\n  public get status() {\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/http') || this.isBlobAddr(addr);\n  }\n\n  public async connect(options: {}) {\n    return FILE_STORAGE_PROVIDER_HTTP_IDENTIFIER;\n  }\n\n  public async close() {}\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: {}\n  ): Promise<TFileStorageFileAddress> => {\n    throw new Error('The HTTP provider does not supports files uploading');\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileGetOptions\n  ): Promise<File> => {\n    const urlNormalized = this.getFileURL(addr);\n    const req = new HttpRequest({\n      credentials: 'include',\n      mode: HTTP_REQUEST_MODE.CORS,\n      ...options,\n      url: urlNormalized,\n    });\n\n    return await req.send();\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderHTTPFileAddOptions\n  ) => {\n    const urlNormalized = this.getFileURL(addr);\n\n    downloadFileByUrl(urlNormalized);\n  };\n\n  protected isBlobAddr(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/data:');\n  }\n\n  protected getFileURL(addr: TFileStorageFileAddress): string {\n    if (this.isBlobAddr(addr)) {\n      return addr.slice(1);\n    }\n\n    const isHttps = addr.startsWith('/https');\n    const protocol = isHttps ? 'https://' : 'http://';\n    const addrWithoutPrefix = (isHttps ? addr.slice(6) : addr.slice(5)).replace(\n      /^\\W+/,\n      ''\n    );\n    const resultedUrl = `${protocol}${addrWithoutPrefix}`;\n\n    return String(new URL(resultedUrl));\n  }\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.const.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.ts",["2128","2129","2130","2131"],"import {\n  IFileStorageService,\n  TFileStorageFileAddress,\n} from '../../filestorage-class.types';\nimport {\n  IFileStorageClassProviderIPFSOptions,\n  IFileStorageClassProviderIPFSFileAddOptions,\n} from './filestorage-class-provider-ipfs.types';\nimport {\n  FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER,\n  FILE_STORAGE_PROVIDER_IPFS_TYPE,\n} from './filestorage-class-provider-ipfs.const';\nimport {\n  FILE_STORAGE_SERVICE_STATUS,\n  FILE_STORAGE_SERVICE_TYPE,\n} from '../../filestorage-class.const';\nimport { TFileStorageFile } from '../../filestorage-class.types';\nimport { extend } from 'utils';\nimport { getFileSize } from 'utils/files-utils';\nimport assert from 'assert';\nimport path from 'path';\nimport { FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS } from './filestorage-class-provider-ipfs.const';\nimport { IPFS, FileObject, IPFSFile } from 'types/ipfs.types';\nimport BufferList from 'bl';\nimport { FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT } from './filestorage-class-provider-ipfs.const';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport { UnixTime } from 'types/ipfs.types';\nimport { downloadFile } from '../../../../utils/files-utils/files-utils-download';\nimport {\n  IFileStorageClassProviderIPFSFileGetOptions,\n  IFileStorageClassProviderIPFSFileDownloadOptions,\n} from './filestorage-class-provider-ipfs.types';\n\nexport class FileStorageClassProviderIPFS\n  implements IFileStorageService<FILE_STORAGE_SERVICE_TYPE.IPFS> {\n  public type = FILE_STORAGE_PROVIDER_IPFS_TYPE;\n\n  public readonly isSingleton = true;\n\n  public readonly identifier = FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n\n  public get status() {\n    const { _ipfs: ipfs } = this;\n\n    if (!ipfs || !ipfs.isOnline()) {\n      return FILE_STORAGE_SERVICE_STATUS.NOT_READY;\n    }\n    if (!ipfs.files || this._error) {\n      return FILE_STORAGE_SERVICE_STATUS.ERROR;\n    }\n    return FILE_STORAGE_SERVICE_STATUS.READY;\n  }\n\n  /**\n   * this is the prefix for path\n   * of each file uploaded\n   *\n   * @protected\n   * @type {string}\n   * @memberof FileStorageClassProviderIPFS\n   */\n  protected _rootPath: string = FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n\n  protected _ipfs?: IPFS;\n\n  protected _error?: Error;\n\n  public isFileServed(addr: TFileStorageFileAddress): boolean {\n    return addr.startsWith('/ipfs');\n  }\n\n  public async connect(options: IFileStorageClassProviderIPFSOptions) {\n    try {\n      this.setOptions(options);\n      await this._ipfs?.ready;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n    return FILE_STORAGE_PROVIDER_IPFS_IDENTIFIER;\n  }\n\n  public async close() {\n    this._ipfs = undefined;\n  }\n\n  public add = async (\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageClassProviderIPFSFileAddOptions\n  ): Promise<TFileStorageFileAddress> => {\n    const ipfs = this._ipfs;\n    const fileSize = getFileSize(file);\n\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(fileSize, 'Failed to get a size of the file');\n    let files: IPFSFile[] | Error | undefined;\n    const progressCallback = options?.progress;\n    let resolve: undefined | Function;\n    const pending = new Promise((res, rej) => {\n      resolve = res;\n    });\n    const opts = extend(\n      options || {},\n      {\n        pin: false,\n        cidVersion: 1,\n        progress: (bytes: number) => {\n          const percent = (bytes / fileSize!) * 100;\n\n          if (progressCallback) {\n            progressCallback(percent);\n          }\n          if (resolve && percent >= 100) {\n            resolve();\n          }\n        },\n      },\n      true\n    );\n\n    try {\n      files = await Promise.race([\n        ipfs?.add(this.getFileObject(filename, file), opts),\n        timeout(FILE_STORAGE_PROVIDER_IPFS_FILE_UPLOAD_TIMEOUT_MS),\n      ]);\n      await pending;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n\n    if (!files) {\n      throw new Error('Failed to upload for an unknown reason');\n    }\n    if (files instanceof Error) {\n      throw files;\n    }\n    return this.getMultiaddr(files[0]);\n  };\n\n  public get = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileGetOptions\n  ): Promise<File> => {\n    assert(\n      this.status === FILE_STORAGE_SERVICE_STATUS.READY,\n      'Service is not ready to use'\n    );\n    assert(this.isFileServed(addr), 'The file is not supported by the service');\n\n    const ipfs = this._ipfs;\n    const fileDesc = this.getFileDescription(addr);\n    const filesOrChunks = await ipfs!.get(fileDesc.cid);\n    const content = new BufferList();\n    let lastModified = 0;\n    let fileBlob: ArrayBuffer | Blob[];\n\n    if (!filesOrChunks) {\n      throw new Error('Failed to read the file');\n    }\n    if (filesOrChunks instanceof Array) {\n      const chunksLen = filesOrChunks.length;\n      let idx = 0;\n\n      while (idx < chunksLen) {\n        const chunk = filesOrChunks[idx++];\n        content.append(chunk.content);\n        lastModified = this.getMSByUnix(chunk.mtime);\n      }\n      const buff = content.slice();\n      fileBlob = buff.buffer.slice(\n        buff.byteOffset,\n        buff.byteOffset + buff.byteLength\n      );\n    } else {\n      if (!filesOrChunks.content) {\n        throw new Error(\"Failed to read the file's content\");\n      }\n      if (filesOrChunks.content instanceof Blob) {\n        fileBlob = [filesOrChunks.content];\n        if (filesOrChunks.mtime) {\n          lastModified = this.getMSByUnix(filesOrChunks.mtime);\n        }\n      } else if (typeof filesOrChunks.content === 'string') {\n        content.append(filesOrChunks.content);\n      }\n      throw new Error('Unknown content type');\n    }\n    return new File([fileBlob], fileDesc.path, {\n      lastModified: lastModified ? lastModified : undefined,\n    });\n  };\n\n  public download = async (\n    addr: TFileStorageFileAddress,\n    options?: IFileStorageClassProviderIPFSFileDownloadOptions\n  ) => {\n    const file = await this.get(addr, options);\n\n    downloadFile(file);\n  };\n\n  protected setOptions(options: IFileStorageClassProviderIPFSOptions) {\n    assert(options.ipfs, 'An instance of IPFS must be provided in the options');\n    this._ipfs = options.ipfs;\n    this._rootPath =\n      options.rootPath || FILE_STORAGE_PROVIDER_ROOT_PATH_DEFAULT;\n  }\n\n  protected getFileObject(\n    filename: string,\n    file: TFileStorageFile\n  ): FileObject {\n    const filePath = path.join('/', this._rootPath, filename);\n\n    return {\n      path: filePath,\n      content: file,\n      mtime: file instanceof File ? new Date(file.lastModified) : undefined,\n    };\n  }\n\n  protected getMultiaddr(file: IPFSFile): TFileStorageFileAddress {\n    return path.join('/ipfs/', file.hash, file.path);\n  }\n\n  protected getFileDescription(addr: TFileStorageFileAddress) {\n    const [nothing, prefix, cid, path] = addr.split('/');\n\n    assert(cid, 'Failed to get CID by the address');\n    assert(path, 'Failed to get file path by the address');\n    return {\n      cid,\n      path,\n    };\n  }\n\n  protected getMSByUnix(unix?: UnixTime): number {\n    return unix && unix.secs ? unix.secs : Date.now();\n  }\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class-providers/index.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.const.ts",["2132","2133"],"import { IFileStorageService } from './filestorage-class.types';\n/**\n * status of a service\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_STATUS {\n  /**\n   * ready to use\n   */\n  READY = 'READY',\n  /**\n   * connecting to the service\n   */\n  CONNECTING = 'CONNECTING',\n  /**\n   * not ready - may be disconnected or still not connected to\n   */\n  NOT_READY = 'NOT_READY',\n  /**\n   * fault on connecting or file uploading\n   * and means that the service can't be used\n   * anymore\n   */\n  ERROR = 'ERROR',\n}\n\n/**\n * service type\n *\n * @export\n * @enum {number}\n */\nexport enum FILE_STORAGE_SERVICE_TYPE {\n  IPFS = 'IPFS',\n  HTTP = 'HTTP',\n  // will be added in the feature\n  // AMAZONS3 = 'AMAZONS3',\n  // AZUREBLOB = 'AZUREBLOB',\n}\n\n// implementations of the services.\n// will be loaded only if required\nexport const FILE_STORAGE_SERVICES_IMPLEMENTATIONS: Record<\n  FILE_STORAGE_SERVICE_TYPE,\n  () => Promise<any> // Promise<new () => IFileStorageService<any>>\n> = {\n  [FILE_STORAGE_SERVICE_TYPE.IPFS]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-ipfs'),\n  [FILE_STORAGE_SERVICE_TYPE.HTTP]: () =>\n    import('./filestorage-class-providers/filestorage-class-provider-http'),\n};\n\nexport const FILE_STORAGE_SERVICE_PREFIX = '/file';\n\nexport const FILE_STORAGE_SERVICE_PREFIX_LENGTH =\n  FILE_STORAGE_SERVICE_PREFIX.length;\n","/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.ts",[],"/home/paul/projects/protocol/src/classes/filestorage-class/filestorage-class.types.ts",["2134"],"import { IFileStorageClassProviderIPFSOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs';\nimport {\n  IFileStorageClassProviderHTTPFileDownloadOptions,\n  IFileStorageClassProviderHTTPOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport { IFileStorageClassProviderIPFSFileDownloadOptions } from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport { FILE_STORAGE_SERVICE_TYPE } from './filestorage-class.const';\nimport {\n  IFileStorageClassProviderIPFSFileAddOptions,\n  IFileStorageClassProviderIPFSFileGetOptions,\n} from './filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs.types';\nimport {\n  IFileStorageClassProviderHTTPFileGetOptions,\n  IFileStorageClassProviderHTTPFileAddOptions,\n} from './filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http.types';\nimport {\n  FILE_STORAGE_SERVICE_TYPE as FileStorageServiceType,\n  FILE_STORAGE_SERVICE_STATUS as FileStorageServiceStatus,\n} from './filestorage-class.const';\n\nexport type TFileStorageServiceOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> = T extends FILE_STORAGE_SERVICE_TYPE.IPFS\n  ? IFileStorageClassProviderIPFSOptions\n  : T extends FILE_STORAGE_SERVICE_TYPE.HTTP\n  ? IFileStorageClassProviderHTTPOptions\n  : never;\n\nexport type TFileStorageServiceFileAddOptions =\n  | IFileStorageClassProviderIPFSFileAddOptions\n  | IFileStorageClassProviderHTTPFileAddOptions;\n\nexport type TFileStorageServiceFileGetOptions =\n  | IFileStorageClassProviderIPFSFileGetOptions\n  | IFileStorageClassProviderHTTPFileGetOptions;\n\nexport type TFileStorageServiceFileDownloadOptions =\n  | IFileStorageClassProviderHTTPFileDownloadOptions\n  | IFileStorageClassProviderIPFSFileDownloadOptions;\n\nexport interface IFileStorageServiceFileAddCommonOptions {\n  progress?: (progress: number) => any;\n}\n\nexport type TFileStorageFile = ArrayBuffer | Buffer | Blob | File;\n\n/**\n * multiaddr or address in the ipfs:\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66',\n * '/ipfs/QmXEmhrMpbVvTh61FNAxP9nU7ygVtyvZA8HZDUaqQCAb66/a.txt'\n * or if http file:\n * '/http/server.com:3000/download/file.pdf',\n * '/https/upload.com/?d=f'\n */\nexport type TFileStorageFileAddress = string;\n\n/**\n * unique identifier of the service connected to,\n * may be an url or another string\n */\nexport type TFileStorageServiceIdentifier = string;\n\nexport interface IFileStorageService<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * the current status of the service\n   *\n   * @type {FileStorageServiceStatus}\n   * @memberof IFileStorageService\n   */\n  status: FileStorageServiceStatus;\n  /**\n   * type of the service\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageService\n   */\n  type: FileStorageServiceType;\n  /**\n   * unique name of the service, maybe url\n   *\n   * @type {TFileStorageServiceIdentifier}\n   * @memberof IFileStorageService\n   */\n  identifier: TFileStorageServiceIdentifier;\n  /**\n   * is only the one implementation is allowed\n   *\n   * @type {boolean}\n   * @memberof IFileStorageService\n   */\n  isSingleton: boolean;\n  /**\n   * initialize connection with the service\n   *\n   * @param {TFileStorageServiceOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorageService\n   */\n  connect(\n    options: TFileStorageServiceOptions<T>\n  ): Promise<TFileStorageServiceIdentifier>;\n  /**\n   * close connection to the service\n   *\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  close(): Promise<void>;\n  /**\n   * check whether a file with the address\n   * is served by the service.\n   *\n   * @param {TFileStorageFileAddress} addr\n   * @returns {boolean}\n   * @memberof IFileStorageService\n   */\n  isFileServed(addr: TFileStorageFileAddress): boolean;\n  /**\n   * add the file to the service\n   *\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorageService\n   */\n  add(\n    filename: string,\n    file: TFileStorageFile,\n    options?: IFileStorageServiceFileAddCommonOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file\n   * TODO - add download progress callback\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file itself\n   * @memberof IFileStorageService\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   * @param {TFileStorageFileAddress} addr\n   * @param {TFileStorageServiceFileDownloadOptions} [options]\n   * @returns {Promise<void>}\n   * @memberof IFileStorageService\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n\nexport interface IFileStorageServiceConnectOptions<\n  T extends FILE_STORAGE_SERVICE_TYPE\n> {\n  /**\n   * type of the service provider\n   *\n   * @type {FileStorageServiceType}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  type: FileStorageServiceType;\n  /**\n   * options used be the service provider to\n   * connect to the service\n   *\n   * @type {TFileStorageServiceOptions}\n   * @memberof IFileStorageServiceConnectOptions\n   */\n  options: TFileStorageServiceOptions<T>;\n}\n\nexport interface IFileStorage<T extends FILE_STORAGE_SERVICE_TYPE> {\n  /**\n   * connect to the file upload service\n   *\n   * @param {IFileStorageServiceConnectOptions} options\n   * @returns {Promise<TFileStorageServiceIdentifier>}\n   * @memberof IFileStorage\n   */\n  connect(\n    configurations: IFileStorageServiceConnectOptions<T>[]\n  ): Promise<TFileStorageServiceIdentifier[]>;\n  /**\n   * close the existing connection with the service\n   * have the identifier provided\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  close(serviceId: TFileStorageServiceIdentifier): Promise<void>;\n  /**\n   * add the file to the service\n   *\n   * @param {TFileStorageServiceIdentifier} service - service identifier connected to,\n   * on which to upload the file\n   * @param {string} filename - filename, e.g. 'file.txt'\n   * @param {TFileStorageFile} file - file content\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<TFileStorageFileAddress>} - returns an address of the file added,\n   * which can be used to access the file\n   * @throws\n   * @memberof IFileStorage\n   */\n  add(\n    service: TFileStorageServiceIdentifier | T,\n    filename: string,\n    file: TFileStorageFile,\n    options?: TFileStorageServiceFileAddOptions\n  ): Promise<TFileStorageFileAddress>;\n  /**\n   * get the file from the service\n   *\n   * @param {TFileStorageFileAddress} addr - address of the file\n   * @param {object} [TFileStorageServiceIdentifier] service - service identifier connected to,\n   * from which to download the file. If the identifier is not provided, then\n   * it will be identified by a services connected to by the address provided.\n   * @param {object} [undefined] options - options, not required, specific for the service\n   * @returns {Promise<File>} - returns file donwloaded from the service\n   * @memberof IFileStorage\n   * @throws\n   */\n  get(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileGetOptions\n  ): Promise<File>;\n  /**\n   * download the file, do net necessary\n   * to read it's content\n   *\n   * @param {TFileStorageFileAddress} addr - file address supported by services\n   * connected to\n   * @param {TFileStorageServiceFileDownloadOptions} [options] - options which used\n   * by the service to download the file\n   * @returns {Promise<void>}\n   * @memberof IFileStorage\n   */\n  download(\n    addr: TFileStorageFileAddress,\n    options?: TFileStorageServiceFileDownloadOptions\n  ): Promise<void>;\n}\n","/home/paul/projects/protocol/src/classes/filestorage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/index.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/projects/protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/index.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["2135","2136","2137","2138","2139","2140"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["2141","2142"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts",["2143","2144","2145"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SafeStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data || undefined);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["2146"],"import { ISecretStoreCredentialsCryptoKey } from './../../secret-storage-class.types';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkIsStorageProviderInstance = (\n  storageProviderInstance: any\n): Error | boolean => {\n  if (!storageProviderInstance || typeof storageProviderInstance !== 'object') {\n    return new Error('Storage provider must be an object');\n  }\n\n  const { connect, get, set, disconnect } = storageProviderInstance;\n\n  if (\n    typeof connect !== 'function' ||\n    typeof get !== 'function' ||\n    typeof set !== 'function' ||\n    typeof disconnect !== 'function'\n  ) {\n    return new Error(\n      'The instance has a wrong implemntation of a StorageProvider interface'\n    );\n  }\n  return true;\n};\n\nexport const validateCryptoKeyCredentials = (\n  credentials?: ISecretStoreCredentialsCryptoKey\n): void | Error => {\n  if (!credentials) {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must not be empty'\n    );\n  }\n  if (typeof credentials !== 'object') {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must be an object'\n    );\n  }\n\n  const { key } = credentials;\n\n  if (!key) {\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be provided to authorize'\n    );\n  }\n  if (key instanceof CryptoKey) {\n    return;\n  }\n  return new Error(\n    'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n  );\n};\n","/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/index.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts",["2147","2148","2149","2150","2151"],"/home/paul/projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/index.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.const.ts",[],"/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.ts",["2152","2153"],"import {\n  ISensitiveDataSessionStorage,\n  ISensitiveDataSessionStorageOptions,\n} from './sensitive-data-session-storage.types';\nimport {\n  SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY,\n  SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY_SALT,\n} from './sensitive-data-session-storage.const';\nimport assert from 'assert';\nimport {\n  generatePasswordKeyByPasswordSalt,\n  generateSaltForPassword,\n} from 'classes/secret-storage-class';\nimport { encryptDataToString, decryptDataByPassword } from 'utils';\n\nexport class SensitiveDataSessionStorage\n  implements ISensitiveDataSessionStorage {\n  protected isConnected: boolean = false;\n\n  protected connectingPromise: undefined | Promise<void> = undefined;\n\n  protected _temp: Record<string, any> = {};\n\n  private _tempStringified: string | undefined = undefined;\n\n  private k?: CryptoKey;\n\n  private storagePrefix: string = '';\n\n  private get storageKeyValue() {\n    return `${this.storagePrefix}//${SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY}`;\n  }\n\n  private get storageKeySalt() {\n    return `${this.storagePrefix}//${SENSITIVE_DATA_SESSION_STORAGE_STORAGE_KEY_SALT}`;\n  }\n\n  public async connect(options?: ISensitiveDataSessionStorageOptions) {\n    if (this.isConnected) {\n      return;\n    }\n    if (options) {\n      const { storagePrefix } = options;\n\n      if (storagePrefix) {\n        this.storagePrefix = storagePrefix;\n      }\n    }\n    if (!this.connectingPromise) {\n      this.connectingPromise = this.connectToStorage(options);\n    }\n    await this.connectingPromise;\n  }\n\n  public getItem = async (key: string) => {\n    assert(typeof key === 'string', 'Key must be a string');\n    return this._temp[key];\n  };\n\n  public setItem = async (key: string, v: any) => {\n    assert(typeof key === 'string', 'Key must be a string');\n    if (v == null) {\n      delete this._temp[key];\n    } else {\n      this._temp[key] = v;\n    }\n    this.stringifyTemp();\n  };\n\n  private async connectToStorage(\n    options?: ISensitiveDataSessionStorageOptions\n  ) {\n    let error: Error | undefined;\n    try {\n      let k: CryptoKey | undefined;\n      const pinCode = options?.pinCode;\n\n      try {\n        this._temp = (await this.readFromStorage(pinCode)) ?? {};\n      } catch (err) {\n        error = err;\n      }\n      this.subscribeOnWindowUnload();\n      if (pinCode) {\n        assert(typeof pinCode === 'string', 'Pin code must be a string');\n        const pinCodeNewCryptoKey = await generatePasswordKeyByPasswordSalt(\n          pinCode,\n          this.generateSalt()\n        );\n\n        if (pinCodeNewCryptoKey instanceof Error) {\n          throw pinCodeNewCryptoKey;\n        }\n        k = pinCodeNewCryptoKey;\n      }\n      this.k = k;\n      this.stringifyTemp();\n    } catch (err) {\n      this.reset();\n      console.error(err);\n      throw err;\n    } finally {\n      if (options?.clearStorageAfterConnect !== false) {\n        this.clearValueStorage();\n      }\n      this.isConnected = true;\n    }\n    if (error) {\n      throw error;\n    }\n  }\n\n  private readSalt() {\n    const salt = sessionStorage.getItem(this.storageKeySalt);\n\n    return salt;\n  }\n\n  private generateSalt() {\n    const newSalt = generateSaltForPassword();\n\n    if (typeof newSalt !== 'string') {\n      throw new Error('Failed to generate a salt value');\n    }\n    sessionStorage.setItem(this.storageKeySalt, newSalt);\n    return newSalt;\n  }\n\n  public toString() {\n    return this._tempStringified ?? '';\n  }\n\n  private subscribeOnWindowUnload() {\n    window.addEventListener('beforeunload', () => {\n      const v = this._tempStringified;\n      if (v && typeof v === 'string') {\n        sessionStorage.setItem(this.storageKeyValue, v);\n      }\n    });\n  }\n\n  private async readFromStorage(pinCode?: string) {\n    const v = sessionStorage.getItem(this.storageKeyValue);\n\n    if (!v) {\n      return;\n    }\n    const salt = !!pinCode && this.readSalt();\n    const decrypted =\n      salt && pinCode ? await decryptDataByPassword(pinCode, salt, v) : v;\n\n    if (decrypted instanceof Error) {\n      throw decrypted;\n    }\n    return JSON.parse(decrypted);\n  }\n\n  protected clearSaltStorage() {\n    sessionStorage.removeItem(this.storageKeySalt);\n  }\n\n  protected clearValueStorage() {\n    sessionStorage.removeItem(this.storageKeyValue);\n  }\n\n  protected reset() {\n    this.clearSaltStorage();\n    this.clearValueStorage();\n    this.k = undefined;\n    this._temp = {};\n    this._tempStringified = undefined;\n  }\n\n  private stringifyTemp = async () => {\n    const k = this.k;\n    const v = this._temp;\n    let stringified = undefined as string | undefined;\n\n    if (!Object.keys(v).length) {\n      stringified = undefined;\n    } else if (k) {\n      const encrypted = await encryptDataToString(k, v);\n\n      if (encrypted instanceof Error) {\n        return;\n      }\n      stringified = encrypted;\n    } else {\n      stringified = JSON.stringify(v);\n    }\n    this._tempStringified = stringified;\n  };\n}\n","/home/paul/projects/protocol/src/classes/sensitive-data-session-storage/sensitive-data-session-storage.types.ts",["2154","2155"],"export interface ISensitiveDataSessionStorageOptions {\n  /**\n   * pincode value used to encrypt and decrypt a sensitive information\n   *\n   * @type {string}\n   * @memberof ISensitiveDataSessionStorageOptions\n   */\n  pinCode?: string;\n  storagePrefix?: string;\n  /**\n   * clear values in the session storage\n   * after connection to it.\n   *\n   * @type {boolean}\n   * @memberof ISensitiveDataSessionStorageOptions\n   */\n  clearStorageAfterConnect?: boolean;\n}\n/**\n * used to store data in the session storage.\n * A data may be secured with a pin code value.\n *\n * @export\n * @interface ISensitiveDataSessionStorage\n */\nexport interface ISensitiveDataSessionStorage {\n  /**\n   * connect to the storage\n   *\n   * @param {ISensitiveDataSessionStorageOptions} options\n   * @returns {Promise<void>}\n   * @memberof ISensitiveDataSessionStorage\n   * @throws\n   */\n  connect(options: ISensitiveDataSessionStorageOptions): Promise<void>;\n  /**\n   * add item to the storage\n   *\n   * @param {string} key\n   * @param {*} value\n   * @returns {Promise<void>}\n   * @memberof ISensitiveDataSessionStorage\n   */\n  setItem(key: string, value: any): Promise<void>;\n  getItem(key: string): Promise<any>;\n}\n","/home/paul/projects/protocol/src/classes/storage-providers/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["2156","2157","2158","2159"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../storage-providers.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n      }\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        return this.unset(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async unset(key: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      await levelStorage.del(key);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async clearDb(): Promise<Error | boolean> {\n    try {\n      const isDisconnected = this.checkIsReady();\n      const { levelStorage } = this;\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n      if (!levelStorage) {\n        return new Error('There is no connection to the local forage');\n      }\n      if (this.dbName === SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME) {\n        return new Error(\"The DEFAULT database can't be removed\");\n      }\n      if (!(levelStorage as any).clear) {\n        return new Error(\n          'The version of the library does not supports for a db clearing'\n        );\n      }\n      await (levelStorage as any).clear();\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        return this.unset(key);\n      }\n      await levelStorage.put(key, value);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const levelStorage = levelup(leveljs(dbName));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelStorage;\n  }\n}\n","/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts",["2160"],"import { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ownKeyOf } from 'types/helper.types';\nimport {\n  ISwarmMessageSubclassParserUtils,\n  ISwarmMessageSubclassParser,\n} from './swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types';\nimport {\n  ISwarmMessageSerializerUtils,\n  ISwarmMessageSerializer,\n} from './swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types';\nimport { IMessageSignatureValidatorOptionsUtils } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types';\nimport { ICentralAuthority } from '../central-authority-class/central-authority-class.types';\nimport { CentralAuthority } from '../central-authority-class/central-authority-class';\nimport { ISwarmMessgaeEncryptedCache } from '../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport {\n  IMessageValidatorOptions,\n  ISwarmMessageSubclassValidator,\n} from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types';\n\nexport enum ESwarmMessageSignatureAlgorithms {\n  'ep256' = 'ep256',\n}\n\nexport enum ESwarmMessageSignatureAlgorithmsDescription {\n  'ep256' = 'ECDSA_P-256',\n}\n\nexport const SwarmMessageSignatureSupprotedAlgorithms = Object.keys(\n  ESwarmMessageSignatureAlgorithmsDescription\n);\n\nexport interface ISwarmMessageReceiver {\n  receiverId: TSwarmMessageUserIdentifierSerialized;\n}\n\nexport type TSwarmMessageSignatureAlgorithm = ownKeyOf<\n  typeof ESwarmMessageSignatureAlgorithmsDescription\n>;\n\n/**\n * message serizlized and ready to send\n * into the swarm.\n */\nexport type TSwarmMessageSerialized = string;\n\n/**\n * message payload deserialized\n */\nexport type TSwarmMessagePayloadDeserialized = string;\n\n/**\n * message for sending an information in\n * the peer to peer decentralized system.\n * This interface describes deserialized\n * message body.\n *\n * @export\n * @interface ISwarmMessage\n * @property {string} typ - a type of the message.\n * @property {string | ArrayBuffer} pld - payload of the message is a buffer or a string\n * @property {string} uid - an identity of the user which post the message\n * @property {string} tss - UNIX timestamp in UTC when the message was posted. In seconds\n * @property {string} iss - the service in which the message was generated\n *\n * The signature must sign all the fields, including\n * the algorithm it used.\n */\nexport interface ISwarmMessageBodyDeserialized {\n  typ: string | number;\n  pld: TSwarmMessagePayloadDeserialized | ArrayBuffer;\n  ts: number;\n  iss: string;\n}\n\n/**\n * This is type of the message's body\n * serialized.\n */\nexport type TSwarmMessageBodyRaw = string;\n\n/**\n * body encrypted with a private of the user,\n * who will be receiver of the message\n */\nexport type TSwarmMessageBodyRawEncrypted = string;\n\n/**\n * this is message body of a private body\n * which is encrypted for the receiver user.\n */\nexport type TSwarmMessageBodyEncrypted = string;\n\n/**\n * This interface represents a message\n * incoming.\n *\n * @export\n * @interface ISwarmMessageRaw\n */\nexport interface ISwarmMessageRaw {\n  /**\n   * body of the message serialized\n   *\n   * @type {TSwarmMessageBodyRaw}\n   * @memberof ISwarmMessageRaw\n   */\n  bdy: TSwarmMessageBodyRaw;\n  /**\n   * sender identifier serialized\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  uid: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * signature of the message body\n   * and sender of the message\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  sig: string;\n  /**\n   * the algorythm used for the signature\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  alg: ownKeyOf<typeof ESwarmMessageSignatureAlgorithmsDescription>;\n  /**\n   * is this is private message, may be for this user\n   *\n   * @type {boolean}\n   * @memberof ISwarmMessageRaw\n   */\n  isPrivate?: boolean;\n}\n\n// this is for a private messages construction. Message body will be encrypted\n// with the public key of the user with id = receiverId\nexport type TSwarmMessageConstructorArgumentBodyPrivate = TSwarmMessageConstructorArgumentBody &\n  ISwarmMessageReceiver;\n\nexport type TSwarmMessageSeriazlized = string;\n\n/**\n * body of a swarm message\n *\n * @export\n * @interface ISwarmMessageBody\n * @extends {Omit<ISwarmMessageBodyDeserialized, 'pld'>}\n */\nexport interface ISwarmMessageBody\n  extends Omit<ISwarmMessageBodyDeserialized, 'pld'>,\n    Partial<ISwarmMessageReceiver> {\n  pld: TSwarmMessagePayloadDeserialized;\n}\n\n/**\n * this is representation of a message deserialized\n * and fully decrypted.\n *\n * @export\n * @interface ISwarmMessage\n * @extends {ISwarmMessageBodyDeserialized}\n */\nexport interface ISwarmMessageDecrypted extends Omit<ISwarmMessageRaw, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\n/**\n * this is representation of a message deserialized\n * and private with encrypted body.\n *\n * @export\n * @interface ISwarmMessage\n * @extends {ISwarmMessageBodyDeserialized}\n */\nexport interface ISwarmMessageEncrypted extends Omit<ISwarmMessageRaw, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\nexport type TSwarmMessage = ISwarmMessageEncrypted | ISwarmMessageDecrypted;\n\nexport interface ISwarmMessageInstanceBase\n  extends Omit<ISwarmMessageRaw, 'bdy'> {\n  toString(): TSwarmMessageSeriazlized;\n}\n\nexport interface ISwarmMessageInstanceDecrypted\n  extends Omit<ISwarmMessageInstanceBase, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\nexport interface ISwarmMessageInstanceEncrypted\n  extends Omit<ISwarmMessageInstanceBase, 'bdy'> {\n  bdy: TSwarmMessageBodyEncrypted;\n}\n\nexport type TSwarmMessageInstance =\n  | ISwarmMessageInstanceDecrypted\n  | ISwarmMessageInstanceEncrypted;\n\n/**\n * utilities used for messages parsing,\n * serizlization and validation\n *\n * @export\n * @interface ISwarmMessageConstructorUtils\n * @extends {ISwarmMessageSubclassParserUtils}\n * @extends {ISwarmMessageSerializerUtils}\n * @extends {IMessageSignatureValidatorOptionsUtils}\n */\nexport interface ISwarmMessageConstructorUtils\n  extends ISwarmMessageSubclassParserUtils,\n    ISwarmMessageSerializerUtils,\n    IMessageSignatureValidatorOptionsUtils {}\n\nexport interface ISwarmMessageConstructorOptionsInstances {\n  parser: ISwarmMessageSubclassParser;\n  serizlizer: ISwarmMessageSerializer;\n  validator: ISwarmMessageSubclassValidator;\n  /**\n   * used to store private messages\n   * in decrypted form, cause there is\n   * no way to decrypt private message\n   * which was sent to another user.\n   *\n   * @type {ISwarmMessgaeEncryptedCache}\n   * @memberof ISwarmMessageConstructorOptionsInstances\n   */\n  encryptedCache: ISwarmMessgaeEncryptedCache;\n}\n\nexport interface ISwarmMessageConstructorOptionsRequired {\n  utils: ISwarmMessageConstructorUtils;\n  caConnection: ICentralAuthority;\n  validation: IMessageValidatorOptions & {\n    signatureValidationOpts: Omit<\n      IMessageValidatorOptions['signatureValidationOpts'],\n      'caConnection'\n    >;\n  };\n  instances: Partial<ISwarmMessageConstructorOptionsInstances>;\n}\n\n/**\n * options used for swarm messages construction.\n *\n * @export\n * @interface ISwarmMessageConstructorOptions\n */\nexport type TSwarmMessageConstructorOptions = Omit<\n  ISwarmMessageConstructorOptionsRequired,\n  'utils' | 'validation'\n> & {\n  utils?: Partial<ISwarmMessageConstructorOptionsRequired['utils']>;\n  validation?: Partial<ISwarmMessageConstructorOptionsRequired['validation']>;\n};\n\n// construct message from a serialized\nexport interface ISwarmMessageConstructor {\n  readonly caConnection?: ICentralAuthority;\n  readonly encryptedCache?: ISwarmMessgaeEncryptedCache;\n  construct(message: TSwarmMessageSeriazlized): Promise<TSwarmMessageInstance>;\n}\n\nexport type TSwarmMessageConstructorArgumentBody = Omit<\n  ISwarmMessageBodyDeserialized,\n  'ts'\n> &\n  Partial<ISwarmMessageBodyDeserialized>;\n\nexport type TSwarmMessageConstructorBodyMessage =\n  | TSwarmMessageConstructorArgumentBodyPrivate\n  | TSwarmMessageConstructorArgumentBody;\n\n// construct message from an object which represents message's body\nexport interface ISwarmMessageConstructor {\n  construct(\n    messageBody: TSwarmMessageConstructorArgumentBody\n  ): Promise<TSwarmMessageInstance>;\n}\n\n/**\n * This signature constructs a private message for the user with\n * id === receiverId. The message's body will be encrypted\n * with a public key of the receiver.\n *\n * @export\n * @interface ISwarmMessageConstructor\n */\nexport interface ISwarmMessageConstructor {\n  construct(\n    messageBody: TSwarmMessageConstructorArgumentBodyPrivate\n  ): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts",["2161"],"import assert from 'assert';\nimport {\n  TSwarmMessageInstance,\n  TSwarmMessageBodyRaw,\n  TSwarmMessageBodyRawEncrypted,\n} from '../../swarm-message-constructor.types';\nimport { isCryptoKeyDataDecryption } from '../../../../utils/encryption-keys-utils/encryption-keys-utils';\nimport { QueuedEncryptionClassBase } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base';\nimport { ISwarmMessgaeEncryptedCache } from '../../../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport { ISwarmMessageBody } from '../../swarm-message-constructor.types';\nimport {\n  IQueuedEncrypyionClassBaseOptions,\n  IQueuedEncrypyionClassBase,\n} from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport {\n  ISwarmMessageRaw,\n  TSwarmMessage,\n  TSwarmMessageSeriazlized,\n} from '../../swarm-message-constructor.types';\nimport {\n  ISwarmMessageSubclassParserOptions,\n  ISwarmMessageSubclassParser,\n} from './swarm-message-subclass-parser.types';\n\nexport class SwarmMessageSubclassParser implements ISwarmMessageSubclassParser {\n  protected constructorOptions?: ISwarmMessageSubclassParserOptions;\n\n  protected msgDecryptQueue?: IQueuedEncrypyionClassBase;\n\n  protected encryptedCache?: ISwarmMessgaeEncryptedCache;\n\n  protected get options(): ISwarmMessageSubclassParserOptions {\n    if (!this.constructorOptions) {\n      throw new Error('The options is not defined for the instance');\n    }\n    return this.constructorOptions;\n  }\n\n  /**\n   * returns an options for messages signing\n   * queue\n   *\n   * @readonly\n   * @protected\n   * @type {IQueuedEncrypyionClassBaseOptions}\n   * @memberof SwarmMessageSerializer\n   */\n  protected get messageDecryptQueueOptions(): IQueuedEncrypyionClassBaseOptions {\n    return {\n      ...this.options.queueOptions,\n      keys: {\n        decryptKey: this.options.decryptionKey,\n      },\n    };\n  }\n\n  constructor(options: ISwarmMessageSubclassParserOptions) {\n    this.setOptions(options);\n    this.startMessageDecryptQueue();\n  }\n\n  /**\n   * parses the message serialized to a\n   * deserizlized message object\n   *\n   * @memberof SwarmMessageSubclassParser\n   */\n  public parse = async (\n    message: TSwarmMessageSeriazlized\n  ): Promise<TSwarmMessageInstance> => {\n    const messageRaw = await this.parseMessageToRaw(message);\n    const messageParsed = await this.parseMessageRaw(messageRaw);\n\n    return this.getSwarmMessageInstance(messageParsed, message);\n  };\n\n  protected validateOptions(options: ISwarmMessageSubclassParserOptions): void {\n    assert(options, 'Options must be provided');\n    assert(\n      typeof options === 'object',\n      'The options provided must be an object'\n    );\n\n    const { utils, validator, decryptionKey } = options;\n\n    assert(utils, 'Utils must be provided');\n    assert(typeof utils === 'object', 'Utils must be an object');\n    assert(\n      typeof utils.messageBodyRawParser === 'function',\n      'messageBodyRawParser utility must be a function'\n    );\n    assert(\n      typeof utils.messageParser === 'function',\n      'messageParser utility must be a function'\n    );\n    assert(validator, 'Validator is not provided');\n    assert(\n      typeof validator.valiadateSwarmMessageRaw === 'function',\n      'Validator incorrectly implements the interface, cause the valiadateSwarmMessageRaw method is absent'\n    );\n    assert(\n      typeof validator.valiadateSwarmMessage === 'function',\n      'Validator incorrectly implements the interface, cause the valiadateSwarmMessage method is absent'\n    );\n    if (!decryptionKey) {\n      console.warn(\n        'There is no key for private messages decryption provided in options'\n      );\n    } else {\n      assert(\n        isCryptoKeyDataDecryption(decryptionKey),\n        \"The key provided can't be used for data decryption\"\n      );\n    }\n  }\n\n  protected setOptions(options: ISwarmMessageSubclassParserOptions): void {\n    this.validateOptions(options);\n    this.constructorOptions = options;\n    this.encryptedCache = options.encryptedCache;\n  }\n\n  protected startMessageDecryptQueue() {\n    this.msgDecryptQueue = new QueuedEncryptionClassBase(\n      this.messageDecryptQueueOptions\n    );\n  }\n\n  /**\n   * parses the messgae to the raw message format\n   * and validates it.\n   *\n   * @protected\n   * @param {TSwarmMessageSeriazlized} mesage\n   * @returns {ISwarmMessageRaw}\n   * @memberof SwarmMessageSubclassParser\n   * @throws\n   */\n  protected async parseMessageToRaw(\n    mesage: TSwarmMessageSeriazlized\n  ): Promise<ISwarmMessageRaw> {\n    const { utils, validator } = this.options;\n    const { messageParser } = utils;\n    const messageRaw = messageParser(mesage);\n\n    await validator.valiadateSwarmMessageRaw(messageRaw);\n    return messageRaw;\n  }\n\n  /**\n   * parses a swarm message form the raw format\n   * and validates it.\n   *\n   * @protected\n   * @param {ISwarmMessageRaw} messageRaw\n   * @returns {TSwarmMessage}\n   * @memberof SwarmMessageSubclassParser\n   * @throws\n   */\n  protected async parseMessageRaw(\n    messageRaw: ISwarmMessageRaw\n  ): Promise<TSwarmMessage> {\n    const { utils, validator } = this.options;\n    const { messageBodyRawParser } = utils;\n    const { bdy: bodyRaw, isPrivate } = messageRaw;\n    let bodyRawDecrypted;\n\n    if (isPrivate) {\n      validator.validateMessageBodyEncrypted(messageRaw.bdy);\n\n      const msgBody = await this.readMessgeBodyFromCache(messageRaw.sig);\n\n      if (typeof msgBody === 'string') {\n        // if the message's body decrypted found\n        bodyRawDecrypted = msgBody;\n      }\n    }\n    if (!bodyRawDecrypted) {\n      bodyRawDecrypted = isPrivate\n        ? await this.decryptMessageBodyRaw(bodyRaw)\n        : bodyRaw;\n    }\n\n    const bodyRawParsed = messageBodyRawParser(bodyRawDecrypted);\n\n    const swarmMessage: TSwarmMessage = {\n      ...messageRaw,\n      bdy: bodyRawParsed,\n    };\n\n    validator.valiadateSwarmMessage(swarmMessage);\n\n    return swarmMessage;\n  }\n\n  protected async decryptMessageBodyRaw(\n    bodyRaw: TSwarmMessageBodyRawEncrypted\n  ): Promise<TSwarmMessageBodyRaw> {\n    if (!this.msgDecryptQueue) {\n      throw new Error(\n        'Message decrypt queue must be started to read private messgaes'\n      );\n    }\n    const decryptedBody = await this.msgDecryptQueue.decryptData(bodyRaw);\n\n    if (decryptedBody instanceof Error) {\n      console.error('Failed to decrypt the private message');\n      throw decryptedBody;\n    }\n    if (!decryptedBody) {\n      throw new Error('No data got after message was decrypted');\n    }\n    return decryptedBody;\n  }\n\n  protected getSwarmMessageInstance(\n    msg: TSwarmMessage,\n    msgSerizlized: TSwarmMessageSeriazlized\n  ): TSwarmMessageInstance {\n    return {\n      ...msg,\n      toString: function(a: TSwarmMessageSeriazlized) {\n        return a;\n      }.bind(undefined, msgSerizlized),\n    };\n  }\n\n  /**\n   * read a message's body decrypted.\n   *\n   * @protected\n   * @param {string} sig\n   * @returns\n   * @memberof SwarmMessageSubclassParser\n   */\n  protected async readMessgeBodyFromCache(sig: string) {\n    if (this.encryptedCache) {\n      return this.encryptedCache.get(sig);\n    }\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts",["2162"],"import { ISwarmMessageSubclassValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator.types';\nimport { ISwarmMessageUtilsMessageParser } from '../../swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types';\nimport { ISwarmMessageUtilsBodyParser } from '../../swarm-message-utils/swarm-message-utils-body-parser';\nimport { IQueuedEncrypyionClassBaseOptions } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport { ISwarmMessgaeEncryptedCache } from '../../../swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport {\n  TSwarmMessageSeriazlized,\n  TSwarmMessageInstance,\n} from '../../swarm-message-constructor.types';\n\nexport interface ISwarmMessageSubclassParserUtils {\n  messageParser: ISwarmMessageUtilsMessageParser;\n  messageBodyRawParser: ISwarmMessageUtilsBodyParser;\n}\n\nexport interface ISwarmMessageSubclassParserOptions {\n  validator: ISwarmMessageSubclassValidator;\n  utils: ISwarmMessageSubclassParserUtils;\n  queueOptions?: IQueuedEncrypyionClassBaseOptions['queueOptions'];\n  /**\n   * this is a key used to decrypt private messages\n   */\n  decryptionKey?: CryptoKey;\n  /**\n   * if provided, then:\n   * 1) For private messages, before decrypt it's body, parser will try to\n   * read it's body from the cache provided before;\n   * 2) For all messages, parser will try to read sign mark before\n   * validation of a message signature. If there is no mark stored,\n   * then it will be validated.\n   *\n   * @type {ISwarmMessgaeEncryptedCache}\n   * @memberof ISwarmMessageSubclassParserOptions\n   */\n  encryptedCache?: ISwarmMessgaeEncryptedCache;\n}\n\n/**\n * parses and validates swarm message serizlized\n *\n * @export\n * @interface ISwarmMessageSubclassParser\n */\nexport interface ISwarmMessageSubclassParser {\n  /**\n   * deserialize and validate the swarm message\n   *\n   * @param {TSwarmMessageSeriazlized} message - swarm message serialized\n   * @returns {Promise<ISwarmMessage>}\n   * @memberof ISwarmMessageSubclassParser\n   * @throws\n   */\n  parse(message: TSwarmMessageSeriazlized): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts",["2163"],"import { ISwarmMessageSubclassFieldsValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from '../../swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types';\nimport { ICentralAuthority } from '../../../central-authority-class/central-authority-class.types';\nimport { IQueuedEncrypyionClassBaseOptions } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport { ISwarmMessageUtilsBodySerializer } from '../../swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types';\nimport { ISwarmMessageUtilsMessageSerializer } from '../../swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types';\nimport { ISwarmMessageSubclassValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator.types';\nimport { TSwarmMessageInstance } from '../../swarm-message-constructor.types';\nimport { TSwarmMessageSignatureAlgorithm } from '../../swarm-message-constructor.types';\nimport { ISwarmMessageBodyDeserialized } from '../../swarm-message-constructor.types';\n\nexport interface ISwarmMessageSerializerUtils {\n  getDataToSignBySwarmMsg: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw;\n  swarmMessageBodySerializer: ISwarmMessageUtilsBodySerializer;\n  swarmMessageSerializer: ISwarmMessageUtilsMessageSerializer;\n}\n\n/**\n * data about the user who will create\n * messages.\n *\n * @export\n * @interface ISwarmMessageSerializerUser\n */\nexport interface ISwarmMessageSerializerUser {\n  /**\n   * identity of the user who will be a creator of\n   * swarm messages.\n   *\n   * @type {TSwarmMessageUserIdentifierSerialized}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  userId: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * A crypto key which will be used for\n   * messages signing.\n   *\n   * @type {CryptoKey}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  dataSignKey: CryptoKey;\n}\n\n/**\n * User for messages creation\n *\n * @export\n * @interface ISwarmMessageSerializerConstructorOptions\n */\nexport interface ISwarmMessageSerializerConstructorOptions {\n  /**\n   * options used for the message signing queue\n   *\n   * @type {Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  queueOptions?: Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>;\n  /**\n   * instance implemented connection to the CentralAuthority\n   * to get information described in ISwarmMessageSerializerUser\n   *\n   * @type {ICentralAuthority}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  caConnection: ICentralAuthority;\n  /**\n   * utils used for a message signing\n   *\n   * @type {ISwarmMessageSerializerUtils}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  utils: ISwarmMessageSerializerUtils;\n  /**\n   * instance of the SwarmMessageFieldsValidator subclass\n   *\n   * @type {ISwarmMessageSubclassFieldsValidator}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  messageValidator: ISwarmMessageSubclassValidator;\n  /**\n   * the algorithm used for messages signing\n   *\n   * @type {ESwarmMessageSignatureAlgorithmsDescription}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  alg: TSwarmMessageSignatureAlgorithm;\n}\n\n/**\n * this class used for messages serizlization\n * before sending it to the swarm users.\n *\n * @export\n * @interface ISwarmMessageSerializer\n */\nexport interface ISwarmMessageSerializer {\n  /**\n   * serialize the message into a type\n   * which can be used for sending of\n   * a message into the swarm.\n   * If a message's data is not valid\n   * the method throws.\n   *\n   * @param {ISwarmMessageBodyDeserialized} msgBody\n   * @returns {TSwarmMessageSerialized}\n   * @memberof ISwarmMessageSerializer\n   * @throws\n   */\n  serialize(\n    msgBody: ISwarmMessageBodyDeserialized\n  ): Promise<TSwarmMessageInstance>;\n  /**\n   * serialize the message as a private and\n   * encrypt it's body with the key provided.\n   *\n   * @param {ISwarmMessageBodyDeserialized} msgBody\n   * @param {CryptoKey} encryptWithKey - user's public key to encrypt\n   * the message as a private\n   * @returns {Promise<TSwarmMessageInstance>}\n   * @memberof ISwarmMessageSerializer\n   */\n  serialize(\n    msgBody: ISwarmMessageBodyDeserialized,\n    encryptWithKey?: CryptoKey\n  ): Promise<TSwarmMessageInstance>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",["2164","2165","2166"],"import assert from 'assert';\nimport {\n  commonUtilsArrayDeleteFromArray,\n  commonUtilsArrayDoCallbackTillNoError,\n} from 'utils/common-utils/common-utils';\nimport { TSwarmMessageUserIdentifierVersion } from '../swarm-message-subclass-validator.types';\nimport { validateIssuerDesirizlizedFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied';\nimport validateIssuerSerializedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized';\nimport { TSwarmMessageIssuerDeserialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types';\nimport validateTypeFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type';\nimport { validateUserIdentifier } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier';\nimport { createValidatePayload } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload';\nimport { createValidateTimestamp } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp';\nimport { TSwarmMessageType } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types';\nimport { ISwarmMessagePayloadValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { ISwarmMessageTimestampValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types';\nimport { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { CA_USER_IDENTITY_VERSIONS_LIST } from '../../../../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport {\n  TSwarmMessage,\n  ISwarmMessageBody,\n  TSwarmMessageBodyEncrypted,\n} from '../../../swarm-message-constructor.types';\nimport { validateMessageBodyRawFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw';\nimport { validateMessageSignatureFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature';\nimport {\n  IMessageFieldsValidatorOptions,\n  ISwarmMessageSubclassFieldsValidator,\n} from './swarm-message-subclass-validator-fields-validator.types';\nimport {\n  ISwarmMessageBodyDeserialized,\n  ISwarmMessageRaw,\n} from '../../../swarm-message-constructor.types';\nimport {\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MAX_LENGTH_BYTES,\n  SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MIN_LENGTH_BYTES,\n} from '../swarm-message-subclass-validator.const';\n\nexport class SwarmMessageSubclassFieldsValidator\n  implements ISwarmMessageSubclassFieldsValidator {\n  /**\n   * list of a valid issuers.\n   * If it is empty then any issuer will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected issuersList: TSwarmMessageIssuerDeserialized[] = [];\n\n  /**\n   * list of a valid user identifier versions.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected supportedUserIdentifierVer: TSwarmMessageUserIdentifierVersion[] = CA_USER_IDENTITY_VERSIONS_LIST;\n\n  /**\n   * list of a valid message types.\n   * If it is empty then any type will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {Array<string | number>}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected typesList: TSwarmMessageType[] = [];\n\n  protected payloadValidationOptions?: ISwarmMessagePayloadValidationOptions;\n\n  protected timestampValidationOptions?: ISwarmMessageTimestampValidationOptions;\n\n  protected validatePayload = createValidatePayload(\n    this.payloadValidationOptions\n  );\n\n  protected validateTimestamp = createValidateTimestamp(\n    this.timestampValidationOptions\n  );\n\n  /**\n   * Creates an instance of SwarmMessageSubclassValidator.\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  constructor(options?: IMessageFieldsValidatorOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * validate message's deserialized body object\n   *\n   * @param {ISwarmMessageBodyDeserialized} messageBody\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessageBody(messageBody: ISwarmMessageBodyDeserialized): void {\n    assert(!!messageBody, 'Message body must be defined');\n    assert(typeof messageBody === 'object', 'Message body must be an object');\n    const { iss, pld, ts, typ } = messageBody;\n\n    this.validateType(typ);\n    this.validateIssuer(iss);\n    this.validatePayload(pld);\n    this.validateTimestamp(ts);\n  }\n\n  public validateMessageBodyEncrypted(\n    messsageBodyEncrypted: TSwarmMessageBodyEncrypted\n  ): void {\n    assert(!!messsageBodyEncrypted, 'Message body must be specefied');\n    assert(\n      typeof messsageBodyEncrypted === 'string',\n      'Message body must be a string for a private messages'\n    );\n    assert(\n      messsageBodyEncrypted.length <\n        SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MAX_LENGTH_BYTES,\n      'Private message body is increased the maximum length'\n    );\n    assert(\n      messsageBodyEncrypted.length >\n        SWARM_MESSAGE_SUBCLASS_VALIDATOR_BODY_ENCRYPTED_MIN_LENGTH_BYTES,\n      'Private message body is less then the minimal length'\n    );\n  }\n\n  /**\n   * validate swarm message object\n   * throw an error if the message\n   * is not valid\n   *\n   * @param {TSwarmMessage} message\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessage(message: TSwarmMessage): void {\n    assert(!!message, 'Message must be defined');\n    assert(typeof message === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig, isPrivate } = message;\n\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n    this.validateIsPrivateField(isPrivate);\n    this.validateMessageBody(bdy as ISwarmMessageBodyDeserialized);\n  }\n\n  /**\n   * validate the message's in format\n   * when the body is serizlized\n   *\n   * @param {ISwarmMessageRaw} messageRaw\n   * @memberof SwarmMessageSubclassFieldsValidator\n   */\n  public validateMessageRaw(messageRaw: ISwarmMessageRaw): void {\n    assert(!!messageRaw, 'Message must be defined');\n    assert(typeof messageRaw === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig } = messageRaw;\n\n    validateMessageBodyRawFormat(bdy);\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n  }\n\n  /**\n   * add an issuer string in the list\n   * as a valid issuer.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  public addIssuerToValidList = (issuer: string): void => {\n    const { issuersList } = this;\n\n    validateIssuerDesirizlizedFormat(issuer);\n    if (!issuersList.includes(issuer)) {\n      issuersList.push(issuer);\n    }\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   */\n  public removeIssuerFromValidList(issuer: string): boolean | Error {\n    const { issuersList } = this;\n\n    if (typeof issuer !== 'string') {\n      return new Error('The issuer must be a string');\n    }\n    commonUtilsArrayDeleteFromArray(issuersList, issuer);\n    return true;\n  }\n\n  /**\n   * checks whether the issuer is in the\n   * list of the valid issuers. If the\n   * list of the valid issuers is empty\n   * then returns true\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkIssuerIsInList(issuer: string): void {\n    const { issuersList } = this;\n\n    assert(\n      !issuersList.length || issuersList.includes(issuer),\n      'The issuer is not into the list of the valid issuers'\n    );\n  }\n\n  protected validateIsPrivateField(isPrivateField?: any) {\n    if (isPrivateField != null) {\n      assert(isPrivateField === true, 'Is private value must be a \"true\"');\n    }\n  }\n\n  /**\n   * validate the Issuer format and\n   * if it is in the list of the valid\n   * issuers\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateIssuer(issuer: string): void {\n    validateIssuerSerializedFormat(issuer);\n    this.checkIssuerIsInList(issuer);\n  }\n\n  /**\n   * add an type string in the list\n   * as a valid types.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected addType = (type: TSwarmMessageType): void => {\n    const { typesList } = this;\n\n    validateTypeFormat(type, typesList);\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected removeType(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    commonUtilsArrayDeleteFromArray(typesList, type);\n  }\n\n  /**\n   * Checks whether the list of valid types is defined and not empty.\n   * If it is then checks if the type is into the list.\n   *\n   * @param {string| number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkTypeInList(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    assert(\n      !typesList.length || typesList.includes(type),\n      'The type is not into the list of the valid types'\n    );\n  }\n\n  /**\n   * check the Type value format and\n   * if the type is in the list of the\n   * valid types\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateType(type: TSwarmMessageType): void {\n    validateTypeFormat(type);\n    this.checkTypeInList(type);\n  }\n\n  protected validateUserIdentifier = (\n    userId: TSwarmMessageUserIdentifierSerialized\n  ): void => {\n    validateUserIdentifier(userId, this.supportedUserIdentifierVer);\n  };\n\n  /**\n   * set the options\n   *\n   * @protected\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected setOptions(options?: IMessageFieldsValidatorOptions) {\n    if (options != null) {\n      assert(typeof options === 'object', 'The options must be an object');\n\n      const {\n        supportedUserIdentifierVer,\n        payloadValidationOptions,\n        issuersList,\n        typesList,\n        timestampValidationOptions,\n      } = options;\n\n      if (timestampValidationOptions) {\n        this.timestampValidationOptions = timestampValidationOptions; // set time to live in milliseconds\n        this.validateTimestamp = createValidateTimestamp(\n          timestampValidationOptions\n        );\n      }\n      if (payloadValidationOptions) {\n        this.payloadValidationOptions = payloadValidationOptions;\n        this.validatePayload = createValidatePayload(payloadValidationOptions);\n      }\n      if (supportedUserIdentifierVer instanceof Array) {\n        this.supportedUserIdentifierVer = supportedUserIdentifierVer.map(\n          (userIdentifierVersion) => {\n            if (typeof userIdentifierVersion === 'string') {\n              return userIdentifierVersion;\n            }\n            assert.fail(\n              `The version ${userIdentifierVersion} must be a string`\n            );\n          }\n        );\n      }\n      if (issuersList) {\n        if (issuersList instanceof Array) {\n          const setIssuersListResult = commonUtilsArrayDoCallbackTillNoError<\n            string\n          >(issuersList, this.addIssuerToValidList);\n\n          if (setIssuersListResult instanceof Error) {\n            assert.fail(setIssuersListResult);\n          }\n        } else {\n          assert.fail('The value of the \"issuersList\" option must be an Array');\n        }\n      }\n      if (typesList) {\n        if (typesList instanceof Array) {\n          const setTypesListResult = commonUtilsArrayDoCallbackTillNoError<\n            TSwarmMessageType\n          >(typesList, this.addType);\n\n          if (setTypesListResult instanceof Error) {\n            throw setTypesListResult;\n          }\n        } else {\n          assert.fail('The value of the \"typesList\" option must be an Array');\n        }\n      }\n    }\n  }\n}\n\nexport default SwarmMessageSubclassFieldsValidator;\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts",["2167"],"import {\n  ISwarmMessageRaw,\n  TSwarmMessageSignatureAlgorithm,\n} from '../../swarm-message-constructor.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from './swarm-message-utils-signature.types';\nimport { SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER } from './swarm-message-utils-signature.const';\n\nexport const swarmMessageUtilSignatureGetStringForSignByMessageRaw: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw = (\n  msg: Omit<ISwarmMessageRaw, 'sig'>\n) =>\n  `${msg.alg}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.uid}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.bdy}`;\n","/home/paul/projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts",["2168"],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts",["2169","2170"],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts",["2171","2172","2173","2174","2175","2176"],"/home/paul/projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts",["2177"],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-message-encrypted-cache.utils.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.ts",["2178","2179","2180","2181"],"import {\n  TSwarmMessgaeEncryptedCacheOptions,\n  ISwarmMessgaeEncryptedCache,\n} from './swarm-messgae-encrypted-cache.types';\nimport assert from 'assert';\nimport { ISecretStorage } from '../secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from '../secret-storage-class/secret-storage-class';\nimport { TSwarmMessageBodyRaw } from '../swarm-message/swarm-message-constructor.types';\nimport {\n  ISwarmMessgaeEncryptedCacheOptionsStorageProvider,\n  ISwarmMessgaeEncryptedCacheOptionsForStorageProvider,\n} from './swarm-messgae-encrypted-cache.types';\nimport {\n  SWARM_MESSGAE_ENCRYPTED_CACHE_DEFAULT_STORAGE_DATABASE_NAME,\n  SWARM_MESSGAE_ENCRYPTED_CACHE_DEFAULT_STORAGE_DATABASE_NAME_HASH,\n} from './swarm-messgae-encrypted-cache.const';\nimport { calculateHash } from '../../utils/hash-calculation-utils/hash-calculation-utils';\n\nexport class SwarmMessageEncryptedCache implements ISwarmMessgaeEncryptedCache {\n  public isRunning: boolean = false;\n\n  protected options?: TSwarmMessgaeEncryptedCacheOptions = undefined;\n\n  protected storageProvider?: ISecretStorage = undefined;\n\n  protected get dbNamePrefix() {\n    return (\n      (this.options as ISwarmMessgaeEncryptedCacheOptionsForStorageProvider)\n        ?.dbNamePrefix || ''\n    );\n  }\n\n  protected get dbName() {\n    return `${(this\n      .options as ISwarmMessgaeEncryptedCacheOptionsForStorageProvider)\n      ?.storageProviderOptions?.dbName ||\n      SWARM_MESSGAE_ENCRYPTED_CACHE_DEFAULT_STORAGE_DATABASE_NAME}`;\n  }\n\n  public async connect(options: TSwarmMessgaeEncryptedCacheOptions) {\n    this.setOptions(options);\n    await this.runStorageConnection();\n    this.setIsRunning();\n  }\n\n  /**\n   * Add value only if not exists in the storage\n   *\n   * @memberof SwarmMessageEncryptedCache\n   */\n  public add = async (sig: string, message: TSwarmMessageBodyRaw) => {\n    this.checkIsActive();\n\n    const value = message || null;\n    const result = await this.storageProvider!.insert(sig, value);\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    return result;\n  };\n  public get = async (sig: string) => {\n    const result = await this.readValue(sig);\n\n    if (!result) {\n      return undefined;\n    }\n    return result;\n  };\n\n  public unset = async (sig: string) => {\n    this.checkIsActive();\n\n    const resutl = await this.storageProvider!.unset(sig);\n\n    if (resutl instanceof Error) {\n      throw resutl;\n    }\n  };\n\n  public async clearDb() {\n    const clearDbResult = await this.storageProvider?.clearDb();\n\n    if (clearDbResult instanceof Error) {\n      throw clearDbResult;\n    }\n  }\n\n  /**\n   * Set value INDEPENDENTLY whether it's exists or not.\n   * WARNING!. The 'add' method should be used for storing messages.\n   * This method may be used if the instance is used not for the messages.\n   * TODO - It's added only to the instance be capatible with IStorageCommon interface\n   *\n   * @memberof SwarmMessageEncryptedCache\n   */\n  public set = async (sig: string, message: TSwarmMessageBodyRaw) => {\n    this.checkIsActive();\n\n    const value = message || null;\n    const result = await this.storageProvider!.set(sig, value);\n\n    if (result instanceof Error) {\n      throw result;\n    }\n  };\n\n  protected setOptions(options: TSwarmMessgaeEncryptedCacheOptions) {\n    assert(options, 'Options must be provided');\n    assert(typeof options === 'object', 'Options must be an object');\n\n    const optsWithStorageProvider = options as ISwarmMessgaeEncryptedCacheOptionsStorageProvider;\n\n    if (optsWithStorageProvider.storageProvider) {\n      assert(\n        typeof optsWithStorageProvider.storageProvider === 'object',\n        'Storage provider must be an object'\n      );\n      assert(\n        typeof optsWithStorageProvider.storageProvider.connect === 'function' &&\n          typeof optsWithStorageProvider.storageProvider.get === 'function' &&\n          typeof optsWithStorageProvider.storageProvider.get === 'function',\n        'Storage provider provided is not valid'\n      );\n    } else {\n      const optsWithConfForStorageProviderConnection = options as ISwarmMessgaeEncryptedCacheOptionsForStorageProvider;\n\n      assert(\n        optsWithConfForStorageProviderConnection.storageProviderAuthOptions,\n        'Options for authorization to the storage provider must be provided'\n      );\n    }\n\n    this.options = options;\n  }\n\n  protected setStorageProvider(provider: ISecretStorage) {\n    this.storageProvider = provider;\n  }\n\n  protected async runStorageConnection() {\n    const { options } = this;\n    const optsWithStorageProvider = options as ISwarmMessgaeEncryptedCacheOptionsStorageProvider;\n\n    if (optsWithStorageProvider.storageProvider) {\n      this.setStorageProvider(optsWithStorageProvider.storageProvider);\n      return;\n    }\n\n    const optsWithConfForStorageProviderConnection = options as ISwarmMessgaeEncryptedCacheOptionsForStorageProvider;\n\n    if (!optsWithConfForStorageProviderConnection.storageProviderAuthOptions) {\n      throw new Error(\n        'Auth options was not provided to connect with the secret storage provider'\n      );\n    }\n\n    const {\n      storageProviderOptions,\n      storageProviderAuthOptions,\n    } = optsWithConfForStorageProviderConnection;\n\n    const storageProvider = new SecretStorage();\n    const dbName = await calculateHash(\n      this.dbName,\n      SWARM_MESSGAE_ENCRYPTED_CACHE_DEFAULT_STORAGE_DATABASE_NAME_HASH\n    );\n\n    if (dbName instanceof Error) {\n      console.error(\n        `Failed to calculate hash for the database name ${this.dbName}`\n      );\n      throw dbName;\n    }\n    await storageProvider.authorize(storageProviderAuthOptions, {\n      ...storageProviderOptions,\n      dbName,\n    });\n    this.setStorageProvider(storageProvider);\n  }\n\n  protected setIsRunning() {\n    this.isRunning = true;\n  }\n\n  protected checkIsActive() {\n    if (!this.isRunning) {\n      throw new Error('The instance is not running');\n    }\n    if (!this.storageProvider || !this.storageProvider.isActive) {\n      throw new Error('There is no running storage provider');\n    }\n    return true;\n  }\n\n  protected async readValue(\n    sig: string\n  ): Promise<TSwarmMessageBodyRaw | undefined | null> {\n    this.checkIsActive();\n\n    const result = await this.storageProvider!.get(sig);\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    if (result === null) {\n      return undefined;\n    }\n    if (!result) {\n      return undefined;\n    }\n    if (typeof result !== 'string') {\n      throw new Error('There is a wrong result');\n    }\n    return result;\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-messgae-encrypted-cache/swarm-messgae-encrypted-cache.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts",["2182"],"import { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport assert from 'assert';\nimport {\n  TSwarmStoreDatabaseRequestMethodReturnType,\n  ISwarmStoreOptionsOfDatabasesKnownList,\n  ISwarmStoreDatabaseBaseOptions,\n  ISwarmStoreDatabasesCommonStatusList,\n} from './swarm-store-class.types';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n  ESwarmStoreDbStatus,\n  SWARM_STORE_CONNECTORS,\n  SWARM_STORE_DATABASES_STATUSES_EMPTY,\n  SWARM_STORE_DATABASES_PERSISTENT_LIST_DIRECTORY_DEFAULT,\n} from './swarm-store-class.const';\nimport { IStorageCommon } from 'types/storage.types';\nimport { calculateHash } from 'utils/hash-calculation-utils';\nimport {\n  ISwarmStoreConnector,\n  ISwarmStoreDatabasesStatuses,\n  TSwarmStoreValueTypes,\n  TSwarmStoreDatabaseMethod,\n  TSwarmStoreDatabaseMethodArgument,\n  TSwarmStoreConnectorEventRetransmitter,\n  TSwarmStoreDatabaseOptions,\n  ISwarmStoreEvents,\n  ISwarmStore,\n  ISwarmStoreOptions,\n} from './swarm-store-class.types';\n\n/**\n * This is decentralized storage.\n * Allows to create a new database,\n * store a value, grant access,\n * validate, store a data on it.\n *\n * @export\n * @class SwarmStore\n * @extends {EventEmitter<ISwarmStoreEvents>}\n * @implements {ISwarmStore<P>}\n * @template P\n */\nexport class SwarmStore<\n  P extends ESwarmStoreConnector,\n  ItemType extends any,\n  E extends ISwarmStoreEvents = ISwarmStoreEvents\n> extends EventEmitter<E> implements ISwarmStore<P, ItemType> {\n  public get isReady(): boolean {\n    return !!this.connector && this.connector.isReady;\n  }\n\n  public get isClosed(): boolean {\n    return !!this.connector && this.connector.isClosed;\n  }\n\n  public get dbStatuses(): ISwarmStoreDatabasesStatuses {\n    if (this.isReady && !this.isClosed) {\n      return this.dbStatusesExisting;\n    }\n    return SWARM_STORE_DATABASES_STATUSES_EMPTY;\n  }\n\n  public get databases(): ISwarmStoreDatabasesCommonStatusList {\n    const { databasesKnownOptionsList, databasesOpenedList } = this;\n\n    return {\n      get options() {\n        return databasesKnownOptionsList;\n      },\n      get opened() {\n        return databasesOpenedList;\n      },\n    };\n  }\n\n  protected connector: ISwarmStoreConnector<P> | undefined;\n\n  protected dbStatusesExisting: ISwarmStoreDatabasesStatuses = SWARM_STORE_DATABASES_STATUSES_EMPTY;\n\n  protected storeConnectorEventsHandlers:\n    | Record<ESwarmStoreEventNames, TSwarmStoreConnectorEventRetransmitter>\n    | undefined;\n\n  /**\n   * List of databases options opened during this session\n   * or during previous sessions\n   * (if an instanceof databasePersistantListStorage provided)\n   * and which were not dropped.\n   * If a database not opened because it's failed,\n   * then it's options won't be added to the list.\n   *\n   * @protected\n   * @type {ISwarmStoreOptionsOfDatabasesKnownList}\n   * @memberof SwarmStore\n   */\n  protected databasesKnownOptionsList: ISwarmStoreOptionsOfDatabasesKnownList = {};\n\n  /**\n   * Databases opened during this session.\n   *\n   * @protected\n   * @type {Record<string, boolean>}\n   * @memberof SwarmStore\n   */\n  protected databasesOpenedList: Record<string, boolean> = {};\n\n  /**\n   * storage with list of all databases opened and not dropped.\n   *\n   * @protected\n   * @type {IStorageCommon}\n   * @memberof SwarmStore\n   */\n  protected databasePersistantListStorage?: IStorageCommon;\n\n  /**\n   * A directory name under which all the databases\n   * will be listed.\n   *\n   * @protected\n   * @type {string} []\n   * @memberof SwarmStore\n   */\n  protected databasesLisPersistantKey?: string;\n\n  /**\n   * Open connection with all databases listed in the options.\n   * If a databasePersistantListStorage provided, then a list with\n   * all databases opened and not dropped will be saved.\n   *\n   * @param {ISwarmStoreOptions<P, ItemType>} options\n   * @param {IStorageCommon} [databasePersistantListStorage]\n   * @returns {(Promise<Error | void>)}\n   * @memberof SwarmStore\n   */\n  public async connect(\n    options: ISwarmStoreOptions<P, ItemType>,\n    databasePersistantListStorage?: IStorageCommon\n  ): Promise<Error | void> {\n    let connectionWithConnector: ISwarmStoreConnector<P> | undefined;\n    try {\n      this.validateOptions(options);\n      if (databasePersistantListStorage) {\n        await this.handleDatabasePersistentList(\n          databasePersistantListStorage,\n          this.getDatabasePersistentListDirectory(options)\n        );\n      }\n      connectionWithConnector = this.createConnectionWithStorageConnector(\n        options\n      );\n      this.createStatusTable(options);\n      this.subscribeOnConnector(connectionWithConnector);\n      await this.startConnectionWithConnector(connectionWithConnector, options);\n    } catch (err) {\n      if (connectionWithConnector) {\n        this.unSubscribeFromConnector(connectionWithConnector);\n      }\n      return err;\n    }\n  }\n\n  /**\n   * cloase all connections\n   *\n   * @returns {(Promise<Error | undefined>)}\n   * @memberof SwarmStore\n   */\n  public async close(): Promise<Error | undefined> {\n    let error: Error | undefined;\n    const { connector } = this;\n\n    try {\n      await this.closeConnector();\n    } catch (err) {\n      error = err;\n    }\n    this.reset();\n    if (connector) {\n      this.unSubscribeFromConnector(connector);\n    }\n    // this.removeAllListeners();\n    return error;\n  }\n\n  /**\n   * open a new connection to the database specified\n   *\n   * @param {TSwarmStoreDatabaseOptions} dbOptions\n   * @returns {(Promise<void | Error>)}\n   * @memberof SwarmStore\n   */\n  public async openDatabase(\n    dbOptions: TSwarmStoreDatabaseOptions<P, ItemType>\n  ): Promise<void | Error> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setEmptyStatusForDb(dbOptions.dbName);\n\n    const result = await connector.openDatabase(dbOptions);\n\n    if (!(result instanceof Error)) {\n      this.handleDatabaseOpened(dbOptions);\n    } else {\n      this.handleDatabaseClosed(dbOptions);\n    }\n    return result;\n  }\n\n  /**\n   * close an existing connection to the database\n   * with the name specified\n   * if exists\n   *\n   * @param {TSwarmStoreDatabaseOptions} dbOptions\n   * @returns {(Promise<void | Error>)}\n   * @memberof SwarmStore\n   */\n  public async closeDatabase(dbName: string): Promise<void | Error> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setClosedStatusForDb(dbName);\n\n    const result = connector.closeDatabase(dbName);\n\n    if (!(result instanceof Error)) {\n      const dbOptions = this.getDatabaseOptions(dbName);\n\n      if (dbOptions) {\n        this.handleDatabaseClosed(dbOptions);\n      }\n    }\n    return result;\n  }\n\n  public async dropDatabase(dbName: string): Promise<void | Error> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setClosedStatusForDb(dbName);\n\n    const dropDatabaseResult = await connector.dropDatabase(dbName);\n\n    if (dropDatabaseResult instanceof Error) {\n      return dropDatabaseResult;\n    } else {\n      const dbOptions = this.getDatabaseOptions(dbName);\n\n      if (dbOptions) {\n        this.handleDatabaseDropped(dbOptions);\n      }\n    }\n  }\n\n  /**\n   * send request (get, set and so on) to a swarm database\n   *\n   * @template V\n   * @template A\n   * @param {TSwarmStoreDatabaseOptions['dbName']} dbName\n   * @param {TSwarmStoreDatabaseMethod<P>} dbMethod\n   * @param {TSwarmStoreDatabaseMethodArgument<P, V>} arg\n   * @returns {(Promise<TSwarmStoreDatabaseMethodAnswer<P, A> | Error>)}\n   * @memberof SwarmStore\n   */\n  public async request<V extends TSwarmStoreValueTypes<P>, A>(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName'],\n    dbMethod: TSwarmStoreDatabaseMethod<P>,\n    arg: TSwarmStoreDatabaseMethodArgument<P, V>\n  ): Promise<TSwarmStoreDatabaseRequestMethodReturnType<P, V>> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setClosedStatusForDb(dbName);\n    return connector.request(dbName, dbMethod, arg);\n  }\n\n  /**\n   * throws an error if options provided\n   * are not valid\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   * @throws\n   */\n  protected validateOptions(options: ISwarmStoreOptions<P, ItemType>): void {\n    assert(options, 'An options must be specified');\n    assert(\n      typeof options === 'object',\n      'The options specified is not an object'\n    );\n    assert(\n      options.databases instanceof Array,\n      'The options for databases must be an array'\n    );\n    options.databases.forEach((optionsDb) => {\n      assert(optionsDb, 'Database options must be specified');\n      assert(\n        typeof optionsDb === 'object',\n        'Database options must be an object'\n      );\n      assert(\n        typeof optionsDb.dbName === 'string',\n        'Database name must be a string'\n      );\n    });\n    assert(\n      typeof options.directory === 'string',\n      'Directory must be a string if specified'\n    );\n    assert(options.provider, 'Provider must be specified');\n    assert(\n      Object.values(ESwarmStoreConnector).includes(options.provider),\n      `There is unknown provider specified \"${options.provider}\"`\n    );\n    assert(\n      options.providerConnectionOptions &&\n        typeof options.providerConnectionOptions === 'object',\n      'Options specifically for the provider must be set and be an object'\n    );\n    assert(options.userId, 'The user identity must be provided');\n    assert(\n      typeof options.userId === 'string',\n      'The user identity must be a string'\n    );\n    assert(options.credentials, 'A credentials must be provided');\n    assert(\n      typeof options.credentials === 'object',\n      'Credentials must be an object'\n    );\n    assert(\n      options.credentials.login,\n      \"User's login must be provided in the credentials to access on an encrypyted data\"\n    );\n  }\n\n  /**\n   * returns a key of opened databases list\n   * options\n   *\n   * @protected\n   * @param {string} [directory]\n   * @returns {Promise<string>}\n   * @memberof SwarmStore\n   * @throws\n   */\n  protected async getDatabasesListKey(directory?: string): Promise<string> {\n    const hash = await calculateHash(\n      `${directory || ''}/databases_opened_list`\n    );\n\n    if (hash instanceof Error) {\n      throw hash;\n    }\n    return `${hash}/`;\n  }\n\n  /**\n   * returns a connector constructor specified\n   * or undefined if there is no constructor\n   * for for a connector with a name provided\n   *\n   * @protected\n   * @param {ESwarmStoreConnector} connectorName\n   * @returns\n   * @memberof SwarmStore\n   */\n  protected getStorageConnector(connectorName: ESwarmStoreConnector) {\n    return SWARM_STORE_CONNECTORS[connectorName];\n  }\n\n  /**\n   * returns options of a database if opened before\n   *\n   * @protected\n   * @param {string} dbName - name of a database\n   * @returns {ISwarmStoreDatabaseBaseOptions | undefined}\n   * @memberof SwarmStore\n   */\n  protected getDatabaseOptions(\n    dbName: string\n  ): undefined | ISwarmStoreDatabaseBaseOptions {\n    return this.databases?.options[dbName];\n  }\n\n  /**\n   * Directry for the database persistent list.\n   * Better if it will be uniq per users\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P, ItemType>} options\n   * @returns {string}\n   * @memberof SwarmStore\n   */\n  protected getDatabasePersistentListDirectory(\n    options: ISwarmStoreOptions<P, ItemType>\n  ): string {\n    return `${options.userId}/${options.directory ||\n      SWARM_STORE_DATABASES_PERSISTENT_LIST_DIRECTORY_DEFAULT}`;\n  }\n\n  /**\n   * Preload the databases list.\n   *\n   * @protected\n   * @param {IStorageCommon} databasePersistantListStorage\n   * @param {string} ['' = directory] - will be used as a key for the databasePersistantListStorage storage\n   * @memberof SwarmStore\n   * @returns Promise<void>\n   * @throws\n   */\n  protected async handleDatabasePersistentList(\n    databasePersistantListStorage: IStorageCommon,\n    directory?: string\n  ): Promise<void> {\n    this.databasePersistantListStorage = databasePersistantListStorage;\n\n    const key = await this.getDatabasesListKey(directory);\n    this.databasesLisPersistantKey = key;\n    await this.preloadOpenedDatabasesList();\n  }\n\n  /**\n   * Stringify list of databases options\n   * known\n   *\n   * @protected\n   * @param {ISwarmStoreOptionsOfDatabasesKnownList} databasesKnownOptionsList\n   * @returns {string}\n   * @memberof SwarmStore\n   * @throws\n   */\n  protected stringifyDatabaseOptionsList(\n    databasesKnownOptionsList: ISwarmStoreOptionsOfDatabasesKnownList\n  ): string {\n    return JSON.stringify(databasesKnownOptionsList);\n  }\n\n  /**\n   * Parse databases list loaded from storage\n   *\n   * @protected\n   * @param {string} databasesKnownOptionsList\n   * @returns {ISwarmStoreOptionsOfDatabasesKnownList}\n   * @memberof SwarmStore\n   * @throws\n   */\n  protected parseDatabaseOptionsList(\n    databasesKnownOptionsList: string\n  ): ISwarmStoreOptionsOfDatabasesKnownList {\n    return JSON.parse(databasesKnownOptionsList);\n  }\n\n  /**\n   * preload a list of databases opened\n   * during previous sessions.\n   *\n   * @protected\n   * @memberof SwarmStore\n   * @returns Promise<void>\n   * @throws\n   */\n  protected async preloadOpenedDatabasesList(): Promise<void> {\n    const databasesOptionsList =\n      this.databasesLisPersistantKey &&\n      (await this.databasePersistantListStorage?.get(\n        this.databasesLisPersistantKey\n      ));\n    if (databasesOptionsList) {\n      if (databasesOptionsList instanceof Error) {\n        throw databasesOptionsList;\n      }\n      this.databasesKnownOptionsList = this.parseDatabaseOptionsList(\n        databasesOptionsList\n      );\n    }\n  }\n\n  /**\n   * emit event with a databases list\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected emitDatabasesListUpdated() {\n    this.emit(ESwarmStoreEventNames.DATABASES_LIST_UPDATED, this.databases);\n  }\n\n  /**\n   * Add a database opened to lists.\n   *\n   * @protected\n   * @param {ISwarmStoreDatabaseBaseOptions} dbOpenedOptions\n   * @memberof SwarmStore\n   * @returns {(Promise<void>)}\n   * @throws\n   */\n  protected async handleDatabaseOpened(\n    dbOpenedOptions: ISwarmStoreDatabaseBaseOptions\n  ): Promise<void> {\n    this.databasesOpenedList[dbOpenedOptions.dbName] = true;\n    await this.addDatabaseOpenedOptions(dbOpenedOptions);\n    this.emitDatabasesListUpdated();\n  }\n\n  /**\n   * Delete a database dropped from lists\n   * of opened during the session databases.\n   *\n   * @protected\n   * @param {ISwarmStoreDatabaseBaseOptions} dbOpenedOptions\n   * @memberof SwarmStore\n   * @returns {(Promise<void>)}\n   * @throws\n   */\n  protected async handleDatabaseClosed(\n    dbOpenedOptions: ISwarmStoreDatabaseBaseOptions\n  ): Promise<void> {\n    delete this.databasesOpenedList[dbOpenedOptions.dbName];\n    this.emitDatabasesListUpdated();\n  }\n\n  /**\n   * Delete a database dropped from lists.\n   *\n   * @protected\n   * @param {ISwarmStoreDatabaseBaseOptions} dbOpenedOptions\n   * @memberof SwarmStore\n   * @returns {(Promise<void>)}\n   * @throws\n   */\n  protected async handleDatabaseDropped(\n    dbOpenedOptions: ISwarmStoreDatabaseBaseOptions\n  ): Promise<void> {\n    delete this.databasesOpenedList[dbOpenedOptions.dbName];\n    await this.removeDatabaseOpenedOptions(dbOpenedOptions);\n    this.emitDatabasesListUpdated();\n  }\n\n  /**\n   * add a database opened options to the list\n   * of known databases options and store it\n   * if a storage instance was provided.\n   *\n   * @protected\n   * @param {ISwarmStoreDatabaseBaseOptions} dbOpenedOptions\n   * @memberof SwarmStore\n   */\n  protected async addDatabaseOpenedOptions(\n    dbOpenedOptions: ISwarmStoreDatabaseBaseOptions\n  ) {\n    this.databasesKnownOptionsList[dbOpenedOptions.dbName] = dbOpenedOptions;\n    await this.storeDatabasesKnownOptionsList();\n  }\n\n  /**\n   * Remove a database options from the list\n   * of known databases options and store it\n   * if a persistant storage instance was provided.\n   *\n   * @protected\n   * @param {ISwarmStoreDatabaseBaseOptions} dbOpenedOptions\n   * @memberof SwarmStore\n   */\n  protected async removeDatabaseOpenedOptions(\n    dbOpenedOptions: ISwarmStoreDatabaseBaseOptions\n  ) {\n    delete this.databasesKnownOptionsList[dbOpenedOptions.dbName];\n    await this.storeDatabasesKnownOptionsList();\n  }\n\n  /**\n   * Store options of databases known to the storage\n   * if it was provided for the connect.\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected async storeDatabasesKnownOptionsList() {\n    const {\n      databasesKnownOptionsList,\n      databasesLisPersistantKey,\n      databasePersistantListStorage,\n    } = this;\n\n    if (databasePersistantListStorage && databasesLisPersistantKey) {\n      const list = this.stringifyDatabaseOptionsList(databasesKnownOptionsList);\n      await databasePersistantListStorage.set(databasesLisPersistantKey, list);\n    }\n  }\n\n  /**\n   * create a connection with a connector\n   * specified in options\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @returns {(ISwarmStoreConnector<P> | Error)}\n   * @memberof SwarmStore\n   */\n  protected createConnectionWithStorageConnector(\n    options: ISwarmStoreOptions<P, ItemType>\n  ): ISwarmStoreConnector<P> {\n    const { provider } = options;\n    const Constructor = this.getStorageConnector(options.provider);\n\n    if (!Constructor) {\n      throw new Error(`A constructor was not found for the ${provider}`);\n    }\n\n    const connection = new Constructor(options);\n\n    assert(\n      connection instanceof Constructor,\n      `Failed to create connection with the provider ${provider}`\n    );\n    return connection;\n  }\n\n  /**\n   * connect with the connector specified\n   *\n   * @protected\n   * @param {ISwarmStoreConnector<P>} connector\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   */\n  protected async startConnectionWithConnector(\n    connector: ISwarmStoreConnector<P>,\n    options: ISwarmStoreOptions<P, ItemType>\n  ): Promise<void> {\n    const connectionResult = await connector.connect(\n      options.providerConnectionOptions\n    );\n\n    assert(\n      !(connectionResult instanceof Error),\n      `Failed to connect through the provider ${options.provider}`\n    );\n    this.connector = connector;\n  }\n\n  /**\n   * set empty status for a database\n   * if a status was not set before\n   *\n   * @protected\n   * @param {string} dbName\n   * @memberof SwarmStore\n   */\n  protected setEmptyStatusForDb = (dbName: string) => {\n    const { dbStatusesExisting } = this;\n\n    if (!dbStatusesExisting[dbName]) {\n      dbStatusesExisting[dbName] = ESwarmStoreDbStatus.EMPTY;\n    }\n  };\n\n  protected setClosedStatusForDb = (dbName: string) => {\n    this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.CLOSE;\n  };\n\n  /**\n   * create the table with a current status for\n   * a databases, which will be started\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   */\n  protected createStatusTable(options: ISwarmStoreOptions<P, ItemType>) {\n    const { databases } = options;\n\n    databases.forEach((dbOptions) => {\n      this.setEmptyStatusForDb(dbOptions.dbName);\n    });\n  }\n\n  protected dbReadyListener = (dbName: string) => {\n    this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.READY;\n  };\n\n  protected dbUpdateListener = (dbName: string) =>\n    (this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.UPDATE);\n\n  protected dbCloseListener = (dbName: string) =>\n    (this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.CLOSE);\n\n  protected dbLoadingListener = ([dbName, percent]: [string, number]) => {\n    if (percent < 100) {\n      this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.LOADING;\n    } else {\n      this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.LOADED;\n    }\n  };\n\n  /**\n   * subscribe on events emitted for databases\n   *\n   * @protected\n   * @param {boolean} [isSubscribe=true]\n   * @memberof SwarmStore\n   */\n  protected subscribeOnDbEvents(\n    connector: ISwarmStoreConnector<P>,\n    isSubscribe: boolean = true\n  ): void {\n    if (!connector) {\n      if (isSubscribe) {\n        throw new Error('There is no connection to a connector');\n      }\n      return;\n    }\n\n    const methodName = isSubscribe ? 'addListener' : 'removeListener';\n\n    connector[methodName](ESwarmStoreEventNames.READY, this.dbReadyListener);\n    connector[methodName](ESwarmStoreEventNames.UPDATE, this.dbUpdateListener);\n    connector[methodName](\n      ESwarmStoreEventNames.CLOSE_DATABASE,\n      this.dbCloseListener\n    );\n    connector[methodName](\n      ESwarmStoreEventNames.DB_LOADING,\n      this.dbLoadingListener\n    );\n  }\n\n  protected unsubscribeFromDbEvents(connector: ISwarmStoreConnector<P>) {\n    this.subscribeOnDbEvents(connector, false);\n  }\n\n  /**\n   * subscribe on store connector all events\n   * to retransmit it\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected subscribeConnectorAllEvents(connector: ISwarmStoreConnector<P>) {\n    if (!connector) {\n      throw new Error('There is no swarm connector');\n    }\n\n    const storeConnectorEventsHandlers = {} as Record<\n      ESwarmStoreEventNames,\n      TSwarmStoreConnectorEventRetransmitter\n    >;\n\n    Object.values(ESwarmStoreEventNames).forEach((eventName) => {\n      storeConnectorEventsHandlers[eventName] = this.emit.bind(this, eventName);\n      connector.addListener(eventName, storeConnectorEventsHandlers[eventName]);\n    });\n    this.storeConnectorEventsHandlers = storeConnectorEventsHandlers;\n  }\n\n  protected unSubscribeConnectorAllEvents(connector: ISwarmStoreConnector<P>) {\n    const { storeConnectorEventsHandlers } = this;\n\n    if (storeConnectorEventsHandlers && connector) {\n      Object.values(ESwarmStoreEventNames).forEach((eventName) => {\n        connector.removeListener(\n          eventName,\n          storeConnectorEventsHandlers[eventName]\n        );\n      });\n    }\n  }\n\n  /**\n   * subsribes on events from the connector\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected subscribeOnConnector(connector: ISwarmStoreConnector<P>) {\n    this.subscribeOnDbEvents(connector);\n    this.subscribeConnectorAllEvents(connector);\n  }\n\n  /**\n   * subsribes on events from the connector\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected unSubscribeFromConnector(connector: ISwarmStoreConnector<P>) {\n    this.unsubscribeFromDbEvents(connector);\n    this.unSubscribeConnectorAllEvents(connector);\n  }\n\n  /**\n   * close the existing connection\n   * with a swarm store\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected async closeConnector(): Promise<void> {\n    const { connector } = this;\n\n    if (connector) {\n      const result = await connector.close();\n\n      if (result instanceof Error) {\n        throw new Error('Failed to close the connection with the connector');\n      }\n    }\n  }\n\n  /**\n   * reset some options to defaults\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected reset(): void {\n    Object.keys(this.dbStatusesExisting).forEach(this.setClosedStatusForDb);\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",["2183","2184","2185","2186","2187","2188","2189"],"import { ISecretStoreCredentials } from '../secret-storage-class/secret-storage-class.types';\nimport {\n  ISwarmStoreConnectorOrbitDBConnectionOptions,\n  TSwarmStoreConnectorOrbitDBEnityKey,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { ESwarmStoreDbStatus as ESwarmStoreDatabaseStatus } from './swarm-store-class.const';\nimport { SWARM_STORE_DATABASE_STATUS_ABSENT } from './swarm-store-class.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseValue,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions } from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMethodArgument,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from './swarm-store-class.const';\nimport { IStorageCommon } from 'types/storage.types';\n\nexport type TSwarmStoreConnectorEventRetransmitter = (...args: any[]) => void;\n\nexport interface ISwarmStoreConnectorRequestLoadAnswer {\n  /**\n   * how many new items loaded during the request\n   *\n   * @type {number}\n   * @memberof ISwarmStoreConnectorLoadAnswer\n   */\n  count: number;\n  /**\n   * overall items loaded\n   *\n   * @type {number}\n   * @memberof ISwarmStoreConnectorRequestLoadAnswer\n   */\n  loadedCount: number;\n  /**\n   * how many overall items exists in the database\n   *\n   * @type {number}\n   * @memberof ISwarmStoreConnectorLoadAnswer\n   */\n  overallCount: number;\n}\n\nexport interface ISwarmStoreEvents {\n  [ESwarmStoreEventNames.STATE_CHANGE]: boolean;\n  [ESwarmStoreEventNames.ERROR]: Error;\n  [ESwarmStoreEventNames.CLOSE]: void;\n  [ESwarmStoreEventNames.UPDATE]: string;\n  [ESwarmStoreEventNames.LOADING]: number;\n  [ESwarmStoreEventNames.DB_LOADING]: [string, number];\n  [ESwarmStoreEventNames.READY]: string;\n  [ESwarmStoreEventNames.DATABASES_LIST_UPDATED]: ISwarmStoreDatabasesCommonStatusList;\n}\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseMethodArgument<\n  P extends ESwarmStoreConnector,\n  M\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMethodArgument<M>\n  : never;\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseIteratorMethodArgument<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  : never;\n\nexport type TSwarmStoreDatabaseLoadMethodAnswer<\n  P extends ESwarmStoreConnector.OrbitDB\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorRequestLoadAnswer\n  : never;\n\nexport type TSwarmStoreDatabaseCloseMethodAnswer<\n  P extends ESwarmStoreConnector.OrbitDB\n> = P extends ESwarmStoreConnector.OrbitDB ? void : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseIteratorMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB\n  ?\n      | Error\n      | Array<ISwarmStoreConnectorOrbitDbDatabaseValue<T> | Error | undefined>\n  : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB ? T : never;\n\n// a value can be stored\nexport type TSwarmStoreValueTypes<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB ? any : never;\n\nexport interface ISwarmStoreDatabaseBaseOptions {\n  // Database name\n  dbName: string;\n  // is a puclic database. Private by\n  isPublic?: boolean;\n  // how many records to preload\n  preloadCount?: number;\n  // use encrypted storage for the database\n  useEncryptedStorage?: boolean;\n}\n\nexport type TSwarmStoreDatabaseEntityKey<\n  P extends ESwarmStoreConnector = never\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDBEnityKey\n  : never;\n\n/**\n * options of a swarm database\n *\n * @export\n * @interface ISwarmStoreDatabaseOptions\n */\nexport type TSwarmStoreDatabaseOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseOptions<T> &\n      ISwarmStoreDatabaseBaseOptions\n  : ISwarmStoreDatabaseBaseOptions;\n/**\n * options of swarm databases want to connect\n *\n * @export\n * @interface ISwarmStoreDatabasesOptions\n */\nexport interface ISwarmStoreDatabasesOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> {\n  // databases which must be started when the orbit db\n  // instance will be ready to use\n  databases: P extends never\n    ? ISwarmStoreDatabaseBaseOptions\n    : TSwarmStoreDatabaseOptions<P, T>[];\n  // a virtual directory name where to store all the data received\n  directory: string;\n}\n\n/**\n * options about the current user which\n * will be connected to swarm databases\n *\n * @export\n * @interface ISwarmStoreUserOptions\n */\nexport interface ISwarmStoreUserOptions {\n  // the current user identity\n  userId?: string;\n  // credentials used for data encryption\n  credentials?: ISecretStoreCredentials;\n}\n\nexport type TSwarmStoreConnectorConnectionOptions<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDBConnectionOptions\n  : never;\n\n/**\n * options defines which provider to use\n *\n * @export\n * @interface ISwarmStoreProviderOptions\n */\nexport interface ISwarmStoreProviderOptions<P extends ESwarmStoreConnector> {\n  provider: P;\n  providerConnectionOptions: TSwarmStoreConnectorConnectionOptions<P>;\n}\n\n/**\n * this options excluded options specific\n * for a provider connection\n *\n * @export\n * @interface ISwarmStoreMainOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreMainOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> extends ISwarmStoreUserOptions, ISwarmStoreDatabasesOptions<P, T> {}\n\n/**\n * options used for connection to a swarm databases\n *\n * @export\n * @interface ISwarmStoreOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreOptions<\n  P extends ESwarmStoreConnector,\n  T extends any = never\n>\n  extends Required<ISwarmStoreMainOptions<P, T>>,\n    Required<ISwarmStoreProviderOptions<P>> {}\n\n/**\n * store a status of each database\n *\n * key - database name\n * value - the last event from the database received from the provider\n * @export\n * @interface ISwarmStoreDatabasesStatus\n */\nexport interface ISwarmStoreDatabasesStatuses\n  extends Record<\n    string,\n    ESwarmStoreDatabaseStatus | typeof SWARM_STORE_DATABASE_STATUS_ABSENT\n  > {}\n\n// methods available for a database providers\nexport type TSwarmStoreDatabaseMethod<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMethodNames\n  : never;\n\nexport type TSwarmStoreDatabaseRequestMethodReturnType<\n  P extends ESwarmStoreConnector,\n  A\n> =\n  | Error\n  | TSwarmStoreDatabaseLoadMethodAnswer<P>\n  | TSwarmStoreDatabaseCloseMethodAnswer<P>\n  | TSwarmStoreDatabaseMethodAnswer<P, A>\n  | TSwarmStoreDatabaseIteratorMethodAnswer<P, A>;\n\n/**\n * this interface must be implemented by a swarm storage connectors\n *\n * @export\n * @interface ISwarmStoreConnector\n * @extends {EventEmitter<ISwarmStoreEvents>}\n * @template P\n */\nexport interface ISwarmStoreConnectorBase<P extends ESwarmStoreConnector> {\n  // ready to use\n  isReady: boolean;\n  // disconnected from the swarm\n  isClosed: boolean;\n  // open connection with all databases\n  connect(\n    options: TSwarmStoreConnectorConnectionOptions<P>,\n    dataBasePersistantStorage?: IStorageCommon\n  ): Promise<Error | void>;\n  // close all the existing connections\n  close(): Promise<Error | void>;\n  // open a new connection to the database specified\n  openDatabase(dbOptions: TSwarmStoreDatabaseOptions<P>): Promise<void | Error>;\n  // close connection to a database specified\n  closeDatabase(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName']\n  ): Promise<void | Error>;\n  /**\n   * drop the local copy of the database connected to\n   * and close connection with the database.\n   *\n   * @param {string} dbName\n   * @returns {(Promise<Error | boolean>)}\n   * @memberof ISwarmStoreConnectorBase\n   */\n  dropDatabase(dbName: string): Promise<void | Error>;\n  // send request to a swarm database to perform\n  // an operation such as read or seta value\n  // on a database\n  request<V extends TSwarmStoreValueTypes<P>, A>(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName'],\n    dbMethod: TSwarmStoreDatabaseMethod<P>,\n    arg: TSwarmStoreDatabaseMethodArgument<P, V>\n  ): Promise<TSwarmStoreDatabaseRequestMethodReturnType<P, A>>;\n}\n\nexport interface ISwarmStoreConnector<P extends ESwarmStoreConnector>\n  extends EventEmitter<ISwarmStoreEvents>,\n    ISwarmStoreConnectorBase<P> {}\n\n/**\n * Implements connection to a swarm\n * databases.\n * After the instance will be connected\n * to databases it allows to send request\n * to databases connected to.\n * Status of connection to a specific\n * databases is available on subscription\n * to the instance's methods.\n *\n * @export\n * @interface ISwarmStore\n */\nexport interface ISwarmStore<\n  P extends ESwarmStoreConnector,\n  ItemType extends any\n> extends Omit<ISwarmStoreConnectorBase<P>, 'connect'> {\n  // status of a database connected to\n  dbStatuses: ISwarmStoreDatabasesStatuses;\n  /**\n   * List with all databases opened any time.\n   * It is persistant only if\n   * a databasePersistantListStorage instance\n   * provided while connecting.\n   *\n   * @type {ISwarmStoreDatabasesCommonStatusList}\n   * @memberof ISwarmStore\n   */\n  databases?: ISwarmStoreDatabasesCommonStatusList;\n  // open connection with all databases\n  connect(options: ISwarmStoreOptions<P, ItemType>): Promise<Error | void>;\n}\n\nexport interface ISwarmStoreOptionsOfDatabasesKnownList\n  extends Record<\n    ISwarmStoreDatabaseBaseOptions['dbName'],\n    ISwarmStoreDatabaseBaseOptions\n  > {}\n\nexport interface ISwarmStoreDatabasesCommonStatusList {\n  readonly options: ISwarmStoreOptionsOfDatabasesKnownList;\n  readonly opened: Record<string, boolean>;\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["2190"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",["2191"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["2192","2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204"],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",["2205","2206"],"import { ISwarmStoreDatabaseBaseOptions } from '../../../../swarm-store-class.types';\nimport { ESwarmStoreEventNames } from '../../../../swarm-store-class.const';\nimport { ESwarmStoreConnectorOrbitDbDatabaseType } from './swarm-store-connector-orbit-db-subclass-database.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback,\n  ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n} from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport OrbitDbFeedStore from 'orbit-db-feedstore';\nimport OrbitDbKeyValueStore from 'orbit-db-kvstore';\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseStoreHash = string;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseStoreKey = string;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseKey =\n  | TSwarmStoreConnectorOrbitDbDatabaseStoreHash\n  | TSwarmStoreConnectorOrbitDbDatabaseStoreKey;\n\nexport type TSwarmStoreConnectorOrbitDbDatabase<V> =\n  | OrbitDbFeedStore<V>\n  | OrbitDbKeyValueStore<V>;\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  extends ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback<\n      TFeedStoreType\n    >,\n    ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n    ISwarmStoreDatabaseBaseOptions {\n  /**\n   * Datatbase type, may be feed store or key-value store.\n   * By default the feed store type is used.\n   *\n   * @type {ESwarmStoreConnectorOrbitDbDatabaseType}\n   * @memberof ISwarmStoreConnectorOrbitDbDatabaseOptions\n   */\n  dbType?: ESwarmStoreConnectorOrbitDbDatabaseType;\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseEvents<\n  TSwarmStoreConnectorOrbitDBDatabase,\n  TFeedStoreType\n> {\n  [ESwarmStoreEventNames.FATAL]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n\n  [ESwarmStoreEventNames.ERROR]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  // Database name and percents loaded\n  [ESwarmStoreEventNames.LOADING]: [\n    string,\n    number,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmStoreEventNames.UPDATE]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.CLOSE]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.READY]: [string, TSwarmStoreConnectorOrbitDBDatabase];\n  [ESwarmStoreEventNames.NEW_ENTRY]: [\n    string, // database name\n    any, // entry added\n    string, // address of the entry,\n    any, // heads\n    ESwarmStoreConnectorOrbitDbDatabaseType,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n}\n\nexport type ISwarmStoreConnectorOrbitDbDatabaseKey = string;\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseValue<TStoreValueType> {\n  id: string; // id of the user who stores the value\n  value: TStoreValueType;\n  hash: TSwarmStoreConnectorOrbitDbDatabaseStoreHash;\n}\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseIteratorOption {\n  eq = 'eq',\n  gt = 'gt',\n  gte = 'gte',\n  lt = 'lt',\n  lte = 'lte',\n  limit = 'limit',\n  reverse = 'reverse',\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions {\n  // if the equal operator applyied all other will not be applied\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.eq]?: string | string[];\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.limit]?: number;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.reverse]?: boolean;\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer<T> {\n  collect(): T[];\n}\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseMethodNames {\n  'get' = 'get',\n  'add' = 'add',\n  'remove' = 'remove',\n  'iterator' = 'iterator',\n  'close' = 'close',\n  'load' = 'load',\n}\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodNames = ESwarmStoreConnectorOrbitDbDatabaseMethodNames;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseAddMethodArgument<\n  TStoreValue\n> = {\n  value: TStoreValue;\n  key?: TSwarmStoreConnectorOrbitDbDatabaseStoreKey;\n};\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbClose = void;\n\n// how many items to load\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbLoad = number;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodArgument<TStoreValue> =\n  | TSwarmStoreConnectorOrbitDbDatabaseStoreHash\n  | TStoreValue\n  | TSwarmStoreConnectorOrbitDbDatabaseAddMethodArgument<TStoreValue>\n  | ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  | TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbClose\n  | TSwarmStoreConnectorOrbitDbDatabaseMethodArgumentDbLoad;\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["2207","2208","2209","2210"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { IOrbitDBKeystoreStoreCustom } from 'types';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    // TODO - may be verify the identity with central authority\n    const verifyResult = await (KeystoreClass as unknown as IOrbitDBKeystoreStoreCustom).verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",["2211","2212"],"import { IStore } from 'orbit-db-cache';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclass-storage-fabric.types';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from '../swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport Storage from 'orbit-db-storage-adapter';\nimport OrbitDB from 'orbit-db';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStorageFabric\n  implements ISwarmStoreConnectorOrbitDBSubclassStorageFabric {\n  private key?: CryptoKey;\n\n  private ready?: Promise<void>;\n\n  // names of databases which must be encrypted\n  protected secretDatabasesNames: string[] = [];\n\n  protected storage: any;\n\n  constructor(credentials: ISecretStoreCredentials) {\n    this.applyCredentials(credentials);\n    this.storage = Storage();\n  }\n\n  public addSecretDatabaseName = (dbName: string) => {\n    if (!this.secretDatabasesNames.includes(dbName)) {\n      this.secretDatabasesNames.push(dbName);\n    }\n  };\n\n  /**\n   * create an instance of OrbitDB Cache\n   * for a path provided\n   *\n   * @param {string} path\n   * @returns {Cache}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStorageFabric\n   * @throws\n   */\n  public async createStore(path: string): Promise<IStore> {\n    await this.ready;\n    if (!this.isSecretPath(path)) {\n      return this.storage.createStore(path);\n    }\n\n    const { key } = this;\n\n    if (!key) {\n      throw new Error('A CryptoKey is not exists');\n    }\n    if (!(key instanceof CryptoKey)) {\n      throw new Error('The key must be an instance of CryptoKey');\n    }\n\n    const cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n      { key },\n      { dbName: path }\n    );\n\n    await cache.open();\n    return cache;\n  }\n\n  protected getValidPath(path: string): string {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n\n  protected getDBNameByAddress(path: string): undefined | string {\n    try {\n      return (OrbitDB as any).parseAddress(this.getValidPath(path)).path;\n    } catch (err) {\n      console.error('Cant parse the path', err);\n    }\n  }\n\n  protected getDBNameByPath(path: string): undefined | string {\n    const dbName = this.getDBNameByAddress(path);\n\n    if (dbName) {\n      return dbName;\n    }\n\n    let idx = 0;\n    let matches = 0;\n    while (matches < 2 && idx < path.length) {\n      if (path[idx++] === '/') {\n        matches++;\n      }\n      if (matches === 2) {\n        return path.slice(idx);\n      }\n    }\n  }\n\n  protected isSecretPath(path: string): boolean {\n    const dbName = this.getDBNameByPath(path);\n    return !!dbName && this.secretDatabasesNames.includes(dbName);\n  }\n\n  protected applyCredentials(credentials: ISecretStoreCredentials): void {\n    this.ready = this.createKey(credentials);\n  }\n\n  /**\n   *\n   *\n   * @protected\n   * @param {ISecretStoreCredentials} credentials\n   * @returns {Promise<void>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStorageFabric\n   * @throws\n   */\n  protected async createKey(\n    credentials: ISecretStoreCredentials\n  ): Promise<void> {\n    const secretStorage = new SecretStorage();\n    const cryptoKey = await secretStorage.generateCryptoKey(credentials);\n\n    if (cryptoKey instanceof Error) {\n      console.error(`createKey::${cryptoKey}`);\n      throw new Error('Failed to generate a key');\n    }\n    if (!(cryptoKey instanceof CryptoKey)) {\n      throw new Error(\n        'createKey::the key generated by a password string must be a CryptoKey'\n      );\n    }\n    this.key = cryptoKey;\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/index.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["2213"],"import { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { validateCryptoKeyCredentials } from './../../../../../secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\nimport { ISecretStorage } from '../../../../../secret-storage-class/secret-storage-class.types';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: IStorageProviderOptions;\n\n  protected secretStorage?: ISecretStorage;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<IStorageProviderOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (!isClose && isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    this.unsetIsClose();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public close = async (cb?: TCallbackError): Promise<void> => {\n    if (!this.isOpen || this.isClose) {\n      return;\n    }\n    this.setIsClose();\n    this.unsetIsOpen();\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    if (this.isClose) {\n      console.error('CLOSED');\n    }\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del = async (key: string, cb?: TCallbackError) => {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.unset(key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public dropDb = async () => {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.clearDb();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw new Error('Failed to drop the database');\n    }\n  };\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    await this.dropDb();\n    await this.close();\n    this.unsetSecretStorage();\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected unsetIsOpen() {\n    this.isOpen = false;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected unsetIsClose() {\n    this.isClose = false;\n  }\n\n  protected getSecretStorage(): Error | ISecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<IStorageProviderOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    }\n    this.credentials = credentials as ISecretStoreCredentials;\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",[],"/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["2214","2215","2216","2217","2218","2219","2220"],"import OrbitDB from 'orbit-db';\nimport Identities from 'orbit-db-identity-provider';\nimport AccessControllers from 'orbit-db-access-controllers';\nimport { Keystore } from 'orbit-db-keystore';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX,\n  SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY,\n} from './swarm-store-connector-orbit-db.const';\nimport { IPFS } from 'types/ipfs.types';\nimport { SwarmStoreConnectorOrbitDBSubclassIdentityProvider } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport {\n  ISwarmStoreConnectorOrbitDBOptions,\n  ISwarmStoreConnectorOrbitDBConnectionOptions,\n  ISwarmStoreConnectorOrbitDBEvents,\n} from './swarm-store-connector-orbit-db.types';\nimport { timeout, delay } from 'utils/common-utils/common-utils-timer';\nimport { SwarmStoreConnectorOrbitDBDatabase } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMethodArgument,\n} from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { commonUtilsArrayDeleteFromArray } from 'utils/common-utils/common-utils';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SwarmStorageConnectorOrbitDBSublassKeyStore } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore';\nimport { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\nimport { ESwarmStoreConnectorOrbitDbDatabaseType } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';\nimport {\n  ISwarmStoreConnector,\n  TSwarmStoreValueTypes,\n} from '../../swarm-store-class.types';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from '../../swarm-store-class.const';\n\nexport class SwarmStoreConnectorOrbitDB<\n  ISwarmDatabaseValueTypes extends TSwarmStoreValueTypes<\n    ESwarmStoreConnector.OrbitDB\n  >\n> extends EventEmitter<ISwarmStoreConnectorOrbitDBEvents>\n  implements ISwarmStoreConnector<ESwarmStoreConnector.OrbitDB> {\n  private static isLoadedCustomIdentityProvider: boolean = false;\n\n  private static isLoadedCustomAccessController: boolean = false;\n\n  private static loadCustomIdentityProvider() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider) {\n      Identities.addIdentityProvider(\n        SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n      );\n      SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider = true;\n    }\n  }\n\n  private static loadCustomAccessController() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController) {\n      AccessControllers.addAccessController({\n        AccessController: SwarmStoreConnectorOrbitDBSubclassAccessController,\n      });\n      SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController = true;\n    }\n  }\n\n  public isReady: boolean = false;\n\n  public isClosed: boolean = false;\n\n  protected userId: string = '';\n\n  protected directory: string = SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY;\n\n  protected identity?: any;\n\n  protected connectionOptions?: ISwarmStoreConnectorOrbitDBConnectionOptions;\n\n  protected options?: ISwarmStoreConnectorOrbitDBOptions<\n    ISwarmDatabaseValueTypes\n  >;\n\n  protected ipfs?: IPFS; // instance of the IPFS connected through\n\n  protected orbitDb?: OrbitDB; // instance of the OrbitDB\n\n  protected databases: SwarmStoreConnectorOrbitDBDatabase<\n    ISwarmDatabaseValueTypes\n  >[] = [];\n\n  protected identityKeystore?: Keystore;\n\n  protected storage?: ISwarmStoreConnectorOrbitDBSubclassStorageFabric;\n\n  private dbCloseListeners: ((...args: any[]) => any)[] = [];\n\n  public constructor(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    super();\n    SwarmStoreConnectorOrbitDB.loadCustomIdentityProvider();\n    SwarmStoreConnectorOrbitDB.loadCustomAccessController();\n    this.applyOptions(options);\n  }\n\n  /**\n     * waiting for the connection to the swarm, load the database locally\n     * and ready to use it\n    /**\n     *\n     *\n     * @param {ISwarmStoreConnectorOrbitDBConnectionOptions} connectionOptions\n     * @returns {(Promise<void | Error>)}\n     * @memberof SwarmStoreConnectorOrbitDB\n     */\n  public connect = async (\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): Promise<void | Error> => {\n    const resultCreateIdentity = await this.createIdentity();\n\n    if (resultCreateIdentity instanceof Error) {\n      console.error(resultCreateIdentity);\n      return this.emitError('Failed to create an identity');\n    }\n\n    const disconnectFromSwarmResult = await this.disconnectFromSwarm();\n\n    if (disconnectFromSwarmResult instanceof Error) {\n      return disconnectFromSwarmResult;\n    }\n\n    const setConnectionOptionsResult = this.setConnectionOptions(\n      connectionOptions\n    );\n\n    if (setConnectionOptionsResult instanceof Error) {\n      return setConnectionOptionsResult;\n    }\n\n    const connectToSwarmResult = await this.connectToSwarm();\n\n    if (connectToSwarmResult instanceof Error) {\n      return connectToSwarmResult;\n    }\n\n    // close the current connections to the databases if exists\n    const closeExistingDatabaseesOpened = await this.closeDatabases();\n\n    if (closeExistingDatabaseesOpened instanceof Error) {\n      return this.emitError(closeExistingDatabaseesOpened, 'openDatabases');\n    }\n\n    // stop the current instance of OrbitDB\n    // if it exists\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n\n    if (stopOrbitDBResult instanceof Error) {\n      return stopOrbitDBResult;\n    }\n\n    // create a new OrbitDB instance\n    const createOrbitDbResult = await this.createOrbitDBInstance();\n\n    if (createOrbitDbResult instanceof Error) {\n      return createOrbitDbResult;\n    }\n\n    // create OrbitDB databases\n    const createDatabases = await this.openDatabases();\n\n    if (createDatabases instanceof Error) {\n      return createDatabases;\n    }\n    // set the database is ready to query\n    this.setReady();\n  };\n\n  public openDatabase = async (\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    openAttempt: number = 0,\n    checkOptionsIsExists: boolean = true\n  ): Promise<void | Error> => {\n    const { orbitDb, isClosed } = this;\n\n    if (!orbitDb) {\n      return new Error('There is no instance of OrbitDB');\n    }\n    if (isClosed) {\n      return new Error(\"Can't open a database for the connection opened\");\n    }\n\n    // add options in the main setting only\n    // if options are not exists already\n    // in the list. If options are exists\n    // this may mean that the database was\n    // opened but still not ready to use and\n    // waiting when it will be ready to use.\n    const checkDbOptionsResult = checkOptionsIsExists\n      ? this.setDbOptionsIfNotExists(dbOptions)\n      : this.setDbOptions(dbOptions);\n\n    // options checked and set for valid\n    // calculation of the progress percent\n    if (checkDbOptionsResult instanceof Error) {\n      return checkDbOptionsResult;\n    }\n\n    const { dbName, useEncryptedStorage } = dbOptions;\n    const db = this.getDbConnectionExists(dbName);\n\n    if (db) {\n      this.unsetOptionsForDatabase(dbName);\n      return new Error(`A database named as ${dbName} is already exists`);\n    }\n\n    if (useEncryptedStorage) {\n      // Add the database name in the Storage fabric\n      // as the enctypted db. The storage fabric\n      // will create the encrypted storage\n      // for this database\n      this.storage?.addSecretDatabaseName(dbName);\n    }\n\n    const database = new SwarmStoreConnectorOrbitDBDatabase<\n      ISwarmDatabaseValueTypes\n    >(dbOptions, orbitDb);\n\n    this.setListenersDatabaseEvents(database);\n\n    const databaseOpenResult = await this.waitDatabaseOpened(database);\n\n    if (databaseOpenResult instanceof Error) {\n      await this.closeDb(database, false); // close the connection to the database\n      await delay(300);\n      if (\n        openAttempt >\n        SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX\n      ) {\n        return this.handleErrorOnDbOpen(\n          database,\n          'The max nunmber of connection attempts has reached'\n        );\n      }\n\n      const openDatabaseResult = await this.openDatabase(\n        dbOptions,\n        (openAttempt += 1)\n      );\n\n      if (openDatabaseResult instanceof Error) {\n        return this.handleErrorOnDbOpen(database, openDatabaseResult);\n      }\n    }\n    console.log('openDatabase', dbName);\n    this.databases.push(database);\n    this.emit(ESwarmStoreEventNames.READY, dbOptions.dbName);\n  };\n\n  public async dropDatabase(dbName: string) {\n    const db = this.getDbConnection(dbName);\n\n    if (!db) {\n      return new Error(`The database named ${dbName} was not found`);\n    }\n    try {\n      this.unsetListenersDatabaseEvents(db);\n      await db.drop();\n      await this.closeDb(db);\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  public async closeDatabase(dbName: string): Promise<Error | void> {\n    const db = this.getDbConnection(dbName);\n\n    if (db) {\n      return this.closeDb(db);\n    }\n    return new Error(`The database named ${dbName} was not found`);\n  }\n\n  /**\n   * make a request to a database by it's name\n   * and a method to execute\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public request = async <ISwarmDatabaseValueTypes>(\n    dbName: string,\n    dbMethod: TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n    arg: TSwarmStoreConnectorOrbitDbDatabaseMethodArgument<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<Error | any> => {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The Swarm connection was closed');\n    }\n\n    const dbConnection = await this.waitingDbOpened(dbName);\n\n    if (dbConnection instanceof Error) {\n      console.error(dbConnection);\n      return this.emitError(\n        new Error('Failed to get an opened connection to the database')\n      );\n    }\n    return dbConnection[dbMethod](arg as any);\n  };\n\n  /**\n   * close all connections with databases\n   * and the Swarm store\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public close = async (): Promise<Error | void> => {\n    this.setIsClosed();\n\n    const closeAllDatabasesResult = await this.closeDatabases();\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n    let err;\n\n    if (closeAllDatabasesResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close all databases connections');\n    }\n    if (stopOrbitDBResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close the current instanceof OrbitDB');\n    }\n    this.unsetAllListenersForEvents();\n    if (err) {\n      return this.emitError(\n        'Failed to close normally the connection to the swarm store'\n      );\n    }\n  };\n\n  protected setIsClosed = () => {\n    this.setNotReady();\n    this.isClosed = true;\n    this.emit(ESwarmStoreEventNames.CLOSE, true);\n  };\n\n  /**\n   * return an opened connection with the database by it's name\n   * if exists and undefined if it is not exists\n   * @readonly\n   * @protected\n   * @type {(SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void)}\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  protected getDbConnection = (\n    dbName: string,\n    checkIsOpen: boolean = true\n  ): SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void => {\n    const { databases } = this;\n\n    return databases.find((db) => {\n      return (\n        db &&\n        db.dbName === dbName &&\n        (!checkIsOpen || (!db.isClosed && !!db.isReady))\n      );\n    });\n  };\n\n  /**\n   * returns a database if exists into the list\n   * of the databases which were opened.\n   * This method do not check whether db\n   * closed and ready.\n   * @protected\n   * @param {string} dbName\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getDbConnectionExists(dbName: string) {\n    return this.getDbConnection(dbName, false);\n  }\n\n  protected handleDbClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): void {\n    if (database) {\n      const { dbName } = database;\n\n      this.unsetListenersDatabaseEvents(database);\n      this.unsetOptionsForDatabase(dbName);\n      this.deleteDatabaseFromList(database);\n    }\n  }\n\n  protected handleErrorOnDbOpen(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    error: Error | string\n  ): Error {\n    if (database) {\n      const { dbName } = database;\n\n      this.handleDbClose(database);\n      console.error(\n        `An error has occurred while database named ${dbName} opening`\n      );\n      console.error(error);\n    }\n    return this.emitError(error);\n  }\n\n  /**\n   * waiting till connection to the database\n   * will be opened or failed. If a db will\n   * not be ready during a timeout return error.\n   * @protected\n   * @param {string} dbName\n   * @returns {(Promise<Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected async waitingDbOpened(\n    dbName: string\n  ): Promise<\n    Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  > {\n    const { getDbConnection } = this;\n    const db = getDbConnection(dbName);\n    const dbOptsIdx = this.getIdxDbOptions(dbName);\n\n    if (db) {\n      return db;\n    } else if (dbOptsIdx === -1) {\n      return new Error(`A database with the name ${dbName} was not found`);\n    } else {\n      const removeListener = this.removeListener.bind(this);\n\n      return new Promise((res) => {\n        let timeout: undefined | NodeJS.Timer;\n        function removeListners() {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          removeListener(ESwarmStoreEventNames.READY, onReady);\n          removeListener(ESwarmStoreEventNames.CLOSE, onClose);\n        }\n        function onReady(dbNameReady: string) {\n          if (dbNameReady === dbName) {\n            const db = getDbConnection(dbName);\n\n            if (db) {\n              removeListners();\n              res(db);\n            }\n          }\n        }\n        function onClose() {\n          removeListners();\n          res(new Error('The Swarm store was closed'));\n        }\n\n        timeout = setTimeout(() => {\n          removeListners();\n          res(new Error());\n        }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n        this.once(ESwarmStoreEventNames.READY, onReady);\n        this.once(ESwarmStoreEventNames.CLOSE, onClose);\n      });\n    }\n  }\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(ESwarmStoreEventNames).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitDatabaseClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (database) {\n      const { dbName } = database;\n\n      console.warn(`Database named ${dbName} was closed`);\n      this.emit(ESwarmStoreEventNames.CLOSE_DATABASE, dbName, database);\n    }\n  }\n\n  protected emitError(error: Error | string, mehodName?: string): Error {\n    const err = typeof error === 'string' ? new Error(error) : error;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(ESwarmStoreEventNames.ERROR, err);\n    return err;\n  }\n\n  private setIsReady(isReady: boolean = false) {\n    this.isReady = isReady;\n    this.emit(ESwarmStoreEventNames.STATE_CHANGE, isReady);\n  }\n\n  /**\n   * set the flag this instance\n   * is not ready to make a\n   * request to databases\n   * @protected\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setReady() {\n    this.setIsReady(true);\n  }\n\n  protected setNotReady() {\n    this.setIsReady(false);\n  }\n\n  /**\n   * delete the database from the list\n   * of opened databases\n   * @protected\n   * @param {SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>} database\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected deleteDatabaseFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    const { databases } = this;\n\n    if (databases && databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(databases, database);\n    }\n  }\n\n  protected checkDbOptions(\n    options: unknown\n  ): options is ISwarmStoreConnectorOrbitDbDatabaseOptions<\n    ISwarmDatabaseValueTypes\n  > {\n    if (options != null && typeof options === 'object') {\n      const { dbName } = options as { dbName: string };\n\n      return !!dbName && typeof dbName === 'string';\n    }\n    return false;\n  }\n\n  /**\n   * apply options provided for the\n   * instance\n   *\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDBOptions} options\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error - throw an error if the options are not valid\n   */\n  private applyOptions(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('The options must be an object');\n    }\n    this.options = options;\n\n    const { userId, credentials, directory } = options;\n\n    if (!userId) {\n      console.warn(new Error('The user id is not provided'));\n    } else {\n      this.userId = userId;\n    }\n    if (typeof directory === 'string') {\n      this.directory = directory;\n    }\n    if (credentials) {\n      // if credentials provided, then\n      // create the secret keystorage\n      this.createIdentityKeystores(credentials);\n      // create secret storage fabric\n      this.createStorage(credentials);\n    }\n  }\n\n  /**\n   * create keystores for identity provider\n   * throw an error if not valid\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @returns {void}\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error\n   */\n  private createIdentityKeystores(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    const { directory, userId } = this;\n    const identityKeystorePrefix = `${directory}/${userId}`;\n    const identityKeystore = this.createKeystore(\n      credentials,\n      identityKeystorePrefix\n    );\n\n    if (identityKeystore instanceof Error) {\n      console.error(identityKeystore);\n      throw new Error('Failed on create identity keystore');\n    }\n    this.identityKeystore = identityKeystore;\n  }\n\n  /**\n   * create a Storage fabric which is\n   * used by the OrbitDB instance\n   * to generate Cache for a\n   * Keystore and various databases\n   * to read/write values from the\n   * local persistent Cache\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws\n   */\n  private createStorage(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    if (!credentials) {\n      throw new Error('createIdentityKeystores::credentials must be provided');\n    }\n    this.storage = new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n      credentials\n    );\n  }\n\n  protected createKeystore(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials'],\n    keystoreNamePrefix?: string\n  ): Keystore | Error {\n    const keystoreName = `${keystoreNamePrefix ||\n      ''}${SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME}`;\n\n    if (!credentials) {\n      return this.emitError('createKeystore::A Credentials must be provided');\n    }\n    return new SwarmStorageConnectorOrbitDBSublassKeyStore({\n      credentials, // TODO - why does the credentials without login\n      store: keystoreName,\n    }) as Keystore;\n  }\n\n  /**\n   * create identity for the user. If the userid\n   * is provided then the identity will be created\n   * by the value of the user id.\n   *\n   * @private\n   * @returns {(Promise<Error | void>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private async createIdentity(): Promise<Error | void> {\n    const { userId } = this;\n\n    try {\n      const identity = await Identities.createIdentity({\n        type: SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n        id: userId ? userId : undefined,\n        keystore: this.identityKeystore,\n      });\n\n      if (!userId) {\n        this.userId = identity.id;\n        console.warn(`The user id created automatically is ${userId}`);\n      }\n      if (identity instanceof Error) {\n        return identity;\n      }\n      this.identity = identity;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * return index of the options\n   * for a database name is exists\n   * in the main databases options\n   * (in this.options.databases)\n   * @protected\n   * @param {string} dbName\n   * @returns {number | -1}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getIdxDbOptions(dbName: string): number {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        return databases.findIndex(\n          (db) => !!db && typeof db === 'object' && db.dbName === dbName\n        );\n      }\n    }\n    return -1;\n  }\n\n  protected unsetOptionsForDatabase(dbName: string) {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        const idx = this.getIdxDbOptions(dbName);\n\n        databases.splice(idx, 1);\n      }\n    }\n  }\n\n  /**\n   * set the Database store options in\n   * the main options (this.options.databases)\n   * of all databases\n   * @protected\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} dbOptions\n   * @param {boolean} [checkIfExists=false]\n   * @returns {(void | Error)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setDbOptions(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    checkIfExists: boolean = false\n  ): void | Error {\n    if (!this.checkDbOptions(dbOptions)) {\n      return new Error('The database options have a wrong format');\n    }\n\n    if (checkIfExists) {\n      const { dbName } = dbOptions;\n      const idxExisting = this.getIdxDbOptions(dbName);\n\n      if (idxExisting !== -1) {\n        return new Error(`\n          Options for the database ${dbName} is already exists.\n          May be the database was opened but still not be in ready state\n        `);\n      }\n    }\n\n    const { options } = this;\n\n    if (!options) {\n      this.applyOptions({\n        ...this.options,\n        userId: '',\n        databases: [dbOptions],\n      } as ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>);\n      return;\n    }\n\n    const { databases } = options;\n\n    if (databases instanceof Array) {\n      const { dbName } = dbOptions;\n\n      this.unsetOptionsForDatabase(dbName);\n      databases.push(dbOptions);\n    } else {\n      options.databases = [dbOptions];\n    }\n  }\n\n  protected setDbOptionsIfNotExists(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): void | Error {\n    return this.setDbOptions(dbOptions, true);\n  }\n\n  /**\n   *\n   *\n   * @private\n   * @param {SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>} database - db to close\n   * @param {boolean} [flEmit=true] - whether to emit an events during execution\n   * @returns {(Promise<Error | void>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private async closeDb(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    flEmit: boolean = true\n  ): Promise<Error | void> {\n    this.unsetListenersDatabaseEvents(database);\n\n    const { dbName } = database;\n\n    this.unsetOptionsForDatabase(dbName);\n    this.deleteDatabaseFromList(database);\n\n    const closeDatabaseResult = await database.close();\n\n    if (closeDatabaseResult instanceof Error) {\n      if (flEmit) {\n        return this.emitError(closeDatabaseResult);\n      }\n      return closeDatabaseResult;\n    }\n    if (flEmit) {\n      this.emitDatabaseClose(database);\n    }\n  }\n\n  private setConnectionOptions(\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): void | Error {\n    if (!connectionOptions) {\n      return this.emitError('Connection options must be specified');\n    }\n\n    const { ipfs } = connectionOptions;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of ipfs must be specified in the connection options'\n      );\n    }\n    this.ipfs = ipfs;\n  }\n\n  private unsetSwarmConnectionOptions() {\n    this.ipfs = undefined;\n    this.connectionOptions = undefined;\n  }\n\n  private async disconnectFromSwarm(): Promise<Error | void> {\n    console.warn(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::disconnectFromTheSwarm`\n    );\n    this.unsetSwarmConnectionOptions();\n    this.setNotReady();\n  }\n\n  private async connectToSwarm(): Promise<Error | void> {\n    const { ipfs } = this;\n\n    if (!ipfs) {\n      return this.emitError('An instance of the IPFS must be specified');\n    }\n    try {\n      // wait when the ipfs will be ready to use\n      await Promise.race([\n        ipfs.ready,\n        timeout(SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS),\n      ]);\n    } catch (err) {\n      return this.emitError(err);\n    }\n  }\n\n  private async stopOrbitDBInsance(): Promise<Error | void> {\n    const { orbitDb } = this;\n\n    if (orbitDb) {\n      try {\n        await orbitDb.stop();\n        this.setNotReady();\n        this.orbitDb = undefined;\n      } catch (err) {\n        return this.emitError(err, 'stopOrbitDBInsance');\n      }\n    }\n  }\n\n  private async createOrbitDBInstance(): Promise<Error | void> {\n    const { ipfs, identity, storage } = this;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of IPFS must exists',\n        'createOrbitDBInstance'\n      );\n    }\n    try {\n      if (!OrbitDB) {\n        return this.emitError('A constructor of the OrbitDb is not provided');\n      }\n      if (!identity) {\n        return this.emitError('An identity must be specified');\n      }\n\n      const instanceOfOrbitDB = await OrbitDB.createInstance(ipfs, {\n        identity,\n        storage,\n      } as any); // TODO - correct typing must be specified\n\n      if (instanceOfOrbitDB instanceof Error) {\n        return this.emitError(\n          instanceOfOrbitDB,\n          'createOrbitDBInstance::error has occurred in the \"createInstance\" method'\n        );\n      }\n      this.orbitDb = instanceOfOrbitDB;\n    } catch (err) {\n      return this.emitError(\n        err,\n        'createOrbitDBInstance::failed to create the instance of OrbitDB'\n      );\n    }\n  }\n\n  protected getDbOptions(\n    dbName: string\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseOptions<ISwarmDatabaseValueTypes>\n    | void\n    | Error {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'An options is not specified for the database',\n        `getDbOptions::${dbName}`\n      );\n    }\n\n    const { databases } = options;\n\n    return databases.find((option) => option && option.dbName === dbName);\n  }\n\n  protected stop(): Promise<Error | void> {\n    this.setNotReady();\n    return this.closeDatabases();\n  }\n\n  /**\n   * open database and not check if an options are\n   * exists for the database (replace if exists)\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} optionsForDb\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private openDatabaseNotCheckOptionsExists(\n    optionsForDb: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<void | Error> {\n    return this.openDatabase(optionsForDb, 0, false);\n  }\n\n  private async restartDbConnection(\n    dbName: string,\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<void | Error> {\n    //try to restart the database\n    const optionsForDb = this.getDbOptions(dbName);\n\n    this.unsetListenersDatabaseEvents(database);\n    if (optionsForDb instanceof Error || !optionsForDb) {\n      this.emitError(\n        'Failed to get options to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n\n    const startDbResult = await this.openDatabaseNotCheckOptionsExists(\n      optionsForDb\n    );\n\n    if (startDbResult instanceof Error) {\n      this.emitError(\n        'Failed to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n  }\n\n  protected removeDbFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (this.databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(this.databases, database);\n    }\n  }\n\n  private handleDatabaseStoreClosed = (\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    error: Error\n  ) => {\n    if (database) {\n      const { dbName } = database;\n\n      this.emitError(\n        `Database closed unexpected: ${error.message}`,\n        `handleDatabaseStoreClosed::${dbName}`\n      );\n      this.handleDbClose(database);\n      this.restartDbConnection(dbName, database);\n    }\n  };\n\n  private handleLoadingProgress = (dbName: string, progress: number): void => {\n    /* \n            databases - is a list of the databases opened already\n            it means that the loading progress for this databases\n            is 100%\n        */\n    const { databases, options } = this;\n    let currentProgressInPercent = 0;\n\n    if (options) {\n      /* \n                overallDatabases - is a list of all databases\n                which are must be opened\n            */\n      const { databases: overallDatabases } = options;\n      // the progress which will be reached\n      // on all the databases will be opened\n      const overallProgressToReach = overallDatabases.length * 100;\n      // progress reached at this time\n      const currentProgress =\n        (databases ? databases.length : 0) * 100 + progress;\n      // the progress reached at this time in a percentage\n      currentProgressInPercent = currentProgress\n        ? (overallProgressToReach / currentProgress) * 100\n        : 0;\n    }\n    console.log(\n      `Swarm store connector::handleLoadingProgress::${dbName}::progress::${progress}`\n    );\n    this.emit(ESwarmStoreEventNames.LOADING, currentProgressInPercent);\n    this.emit(ESwarmStoreEventNames.DB_LOADING, [dbName, progress]);\n  };\n\n  private handleDatabaseUpdated = (dbName: string) => {\n    this.emit(ESwarmStoreEventNames.UPDATE, dbName);\n  };\n\n  /**\n   * write\n   * db.events.on('write', (address, entry, heads) => ... )\n   * Emitted after an entry was added locally to the database. hash is the IPFS hash of the latest state of the database.\n   * entry is the added database op.\n   *\n   * @private\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private handleNewEntryAddedToDatabase = ([\n    dbName,\n    entry,\n    address,\n    heads,\n    dbType,\n  ]: [\n    string,\n    LogEntry<ISwarmDatabaseValueTypes>,\n    string,\n    any,\n    ESwarmStoreConnectorOrbitDbDatabaseType\n  ]) => {\n    // TODO - FOR KEY VALUE STOE. If added two different values for the same key,\n    // then two messages related to this values will be emitted anyway\n    // not just one, which is the latest one, but both messages.\n    // Both two messages will be emitted after the instance was preloaded\n    console.log(\n      `SwarmStoreConnectorOrbitDB::handleNewEntryAddedToDatabase:emit NEW_ENTRY`,\n      {\n        dbName,\n        entry,\n        address,\n        heads,\n      }\n    );\n    this.emit(ESwarmStoreEventNames.NEW_ENTRY, [\n      dbName,\n      entry,\n      address,\n      heads,\n      dbType,\n    ]);\n  };\n\n  private async setListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    isSet: boolean = true\n  ): Promise<Error | void> {\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    if (isSet) {\n      const dbCloseHandler = (err: Error) => {\n        this.handleDatabaseStoreClosed(database, err);\n      };\n\n      database[methodName](ESwarmStoreEventNames.CLOSE, dbCloseHandler);\n      database[methodName](ESwarmStoreEventNames.FATAL, dbCloseHandler);\n      this.dbCloseListeners.push(dbCloseHandler);\n    } else {\n      this.dbCloseListeners.forEach((dbCloseHandler) => {\n        database[methodName](ESwarmStoreEventNames.CLOSE, dbCloseHandler);\n        database[methodName](ESwarmStoreEventNames.FATAL, dbCloseHandler);\n      });\n    }\n    database[methodName](\n      ESwarmStoreEventNames.LOADING,\n      this.handleLoadingProgress\n    );\n    database[methodName](\n      ESwarmStoreEventNames.UPDATE,\n      this.handleDatabaseUpdated\n    );\n    database[methodName](\n      ESwarmStoreEventNames.NEW_ENTRY,\n      this.handleNewEntryAddedToDatabase\n    );\n  }\n\n  private async unsetListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | void> {\n    this.setListenersDatabaseEvents(database, false);\n  }\n\n  private async closeDatabases(): Promise<Error | void> {\n    const { databases } = this;\n\n    // set that the orbit db is not ready to use\n    this.setNotReady();\n    if (!databases || !databases.length) {\n      return;\n    }\n\n    try {\n      let idx = 0;\n      const databasesToClose = [...databases];\n      const len = databasesToClose.length;\n\n      for (; idx < len; idx += 1) {\n        const db = databasesToClose[idx];\n        const dbCloseResult = await this.closeDb(db);\n\n        if (dbCloseResult instanceof Error) {\n          console.error(this.emitError(dbCloseResult));\n          this.emitError(\n            'An error has occurred on closing the database',\n            'closeDatabases'\n          );\n        }\n      }\n      this.databases = [];\n    } catch (err) {\n      return err;\n    }\n  }\n\n  private waitDatabaseOpened(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | boolean> {\n    return new Promise<Error | boolean>(async (res) => {\n      let timeout: NodeJS.Timer | undefined = undefined;\n\n      function usetListeners() {\n        database.removeListener(ESwarmStoreEventNames.READY, res);\n        database.removeListener(ESwarmStoreEventNames.CLOSE, res);\n        database.removeListener(ESwarmStoreEventNames.FATAL, res);\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = undefined;\n      }\n\n      timeout = setTimeout(async () => {\n        usetListeners();\n        res(\n          new Error('Failed to open the database cause the timeout has reached')\n        );\n      }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n      try {\n        database.once(ESwarmStoreEventNames.CLOSE, () => {\n          usetListeners();\n          res(new Error('Database was closed'));\n        });\n        database.once(ESwarmStoreEventNames.FATAL, () => {\n          usetListeners();\n          res(new Error('A fatal error has occurred while open the database'));\n        });\n        database.once(ESwarmStoreEventNames.READY, () => {\n          usetListeners();\n          console.log('dbReady', database.dbName);\n          res(true);\n        });\n\n        //connect to the database\n        // and wait for an events from it\n        const connectResult = await database.connect();\n\n        if (connectResult instanceof Error) {\n          usetListeners();\n          console.error(connectResult);\n          return this.emitError('The database.connect method was failed');\n        }\n      } catch (err) {\n        console.error(err);\n        usetListeners();\n        res(err);\n      }\n    });\n  }\n\n  private async openDatabases(): Promise<Error | void> {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'The options must be specified to open the databases'\n      );\n    }\n\n    const { databases } = options;\n    const databasesOptions = [...databases];\n\n    if (!(databasesOptions instanceof Array)) {\n      return this.emitError('The options for databases must be specified');\n    }\n    if (!databasesOptions.length) {\n      return;\n    }\n    try {\n      let idx = 0;\n      const len = databasesOptions.length;\n\n      for (; idx < len; idx += 1) {\n        const options = databasesOptions[idx];\n        const startResultStatus = await this.openDatabaseNotCheckOptionsExists(\n          options\n        );\n\n        if (startResultStatus instanceof Error) {\n          console.error(startResultStatus);\n          await this.closeDatabases();\n          return new Error('Failed to open the database');\n        }\n      }\n    } catch (err) {\n      await this.closeDatabases();\n      return this.emitError(err);\n    }\n  }\n}\n","/home/paul/projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/protocol/src/components/app-render.tsx",[],"/home/paul/projects/protocol/src/components/app.tsx",["2221","2222"],"import React from 'react';\nimport { FileStoreAddFile } from 'components/filestore-add-file/filestore-add-file';\nimport { ConnectToSwarm } from 'components/connect-to-swarm';\nimport { SensitiveDataStorage } from 'components/sensitive-data-storage';\n\nexport class App extends React.Component {\n  render() {\n    // return <FileStoreAddFile />;\n    // return <SensitiveDataStorage />;\n    return <ConnectToSwarm />;\n  }\n}\n\nexport default App;\n","/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.const.ts",[],"/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.tsx",["2223","2224"],"/home/paul/projects/protocol/src/components/connect-to-swarm/connect-to-swarm.utils.ts",["2225"],"import { ConnectionBridge } from 'classes';\nimport { CONNECT_TO_SWARM_CONNECTION_OPTIONS } from './connect-to-swarm.const';\n\nexport const connectToSwarmUtil = async (credentials: any) => {\n  const connectionBridge = new ConnectionBridge();\n  const useSessionAuth = await connectionBridge.checkSessionAvailable({\n    ...CONNECT_TO_SWARM_CONNECTION_OPTIONS,\n    auth: {\n      ...CONNECT_TO_SWARM_CONNECTION_OPTIONS.auth,\n      credentials: undefined,\n    },\n  });\n\n  await connectionBridge.connect({\n    ...CONNECT_TO_SWARM_CONNECTION_OPTIONS,\n    auth: {\n      ...CONNECT_TO_SWARM_CONNECTION_OPTIONS.auth,\n      credentials: useSessionAuth ? undefined : credentials,\n    },\n  });\n  return connectionBridge;\n};\n","/home/paul/projects/protocol/src/components/connect-to-swarm/index.ts",[],"/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.tsx",["2226","2227","2228"],"import React, { MouseEvent } from 'react';\nimport { FILE_STORAGE_SERVICE_STATUS } from 'classes/filestorage-class';\nimport {\n  downloadFile,\n  downloadFileByUrl,\n} from '../../utils/files-utils/files-utils-download';\nimport { IFileStorage } from '../../classes/filestorage-class/filestorage-class.types';\nimport { FILE_STORAGE_SERVICE_TYPE } from '../../classes/filestorage-class/filestorage-class.const';\nimport { connectToFileStorage } from './filestore-add-file.utils';\n\nexport class FileStoreAddFile extends React.Component {\n  protected fileStorage:\n    | IFileStorage<\n        FILE_STORAGE_SERVICE_TYPE.HTTP | FILE_STORAGE_SERVICE_TYPE.IPFS\n      >\n    | undefined;\n\n  protected loadingProgress: number | undefined = undefined;\n\n  protected uploadedFiles: string[] = [];\n\n  protected styles = {\n    filesLoadedContainer: {\n      paddingBottom: '10px',\n    },\n  };\n\n  public componentDidMount() {\n    this.createFilestoreInstance();\n  }\n\n  public render() {\n    const { fileStorage: fileStore } = this;\n\n    if (!fileStore) {\n      return <div>Not ready</div>;\n    }\n    return (\n      <>\n        {this.renderFileDownload()}\n        {this.renderFileUpload()}\n      </>\n    );\n  }\n\n  protected async createFilestoreInstance() {\n    this.fileStorage = await connectToFileStorage();\n    this.forceUpdate();\n  }\n\n  protected handleFileChosen = async (\n    ev: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (this.loadingProgress != null) {\n      return;\n    }\n\n    const { target } = ev;\n    const { fileStorage: fileStore } = this;\n\n    if (fileStore && target.files) {\n      const file = target.files[0];\n\n      this.loadingProgress = 0;\n      try {\n        console.dir(file);\n        const [loadedAddr] = await Promise.all([\n          fileStore.add(FILE_STORAGE_SERVICE_TYPE.IPFS, file.name, file, {\n            progress: (progress: number) => {\n              this.loadingProgress = progress;\n              this.forceUpdate();\n            },\n          }),\n          Promise.resolve().then(() => {\n            this.forceUpdate();\n          }),\n        ]);\n        this.uploadedFiles.push(loadedAddr);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        this.loadingProgress = undefined;\n        this.forceUpdate();\n      }\n    }\n  };\n\n  private handleFileDownload = async (ev: MouseEvent<HTMLAnchorElement>) => {\n    const { target } = ev;\n    const { textContent } = target as HTMLAnchorElement;\n\n    ev.preventDefault();\n    if (textContent) {\n      await this.fileStorage?.download(textContent);\n    }\n  };\n\n  protected handleFileDownloadByURL = async () => {\n    const inpEl = document.getElementById('fileDownload');\n    const url = (inpEl as HTMLInputElement)?.value;\n\n    if (url) {\n      try {\n        const result = await this.fileStorage?.get(`/file/${url}`);\n\n        if (!(result instanceof File)) {\n          throw new Error('Failed to get the file');\n        }\n        downloadFile(result);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  };\n\n  protected renderFilesLoadedList() {\n    const { uploadedFiles } = this;\n\n    return uploadedFiles.map((fileAddr, idx) => (\n      <div key={fileAddr}>\n        <pre>{idx}. </pre>\n        <a\n          href=\"#\"\n          role=\"button\"\n          data-name={fileAddr}\n          onClick={this.handleFileDownload}\n        >\n          {fileAddr}\n        </a>\n      </div>\n    ));\n  }\n\n  protected renderFileUpload() {\n    if (this.loadingProgress != null) {\n      return <div>Upload progress: {this.loadingProgress}</div>;\n    }\n    return (\n      <div>\n        <div style={this.styles.filesLoadedContainer}>\n          {this.renderFilesLoadedList()}\n        </div>\n        <label htmlFor=\"fileUpload\">File: </label>\n        <input id=\"fileUpload\" type=\"file\" onChange={this.handleFileChosen} />\n      </div>\n    );\n  }\n\n  protected renderFileDownload() {\n    return (\n      <div>\n        <label htmlFor=\"fileUpload\">Url: </label>\n        <input id=\"fileDownload\" type=\"text\" />\n        <button onClick={this.handleFileDownloadByURL}>Download</button>\n      </div>\n    );\n  }\n}\n","/home/paul/projects/protocol/src/components/filestore-add-file/filestore-add-file.utils.ts",["2229","2230","2231"],"import { FileStorageClassProviderIPFS } from 'classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-ipfs/filestorage-class-provider-ipfs';\nimport { ipfsUtilsConnectBasic } from 'utils/ipfs-utils/ipfs-utils';\nimport { IFileStorageService } from '../../classes/filestorage-class/filestorage-class.types';\nimport { FileStorageClassProviderHTTP } from '../../classes/filestorage-class/filestorage-class-providers/filestorage-class-provider-http/filestorage-class-provider-http';\nimport {\n  FileStorage,\n  FILE_STORAGE_SERVICE_TYPE,\n} from 'classes/filestorage-class';\n\nexport const connectToFileStorage = async () => {\n  const ipfs = await ipfsUtilsConnectBasic();\n  const optionsIpfs = {\n    ipfs,\n  };\n  const optionsHTTP = {};\n  const fileStoreProvider = new FileStorage();\n\n  await fileStoreProvider.connect([\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.IPFS,\n      options: optionsIpfs,\n    },\n    {\n      type: FILE_STORAGE_SERVICE_TYPE.HTTP,\n      options: optionsHTTP,\n    },\n  ]);\n  return fileStoreProvider;\n};\n","/home/paul/projects/protocol/src/components/filestore-add-file/index.ts",[],"/home/paul/projects/protocol/src/components/sensitive-data-storage/index.ts",[],"/home/paul/projects/protocol/src/components/sensitive-data-storage/sensitive-data-storage.tsx",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/protocol/src/const/common-date-time/index.ts",[],"/home/paul/projects/protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/projects/protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/protocol/src/const/common-values/index.ts",[],"/home/paul/projects/protocol/src/const/const-api-conf.ts",[],"/home/paul/projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/projects/protocol/src/const/const-crypto-keys/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/projects/protocol/src/const/const-validation-regex/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/protocol/src/const/const-validation-schemes/index.ts",[],"/home/paul/projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/projects/protocol/src/const/const-validation-values/index.ts",[],"/home/paul/projects/protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/protocol/src/dev.ts",[],"/home/paul/projects/protocol/src/index.ts",[],"/home/paul/projects/protocol/src/prod.ts",[],"/home/paul/projects/protocol/src/react-app-env.d.ts",[],"/home/paul/projects/protocol/src/types/channels.types.ts",[],"/home/paul/projects/protocol/src/types/common.types.ts",[],"/home/paul/projects/protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/protocol/src/types/helper.types.ts",["2232","2233","2234"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n\nexport type ArrayFirst<T extends any[]> = T extends Array<infer F> ? F : never;\n\nexport type Defined<T extends {}> = {\n  [k in keyof T]: T[k] extends undefined ? NonNullable<T[k]> : T[k];\n};\n","/home/paul/projects/protocol/src/types/index.d.ts",[],"/home/paul/projects/protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/protocol/src/types/ipfs.types.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-mdns.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-secio.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-spdy.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-stardust.d.ts",["2235","2236","2237"],"/** Declaration file generated by dts-gen */\r\n\r\ndeclare module 'libp2p-stardust' {\r\n  export = libp2p_stardust;\r\n\r\n  function libp2p_stardust(...args: any[]): any;\r\n\r\n  function isstardust(obj: any): void;\r\n\r\n  libp2p_stardust.isstardust = isstardust;\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p-tcp.d.ts",["2238","2239","2240"],"/** Declaration file generated by dts-gen */\r\ndeclare module 'libp2p-tcp' {\r\n  export = libp2p_tcp;\r\n\r\n  declare function libp2p_tcp(...args: any[]): any;\r\n\r\n  declare namespace libp2p_tcp {\r\n    function isTCP(obj: any): void;\r\n  }\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p-webrtc-direct.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/protocol/src/types/libp2p-websockets.d.ts",["2241","2242","2243"],"/** Declaration file generated by dts-gen */\r\n\r\ndeclare module 'libp2p-websockets' {\r\n  export = libp2p_websockets;\r\n\r\n  declare function libp2p_websockets(...args: any[]): any;\r\n\r\n  declare namespace libp2p_websockets {\r\n    function isWebSockets(obj: any): void;\r\n  }\r\n}\r\n","/home/paul/projects/protocol/src/types/libp2p.d.ts",[],"/home/paul/projects/protocol/src/types/main.types.ts",[],"/home/paul/projects/protocol/src/types/multiaddr.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/protocol/src/types/orbit-db-keystore.d.ts",["2244","2245","2246","2247","2248","2249"],"import 'orbit-db-keystore';\n\nexport interface IOrbitDBKeystoreStoreCustom {\n  status: string;\n  open(): Promise<void>;\n  close(): Promise<void>;\n  put(k: string, v: any): Promise<void>;\n  get(k: string): string | Uint8Array;\n  verify(\n    publicKeySignature: string,\n    publicKey: string,\n    publicKeyAndId: string\n  ): Promise<boolen>;\n}\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore extends IOrbitDBKeystoreStoreCustom {\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStoreCustom;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n\n  export = class Keystore implements IOrbitDBKeystoreStore {\n    constructor(options: any) { }\n  }\n}\n","/home/paul/projects/protocol/src/types/orbit-db-storage-adapter.d.ts",[],"/home/paul/projects/protocol/src/types/pull-mplex.d.ts",[],"/home/paul/projects/protocol/src/types/storage.types.ts",[],"/home/paul/projects/protocol/src/types/users.types.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-array.ts",["2250","2251","2252","2253"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n\n/**\n * check wherether the array\n * includes all items\n * @param testedArray\n * @param requiredItems\n */\nexport const commonUtilsArrayIncludesAll = (\n  testedArray: any[],\n  requiredItems: any[]\n): boolean => {\n  const len = requiredItems.length;\n  let idx = 0;\n\n  while (idx < len) {\n    if (!testedArray.includes(requiredItems[idx])) {\n      return false;\n    }\n    idx++;\n  }\n  return true;\n};\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-check-value.ts",["2254"],"export const checkIsError = (v: any): v is Error => v instanceof Error;\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-main.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-objects.ts",["2255","2256","2257","2258","2259"],"import { TObjectKeys, TDictionary } from 'types/common.types';\nimport { isDefined } from './common-utils-main';\n\nexport const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n\nexport const getObjectKeys = (o: object): Array<TObjectKeys> =>\n  (Object.keys(o) as Array<TObjectKeys>).concat(\n    Object.getOwnPropertySymbols(o)\n  );\n\nexport const isSimpleObject = (o: any): o is object =>\n  typeof o === 'object' && Object.getPrototypeOf(o) === Object.prototype;\n\n/**\n * extends object with another object if the object\n * have no properties\n *\n * @export\n * @template T\n * @template E\n * @param {T} o\n * @param {E} ext\n * @returns {T}\n */\nexport function extend<T extends TDictionary<any>, E extends TDictionary<any>>(\n  o: T | undefined,\n  ext: E,\n  replaceExisting?: boolean\n): T & E {\n  if (!o) {\n    return ext;\n  }\n  if (!isSimpleObject(o) || !isSimpleObject(ext)) {\n    if (replaceExisting && ext) {\n      return ext;\n    }\n    return (!o || isEmptyObject(o)) && ext ? ext : o;\n  }\n\n  const keys = getObjectKeys(ext);\n  let idx = 0;\n  let k: keyof E;\n  const len = keys.length;\n\n  while (idx < len) {\n    k = keys[idx];\n    idx++;\n    if (!isDefined(ext[k])) {\n      continue;\n    }\n    if (replaceExisting || !isDefined(o[k])) {\n      o[k] = ext[k];\n    } else if (typeof o[k] === 'object' && typeof ext[k] === 'object') {\n      o[k] = extend(o[k], ext[k]);\n    }\n  }\n  return o;\n}\n","/home/paul/projects/protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/protocol/src/utils/common-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/index.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-cache-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-compression-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["2260","2261","2262"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { decryptDataByPassword } from '../password-utils/decrypt.password-utils';\nimport { DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME } from './data-sign-utils.const';\nimport { generateSalt } from '../encryption-utils/salt-utils';\nimport { encryptDataWithPassword } from '../password-utils/encrypt.password-utils';\nimport { TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE } from './data-sign-utils.types';\nimport { typedArrayToString } from '../typed-array-utils';\n\nexport const dataSignIsCryptoKeyPairImported = (\n  key: any,\n  checkPrivateKey: boolean = true\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    (!checkPrivateKey || !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME])\n  );\n};\n\nexport const dataSignGenerateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModuleDataSign.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const dataSignExportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModuleDataSign.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await dataSignExportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return dataSignExportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const dataSignExportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await dataSignExportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPair = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair, !!password)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        password || keyPair.privateKey\n          ? dataSignExportKey(keyPair.privateKey)\n          : Promise.resolve(undefined),\n        dataSignExportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n\n      const result: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE = {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n\n      if (password) {\n        const salt = generateSalt();\n\n        if (salt instanceof Error) {\n          return new Error('Failed to generate a unique salt value');\n        }\n\n        const encryptedPrivateKey = await encryptDataWithPassword(\n          password,\n          salt,\n          privateKey\n        );\n\n        if (encryptedPrivateKey instanceof Error) {\n          return new Error(\n            'Failed to encrypt private key with password provided'\n          );\n        }\n\n        const saltStringified = typedArrayToString(salt);\n\n        if (saltStringified instanceof Error) {\n          return new Error(\n            'Failed to stringify the salt value for the private data sign key'\n          );\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          saltStringified,\n          encryptedPrivateKey\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          return new Error('Failed to decrypt private key for data encryption');\n        }\n        result[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] = saltStringified;\n        result[\n          DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME\n        ] = encryptedPrivateKey;\n      }\n      return result;\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignExportKeyPairAsString = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<string | Error> => {\n  try {\n    const res = await dataSignExportKeyPair(keyPair, password);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKey = async (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModuleDataSign.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, true);\n\nexport const dataSignImportPrivateKey = (\n  key: TDATA_SIGN_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => dataSignImportKey(key, false);\n\nexport const dataSignImportKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE,\n  checkPrivateKey: boolean = true\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (dataSignIsCryptoKeyPairImported(keyPair, checkPrivateKey)) {\n      const privateKeyToImport =\n        keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME];\n      if (checkPrivateKey && !privateKeyToImport) {\n        return new Error('The private key is empty');\n      }\n      const importResult = await Promise.all([\n        dataSignImportPublicKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]\n        ),\n        checkPrivateKey || privateKeyToImport\n          ? dataSignImportPrivateKey(privateKeyToImport!)\n          : (Promise.resolve(undefined) as any),\n      ]).catch((err) => [err, err]);\n      const publicKey = importResult[0];\n      let privateKey = importResult[1];\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        if (checkPrivateKey) {\n          return privateKey;\n        }\n        privateKey = undefined;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyPairFromString = async (\n  keyPairString: string,\n  password?: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (\n        password &&\n        keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME]\n      ) {\n        if (\n          typeof keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] !==\n          'string'\n        ) {\n          return new Error('A salt value must be a string');\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME],\n          keyPairObject[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          console.error('Failed to decrypt the data sign private key');\n          return decryptedPrivateKey;\n        }\n        try {\n          keyPairObject[\n            DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME\n          ] = JSON.parse(decryptedPrivateKey);\n        } catch (err) {\n          console.error(err);\n          return new Error(\n            'Failed to parse datasign Private key from the string decrypted'\n          );\n        }\n      }\n      if (dataSignIsCryptoKeyPairImported(keyPairObject, !!password)) {\n        return dataSignImportKeyPair(\n          keyPairObject as TDATA_SIGN_UTIL_KEYPAIR_IMPORT_TYPE,\n          !!password\n        );\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return dataSignImportKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const dataSignImportPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, true);\n\nexport const dataSignImportPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error =>\n  dataSignImportKeyFromString(key, false);\n\nexport const dataSignCheckIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const dataSignGetKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (dataSignCheckIfStringIsKeyPair(key)) {\n      const keyPair = await dataSignImportKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return dataSignGetKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await dataSignImportKeyFromString(\n        key,\n        type === 'public'\n      );\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return dataSignGetKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const dataSignImportEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return dataSignImportKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return dataSignImportKey(jwk);\n    } else if (typeof key === 'string') {\n      return dataSignImportKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const dataSignConvertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await dataSignImportEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return dataSignExportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",["2263"],"if (!window.crypto) {\n  window.CryptoKey = require('@trust/webcrypto/src/keys/CryptoKey');\n  window.CryptoKeyPair = require('@trust/webcrypto/src/keys/CryptoKeyPair');\n  (window as any).JsonWebKey = require('@trust/webcrypto/src/keys/JsonWebKey');\n}\n\nexport const ENCRYPTION_FORMAT_SUPPORTED = !window.crypto ? 'SHA-1' : undefined;\n// TODO - check isomorphic-webcrypto to use\n\nexport const crypto = window.crypto || require('@trust/webcrypto');\n\nexport const cryptoModuleDataSign = crypto.subtle;\n","/home/paul/projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["2264"],"import { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  dataSignGetKeyOfType,\n  dataSignExportKey,\n} from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModuleDataSign.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["2265"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModuleDataSign } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { dataSignGetKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<true | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModuleDataSign.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res !== true\n      ? new Error('The signature for the data is not valid')\n      : true;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyData = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<true | Error> => {\n  const k = await dataSignGetKeyOfType(\n    key,\n    DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE\n  );\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n  return verifyNative(k, d, s);\n};\n","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["2266","2267","2268","2269","2270"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/protocol/src/utils/data-validators-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["2271","2272","2273","2274","2275","2276","2277","2278","2279","2280"],"import {\n  CONST_CRYPTO_KEYS_TYPES,\n  CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS,\n} from 'const/const-crypto-keys/const-crypto-keys';\nimport {\n  HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM,\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM,\n} from 'utils/hash-calculation-utils/hash-calculation-utils.const';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\n\nimport { commonUtilsArrayIncludesAll } from '../common-utils/common-utils-array';\nimport { eCRYPTO_UTILS_KEYS_USAGES } from '../encryption-utils/crypto-utils.const';\nimport {\n  calculateHash,\n  calculateHashNative,\n} from './../hash-calculation-utils/hash-calculation-utils';\nimport {\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n} from './encryption-keys-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (\n  keyPair: any,\n  checkPrivateKeys: boolean = true\n): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    isCryptoKey(keyPair.publicKey) &&\n    (!checkPrivateKeys || isCryptoKey(keyPair.privateKey))\n  );\n};\n\nexport const isCryptoKeyIncludesUsages = (\n  cryptoKey: CryptoKey,\n  expectedUsages: eCRYPTO_UTILS_KEYS_USAGES[] | eCRYPTO_UTILS_KEYS_USAGES\n): boolean => {\n  const { usages } = cryptoKey;\n\n  if (typeof expectedUsages === 'string') {\n    return usages.includes(expectedUsages);\n  }\n  return commonUtilsArrayIncludesAll(usages, expectedUsages as string[]);\n};\n\nexport const isCryptoKeyDataSign = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.sign);\n\nexport const isCryptoKeyDataVerify = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.verify);\n\nexport const isCryptoKeyDataEncryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.encrypt);\n\nexport const isCryptoKeyDataDecryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.decrypt);\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n\nexport const exportCryptokeyInFormat = async (\n  key: CryptoKey,\n  format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS\n): Promise<ArrayBuffer | JsonWebKey | Error> => {\n  try {\n    const result = await crypto.subtle.exportKey(format, key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      return new Error(\n        'exportCryptokeyInFormat::error returned from the exportKey'\n      );\n    }\n    return result;\n  } catch (err) {\n    console.error(err);\n    return new Error(\n      'exportCryptokeyInFormat::An error thrown when export the crypto key'\n    );\n  }\n};\n\n/**\n * calculates hash string of the crypto key\n * @param {CryptoKey} key\n */\nexport const calcCryptoKeyHash = async (\n  key: CryptoKey,\n  alg: HASH_CALCULATION_UTILS_HASH_ALHORITHM = HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM\n): Promise<Error | string> => {\n  if (!(key instanceof CryptoKey)) {\n    return new Error('Key os not an instance of CryptoKey');\n  }\n  if (!key.extractable) {\n    return new Error('The crypto key is not extractable');\n  }\n\n  let format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS =\n    CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.RAW;\n  const keyAlgName = key.algorithm.name.toLowerCase();\n\n  if (keyAlgName.includes('rsa-') || keyAlgName.includes('ecdsa')) {\n    if (key.type.includes(CONST_CRYPTO_KEYS_TYPES.PUBLIC)) {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.SPKI;\n    } else {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.PKCS8;\n    }\n  }\n\n  const exportedCryptoKey = await exportCryptokeyInFormat(key, format);\n\n  if (exportedCryptoKey instanceof Error) {\n    console.error(exportedCryptoKey);\n    return new Error('Failed to export the crypto key in the RAW format');\n  }\n\n  const hashCalcResult = await calculateHashNative(\n    exportedCryptoKey as ArrayBuffer,\n    alg\n  );\n\n  if (hashCalcResult instanceof Error) {\n    console.error(hashCalcResult);\n    return new Error('Failed to calculate a hash for the exported crypto key');\n  }\n  return encodeArrayBufferToDOMString(hashCalcResult);\n};\n\n// allow to absent for a private keys in a pairs\nexport const calcCryptoKeyPairHash = async (\n  cryptoPair: CryptoKeyPair,\n  alg?: HASH_CALCULATION_UTILS_HASH_ALHORITHM\n): Promise<Error | string> => {\n  const pending = [calcCryptoKeyHash(cryptoPair.publicKey)];\n\n  if (cryptoPair.privateKey) {\n    pending.push(calcCryptoKeyHash(cryptoPair.privateKey));\n  }\n\n  const results = await Promise.all(pending);\n\n  if (results[0] instanceof Error) {\n    return new Error('Failed to calculate hash of the private key');\n  }\n  if (results[1] instanceof Error) {\n    return new Error('Failed to calculate hash of the puclic key');\n  }\n  return calculateHash(`${results[0]}___${results[1]}`);\n};\n","/home/paul/projects/protocol/src/utils/encryption-keys-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["2281"],"import { cryptoModule } from './main.crypto-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/projects/protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["2282","2283"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\nimport { decryptDataByPassword } from 'utils';\nimport { generateSalt } from './salt-utils';\nimport { CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME } from './crypto-utils.const';\nimport { encryptDataWithPassword } from '../password-utils/encrypt.password-utils';\nimport { encodeArrayBufferToDOMString } from '../string-encoding-utils';\nimport { TCRYPTO_UTIL_KEYPAIR_PREIMPORT_FORMAT_TYPE } from './crypto-utils.types';\nimport { typedArrayToString } from '../typed-array-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any,\n  checkPrivateKey: boolean = true\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    (!checkPrivateKey || !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME])\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair, !!password)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        password || keyPair.privateKey\n          ? exportKey(keyPair.privateKey)\n          : Promise.resolve(undefined),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n\n      const result: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE = {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n\n      if (password) {\n        const salt = generateSalt();\n\n        if (salt instanceof Error) {\n          return new Error('Failed to generate a unique salt value');\n        }\n\n        const encryptedPrivateKey = await encryptDataWithPassword(\n          password,\n          salt,\n          privateKey\n        );\n\n        if (encryptedPrivateKey instanceof Error) {\n          return new Error(\n            'Failed to encrypt private key with password provided'\n          );\n        }\n\n        const saltStringified = typedArrayToString(salt);\n\n        if (saltStringified instanceof Error) {\n          return new Error(\n            'Failed to stringify the salt for the encryption private key'\n          );\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          saltStringified,\n          encryptedPrivateKey\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          return new Error('Failed to decrypt private key for data encryption');\n        }\n        result[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] = saltStringified;\n        result[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME] = encryptedPrivateKey;\n      }\n      return result;\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair,\n  password?: string\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair, password);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_PREIMPORT_FORMAT_TYPE,\n  checkPrivateKey: boolean = true\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair, checkPrivateKey)) {\n      const importResult = await Promise.all([\n        (async () => {\n          try {\n            return await importPublicKey(\n              keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]\n            );\n          } catch (err) {\n            return err;\n          }\n        })(),\n        (async () => {\n          try {\n            if (\n              checkPrivateKey ||\n              keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n            ) {\n              return await importPrivateKey(\n                keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n              );\n            }\n          } catch (err) {\n            return err;\n          }\n        })(),\n      ]);\n      const publicKey = importResult[0];\n      let privateKey = importResult[1];\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        if (checkPrivateKey) {\n          return privateKey;\n        }\n        privateKey = undefined;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = async (\n  keyPairString: string,\n  password?: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (password && keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME]) {\n        if (\n          typeof keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME] !== 'string'\n        ) {\n          return new Error('A salt value must be a string');\n        }\n\n        const decryptedPrivateKey = await decryptDataByPassword(\n          password,\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_SALT_KEY_NAME],\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        );\n\n        if (decryptedPrivateKey instanceof Error) {\n          console.error('Failed to decrypt the data encryption private key');\n          return decryptedPrivateKey;\n        }\n        try {\n          keyPairObject[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME] = JSON.parse(\n            decryptedPrivateKey\n          );\n        } catch (err) {\n          console.error(err);\n          return new Error(\n            'Failed to parse dataencryption Private key from the string decrypted'\n          );\n        }\n      }\n      return importKeyPair(keyPairObject, !!password);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/projects/protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/files-utils-download.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/files-utils-size.ts",[],"/home/paul/projects/protocol/src/utils/files-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/protocol/src/utils/firebase-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/protocol/src/utils/hash-calculation-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/projects/protocol/src/utils/identity-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/index.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/index.js",["2284"],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.const.ts",[],"/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils-libp2p/ipfs-utils-libp2p.ts",["2285","2286","2287","2288"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as TCP from 'libp2p-tcp';\nimport * as WS from 'libp2p-websockets';\n// import * as WRTCDirect from 'libp2p-webrtc-direct';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as SECIO from 'libp2p-secio';\nimport * as WRTCStar from 'libp2p-webrtc-star';\n// import Stardust from 'libp2p-stardust';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport multiaddr from 'multiaddr';\nimport {\n  STARDUST_SERVER,\n  DELEGATE_CONTENT_ROUTER,\n  DELEGATE_PEER_ROUTER,\n  WEB_RTC_STAR_SERVER,\n} from './ipfs-utils-libp2p.const';\n\nconst upgrader = {\n  upgradeInbound: (maConn: any) => maConn,\n  upgradeOutbound: (maConn: any) => maConn,\n};\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebRTC transport and give it our PeerId, straight from the ipfs node\n  peerInfo.multiaddrs.add(\n    multiaddr(\n      `/ip4/${WEB_RTC_STAR_SERVER.host}/tcp/${WEB_RTC_STAR_SERVER.port}/ws/p2p-webrtc-star`\n    )\n  );\n\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(DELEGATE_PEER_ROUTER);\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    DELEGATE_CONTENT_ROUTER\n  );\n\n  // Build and return our libp2p node\n  return new Libp2p(\n    {\n      peerInfo,\n      peerBook,\n      /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n      switch: {\n        denyTTL: 2 * 60 * 1e3, // 2 minute base\n        denyAttempts: 5, // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3,\n      },\n      // Lets limit the connection managers peers and have it check peer health less frequently\n      connectionManager: {\n        minPeers: 25,\n        maxPeers: 100,\n        pollInterval: 5000,\n      },\n      modules: {\n        transport: [\n          TCP,\n          WS,\n          // TODO - WRTCDirect, depending on webrtc nodejs lib which is not necessary\n          WRTCStar,\n          // TODO - when the module will be stable use it\n          // Stardust,\n        ],\n        peerDiscovery: [Bootstrap],\n        streamMuxer: [MPLEX, SPDY],\n        connEncryption: [SECIO],\n        dht: KadDHT,\n        // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n        pubsub: PubSubGossip,\n        contentRouting: [delegateContentRouter],\n        peerRouting: [delegatePeerRouter],\n      },\n      config: {\n        peerDiscovery: {\n          // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n          autoDial: true,\n          bootstrap: {\n            list: bootstrapList,\n          },\n          webRTCStar: {\n            enabled: true,\n          },\n        },\n        transport: {\n          WebRTCStar: {\n            // webrtc-star options\n            interval: 1000, // ms\n            enabled: true,\n            id: peerInfo.id,\n            upgrader,\n          },\n          // TODO - when stabilized use it\n          // stardust: {\n          //   enabled: true,\n          //   upgrader,\n          //   libp2p: Libp2p,\n          //   id: peerInfo.id,\n          // },\n        },\n        // Turn on relay with hop active so we can connect to more peers\n        // implements the circuit-relay mechanism that allows nodes that\n        // don't speak the same protocol to communicate using a third relay node.\n        // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n        // can be forund on here\n        // https://github.com/libp2p/specs/tree/master/relay\n        /**\n         * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n         *\n         * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n         * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n         */\n        relay: {\n          enabled: true,\n          hop: {\n            enabled: true,\n            active: true,\n          },\n        },\n        /**\n         * Create a new KadDHT.\n         *\n         * @param {Switch} sw libp2p-switch instance\n         * @param {object} options DHT options\n         * @param {number} options.kBucketSize k-bucket size (default 20)\n         * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n         * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n         * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n         * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n         * @param {randomWalkOptions} options.randomWalk randomWalk options\n         */\n        /**\n         * Random walk options\n         *\n         * @typedef {Object} randomWalkOptions\n         * @property {boolean} enabled discovery enabled (default: true)\n         * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n         * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n         * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n         * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n         */\n        dht: {\n          enabled: true,\n          kBucketSize: 20,\n          concurrency: 5,\n          randomWalk: {\n            queriesPerPeriod: 2,\n            enabled: true,\n            interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n            timeout: 2e3, // End the query quickly since we're running so frequently\n          },\n        },\n        pubsub: {\n          enabled: true,\n          emitSelf: true,\n          signMessages: false,\n          strictSigning: false,\n        },\n      },\n    },\n    peerInfo\n  );\n};\n","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts",["2289","2290","2291","2292"],"// export const IPFS_UTILS_DEFAULT_OPTIONS = {\n//   config: {\n//     Addresses: {\n//       Swarm: [\n//         '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n//         '/ip4/127.0.0.1/tcp/9090/ws/p2p-webrtc-star',\n//       ],\n//     },\n//   },\n// };\n\nimport { WEB_RTC_STAR_SERVER } from './ipfs-utils-libp2p/ipfs-utils-libp2p.const';\n\nconst API_SERVER = {\n  host: '127.0.0.1',\n  port: '5001',\n};\n\nconst GATEWAY_SERVER = {\n  host: '127.0.0.1',\n  port: '8080',\n};\n\nconst BOOTSTRAP_NODE = {\n  host: '127.0.0.1',\n  port: '4002',\n};\n\nexport const IPFS_UTILS_DEFAULT_OPTIONS = {\n  // TODO - uncomment after server-side integrated\n  // config: {\n  //   Addresses: {\n  //     Swarm: [\n  //       `/ip4/${WEB_RTC_STAR_SERVER.host}/tcp/${WEB_RTC_STAR_SERVER.port}/ws/p2p-webrtc-star`,\n  //     ],\n  //     API: `/ip4/${API_SERVER.host}/tcp/${API_SERVER.port}`,\n  //     Gateway: `/ip4/${GATEWAY_SERVER.host}/tcp/${GATEWAY_SERVER.port}`,\n  //   },\n  //   Bootstrap: [\n  //     `/ip4/${BOOTSTRAP_NODE.host}/tcp/${BOOTSTRAP_NODE.port}/ws/ipfs/Qma6wr1oVavRghh4QDXxx1R1Ngo5ahreRRwkZgeYaUPKXs`,\n  //   ],\n  // },\n  // preload: {\n  //   // TODO - caused errors https://github.com/ipfs/go-ipfs/issues/6204\n  //   enabled: false,\n  //   addresses: [`/ip4/${API_SERVER.host}/tcp/${API_SERVER.port}`],\n  // },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  dht: {\n    enabled: true,\n    kBucketSize: 20,\n    concurrency: 5,\n    randomWalk: {\n      queriesPerPeriod: 2,\n      enabled: true,\n      interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n      timeout: 2e3, // End the query quickly since we're running so frequently\n    },\n  },\n  pubsub: {\n    enabled: true,\n    emitSelf: true,\n    signMessages: false,\n    strictSigning: false,\n  },\n};\n\nexport const IPFS_UTILS_DEFAULT_TIMEOUT_MS = 30000;\n","/home/paul/projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts",["2293","2294"],"import IPFS from 'ipfs';\nimport {\n  IPFS_UTILS_DEFAULT_OPTIONS,\n  IPFS_UTILS_DEFAULT_TIMEOUT_MS,\n} from './ipfs-utils.const';\nimport { getLibPeerToPeer } from './ipfs-utils-libp2p/ipfs-utils-libp2p';\n\n/**\n * create a ready to use connection to IPFS with a basis default options\n */\nexport const ipfsUtilsConnectBasic = async (\n  options?: object,\n  timeoutMs: number = IPFS_UTILS_DEFAULT_TIMEOUT_MS\n) => {\n  let timer: NodeJS.Timeout | undefined;\n  try {\n    timer = setTimeout(() => {\n      throw new Error('Connection timed out');\n    }, timeoutMs);\n    return await IPFS.create({\n      ...IPFS_UTILS_DEFAULT_OPTIONS,\n      ...options,\n      // TODO - https://github.com/ipfs/go-ipfs/issues/6204 - try when resolved libp2p: getLibPeerToPeer,\n    });\n  } finally {\n    clearTimeout(timer!);\n  }\n};\n","/home/paul/projects/protocol/src/utils/lazy-loading-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/projects/protocol/src/utils/main-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/encrypt.password-utils.ts",["2295","2296"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n\nexport const encryptDataWithPasswordToArrayBuffer = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n  return encryptDataToArrayBuffer(key, data);\n};\n","/home/paul/projects/protocol/src/utils/password-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/password-utils/password-utils.const.ts",["2297","2298"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\nimport { HASH_CALCULATION_UTILS_HASH_ALHORITHM } from '../hash-calculation-utils/hash-calculation-utils.const';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM =\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM.SHA256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 128;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/projects/protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/protocol/src/utils/string-encoding-utils.ts",["2299"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/projects/protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/protocol/src/utils/typed-array-utils.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/index.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts",[],"/home/paul/projects/protocol/src/utils/validation-utils/validation-utils.ts",["2300","2301"],"import { ValidationError } from './validation-utils-validation-error';\nimport Ajv, { ValidateFunction } from 'ajv';\nimport ajvJSONSchemaDraft6 from 'ajv/lib/refs/json-schema-draft-06.json';\nimport memoize from 'lodash.memoize';\nimport { isDEV } from 'const/common-values/common-values-env';\n\nconst ajv = new Ajv({\n  allErrors: isDEV,\n  verbose: isDEV,\n});\n\najv.addMetaSchema(ajvJSONSchemaDraft6);\n\nconst ajvVerbose = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\najvVerbose.addMetaSchema(ajvJSONSchemaDraft6);\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  return !!getValidatorForJSONSchema(schema)(value);\n};\n\nexport const getVerboseValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajvVerbose.compile(schema)\n);\n\nexport const validateVerboseBySchema = (\n  schema: object,\n  value: any\n): Error | void => {\n  const validator = getVerboseValidatorForJSONSchema(schema);\n  const validationResult = validator(value);\n\n  if (!validationResult) {\n    return new ValidationError(validator.errors);\n  }\n};\n","/home/paul/projects/protocol/src/components/database-component/database-component.tsx",["2302"],"/home/paul/projects/protocol/src/components/database-component/index.ts",[],"/home/paul/projects/protocol/src/components/database-component/message-component/index.ts",[],"/home/paul/projects/protocol/src/components/database-component/message-component/message-component.tsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"2303"},{"ruleId":null,"fatal":true,"severity":2,"message":"2304"},{"ruleId":null,"fatal":true,"severity":2,"message":"2305"},{"ruleId":null,"fatal":true,"severity":2,"message":"2306"},{"ruleId":"2307","severity":1,"message":"2308","line":16,"column":56,"nodeType":"2309","messageId":"2310","endLine":16,"endColumn":59},{"ruleId":"2307","severity":1,"message":"2308","line":18,"column":28,"nodeType":"2309","messageId":"2310","endLine":18,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":34,"column":37,"nodeType":"2309","messageId":"2310","endLine":34,"endColumn":40},{"ruleId":"2307","severity":1,"message":"2308","line":45,"column":42,"nodeType":"2309","messageId":"2310","endLine":45,"endColumn":45},{"ruleId":"2307","severity":1,"message":"2308","line":84,"column":22,"nodeType":"2309","messageId":"2310","endLine":84,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":88,"column":47,"nodeType":"2309","messageId":"2310","endLine":88,"endColumn":50},{"ruleId":"2307","severity":1,"message":"2308","line":89,"column":47,"nodeType":"2309","messageId":"2310","endLine":89,"endColumn":50},{"ruleId":"2307","severity":1,"message":"2308","line":59,"column":65,"nodeType":"2309","messageId":"2310","endLine":59,"endColumn":68},{"ruleId":"2307","severity":1,"message":"2308","line":69,"column":37,"nodeType":"2309","messageId":"2310","endLine":69,"endColumn":40},{"ruleId":"2307","severity":1,"message":"2308","line":4,"column":27,"nodeType":"2309","messageId":"2310","endLine":4,"endColumn":30},{"ruleId":"2311","severity":1,"message":"2312","line":2,"column":10,"nodeType":"2313","endLine":2,"endColumn":13},{"ruleId":"2307","severity":1,"message":"2308","line":9,"column":56,"nodeType":"2309","messageId":"2310","endLine":9,"endColumn":59},{"ruleId":"2307","severity":1,"message":"2308","line":15,"column":55,"nodeType":"2309","messageId":"2310","endLine":15,"endColumn":58},{"ruleId":"2314","severity":1,"message":"2315","line":87,"column":15,"nodeType":"2316","messageId":"2317","endLine":87,"endColumn":27},{"ruleId":"2311","severity":1,"message":"2318","line":58,"column":9,"nodeType":"2313","endLine":58,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":76,"column":27,"nodeType":"2309","messageId":"2310","endLine":76,"endColumn":30},{"ruleId":"2307","severity":1,"message":"2308","line":77,"column":39,"nodeType":"2309","messageId":"2310","endLine":77,"endColumn":42},{"ruleId":"2314","severity":1,"message":"2315","line":98,"column":36,"nodeType":"2316","messageId":"2317","endLine":98,"endColumn":40},{"ruleId":"2307","severity":1,"message":"2308","line":130,"column":38,"nodeType":"2309","messageId":"2310","endLine":130,"endColumn":41},{"ruleId":"2311","severity":1,"message":"2319","line":38,"column":7,"nodeType":"2313","endLine":38,"endColumn":17},{"ruleId":"2320","severity":1,"message":"2321","line":69,"column":3,"nodeType":"2322","endLine":69,"endColumn":19},{"ruleId":"2323","severity":1,"message":"2324","line":69,"column":17,"nodeType":"2325","messageId":"2326"},{"ruleId":"2311","severity":1,"message":"2327","line":3,"column":3,"nodeType":"2313","endLine":3,"endColumn":41},{"ruleId":"2311","severity":1,"message":"2328","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":39},{"ruleId":"2307","severity":1,"message":"2308","line":2,"column":7,"nodeType":"2309","messageId":"2310","endLine":2,"endColumn":10},{"ruleId":"2307","severity":1,"message":"2308","line":13,"column":12,"nodeType":"2309","messageId":"2310","endLine":13,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":47,"column":28,"nodeType":"2309","messageId":"2310","endLine":47,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":67,"column":28,"nodeType":"2309","messageId":"2310","endLine":67,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":38,"column":58,"nodeType":"2309","messageId":"2310","endLine":38,"endColumn":61},{"ruleId":"2314","severity":1,"message":"2315","line":191,"column":14,"nodeType":"2316","messageId":"2317","endLine":191,"endColumn":47},{"ruleId":"2314","severity":1,"message":"2315","line":217,"column":26,"nodeType":"2316","messageId":"2317","endLine":217,"endColumn":76},{"ruleId":"2314","severity":1,"message":"2315","line":217,"column":26,"nodeType":"2316","messageId":"2317","endLine":217,"endColumn":75},{"ruleId":"2307","severity":1,"message":"2308","line":361,"column":17,"nodeType":"2309","messageId":"2310","endLine":361,"endColumn":20},{"ruleId":"2314","severity":1,"message":"2315","line":45,"column":14,"nodeType":"2316","messageId":"2317","endLine":45,"endColumn":19},{"ruleId":"2314","severity":1,"message":"2315","line":45,"column":14,"nodeType":"2316","messageId":"2317","endLine":45,"endColumn":18},{"ruleId":"2307","severity":1,"message":"2308","line":159,"column":29,"nodeType":"2309","messageId":"2310","endLine":159,"endColumn":32},{"ruleId":"2307","severity":1,"message":"2308","line":189,"column":29,"nodeType":"2309","messageId":"2310","endLine":189,"endColumn":32},{"ruleId":"2307","severity":1,"message":"2308","line":228,"column":33,"nodeType":"2309","messageId":"2310","endLine":228,"endColumn":36},{"ruleId":"2311","severity":1,"message":"2329","line":4,"column":10,"nodeType":"2313","endLine":4,"endColumn":30},{"ruleId":"2307","severity":1,"message":"2308","line":37,"column":32,"nodeType":"2309","messageId":"2310","endLine":37,"endColumn":35},{"ruleId":"2314","severity":1,"message":"2315","line":103,"column":13,"nodeType":"2316","messageId":"2317","endLine":103,"endColumn":23},{"ruleId":"2314","severity":1,"message":"2315","line":103,"column":13,"nodeType":"2316","messageId":"2317","endLine":103,"endColumn":22},{"ruleId":"2314","severity":1,"message":"2315","line":134,"column":13,"nodeType":"2316","messageId":"2317","endLine":134,"endColumn":23},{"ruleId":"2314","severity":1,"message":"2315","line":134,"column":13,"nodeType":"2316","messageId":"2317","endLine":134,"endColumn":22},{"ruleId":"2314","severity":1,"message":"2315","line":152,"column":30,"nodeType":"2316","messageId":"2317","endLine":152,"endColumn":40},{"ruleId":"2314","severity":1,"message":"2315","line":152,"column":30,"nodeType":"2316","messageId":"2317","endLine":152,"endColumn":39},{"ruleId":"2307","severity":1,"message":"2308","line":7,"column":18,"nodeType":"2309","messageId":"2310","endLine":7,"endColumn":21},{"ruleId":"2330","severity":1,"message":"2331","line":340,"column":21,"nodeType":"2332","messageId":"2333","endLine":349,"endColumn":16},{"ruleId":"2330","severity":1,"message":"2331","line":350,"column":22,"nodeType":"2332","messageId":"2333","endLine":353,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":10,"column":19,"nodeType":"2309","messageId":"2310","endLine":10,"endColumn":22},{"ruleId":"2307","severity":1,"message":"2308","line":26,"column":19,"nodeType":"2309","messageId":"2310","endLine":26,"endColumn":22},{"ruleId":"2307","severity":1,"message":"2308","line":19,"column":58,"nodeType":"2309","messageId":"2310","endLine":19,"endColumn":61},{"ruleId":"2307","severity":1,"message":"2308","line":34,"column":13,"nodeType":"2309","messageId":"2310","endLine":34,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":65,"column":13,"nodeType":"2309","messageId":"2310","endLine":65,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":88,"column":15,"nodeType":"2309","messageId":"2310","endLine":88,"endColumn":18},{"ruleId":"2311","severity":1,"message":"2334","line":11,"column":3,"nodeType":"2313","endLine":11,"endColumn":23},{"ruleId":"2307","severity":1,"message":"2308","line":218,"column":30,"nodeType":"2309","messageId":"2310","endLine":218,"endColumn":33},{"ruleId":"2307","severity":1,"message":"2308","line":255,"column":28,"nodeType":"2309","messageId":"2310","endLine":255,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":16,"column":62,"nodeType":"2309","messageId":"2310","endLine":16,"endColumn":65},{"ruleId":"2307","severity":1,"message":"2308","line":27,"column":22,"nodeType":"2309","messageId":"2310","endLine":27,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":73,"column":22,"nodeType":"2309","messageId":"2310","endLine":73,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":74,"column":38,"nodeType":"2309","messageId":"2310","endLine":74,"endColumn":41},{"ruleId":"2307","severity":1,"message":"2308","line":120,"column":22,"nodeType":"2309","messageId":"2310","endLine":120,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":134,"column":38,"nodeType":"2309","messageId":"2310","endLine":134,"endColumn":41},{"ruleId":"2307","severity":1,"message":"2308","line":6,"column":16,"nodeType":"2309","messageId":"2310","endLine":6,"endColumn":19},{"ruleId":"2307","severity":1,"message":"2308","line":77,"column":38,"nodeType":"2309","messageId":"2310","endLine":77,"endColumn":41},{"ruleId":"2307","severity":1,"message":"2308","line":90,"column":28,"nodeType":"2309","messageId":"2310","endLine":90,"endColumn":31},{"ruleId":"2314","severity":1,"message":"2315","line":181,"column":54,"nodeType":"2316","messageId":"2317","endLine":181,"endColumn":62},{"ruleId":"2323","severity":1,"message":"2335","line":239,"column":41,"nodeType":"2325","messageId":"2326"},{"ruleId":"2314","severity":1,"message":"2315","line":252,"column":21,"nodeType":"2316","messageId":"2317","endLine":252,"endColumn":34},{"ruleId":"2314","severity":1,"message":"2315","line":445,"column":19,"nodeType":"2316","messageId":"2317","endLine":445,"endColumn":32},{"ruleId":"2314","severity":1,"message":"2315","line":449,"column":17,"nodeType":"2316","messageId":"2317","endLine":449,"endColumn":57},{"ruleId":"2314","severity":1,"message":"2315","line":449,"column":17,"nodeType":"2316","messageId":"2317","endLine":449,"endColumn":30},{"ruleId":"2314","severity":1,"message":"2315","line":455,"column":19,"nodeType":"2316","messageId":"2317","endLine":455,"endColumn":32},{"ruleId":"2314","severity":1,"message":"2315","line":463,"column":19,"nodeType":"2316","messageId":"2317","endLine":463,"endColumn":32},{"ruleId":"2314","severity":1,"message":"2315","line":468,"column":23,"nodeType":"2316","messageId":"2317","endLine":468,"endColumn":41},{"ruleId":"2314","severity":1,"message":"2315","line":478,"column":19,"nodeType":"2316","messageId":"2317","endLine":478,"endColumn":32},{"ruleId":"2311","severity":1,"message":"2336","line":12,"column":3,"nodeType":"2313","endLine":12,"endColumn":30},{"ruleId":"2307","severity":1,"message":"2308","line":85,"column":11,"nodeType":"2309","messageId":"2310","endLine":85,"endColumn":14},{"ruleId":"2311","severity":1,"message":"2337","line":10,"column":8,"nodeType":"2313","endLine":10,"endColumn":12},{"ruleId":"2323","severity":1,"message":"2338","line":43,"column":24,"nodeType":"2325","messageId":"2326"},{"ruleId":"2314","severity":1,"message":"2315","line":112,"column":36,"nodeType":"2316","messageId":"2317","endLine":112,"endColumn":45},{"ruleId":"2314","severity":1,"message":"2315","line":157,"column":33,"nodeType":"2316","messageId":"2317","endLine":157,"endColumn":38},{"ruleId":"2311","severity":1,"message":"2339","line":232,"column":12,"nodeType":"2313","endLine":232,"endColumn":19},{"ruleId":"2311","severity":1,"message":"2340","line":232,"column":21,"nodeType":"2313","endLine":232,"endColumn":27},{"ruleId":"2311","severity":1,"message":"2341","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":29},{"ruleId":"2307","severity":1,"message":"2308","line":47,"column":17,"nodeType":"2309","messageId":"2310","endLine":47,"endColumn":20},{"ruleId":"2307","severity":1,"message":"2308","line":42,"column":36,"nodeType":"2309","messageId":"2310","endLine":42,"endColumn":39},{"ruleId":"2307","severity":1,"message":"2308","line":143,"column":14,"nodeType":"2309","messageId":"2310","endLine":143,"endColumn":17},{"ruleId":"2314","severity":1,"message":"2315","line":206,"column":31,"nodeType":"2316","messageId":"2317","endLine":206,"endColumn":43},{"ruleId":"2314","severity":1,"message":"2315","line":231,"column":35,"nodeType":"2316","messageId":"2317","endLine":231,"endColumn":56},{"ruleId":"2314","severity":1,"message":"2315","line":244,"column":34,"nodeType":"2316","messageId":"2317","endLine":244,"endColumn":46},{"ruleId":"2307","severity":1,"message":"2308","line":388,"column":39,"nodeType":"2309","messageId":"2310","endLine":388,"endColumn":42},{"ruleId":"2314","severity":1,"message":"2315","line":546,"column":10,"nodeType":"2316","messageId":"2317","endLine":546,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":3,"column":42,"nodeType":"2309","messageId":"2310","endLine":3,"endColumn":45},{"ruleId":"2307","severity":1,"message":"2308","line":34,"column":71,"nodeType":"2309","messageId":"2310","endLine":34,"endColumn":74},{"ruleId":"2311","severity":1,"message":"2342","line":546,"column":38,"nodeType":"2313","endLine":546,"endColumn":44},{"ruleId":"2311","severity":1,"message":"2342","line":858,"column":38,"nodeType":"2313","endLine":858,"endColumn":44},{"ruleId":"2307","severity":1,"message":"2308","line":972,"column":34,"nodeType":"2309","messageId":"2310","endLine":972,"endColumn":37},{"ruleId":"2307","severity":1,"message":"2308","line":4,"column":28,"nodeType":"2309","messageId":"2310","endLine":4,"endColumn":31},{"ruleId":"2311","severity":1,"message":"2343","line":12,"column":3,"nodeType":"2313","endLine":12,"endColumn":20},{"ruleId":"2307","severity":1,"message":"2308","line":94,"column":44,"nodeType":"2309","messageId":"2310","endLine":94,"endColumn":47},{"ruleId":"2307","severity":1,"message":"2308","line":112,"column":38,"nodeType":"2309","messageId":"2310","endLine":112,"endColumn":41},{"ruleId":"2307","severity":1,"message":"2308","line":708,"column":35,"nodeType":"2309","messageId":"2310","endLine":708,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":1075,"column":44,"nodeType":"2309","messageId":"2310","endLine":1075,"endColumn":47},{"ruleId":"2307","severity":1,"message":"2308","line":22,"column":35,"nodeType":"2309","messageId":"2310","endLine":22,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":60,"column":43,"nodeType":"2309","messageId":"2310","endLine":60,"endColumn":46},{"ruleId":"2307","severity":1,"message":"2308","line":44,"column":31,"nodeType":"2309","messageId":"2310","endLine":44,"endColumn":34},{"ruleId":"2307","severity":1,"message":"2308","line":45,"column":33,"nodeType":"2309","messageId":"2310","endLine":45,"endColumn":36},{"ruleId":"2307","severity":1,"message":"2308","line":132,"column":29,"nodeType":"2309","messageId":"2310","endLine":132,"endColumn":32},{"ruleId":"2307","severity":1,"message":"2308","line":137,"column":30,"nodeType":"2309","messageId":"2310","endLine":137,"endColumn":33},{"ruleId":"2314","severity":1,"message":"2315","line":188,"column":26,"nodeType":"2316","messageId":"2317","endLine":188,"endColumn":39},{"ruleId":"2314","severity":1,"message":"2315","line":212,"column":26,"nodeType":"2316","messageId":"2317","endLine":212,"endColumn":39},{"ruleId":"2311","severity":1,"message":"2344","line":13,"column":10,"nodeType":"2313","endLine":13,"endColumn":26},{"ruleId":"2311","severity":1,"message":"2345","line":10,"column":10,"nodeType":"2313","endLine":10,"endColumn":27},{"ruleId":"2311","severity":1,"message":"2346","line":6,"column":10,"nodeType":"2313","endLine":6,"endColumn":47},{"ruleId":"2311","severity":1,"message":"2347","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":46},{"ruleId":"2311","severity":1,"message":"2345","line":21,"column":3,"nodeType":"2313","endLine":21,"endColumn":20},{"ruleId":"2307","severity":1,"message":"2308","line":228,"column":53,"nodeType":"2309","messageId":"2310","endLine":228,"endColumn":56},{"ruleId":"2348","severity":1,"message":"2349","line":345,"column":35,"nodeType":"2332","messageId":"2350"},{"ruleId":"2311","severity":1,"message":"2351","line":3,"column":3,"nodeType":"2313","endLine":3,"endColumn":34},{"ruleId":"2311","severity":1,"message":"2352","line":5,"column":10,"nodeType":"2313","endLine":5,"endColumn":46},{"ruleId":"2307","severity":1,"message":"2308","line":30,"column":57,"nodeType":"2309","messageId":"2310","endLine":30,"endColumn":60},{"ruleId":"2307","severity":1,"message":"2308","line":32,"column":31,"nodeType":"2309","messageId":"2310","endLine":32,"endColumn":34},{"ruleId":"2307","severity":1,"message":"2308","line":205,"column":62,"nodeType":"2309","messageId":"2310","endLine":205,"endColumn":65},{"ruleId":"2307","severity":1,"message":"2308","line":260,"column":45,"nodeType":"2309","messageId":"2310","endLine":260,"endColumn":48},{"ruleId":"2307","severity":1,"message":"2308","line":377,"column":9,"nodeType":"2309","messageId":"2310","endLine":377,"endColumn":12},{"ruleId":"2307","severity":1,"message":"2308","line":379,"column":5,"nodeType":"2309","messageId":"2310","endLine":379,"endColumn":8},{"ruleId":"2307","severity":1,"message":"2308","line":380,"column":5,"nodeType":"2309","messageId":"2310","endLine":380,"endColumn":8},{"ruleId":"2307","severity":1,"message":"2308","line":599,"column":58,"nodeType":"2309","messageId":"2310","endLine":599,"endColumn":61},{"ruleId":"2307","severity":1,"message":"2308","line":116,"column":30,"nodeType":"2309","messageId":"2310","endLine":116,"endColumn":33},{"ruleId":"2314","severity":1,"message":"2315","line":55,"column":26,"nodeType":"2316","messageId":"2317","endLine":55,"endColumn":47},{"ruleId":"2314","severity":1,"message":"2315","line":74,"column":26,"nodeType":"2316","messageId":"2317","endLine":74,"endColumn":47},{"ruleId":"2314","severity":1,"message":"2315","line":101,"column":26,"nodeType":"2316","messageId":"2317","endLine":101,"endColumn":47},{"ruleId":"2314","severity":1,"message":"2315","line":201,"column":26,"nodeType":"2316","messageId":"2317","endLine":201,"endColumn":47},{"ruleId":"2307","severity":1,"message":"2308","line":46,"column":20,"nodeType":"2309","messageId":"2310","endLine":46,"endColumn":23},{"ruleId":"2307","severity":1,"message":"2308","line":24,"column":64,"nodeType":"2309","messageId":"2310","endLine":24,"endColumn":67},{"ruleId":"2307","severity":1,"message":"2308","line":105,"column":46,"nodeType":"2309","messageId":"2310","endLine":105,"endColumn":49},{"ruleId":"2307","severity":1,"message":"2308","line":132,"column":13,"nodeType":"2309","messageId":"2310","endLine":132,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":145,"column":13,"nodeType":"2309","messageId":"2310","endLine":145,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":198,"column":13,"nodeType":"2309","messageId":"2310","endLine":198,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":211,"column":13,"nodeType":"2309","messageId":"2310","endLine":211,"endColumn":16},{"ruleId":"2307","severity":1,"message":"2308","line":311,"column":20,"nodeType":"2309","messageId":"2310","endLine":311,"endColumn":23},{"ruleId":"2307","severity":1,"message":"2308","line":161,"column":33,"nodeType":"2309","messageId":"2310","endLine":161,"endColumn":36},{"ruleId":"2311","severity":1,"message":"2352","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":46},{"ruleId":"2307","severity":1,"message":"2308","line":72,"column":64,"nodeType":"2309","messageId":"2310","endLine":72,"endColumn":67},{"ruleId":"2307","severity":1,"message":"2308","line":138,"column":31,"nodeType":"2309","messageId":"2310","endLine":138,"endColumn":34},{"ruleId":"2314","severity":1,"message":"2315","line":176,"column":63,"nodeType":"2316","messageId":"2317","endLine":176,"endColumn":67},{"ruleId":"2307","severity":1,"message":"2308","line":376,"column":20,"nodeType":"2309","messageId":"2310","endLine":376,"endColumn":23},{"ruleId":"2307","severity":1,"message":"2308","line":450,"column":31,"nodeType":"2309","messageId":"2310","endLine":450,"endColumn":34},{"ruleId":"2307","severity":1,"message":"2308","line":451,"column":40,"nodeType":"2309","messageId":"2310","endLine":451,"endColumn":43},{"ruleId":"2307","severity":1,"message":"2308","line":460,"column":53,"nodeType":"2309","messageId":"2310","endLine":460,"endColumn":56},{"ruleId":"2307","severity":1,"message":"2308","line":573,"column":62,"nodeType":"2309","messageId":"2310","endLine":573,"endColumn":65},{"ruleId":"2314","severity":1,"message":"2315","line":575,"column":24,"nodeType":"2316","messageId":"2317","endLine":575,"endColumn":32},{"ruleId":"2307","severity":1,"message":"2308","line":607,"column":12,"nodeType":"2309","messageId":"2310","endLine":607,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":659,"column":12,"nodeType":"2309","messageId":"2310","endLine":659,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":791,"column":12,"nodeType":"2309","messageId":"2310","endLine":791,"endColumn":15},{"ruleId":"2314","severity":1,"message":"2315","line":900,"column":26,"nodeType":"2316","messageId":"2317","endLine":900,"endColumn":34},{"ruleId":"2307","severity":1,"message":"2308","line":65,"column":5,"nodeType":"2309","messageId":"2310","endLine":65,"endColumn":8},{"ruleId":"2307","severity":1,"message":"2308","line":67,"column":5,"nodeType":"2309","messageId":"2310","endLine":67,"endColumn":8},{"ruleId":"2307","severity":1,"message":"2308","line":86,"column":11,"nodeType":"2309","messageId":"2310","endLine":86,"endColumn":14},{"ruleId":"2314","severity":1,"message":"2315","line":96,"column":23,"nodeType":"2316","messageId":"2317","endLine":96,"endColumn":32},{"ruleId":"2314","severity":1,"message":"2315","line":102,"column":27,"nodeType":"2316","messageId":"2317","endLine":102,"endColumn":36},{"ruleId":"2307","severity":1,"message":"2308","line":102,"column":40,"nodeType":"2309","messageId":"2310","endLine":102,"endColumn":43},{"ruleId":"2307","severity":1,"message":"2308","line":18,"column":22,"nodeType":"2309","messageId":"2310","endLine":18,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":70,"column":26,"nodeType":"2309","messageId":"2310","endLine":70,"endColumn":29},{"ruleId":"2323","severity":1,"message":"2353","line":198,"column":23,"nodeType":"2325","messageId":"2326"},{"ruleId":"2307","severity":1,"message":"2308","line":85,"column":24,"nodeType":"2309","messageId":"2310","endLine":85,"endColumn":27},{"ruleId":"2307","severity":1,"message":"2308","line":105,"column":40,"nodeType":"2309","messageId":"2310","endLine":105,"endColumn":43},{"ruleId":"2307","severity":1,"message":"2308","line":105,"column":50,"nodeType":"2309","messageId":"2310","endLine":105,"endColumn":53},{"ruleId":"2307","severity":1,"message":"2308","line":307,"column":22,"nodeType":"2309","messageId":"2310","endLine":307,"endColumn":25},{"ruleId":"2307","severity":1,"message":"2308","line":322,"column":42,"nodeType":"2309","messageId":"2310","endLine":322,"endColumn":45},{"ruleId":"2307","severity":1,"message":"2308","line":927,"column":12,"nodeType":"2309","messageId":"2310","endLine":927,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":1096,"column":5,"nodeType":"2309","messageId":"2310","endLine":1096,"endColumn":8},{"ruleId":"2311","severity":1,"message":"2354","line":2,"column":10,"nodeType":"2313","endLine":2,"endColumn":26},{"ruleId":"2311","severity":1,"message":"2355","line":4,"column":10,"nodeType":"2313","endLine":4,"endColumn":30},{"ruleId":"2307","severity":1,"message":"2308","line":50,"column":21,"nodeType":"2309","messageId":"2310","endLine":50,"endColumn":24},{"ruleId":"2307","severity":1,"message":"2308","line":103,"column":27,"nodeType":"2309","messageId":"2310","endLine":103,"endColumn":30},{"ruleId":"2307","severity":1,"message":"2308","line":4,"column":55,"nodeType":"2309","messageId":"2310","endLine":4,"endColumn":58},{"ruleId":"2311","severity":1,"message":"2356","line":2,"column":10,"nodeType":"2313","endLine":2,"endColumn":37},{"ruleId":"2311","severity":1,"message":"2357","line":5,"column":3,"nodeType":"2313","endLine":5,"endColumn":20},{"ruleId":"2358","severity":1,"message":"2359","line":122,"column":9,"nodeType":"2360","endLine":127,"endColumn":10},{"ruleId":"2311","severity":1,"message":"2361","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":38},{"ruleId":"2311","severity":1,"message":"2341","line":3,"column":10,"nodeType":"2313","endLine":3,"endColumn":29},{"ruleId":"2311","severity":1,"message":"2362","line":4,"column":10,"nodeType":"2313","endLine":4,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":15,"column":6,"nodeType":"2309","messageId":"2310","endLine":15,"endColumn":9},{"ruleId":"2307","severity":1,"message":"2308","line":25,"column":48,"nodeType":"2309","messageId":"2310","endLine":25,"endColumn":51},{"ruleId":"2307","severity":1,"message":"2308","line":27,"column":34,"nodeType":"2309","messageId":"2310","endLine":27,"endColumn":37},{"ruleId":"2307","severity":1,"message":"2308","line":6,"column":37,"nodeType":"2309","messageId":"2310","endLine":6,"endColumn":40},{"ruleId":"2307","severity":1,"message":"2308","line":6,"column":45,"nodeType":"2309","messageId":"2310","endLine":6,"endColumn":48},{"ruleId":"2307","severity":1,"message":"2308","line":8,"column":28,"nodeType":"2309","messageId":"2310","endLine":8,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":5,"column":40,"nodeType":"2309","messageId":"2310","endLine":5,"endColumn":43},{"ruleId":"2307","severity":1,"message":"2308","line":5,"column":48,"nodeType":"2309","messageId":"2310","endLine":5,"endColumn":51},{"ruleId":"2307","severity":1,"message":"2308","line":8,"column":25,"nodeType":"2309","messageId":"2310","endLine":8,"endColumn":28},{"ruleId":"2307","severity":1,"message":"2308","line":6,"column":47,"nodeType":"2309","messageId":"2310","endLine":6,"endColumn":50},{"ruleId":"2307","severity":1,"message":"2308","line":6,"column":55,"nodeType":"2309","messageId":"2310","endLine":6,"endColumn":58},{"ruleId":"2307","severity":1,"message":"2308","line":9,"column":32,"nodeType":"2309","messageId":"2310","endLine":9,"endColumn":35},{"ruleId":"2307","severity":1,"message":"2308","line":7,"column":21,"nodeType":"2309","messageId":"2310","endLine":7,"endColumn":24},{"ruleId":"2307","severity":1,"message":"2308","line":23,"column":23,"nodeType":"2309","messageId":"2310","endLine":23,"endColumn":26},{"ruleId":"2307","severity":1,"message":"2308","line":24,"column":21,"nodeType":"2309","messageId":"2310","endLine":24,"endColumn":24},{"ruleId":"2320","severity":1,"message":"2321","line":50,"column":5,"nodeType":"2322","endLine":50,"endColumn":34},{"ruleId":"2307","severity":1,"message":"2308","line":50,"column":26,"nodeType":"2309","messageId":"2310","endLine":50,"endColumn":29},{"ruleId":"2323","severity":1,"message":"2324","line":50,"column":31,"nodeType":"2325","messageId":"2326"},{"ruleId":"2307","severity":1,"message":"2308","line":40,"column":25,"nodeType":"2309","messageId":"2310","endLine":40,"endColumn":28},{"ruleId":"2307","severity":1,"message":"2308","line":48,"column":18,"nodeType":"2309","messageId":"2310","endLine":48,"endColumn":21},{"ruleId":"2307","severity":1,"message":"2308","line":123,"column":16,"nodeType":"2309","messageId":"2310","endLine":123,"endColumn":19},{"ruleId":"2307","severity":1,"message":"2308","line":124,"column":18,"nodeType":"2309","messageId":"2310","endLine":124,"endColumn":21},{"ruleId":"2307","severity":1,"message":"2308","line":1,"column":33,"nodeType":"2309","messageId":"2310","endLine":1,"endColumn":36},{"ruleId":"2307","severity":1,"message":"2308","line":4,"column":37,"nodeType":"2309","messageId":"2310","endLine":4,"endColumn":40},{"ruleId":"2307","severity":1,"message":"2308","line":8,"column":34,"nodeType":"2309","messageId":"2310","endLine":8,"endColumn":37},{"ruleId":"2307","severity":1,"message":"2308","line":17,"column":35,"nodeType":"2309","messageId":"2310","endLine":17,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":31,"column":46,"nodeType":"2309","messageId":"2310","endLine":31,"endColumn":49},{"ruleId":"2307","severity":1,"message":"2308","line":31,"column":74,"nodeType":"2309","messageId":"2310","endLine":31,"endColumn":77},{"ruleId":"2307","severity":1,"message":"2308","line":36,"column":8,"nodeType":"2309","messageId":"2310","endLine":36,"endColumn":11},{"ruleId":"2314","severity":1,"message":"2315","line":249,"column":38,"nodeType":"2316","messageId":"2317","endLine":249,"endColumn":57},{"ruleId":"2307","severity":1,"message":"2308","line":250,"column":44,"nodeType":"2309","messageId":"2310","endLine":250,"endColumn":47},{"ruleId":"2307","severity":1,"message":"2308","line":4,"column":14,"nodeType":"2309","messageId":"2310","endLine":4,"endColumn":17},{"ruleId":"2311","severity":1,"message":"2363","line":13,"column":3,"nodeType":"2313","endLine":13,"endColumn":20},{"ruleId":"2311","severity":1,"message":"2364","line":4,"column":3,"nodeType":"2313","endLine":4,"endColumn":21},{"ruleId":"2307","severity":1,"message":"2308","line":10,"column":41,"nodeType":"2309","messageId":"2310","endLine":10,"endColumn":44},{"ruleId":"2307","severity":1,"message":"2308","line":14,"column":41,"nodeType":"2309","messageId":"2310","endLine":14,"endColumn":44},{"ruleId":"2307","severity":1,"message":"2308","line":20,"column":44,"nodeType":"2309","messageId":"2310","endLine":20,"endColumn":47},{"ruleId":"2307","severity":1,"message":"2308","line":24,"column":43,"nodeType":"2309","messageId":"2310","endLine":24,"endColumn":46},{"ruleId":"2307","severity":1,"message":"2308","line":28,"column":47,"nodeType":"2309","messageId":"2310","endLine":28,"endColumn":50},{"ruleId":"2307","severity":1,"message":"2308","line":24,"column":32,"nodeType":"2309","messageId":"2310","endLine":24,"endColumn":35},{"ruleId":"2307","severity":1,"message":"2308","line":27,"column":12,"nodeType":"2309","messageId":"2310","endLine":27,"endColumn":15},{"ruleId":"2307","severity":1,"message":"2308","line":49,"column":48,"nodeType":"2309","messageId":"2310","endLine":49,"endColumn":51},{"ruleId":"2307","severity":1,"message":"2308","line":53,"column":50,"nodeType":"2309","messageId":"2310","endLine":53,"endColumn":53},{"ruleId":"2307","severity":1,"message":"2308","line":58,"column":14,"nodeType":"2309","messageId":"2310","endLine":58,"endColumn":17},{"ruleId":"2307","severity":1,"message":"2308","line":64,"column":14,"nodeType":"2309","messageId":"2310","endLine":64,"endColumn":17},{"ruleId":"2307","severity":1,"message":"2308","line":69,"column":58,"nodeType":"2309","messageId":"2310","endLine":69,"endColumn":61},{"ruleId":"2307","severity":1,"message":"2308","line":102,"column":8,"nodeType":"2309","messageId":"2310","endLine":102,"endColumn":11},{"ruleId":"2307","severity":1,"message":"2308","line":125,"column":36,"nodeType":"2309","messageId":"2310","endLine":125,"endColumn":39},{"ruleId":"2307","severity":1,"message":"2308","line":128,"column":35,"nodeType":"2309","messageId":"2310","endLine":128,"endColumn":38},{"ruleId":"2311","severity":1,"message":"2365","line":15,"column":24,"nodeType":"2313","endLine":15,"endColumn":33},{"ruleId":"2311","severity":1,"message":"2366","line":25,"column":10,"nodeType":"2313","endLine":25,"endColumn":38},{"ruleId":"2307","severity":1,"message":"2308","line":30,"column":8,"nodeType":"2309","messageId":"2310","endLine":30,"endColumn":11},{"ruleId":null,"fatal":true,"severity":2,"message":"2367"},{"ruleId":"2311","severity":1,"message":"2368","line":22,"column":3,"nodeType":"2313","endLine":22,"endColumn":18},{"ruleId":"2307","severity":1,"message":"2308","line":29,"column":28,"nodeType":"2309","messageId":"2310","endLine":29,"endColumn":31},{"ruleId":"2307","severity":1,"message":"2308","line":30,"column":29,"nodeType":"2309","messageId":"2310","endLine":30,"endColumn":32},{"ruleId":"2307","severity":1,"message":"2308","line":35,"column":40,"nodeType":"2309","messageId":"2310","endLine":35,"endColumn":43},{"ruleId":"2311","severity":1,"message":"2369","line":12,"column":10,"nodeType":"2313","endLine":12,"endColumn":29},{"ruleId":"2311","severity":1,"message":"2370","line":14,"column":7,"nodeType":"2313","endLine":14,"endColumn":17},{"ruleId":"2311","severity":1,"message":"2371","line":19,"column":7,"nodeType":"2313","endLine":19,"endColumn":21},{"ruleId":"2311","severity":1,"message":"2372","line":24,"column":7,"nodeType":"2313","endLine":24,"endColumn":21},{"ruleId":"2311","severity":1,"message":"2373","line":6,"column":10,"nodeType":"2313","endLine":6,"endColumn":26},{"ruleId":"2314","severity":1,"message":"2315","line":26,"column":18,"nodeType":"2316","messageId":"2317","endLine":26,"endColumn":24},{"ruleId":"2311","severity":1,"message":"2374","line":3,"column":3,"nodeType":"2313","endLine":3,"endColumn":68},{"ruleId":"2311","severity":1,"message":"2375","line":12,"column":3,"nodeType":"2313","endLine":12,"endColumn":33},{"ruleId":"2311","severity":1,"message":"2376","line":1,"column":10,"nodeType":"2313","endLine":1,"endColumn":38},{"ruleId":"2311","severity":1,"message":"2377","line":2,"column":10,"nodeType":"2313","endLine":2,"endColumn":22},{"ruleId":"2307","severity":1,"message":"2308","line":7,"column":66,"nodeType":"2309","messageId":"2310","endLine":7,"endColumn":69},{"ruleId":"2307","severity":1,"message":"2308","line":25,"column":57,"nodeType":"2309","messageId":"2310","endLine":25,"endColumn":60},{"ruleId":"2307","severity":1,"message":"2308","line":35,"column":10,"nodeType":"2309","messageId":"2310","endLine":35,"endColumn":13},{"ruleId":"2307","severity":1,"message":"2308","line":48,"column":40,"nodeType":"2309","messageId":"2310","endLine":48,"endColumn":43},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: docs/assets/js/main.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: docs/assets/js/search.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: module-build/index.js.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: module-build/module-build.js.\nThe file must be included in at least one of the projects provided.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-unused-vars","'any' is defined but never used.","Identifier","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'CA_CONNECTION_STATUS' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'TCACryptoPubilicKeys' is defined but never used.","Unexpected empty method 'setOptionsSwarmConnection'.","'ISwarmMessgaeEncryptedCache' is defined but never used.","'path' is defined but never used.","Unexpected empty async method 'close'.","'nothing' is assigned a value but never used.","'prefix' is assigned a value but never used.","'IFileStorageService' is defined but never used.","'status' is assigned a value but never used.","'exportPasswordKey' is defined but never used.","'CentralAuthority' is defined but never used.","'ISwarmMessageBody' is defined but never used.","'TSwarmMessageUserIdentifierSerialized' is defined but never used.","'ISwarmMessageSubclassFieldsValidator' is defined but never used.","array-callback-return","Expected to return a value at the end of arrow function.","expectedAtEnd","'TSwarmMessageSignatureAlgorithm' is defined but never used.","'ISwarmStoreConnectorOrbitDBLogEntity' is defined but never used.","Unexpected empty async method 'load'.","'FileStoreAddFile' is defined but never used.","'SensitiveDataStorage' is defined but never used.","'FILE_STORAGE_SERVICE_STATUS' is defined but never used.","'downloadFileByUrl' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FileStorageClassProviderIPFS' is defined but never used.","'FileStorageClassProviderHTTP' is defined but never used.","'dataSignExportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'exportKey' is defined but never used.","'encodeArrayBufferToDOMString' is defined but never used.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/utils/ipfs-utils/ipfs-utils-libp2p/index.js.\nThe file must be included in at least one of the projects provided.","'STARDUST_SERVER' is defined but never used.","'WEB_RTC_STAR_SERVER' is defined but never used.","'API_SERVER' is assigned a value but never used.","'GATEWAY_SERVER' is assigned a value but never used.","'BOOTSTRAP_NODE' is assigned a value but never used.","'getLibPeerToPeer' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used."]