[{"/home/paul/Projects/protocol/node_modules-local/orbit-db-types/CounterStore.d.ts":"1","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/DBOptions.d.ts":"2","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/DocumentStore.d.ts":"3","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/EventStore.d.ts":"4","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/FeedStore.d.ts":"5","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/IReplicationStatus.d.ts":"6","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Identity.d.ts":"7","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/KeyValueStore.d.ts":"8","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Keystore.d.ts":"9","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/LogEntry.d.ts":"10","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDB.d.ts":"11","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/AccessControllerInterface.d.ts":"12","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessController.d.ts":"13","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessControllers.d.ts":"14","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Store.d.ts":"15","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/index.d.ts":"16","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/test.ts":"17","/home/paul/Projects/protocol/src/App.tsx":"18","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"19","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"20","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"21","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"22","/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"23","/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts":"24","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"25","/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"26","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"27","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"28","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"29","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"30","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"31","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"32","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"33","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"34","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"35","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"36","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"37","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"38","/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"39","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"40","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"41","/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"42","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"43","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts":"44","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"45","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"46","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"47","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"48","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"49","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"50","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"51","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"52","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"53","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"54","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"55","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"56","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"57","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"58","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"59","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"60","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"61","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"62","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"63","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"64","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"65","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"66","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"67","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"68","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"69","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"70","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"71","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"72","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"73","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts":"74","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.ts":"75","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts":"76","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"77","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"78","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"79","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"80","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"81","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"82","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"83","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"84","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"85","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"86","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"87","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"88","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"89","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"90","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"91","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"92","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"93","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"94","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"95","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"96","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"97","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"98","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"99","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"100","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"101","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"102","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts":"103","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts":"104","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts":"105","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"106","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"107","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"108","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"109","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts":"110","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"111","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"112","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"113","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"114","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"115","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"116","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts":"117","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts":"118","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"119","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"120","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"121","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"122","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"123","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"124","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.const.ts":"125","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.ts":"126","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.types.ts":"127","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"128","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"129","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"130","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"131","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"132","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts":"133","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"134","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts":"135","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts":"136","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts":"137","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts":"138","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"139","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts":"140","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"141","/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts":"142","/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts":"143","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"144","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts":"145","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts":"146","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.const.ts":"147","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.ts":"148","/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.types.ts":"149","/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts":"150","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"151","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"152","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"153","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"154","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"155","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"156","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"157","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"158","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"159","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"160","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"161","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"162","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"163","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"164","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"165","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"166","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"167","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"168","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"169","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"170","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"171","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts":"172","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"173","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"174","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"175","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"176","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"177","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"178","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"179","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"180","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"181","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"182","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"183","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"184","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"185","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"186","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"187","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"188","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"189","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"190","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"191","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"192","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"193","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-main.ts":"194","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"195","/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"196","/home/paul/Projects/protocol/src/const/common-values/common-values-env.ts":"197","/home/paul/Projects/protocol/src/const/common-values/common-values.ts":"198","/home/paul/Projects/protocol/src/const/const-api-conf.ts":"199","/home/paul/Projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts":"200","/home/paul/Projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"201","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"202","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"203","/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"204","/home/paul/Projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"205","/home/paul/Projects/protocol/src/const/const-values-restrictions-common.ts":"206","/home/paul/Projects/protocol/src/index.tsx":"207","/home/paul/Projects/protocol/src/react-app-env.d.ts":"208","/home/paul/Projects/protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts":"209","/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts":"210","/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.shared.ts":"211","/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts":"212","/home/paul/Projects/protocol/src/test/data-sign-test.ts":"213","/home/paul/Projects/protocol/src/test/encryption-test.ts":"214","/home/paul/Projects/protocol/src/test/error-extended-class-test.ts":"215","/home/paul/Projects/protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"216","/home/paul/Projects/protocol/src/test/mocha-chai-initialize.ts":"217","/home/paul/Projects/protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts":"218","/home/paul/Projects/protocol/src/types/channels.types.ts":"219","/home/paul/Projects/protocol/src/types/encryption-keys.types.ts":"220","/home/paul/Projects/protocol/src/types/helper.types.ts":"221","/home/paul/Projects/protocol/src/types/ipfs.d.ts":"222","/home/paul/Projects/protocol/src/types/ipfs.types.d.ts":"223","/home/paul/Projects/protocol/src/types/main.types.ts":"224","/home/paul/Projects/protocol/src/types/orbit-db-cache.d.ts":"225","/home/paul/Projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts":"226","/home/paul/Projects/protocol/src/types/orbit-db-keystore.d.ts":"227","/home/paul/Projects/protocol/src/types/users.types.ts":"228","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-array.ts":"229","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-check-value.ts":"230","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"231","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time.ts":"232","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-number.ts":"233","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-objects.ts":"234","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-timer.ts":"235","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-url.ts":"236","/home/paul/Projects/protocol/src/utils/common-utils/common-utils.ts":"237","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"238","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"239","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"240","/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts":"241","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"242","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"243","/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts":"244","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"245","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts":"246","/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"247","/home/paul/Projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"248","/home/paul/Projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"249","/home/paul/Projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"250","/home/paul/Projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"251","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"252","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts":"253","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"254","/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"255","/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts":"256","/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts":"257","/home/paul/Projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"258","/home/paul/Projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"259","/home/paul/Projects/protocol/src/utils/encryption-utils/encryption-utils.ts":"260","/home/paul/Projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"261","/home/paul/Projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"262","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.const.ts":"263","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.ts":"264","/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.types.ts":"265","/home/paul/Projects/protocol/src/utils/firebase-utils/firebase-utils.ts":"266","/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"267","/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"268","/home/paul/Projects/protocol/src/utils/identity-utils/identity-utils.ts":"269","/home/paul/Projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"270","/home/paul/Projects/protocol/src/utils/main-utils.ts":"271","/home/paul/Projects/protocol/src/utils/password-utils/decrypt.password-utils.ts":"272","/home/paul/Projects/protocol/src/utils/password-utils/derive-key.password-utils.ts":"273","/home/paul/Projects/protocol/src/utils/password-utils/encrypt.password-utils.ts":"274","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.const.ts":"275","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.types.ts":"276","/home/paul/Projects/protocol/src/utils/string-encoding-utils.ts":"277","/home/paul/Projects/protocol/src/utils/string-utilities.ts":"278","/home/paul/Projects/protocol/src/utils/typed-array-utils.ts":"279","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"280","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts":"281","/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils.ts":"282","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts":"283","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts":"284","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts":"285","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts":"286","/home/paul/Projects/protocol/src/types/common.types.ts":"287","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-main.ts":"288","/home/paul/Projects/protocol/jest.config.js":"289","/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts":"290","/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts":"291","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts":"292","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts":"293","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts":"294","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts":"295","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"296","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"297","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"298","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"299","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"300","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"301","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"302","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"303","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"304","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"305","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"306","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"307","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"308","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"309","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"310","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"311","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts":"312","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts":"313","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts":"314","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts":"315","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts":"316","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts":"317","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts":"318","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts":"319","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts":"320","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts":"321","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts":"322","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts":"323","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts":"324","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts":"325","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts":"326","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts":"327","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts":"328","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts":"329","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts":"330","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts":"331","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts":"332","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts":"333","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts":"334","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts":"335","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts":"336","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts":"337","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts":"338","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts":"339","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts":"340","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts":"341","/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/index.ts":"342","/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/swarrm-message-constructor.const.ts":"343","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts":"344","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts":"345","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts":"346","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts":"347","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts":"348","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts":"349","/home/paul/Projects/protocol/src/test/swarm-message-store-test/swarm-message-store-test.const.ts":"350","/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/swarrm-message-constructor.shared.ts":"351","/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts":"352","/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts":"353"},{"size":221,"mtime":1580564310029,"results":"354","hashOfConfig":"355"},{"size":2324,"mtime":1580564310029,"results":"356","hashOfConfig":"355"},{"size":320,"mtime":1580564310029,"results":"357","hashOfConfig":"355"},{"size":574,"mtime":1580564310029,"results":"358","hashOfConfig":"355"},{"size":619,"mtime":1580564310029,"results":"359","hashOfConfig":"355"},{"size":113,"mtime":1580564310029,"results":"360","hashOfConfig":"355"},{"size":3323,"mtime":1580564310029,"results":"361","hashOfConfig":"355"},{"size":276,"mtime":1580564310029,"results":"362","hashOfConfig":"355"},{"size":455,"mtime":1580564310029,"results":"363","hashOfConfig":"355"},{"size":481,"mtime":1580564310033,"results":"364","hashOfConfig":"355"},{"size":3036,"mtime":1580564310033,"results":"365","hashOfConfig":"355"},{"size":1812,"mtime":1580564310033,"results":"366","hashOfConfig":"355"},{"size":1206,"mtime":1580564310033,"results":"367","hashOfConfig":"355"},{"size":598,"mtime":1580564310033,"results":"368","hashOfConfig":"355"},{"size":1609,"mtime":1580564310033,"results":"369","hashOfConfig":"355"},{"size":797,"mtime":1580564310033,"results":"370","hashOfConfig":"355"},{"size":88,"mtime":1580564310037,"results":"371","hashOfConfig":"355"},{"size":6204,"mtime":1583000097920,"results":"372","hashOfConfig":"373"},{"size":33,"mtime":1580562296142,"results":"374","hashOfConfig":"373"},{"size":602,"mtime":1580562296142,"results":"375","hashOfConfig":"373"},{"size":43,"mtime":1580562296142,"results":"376","hashOfConfig":"373"},{"size":163,"mtime":1580562296142,"results":"377","hashOfConfig":"373"},{"size":608,"mtime":1580576410819,"results":"378","hashOfConfig":"373"},{"size":573,"mtime":1580576410819,"results":"379","hashOfConfig":"373"},{"size":235,"mtime":1580562296142,"results":"380","hashOfConfig":"373"},{"size":1329,"mtime":1580562296142,"results":"381","hashOfConfig":"373"},{"size":2819,"mtime":1580562296142,"results":"382","hashOfConfig":"373"},{"size":1636,"mtime":1580562296142,"results":"383","hashOfConfig":"373"},{"size":3466,"mtime":1580562296142,"results":"384","hashOfConfig":"373"},{"size":4421,"mtime":1580562296142,"results":"385","hashOfConfig":"373"},{"size":1311,"mtime":1580562296142,"results":"386","hashOfConfig":"373"},{"size":7950,"mtime":1580562296142,"results":"387","hashOfConfig":"373"},{"size":1874,"mtime":1580562296142,"results":"388","hashOfConfig":"373"},{"size":2547,"mtime":1580562296142,"results":"389","hashOfConfig":"373"},{"size":728,"mtime":1580562296142,"results":"390","hashOfConfig":"373"},{"size":1648,"mtime":1580562296142,"results":"391","hashOfConfig":"373"},{"size":191,"mtime":1580562296142,"results":"392","hashOfConfig":"373"},{"size":2582,"mtime":1580562296142,"results":"393","hashOfConfig":"373"},{"size":978,"mtime":1580562296142,"results":"394","hashOfConfig":"373"},{"size":58,"mtime":1580562296142,"results":"395","hashOfConfig":"373"},{"size":2147,"mtime":1580562296142,"results":"396","hashOfConfig":"373"},{"size":216,"mtime":1580562296142,"results":"397","hashOfConfig":"373"},{"size":2025,"mtime":1580562296142,"results":"398","hashOfConfig":"373"},{"size":785,"mtime":1580576410819,"results":"399","hashOfConfig":"373"},{"size":66,"mtime":1580562296142,"results":"400","hashOfConfig":"373"},{"size":2725,"mtime":1580562296142,"results":"401","hashOfConfig":"373"},{"size":900,"mtime":1580562296142,"results":"402","hashOfConfig":"373"},{"size":751,"mtime":1580562296142,"results":"403","hashOfConfig":"373"},{"size":187,"mtime":1580562296142,"results":"404","hashOfConfig":"373"},{"size":1579,"mtime":1580562296142,"results":"405","hashOfConfig":"373"},{"size":360,"mtime":1580562296142,"results":"406","hashOfConfig":"373"},{"size":1786,"mtime":1580562296142,"results":"407","hashOfConfig":"373"},{"size":738,"mtime":1580562296142,"results":"408","hashOfConfig":"373"},{"size":224,"mtime":1580562296142,"results":"409","hashOfConfig":"373"},{"size":379,"mtime":1580562296142,"results":"410","hashOfConfig":"373"},{"size":2670,"mtime":1580562296142,"results":"411","hashOfConfig":"373"},{"size":781,"mtime":1580562296146,"results":"412","hashOfConfig":"373"},{"size":1934,"mtime":1580562296146,"results":"413","hashOfConfig":"373"},{"size":1081,"mtime":1580562296146,"results":"414","hashOfConfig":"373"},{"size":1962,"mtime":1580562296146,"results":"415","hashOfConfig":"373"},{"size":671,"mtime":1580562296146,"results":"416","hashOfConfig":"373"},{"size":215,"mtime":1580562296146,"results":"417","hashOfConfig":"373"},{"size":340,"mtime":1580562296146,"results":"418","hashOfConfig":"373"},{"size":3790,"mtime":1580562296146,"results":"419","hashOfConfig":"373"},{"size":1720,"mtime":1580562296146,"results":"420","hashOfConfig":"373"},{"size":1742,"mtime":1580562296146,"results":"421","hashOfConfig":"373"},{"size":676,"mtime":1580562296146,"results":"422","hashOfConfig":"373"},{"size":224,"mtime":1580562296146,"results":"423","hashOfConfig":"373"},{"size":76,"mtime":1580562296146,"results":"424","hashOfConfig":"373"},{"size":3995,"mtime":1580562296146,"results":"425","hashOfConfig":"373"},{"size":1035,"mtime":1580562296146,"results":"426","hashOfConfig":"373"},{"size":7347,"mtime":1580576410819,"results":"427","hashOfConfig":"373"},{"size":2890,"mtime":1580562296146,"results":"428","hashOfConfig":"373"},{"size":2206,"mtime":1580576410819,"results":"429","hashOfConfig":"373"},{"size":31315,"mtime":1580576410819,"results":"430","hashOfConfig":"373"},{"size":6333,"mtime":1580576410819,"results":"431","hashOfConfig":"373"},{"size":30690,"mtime":1580576410819,"results":"432","hashOfConfig":"373"},{"size":19245,"mtime":1583006203880,"results":"433","hashOfConfig":"373"},{"size":311,"mtime":1580562296146,"results":"434","hashOfConfig":"373"},{"size":14225,"mtime":1580562296146,"results":"435","hashOfConfig":"373"},{"size":1182,"mtime":1580562296146,"results":"436","hashOfConfig":"373"},{"size":145,"mtime":1580562296146,"results":"437","hashOfConfig":"373"},{"size":4334,"mtime":1580562296146,"results":"438","hashOfConfig":"373"},{"size":651,"mtime":1580562296146,"results":"439","hashOfConfig":"373"},{"size":746,"mtime":1580562296146,"results":"440","hashOfConfig":"373"},{"size":110,"mtime":1580562296146,"results":"441","hashOfConfig":"373"},{"size":77,"mtime":1580562296146,"results":"442","hashOfConfig":"373"},{"size":75,"mtime":1580562296146,"results":"443","hashOfConfig":"373"},{"size":717,"mtime":1580562296146,"results":"444","hashOfConfig":"373"},{"size":306,"mtime":1580562296146,"results":"445","hashOfConfig":"373"},{"size":385,"mtime":1580562296146,"results":"446","hashOfConfig":"373"},{"size":333,"mtime":1580562296146,"results":"447","hashOfConfig":"373"},{"size":130,"mtime":1580562296146,"results":"448","hashOfConfig":"373"},{"size":25137,"mtime":1580576410819,"results":"449","hashOfConfig":"373"},{"size":3538,"mtime":1580576410819,"results":"450","hashOfConfig":"373"},{"size":758,"mtime":1580562296146,"results":"451","hashOfConfig":"373"},{"size":868,"mtime":1580562296146,"results":"452","hashOfConfig":"373"},{"size":181,"mtime":1580562296146,"results":"453","hashOfConfig":"373"},{"size":192,"mtime":1580562296146,"results":"454","hashOfConfig":"373"},{"size":1290,"mtime":1580562296146,"results":"455","hashOfConfig":"373"},{"size":575,"mtime":1580562296146,"results":"456","hashOfConfig":"373"},{"size":4321,"mtime":1580562296146,"results":"457","hashOfConfig":"373"},{"size":783,"mtime":1580562296146,"results":"458","hashOfConfig":"373"},{"size":17618,"mtime":1580576410819,"results":"459","hashOfConfig":"373"},{"size":1907,"mtime":1580576410819,"results":"460","hashOfConfig":"373"},{"size":1588,"mtime":1580562296146,"results":"461","hashOfConfig":"373"},{"size":15111,"mtime":1580562296146,"results":"462","hashOfConfig":"373"},{"size":2944,"mtime":1580562296146,"results":"463","hashOfConfig":"373"},{"size":15922,"mtime":1580576410819,"results":"464","hashOfConfig":"373"},{"size":1944,"mtime":1580562296146,"results":"465","hashOfConfig":"373"},{"size":3891,"mtime":1580562296146,"results":"466","hashOfConfig":"373"},{"size":3547,"mtime":1580562296146,"results":"467","hashOfConfig":"373"},{"size":7618,"mtime":1580562296146,"results":"468","hashOfConfig":"373"},{"size":4867,"mtime":1580562296146,"results":"469","hashOfConfig":"373"},{"size":453,"mtime":1580562296146,"results":"470","hashOfConfig":"373"},{"size":310,"mtime":1580562296146,"results":"471","hashOfConfig":"373"},{"size":3254,"mtime":1580576410819,"results":"472","hashOfConfig":"373"},{"size":255,"mtime":1580576410819,"results":"473","hashOfConfig":"373"},{"size":14405,"mtime":1580576410819,"results":"474","hashOfConfig":"373"},{"size":3800,"mtime":1580562296146,"results":"475","hashOfConfig":"373"},{"size":665,"mtime":1580562296146,"results":"476","hashOfConfig":"373"},{"size":4672,"mtime":1580576410819,"results":"477","hashOfConfig":"373"},{"size":1589,"mtime":1580562296146,"results":"478","hashOfConfig":"373"},{"size":504,"mtime":1580562296146,"results":"479","hashOfConfig":"373"},{"size":46,"mtime":1580562296146,"results":"480","hashOfConfig":"373"},{"size":5218,"mtime":1580562296146,"results":"481","hashOfConfig":"373"},{"size":1151,"mtime":1580562296146,"results":"482","hashOfConfig":"373"},{"size":839,"mtime":1580562296146,"results":"483","hashOfConfig":"373"},{"size":15598,"mtime":1580562296146,"results":"484","hashOfConfig":"373"},{"size":3120,"mtime":1580562296146,"results":"485","hashOfConfig":"373"},{"size":514,"mtime":1580562296146,"results":"486","hashOfConfig":"373"},{"size":1490,"mtime":1580562296146,"results":"487","hashOfConfig":"373"},{"size":32718,"mtime":1580562296146,"results":"488","hashOfConfig":"373"},{"size":1469,"mtime":1580562296146,"results":"489","hashOfConfig":"373"},{"size":298,"mtime":1580562296146,"results":"490","hashOfConfig":"373"},{"size":1497,"mtime":1580562296146,"results":"491","hashOfConfig":"373"},{"size":1440,"mtime":1580562296146,"results":"492","hashOfConfig":"373"},{"size":563,"mtime":1580562296146,"results":"493","hashOfConfig":"373"},{"size":290,"mtime":1580562296146,"results":"494","hashOfConfig":"373"},{"size":28952,"mtime":1583014991537,"results":"495","hashOfConfig":"373"},{"size":1061,"mtime":1580562296150,"results":"496","hashOfConfig":"373"},{"size":80,"mtime":1580562296150,"results":"497","hashOfConfig":"373"},{"size":5189,"mtime":1580562296150,"results":"498","hashOfConfig":"373"},{"size":216,"mtime":1580562296150,"results":"499","hashOfConfig":"373"},{"size":5946,"mtime":1580562296150,"results":"500","hashOfConfig":"373"},{"size":1569,"mtime":1580562296150,"results":"501","hashOfConfig":"373"},{"size":1153,"mtime":1580562296150,"results":"502","hashOfConfig":"373"},{"size":643,"mtime":1580562296150,"results":"503","hashOfConfig":"373"},{"size":1322,"mtime":1580562296150,"results":"504","hashOfConfig":"373"},{"size":1417,"mtime":1580562296150,"results":"505","hashOfConfig":"373"},{"size":1467,"mtime":1580562296150,"results":"506","hashOfConfig":"373"},{"size":1403,"mtime":1580562296150,"results":"507","hashOfConfig":"373"},{"size":4370,"mtime":1580562296150,"results":"508","hashOfConfig":"373"},{"size":8907,"mtime":1580562296150,"results":"509","hashOfConfig":"373"},{"size":1851,"mtime":1580562296150,"results":"510","hashOfConfig":"373"},{"size":10977,"mtime":1580562296150,"results":"511","hashOfConfig":"373"},{"size":114,"mtime":1580562296150,"results":"512","hashOfConfig":"373"},{"size":35,"mtime":1580562296150,"results":"513","hashOfConfig":"373"},{"size":51,"mtime":1580562296150,"results":"514","hashOfConfig":"373"},{"size":48,"mtime":1580562296150,"results":"515","hashOfConfig":"373"},{"size":35,"mtime":1580562296150,"results":"516","hashOfConfig":"373"},{"size":33,"mtime":1580562296150,"results":"517","hashOfConfig":"373"},{"size":31,"mtime":1580562296150,"results":"518","hashOfConfig":"373"},{"size":30,"mtime":1580562296150,"results":"519","hashOfConfig":"373"},{"size":37,"mtime":1580562296150,"results":"520","hashOfConfig":"373"},{"size":40,"mtime":1580562296150,"results":"521","hashOfConfig":"373"},{"size":25,"mtime":1580562296150,"results":"522","hashOfConfig":"373"},{"size":28,"mtime":1580562296150,"results":"523","hashOfConfig":"373"},{"size":29,"mtime":1580562296150,"results":"524","hashOfConfig":"373"},{"size":5821,"mtime":1580562296150,"results":"525","hashOfConfig":"373"},{"size":2201,"mtime":1580562296150,"results":"526","hashOfConfig":"373"},{"size":13111,"mtime":1583011913706,"results":"527","hashOfConfig":"373"},{"size":8269,"mtime":1582979993225,"results":"528","hashOfConfig":"373"},{"size":270,"mtime":1580562296150,"results":"529","hashOfConfig":"373"},{"size":7024,"mtime":1583092512878,"results":"530","hashOfConfig":"373"},{"size":2057,"mtime":1582977093112,"results":"531","hashOfConfig":"373"},{"size":1401,"mtime":1583005095195,"results":"532","hashOfConfig":"373"},{"size":16253,"mtime":1583092544270,"results":"533","hashOfConfig":"373"},{"size":3284,"mtime":1582978928487,"results":"534","hashOfConfig":"373"},{"size":126,"mtime":1580562296150,"results":"535","hashOfConfig":"373"},{"size":2808,"mtime":1583088107982,"results":"536","hashOfConfig":"373"},{"size":157,"mtime":1580562296150,"results":"537","hashOfConfig":"373"},{"size":677,"mtime":1580562296150,"results":"538","hashOfConfig":"373"},{"size":1607,"mtime":1580562296150,"results":"539","hashOfConfig":"373"},{"size":763,"mtime":1580562296150,"results":"540","hashOfConfig":"373"},{"size":2717,"mtime":1583015055860,"results":"541","hashOfConfig":"373"},{"size":158,"mtime":1580562296150,"results":"542","hashOfConfig":"373"},{"size":542,"mtime":1580562296150,"results":"543","hashOfConfig":"373"},{"size":8663,"mtime":1583015049444,"results":"544","hashOfConfig":"373"},{"size":286,"mtime":1580562296150,"results":"545","hashOfConfig":"373"},{"size":2758,"mtime":1583090058879,"results":"546","hashOfConfig":"373"},{"size":38171,"mtime":1583092552898,"results":"547","hashOfConfig":"373"},{"size":1443,"mtime":1582979662565,"results":"548","hashOfConfig":"373"},{"size":72,"mtime":1580562296154,"results":"549","hashOfConfig":"373"},{"size":434,"mtime":1580562296154,"results":"550","hashOfConfig":"373"},{"size":54,"mtime":1580562296154,"results":"551","hashOfConfig":"373"},{"size":27,"mtime":1580562296154,"results":"552","hashOfConfig":"373"},{"size":228,"mtime":1580562296154,"results":"553","hashOfConfig":"373"},{"size":78,"mtime":1580562296154,"results":"554","hashOfConfig":"373"},{"size":206,"mtime":1580562296154,"results":"555","hashOfConfig":"373"},{"size":1749,"mtime":1580562296154,"results":"556","hashOfConfig":"373"},{"size":1713,"mtime":1580562296154,"results":"557","hashOfConfig":"373"},{"size":480,"mtime":1580562296154,"results":"558","hashOfConfig":"373"},{"size":56,"mtime":1580562296154,"results":"559","hashOfConfig":"373"},{"size":1262,"mtime":1580562296154,"results":"560","hashOfConfig":"373"},{"size":592,"mtime":1580562296154,"results":"561","hashOfConfig":"373"},{"size":168,"mtime":1580562296154,"results":"562","hashOfConfig":"373"},{"size":40,"mtime":1580562296154,"results":"563","hashOfConfig":"373"},{"size":3785,"mtime":1580562296154,"results":"564","hashOfConfig":"373"},{"size":640,"mtime":1580576410819,"results":"565","hashOfConfig":"373"},{"size":181,"mtime":1580576410819,"results":"566","hashOfConfig":"373"},{"size":8861,"mtime":1582389285066,"results":"567","hashOfConfig":"373"},{"size":2330,"mtime":1582389285086,"results":"568","hashOfConfig":"373"},{"size":3231,"mtime":1581191025283,"results":"569","hashOfConfig":"373"},{"size":2982,"mtime":1580562296154,"results":"570","hashOfConfig":"373"},{"size":343,"mtime":1580562296154,"results":"571","hashOfConfig":"373"},{"size":1591,"mtime":1582389285086,"results":"572","hashOfConfig":"373"},{"size":1525,"mtime":1580562296158,"results":"573","hashOfConfig":"373"},{"size":534,"mtime":1580562296158,"results":"574","hashOfConfig":"373"},{"size":215,"mtime":1580562296158,"results":"575","hashOfConfig":"373"},{"size":838,"mtime":1583008331195,"results":"576","hashOfConfig":"373"},{"size":23,"mtime":1583008548519,"results":"577","hashOfConfig":"373"},{"size":11085,"mtime":1583008629044,"results":"578","hashOfConfig":"373"},{"size":393,"mtime":1582996505364,"results":"579","hashOfConfig":"373"},{"size":2965,"mtime":1580562296158,"results":"580","hashOfConfig":"373"},{"size":261,"mtime":1580562296158,"results":"581","hashOfConfig":"373"},{"size":937,"mtime":1580562296158,"results":"582","hashOfConfig":"373"},{"size":338,"mtime":1580562296158,"results":"583","hashOfConfig":"373"},{"size":3371,"mtime":1580576410819,"results":"584","hashOfConfig":"373"},{"size":72,"mtime":1580576410819,"results":"585","hashOfConfig":"373"},{"size":2419,"mtime":1580562296158,"results":"586","hashOfConfig":"373"},{"size":266,"mtime":1580562296158,"results":"587","hashOfConfig":"373"},{"size":453,"mtime":1580562296158,"results":"588","hashOfConfig":"373"},{"size":1155,"mtime":1582389285106,"results":"589","hashOfConfig":"373"},{"size":345,"mtime":1582369971700,"results":"590","hashOfConfig":"373"},{"size":527,"mtime":1580576410819,"results":"591","hashOfConfig":"373"},{"size":38,"mtime":1580562296158,"results":"592","hashOfConfig":"373"},{"size":66,"mtime":1580562296158,"results":"593","hashOfConfig":"373"},{"size":3866,"mtime":1580562296158,"results":"594","hashOfConfig":"373"},{"size":178,"mtime":1580562296158,"results":"595","hashOfConfig":"373"},{"size":89,"mtime":1580562296158,"results":"596","hashOfConfig":"373"},{"size":532,"mtime":1580562296158,"results":"597","hashOfConfig":"373"},{"size":63,"mtime":1580562296158,"results":"598","hashOfConfig":"373"},{"size":50,"mtime":1580562296158,"results":"599","hashOfConfig":"373"},{"size":1682,"mtime":1582389285106,"results":"600","hashOfConfig":"373"},{"size":136,"mtime":1580562296158,"results":"601","hashOfConfig":"373"},{"size":1718,"mtime":1581191025283,"results":"602","hashOfConfig":"373"},{"size":9208,"mtime":1580562296158,"results":"603","hashOfConfig":"373"},{"size":445,"mtime":1581191025283,"results":"604","hashOfConfig":"373"},{"size":1935,"mtime":1580562296158,"results":"605","hashOfConfig":"373"},{"size":2273,"mtime":1582389285106,"results":"606","hashOfConfig":"373"},{"size":986,"mtime":1580562296158,"results":"607","hashOfConfig":"373"},{"size":48,"mtime":1580562296158,"results":"608","hashOfConfig":"373"},{"size":281,"mtime":1580567806894,"results":"609","hashOfConfig":"373"},{"size":6650,"mtime":1581191025283,"results":"610","hashOfConfig":"373"},{"size":1862,"mtime":1582389285110,"results":"611","hashOfConfig":"373"},{"size":1800,"mtime":1580562296158,"results":"612","hashOfConfig":"373"},{"size":2307,"mtime":1581191025287,"results":"613","hashOfConfig":"373"},{"size":4384,"mtime":1582389285110,"results":"614","hashOfConfig":"373"},{"size":141,"mtime":1580562296158,"results":"615","hashOfConfig":"373"},{"size":6608,"mtime":1581174654042,"results":"616","hashOfConfig":"373"},{"size":145,"mtime":1581191025287,"results":"617","hashOfConfig":"373"},{"size":186,"mtime":1580562296158,"results":"618","hashOfConfig":"373"},{"size":3133,"mtime":1580562296158,"results":"619","hashOfConfig":"373"},{"size":132,"mtime":1580562296158,"results":"620","hashOfConfig":"373"},{"size":547,"mtime":1580562296158,"results":"621","hashOfConfig":"373"},{"size":400,"mtime":1581191025287,"results":"622","hashOfConfig":"373"},{"size":1462,"mtime":1581191025287,"results":"623","hashOfConfig":"373"},{"size":75,"mtime":1580562296158,"results":"624","hashOfConfig":"373"},{"size":560,"mtime":1580562296158,"results":"625","hashOfConfig":"373"},{"size":718,"mtime":1580562296158,"results":"626","hashOfConfig":"373"},{"size":3088,"mtime":1580562296158,"results":"627","hashOfConfig":"373"},{"size":5838,"mtime":1581191025287,"results":"628","hashOfConfig":"373"},{"size":2493,"mtime":1580562296158,"results":"629","hashOfConfig":"373"},{"size":2097,"mtime":1580562296158,"results":"630","hashOfConfig":"373"},{"size":473,"mtime":1580562296158,"results":"631","hashOfConfig":"373"},{"size":575,"mtime":1580562296158,"results":"632","hashOfConfig":"373"},{"size":462,"mtime":1580562296158,"results":"633","hashOfConfig":"373"},{"size":3990,"mtime":1580562296158,"results":"634","hashOfConfig":"373"},{"size":1042,"mtime":1580562296158,"results":"635","hashOfConfig":"373"},{"size":564,"mtime":1580576410819,"results":"636","hashOfConfig":"373"},{"size":1175,"mtime":1580576410819,"results":"637","hashOfConfig":"373"},{"size":216,"mtime":1580591669121,"results":"638","hashOfConfig":"373"},{"size":3259,"mtime":1582389284870,"results":"639","hashOfConfig":"373"},{"size":1937,"mtime":1581885998734,"results":"640","hashOfConfig":"373"},{"size":561,"mtime":1580591669121,"results":"641","hashOfConfig":"373"},{"size":163,"mtime":1582479135602,"results":"642","hashOfConfig":"373"},{"size":70,"mtime":1582493751728,"results":"643","hashOfConfig":"373"},{"size":227,"mtime":1580586521250,"results":"644","hashOfConfig":"645"},{"size":4922,"mtime":1581887046089,"results":"646","hashOfConfig":"373"},{"size":2663,"mtime":1581191025283,"results":"647","hashOfConfig":"373"},{"size":308,"mtime":1582389284946,"results":"648","hashOfConfig":"373"},{"size":773,"mtime":1582389284962,"results":"649","hashOfConfig":"373"},{"size":129,"mtime":1582389284962,"results":"650","hashOfConfig":"373"},{"size":832,"mtime":1582389284962,"results":"651","hashOfConfig":"373"},{"size":594,"mtime":1582389284962,"results":"652","hashOfConfig":"373"},{"size":54,"mtime":1582389284962,"results":"653","hashOfConfig":"373"},{"size":529,"mtime":1582389284962,"results":"654","hashOfConfig":"373"},{"size":53,"mtime":1582389284962,"results":"655","hashOfConfig":"373"},{"size":699,"mtime":1582389284962,"results":"656","hashOfConfig":"373"},{"size":2280,"mtime":1582389284962,"results":"657","hashOfConfig":"373"},{"size":249,"mtime":1582389284962,"results":"658","hashOfConfig":"373"},{"size":803,"mtime":1582389284962,"results":"659","hashOfConfig":"373"},{"size":1893,"mtime":1582389284962,"results":"660","hashOfConfig":"373"},{"size":214,"mtime":1582389284962,"results":"661","hashOfConfig":"373"},{"size":890,"mtime":1582389284962,"results":"662","hashOfConfig":"373"},{"size":49,"mtime":1582389284962,"results":"663","hashOfConfig":"373"},{"size":260,"mtime":1582389284962,"results":"664","hashOfConfig":"373"},{"size":1907,"mtime":1582389284962,"results":"665","hashOfConfig":"373"},{"size":60,"mtime":1582389284962,"results":"666","hashOfConfig":"373"},{"size":12874,"mtime":1582389284962,"results":"667","hashOfConfig":"373"},{"size":3546,"mtime":1582389284962,"results":"668","hashOfConfig":"373"},{"size":5838,"mtime":1582389284978,"results":"669","hashOfConfig":"373"},{"size":1544,"mtime":1582389284994,"results":"670","hashOfConfig":"373"},{"size":466,"mtime":1582389284994,"results":"671","hashOfConfig":"373"},{"size":3089,"mtime":1582389285010,"results":"672","hashOfConfig":"373"},{"size":1831,"mtime":1582389285010,"results":"673","hashOfConfig":"373"},{"size":76,"mtime":1582389284926,"results":"674","hashOfConfig":"373"},{"size":10115,"mtime":1582389284942,"results":"675","hashOfConfig":"373"},{"size":4473,"mtime":1582389284946,"results":"676","hashOfConfig":"373"},{"size":109,"mtime":1582389285010,"results":"677","hashOfConfig":"373"},{"size":189,"mtime":1582389285022,"results":"678","hashOfConfig":"373"},{"size":206,"mtime":1582389285022,"results":"679","hashOfConfig":"373"},{"size":117,"mtime":1582389285034,"results":"680","hashOfConfig":"373"},{"size":209,"mtime":1582389285034,"results":"681","hashOfConfig":"373"},{"size":210,"mtime":1582389285034,"results":"682","hashOfConfig":"373"},{"size":115,"mtime":1582389285034,"results":"683","hashOfConfig":"373"},{"size":201,"mtime":1582389285034,"results":"684","hashOfConfig":"373"},{"size":212,"mtime":1582389285050,"results":"685","hashOfConfig":"373"},{"size":123,"mtime":1582389285050,"results":"686","hashOfConfig":"373"},{"size":221,"mtime":1582389285050,"results":"687","hashOfConfig":"373"},{"size":216,"mtime":1582389285050,"results":"688","hashOfConfig":"373"},{"size":159,"mtime":1582389285050,"results":"689","hashOfConfig":"373"},{"size":99,"mtime":1582389285050,"results":"690","hashOfConfig":"373"},{"size":713,"mtime":1582389285050,"results":"691","hashOfConfig":"373"},{"size":199,"mtime":1582389285050,"results":"692","hashOfConfig":"373"},{"size":3998,"mtime":1583088072481,"results":"693","hashOfConfig":"373"},{"size":1272,"mtime":1582389284926,"results":"694","hashOfConfig":"373"},{"size":2057,"mtime":1582389284886,"results":"695","hashOfConfig":"373"},{"size":10371,"mtime":1583085810938,"results":"696","hashOfConfig":"373"},{"size":6338,"mtime":1582998622758,"results":"697","hashOfConfig":"373"},{"size":51,"mtime":1582389285094,"results":"698","hashOfConfig":"373"},{"size":194,"mtime":1582389285098,"results":"699","hashOfConfig":"373"},{"size":2914,"mtime":1583000816628,"results":"700","hashOfConfig":"373"},{"size":4724,"mtime":1583087459081,"results":"701","hashOfConfig":"373"},{"size":1394,"mtime":1582492852868,"results":"702","hashOfConfig":"373"},{"size":15044,"mtime":1583088780441,"results":"703","hashOfConfig":"373"},{"size":5676,"mtime":1583087212441,"results":"704","hashOfConfig":"373"},{"size":3511,"mtime":1583092561266,"results":"705","hashOfConfig":"373"},{"size":1068,"mtime":1583087860299,"results":"706","hashOfConfig":"373"},{"size":685,"mtime":1582998448181,"results":"707","hashOfConfig":"373"},{"size":170,"mtime":1583008083106,"results":"708","hashOfConfig":"373"},{"size":350,"mtime":1583008683444,"results":"709","hashOfConfig":"373"},{"filePath":"710","messages":"711","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712"},"sqwjbc",{"filePath":"713","messages":"714","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715"},{"filePath":"716","messages":"717","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718"},{"filePath":"719","messages":"720","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721"},{"filePath":"722","messages":"723","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724"},{"filePath":"725","messages":"726","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727"},{"filePath":"728","messages":"729","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730"},{"filePath":"731","messages":"732","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733"},{"filePath":"734","messages":"735","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736"},{"filePath":"737","messages":"738","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739"},{"filePath":"740","messages":"741","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742"},{"filePath":"743","messages":"744","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745"},{"filePath":"746","messages":"747","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748"},{"filePath":"749","messages":"750","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751"},{"filePath":"752","messages":"753","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754"},{"filePath":"755","messages":"756","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757"},{"filePath":"758","messages":"759","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763"},"nio10m",{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"796"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"824","messages":"825","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"894"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"910"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"946","messages":"947","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948"},{"filePath":"949","messages":"950","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"951","messages":"952","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"953","messages":"954","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"961","messages":"962","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"969","messages":"970","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974"},{"filePath":"975","messages":"976","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"977","messages":"978","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"979","messages":"980","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"981","messages":"982","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"983","messages":"984","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"985","messages":"986","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"987","messages":"988","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1015"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1018","messages":"1019","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1020","messages":"1021","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1022"},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1029","messages":"1030","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1031"},{"filePath":"1032","messages":"1033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1038","messages":"1039","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1042","messages":"1043","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1044"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064"},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1074"},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1089","messages":"1090","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1091","messages":"1092","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1093","messages":"1094","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1095","messages":"1096","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1099","messages":"1100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1101","messages":"1102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1103","messages":"1104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1105","messages":"1106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1107"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1110"},{"filePath":"1111","messages":"1112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1113","messages":"1114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1115","messages":"1116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123"},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1128"},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1137","messages":"1138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1139","messages":"1140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1143","messages":"1144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1145"},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1182","messages":"1183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1186","messages":"1187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1188","messages":"1189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1190","messages":"1191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1194","messages":"1195","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196"},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1201","messages":"1202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203"},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1206","messages":"1207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1208","messages":"1209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1210","messages":"1211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1212"},{"filePath":"1213","messages":"1214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1215","messages":"1216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1221","messages":"1222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1223","messages":"1224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1225"},{"filePath":"1226","messages":"1227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1230"},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1233"},{"filePath":"1234","messages":"1235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1236","messages":"1237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1238","messages":"1239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1242"},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1247","messages":"1248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1263","messages":"1264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1265","messages":"1266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1269","messages":"1270","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1271"},{"filePath":"1272","messages":"1273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1274"},{"filePath":"1275","messages":"1276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1277"},{"filePath":"1278","messages":"1279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1280"},{"filePath":"1281","messages":"1282","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1283"},{"filePath":"1284","messages":"1285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1286","messages":"1287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1290"},{"filePath":"1291","messages":"1292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1293","messages":"1294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1295","messages":"1296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1297","messages":"1298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1299"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1302","messages":"1303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1304"},{"filePath":"1305","messages":"1306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1307","messages":"1308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1309","messages":"1310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1311","messages":"1312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1313","messages":"1314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1315","messages":"1316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1317","messages":"1318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1319","messages":"1320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1321","messages":"1322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1323","messages":"1324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1325","messages":"1326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1327","messages":"1328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1329","messages":"1330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1331"},{"filePath":"1332","messages":"1333","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1334"},{"filePath":"1335","messages":"1336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1337","messages":"1338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1339"},{"filePath":"1340","messages":"1341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1342","messages":"1343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1344","messages":"1345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1346","messages":"1347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1348","messages":"1349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1350"},{"filePath":"1351","messages":"1352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1355"},{"filePath":"1356","messages":"1357","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1358"},{"filePath":"1359","messages":"1360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1361"},{"filePath":"1362","messages":"1363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1364","messages":"1365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1366","messages":"1367","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1yoluwu",{"filePath":"1368","messages":"1369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1370","messages":"1371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1372","messages":"1373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1374","messages":"1375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1376","messages":"1377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1378","messages":"1379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1380","messages":"1381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1382","messages":"1383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1384","messages":"1385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1386","messages":"1387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1388","messages":"1389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1390","messages":"1391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1392","messages":"1393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1394","messages":"1395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1396","messages":"1397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1398","messages":"1399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1400","messages":"1401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1402","messages":"1403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1404","messages":"1405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1406","messages":"1407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1408","messages":"1409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1410","messages":"1411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1412"},{"filePath":"1413","messages":"1414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1415","messages":"1416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1417","messages":"1418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1419","messages":"1420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1421","messages":"1422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1423","messages":"1424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1425","messages":"1426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1427","messages":"1428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1429","messages":"1430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1431"},{"filePath":"1432","messages":"1433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1434","messages":"1435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1436","messages":"1437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1438","messages":"1439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1440","messages":"1441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1442","messages":"1443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1444","messages":"1445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1446","messages":"1447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1448","messages":"1449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1450","messages":"1451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1452","messages":"1453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1454","messages":"1455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1456","messages":"1457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1458","messages":"1459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1460","messages":"1461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1462"},{"filePath":"1463","messages":"1464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1465","messages":"1466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1467","messages":"1468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1469","messages":"1470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1471","messages":"1472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1473","messages":"1474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1475"},{"filePath":"1476","messages":"1477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1478","messages":"1479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1480","messages":"1481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1482","messages":"1483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1484","messages":"1485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1486","messages":"1487","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1488"},{"filePath":"1489","messages":"1490","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1491"},{"filePath":"1492","messages":"1493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1494","messages":"1495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1496","messages":"1497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1498","messages":"1499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1500","messages":"1501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/Projects/protocol/node_modules-local/orbit-db-types/CounterStore.d.ts",["1502"],"declare module \"orbit-db-counterstore\" {\n    import Store from \"orbit-db-store\";\n\n    export default class CounterStore extends Store {\n        value: number;\n        \n        inc(value?: number): Promise<string>;\n    }\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/DBOptions.d.ts",["1503"],"\ninterface ICreateOptions {\n    /**\n     * The directory where data will be stored (Default: uses directory option passed to OrbitDB constructor or ./orbitdb if none was provided).\n     */\n    directory?: string;\n    \n    accessController?: { \n        /**\n         * An array of hex encoded public keys which are used to set write access to the database.\n         * [\"*\"] can be passed in to give write access to everyone.\n         * See the GETTING STARTED guide for more info.\n         * (Default: uses the OrbitDB instance key orbitdb.key, which would give write access only to yourself)\n         */\n        write?: string[]\n        \n        /**\n         * Name of custom AccessController\n         */\n        type?: string \n    };\n    \n    /**\n     * Overwrite an existing database (Default: false)\n     */\n    overwrite?: boolean;\n\n    /**\n     * Replicate the database with peers, requires IPFS PubSub. (Default: true)\n     */\n    replicate?: boolean;\n}\n\ninterface IOpenOptions {\n    /**\n     * f set to true, will throw an error if the database can't be found locally. (Default: false)\n     */\n    localOnly?: boolean;\n\n    /**\n     * The directory where data will be stored (Default: uses directory option passed to OrbitDB constructor or ./orbitdb if none was provided).\n     */\n    directory?: string;\n\n    /**\n     * Whether or not to create the database if a valid OrbitDB address is not provided. (Default: false, only if using the OrbitDB#open method, otherwise this is true by default)\n     */\n    create?: boolean;\n\n    /**\n     * A supported database type (i.e. eventlog or an added custom type).\n     * Required if create is set to true.\n     * Otherwise it's used to validate the manifest.\n     * You ony need to set this if using OrbitDB#open\n     */\n    type?: TStoreType;\n\n    /**\n     * Overwrite an existing database (Default: false)\n     */\n    overwrite?: boolean;\n\n    /**\n     * Replicate the database with peers, requires IPFS PubSub. (Default: true)\n     */\n    replicate?: boolean;\n}\n\ninterface IStoreOptions extends ICreateOptions, IOpenOptions {\n    Index?: any\n}\n\n// c.f. https://github.com/orbitdb/orbit-db/blob/master/API.md#orbitdbdatabasetypes\ntype TStoreType = 'counter' | 'eventlog' | 'feed' | 'docstore' | 'keyvalue' | string;\n\n//export {ICreateOptions, IOpenOptions, IStoreOptions};\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/DocumentStore.d.ts",["1504"],"declare module \"orbit-db-docstore\" {\n    import Store from \"orbit-db-store\";\n\n    export default class DocumentStore<T> extends Store {\n\n        put(key: any, value: any): Promise<string>;\n        get(key: any): T[];\n\n        query(mapper: (doc: T) => void): T[]\n\n        del(key: any): Promise<string>;\n        \n    }\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/EventStore.d.ts",["1505"],"declare module \"orbit-db-eventstore\" {\n    import Store from \"orbit-db-store\";\n\n    export default class EventStore<T> extends Store {\n        add(data: any): Promise<string>;\n        get(hash: string): LogEntry<T>;\n\n        iterator(options?: { \n            gt?: string,\n            gte?: string, \n            lt?: string, \n            lte?: string, \n            limit?: number, \n            reverse?: boolean \n        }): {\n            [Symbol.iterator](),\n            next(): { value: LogEntry<T>, done: boolean },\n            collect(): LogEntry<T>[]\n        };\n    }\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/FeedStore.d.ts",["1506"],"declare module \"orbit-db-feedstore\" {\n    import Store from \"orbit-db-store\";\n\n    export default class FeedStore<T> extends Store {\n        add(data: any): Promise<string>;\n        get(hash: string): LogEntry<T>\n\n        remove(hash: string): Promise<string>;\n\n        iterator(options?: { \n            gt?: string,\n            gte?: string, \n            lt?: string, \n            lte?: string, \n            limit?: number, \n            reverse?: boolean \n        }): {\n            [Symbol.iterator](),\n            next(): { value: LogEntry<T>, done: boolean },\n            collect(): LogEntry<T>[]\n        };\n    }\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/IReplicationStatus.d.ts",["1507"],"interface IReplicationStatus {\n    buffered: number;\n    queued: number;\n    progress: number;\n    max: number;\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Identity.d.ts",["1508"],"declare module \"orbit-db-identity-provider\" {\n    import {Keystore} from 'orbit-db-keystore';\n\n    export type IdentityProviderType = 'orbitdb' | 'ethereum' | string;\n\n    export interface IdentityProviderOptions {\n        /**\n         * required by OrbitDBIdentityProvider\n         */\n        id?: string\n        /**\n         * required by OrbitDBIdentityProvider\n         */\n        keystore?: Keystore\n        /**\n         * required by OrbitDBIdentityProvider\n         */\n        signingKeystore?: Keystore\n        /**\n         * required by EthIdentityProvider\n         */\n        wallet?: any\n\n        [k: string]: any\n    }\n\n    export class IdentityProvider {\n        constructor(options: IdentityProviderOptions)\n\n        /**\n         * Return the type for this identity-provider\n         */\n        readonly type: IdentityProviderType;\n\n        /**\n         * Return id of identity (to be signed by orbit-db public key)\n         */\n        getId(options?: IdentityProviderOptions): Promise<string>\n\n        /**\n         * Return signature of OrbitDB public key signature\n         */\n        signIdentity(data, options?): Promise<any>\n\n        /**\n         * Verify a signature of OrbitDB public key signature\n         */\n        static verifyIdentity(identity: IdentityAsJson): Promise<boolean>\n\n    }\n\n    export interface IdentityAsJson {\n        id: string;\n        publicKey: string;\n        signatures: {\n            id: string,\n            publicKey: string\n        };\n        type: IdentityProviderType;\n    }\n\n    export class Identity implements IdentityAsJson {\n        constructor(id: string, publicKey: string, idSignature: string, pubKeyIdSignature: string, type: string, provider: IdentityProvider)\n\n        readonly id: string;\n        readonly publicKey: string;\n        readonly signatures: { id: string; publicKey: string };\n        readonly type: IdentityProviderType;\n        readonly provider: Identities;\n\n        toJSON(): IdentityAsJson\n    }\n\n    export interface CreateIdentityOptions extends IdentityProviderOptions {\n        type?: IdentityProviderType\n        identityKeysPath?: string\n        migrate?: ({targetStore: Store, targetId: string}) => Promise<void>\n    }\n\n    export interface StaticCreateIdentityOptions extends CreateIdentityOptions {\n        identityKeysPath?: string\n    }\n\n    export default class Identities {\n        constructor(options: { keystore?: Keystore, signingKeystore?: Keystore })\n\n        readonly keystore: Keystore;\n        readonly signingKeystore: Keystore;\n\n        sign(identity: IdentityAsJson, data: any): Promise<string>\n\n        verify(signature: string, publicKey: string, data: any, verifier?: any): Promise<boolean>\n\n        createIdentity(options?: CreateIdentityOptions): Promise<Identity>\n\n        signId(id: string): Promise<{ publicKey: string, idSignature: string }>\n\n        verifyIdentity(identity: IdentityAsJson): Promise<boolean>\n\n        static verifyIdentity(identity: IdentityAsJson): Promise<boolean>\n\n        static createIdentity(options?: StaticCreateIdentityOptions): Promise<Identity>\n\n        static isSupported(type: IdentityProviderType): boolean\n\n        static addIdentityProvider(IdentityProviderType: typeof IdentityProvider): void\n\n        static removeIdentityProvider(type: IdentityProviderType): void\n    }\n\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/KeyValueStore.d.ts",["1509"],"declare module \"orbit-db-kvstore\" {\n    import Store from \"orbit-db-store\";\n\n    export default class KeyValueStore<V> extends Store {\n\n        put(key: string, value: V): Promise<void>;\n        set(key: string, value: V): Promise<void>;\n\n        get(key: string): V;\n\n    }\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Keystore.d.ts",["1510"],"declare module \"orbit-db-keystore\" {\n    export class Keystore {\n\n        hasKey(id:string): Promise<boolean>\n\n        createKey(id:string): Promise<{publicKey: string, privateKey: string}>\n\n        getKey(id:string): Promise<{publicKey: string, privateKey: string}>\n\n    }\n\n    export default class {\n        static create(directory?: string)\n        static verify(signature: string, publicKey: string, data: string, v?:string): Promise<boolean>\n    }\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/LogEntry.d.ts",["1511"],"interface IdentityJson {\n    id: string,\n    publicKey: string,\n    signatures: {id: string, publicKey: string},\n    type: string\n}\ninterface LamportClockJson {\n    id: 'string',\n    time: number\n}\ninterface LogEntry<T>{\n    hash: string,\n    id: string,\n    payload: { op?: string, key?: string, value: T},\n    next: string[], // Hashes of parents\n    v: number, // Format, can be 0 or 1\n    clock: LamportClockJson,\n    key: string,\n    identity: IdentityJson,\n    sig: string\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDB.d.ts",["1512"],"/// <reference path=\"./DBOptions.d.ts\" />\n/// <reference path=\"./LogEntry.d.ts\" />\ndeclare module 'orbit-db' {\n    import Store from \"orbit-db-store\";\n    import KeyValueStore from \"orbit-db-kvstore\";\n    import FeedStore from \"orbit-db-feedstore\";\n    import EventStore from \"orbit-db-eventstore\";\n    import DocumentStore from \"orbit-db-docstore\";\n    import CounterStore from \"orbit-db-counterstore\";\n    import { Keystore } from \"orbit-db-keystore\";\n    import { Cache } from \"orbit-db-cache\";\n    import { Identity } from \"orbit-db-identity-provider\";\n    import * as IPFS from \"ipfs\";\n    import * as elliptic from \"elliptic\";\n\n    export class OrbitDB {\n\n        stores: any;\n        directory: string;\n        keystore: Keystore;\n\n        static databaseTypes: string[];\n        \n\n        constructor(ipfs: IPFS, directory?: string, options?: {\n            peerId?: string,\n            keystore?: Keystore\n        });\n\n        /**\n         * Creates and returns an instance of OrbitDB. \n         * @param ipfs \n         * @param options Other options: \n         * <ul>\n         * <li>directory (string): path to be used for the database files. By default it uses './orbitdb'.</li>\n         * <li>peerId (string): By default it uses the base58 string of the ipfs peer id.</li>\n         * <li>keystore (Keystore Instance) : By default creates an instance of Keystore.</li>\n         * <li>cache (Cache Instance) : By default creates an instance of Cache. A custom cache instance can also be used.</li>\n         * <li>identity (Identity Instance): By default it creates an instance of Identity</li>\n         * </ul>\n         */\n        static createInstance(ipfs: IPFS, options?: {\n            directory?: string,\n            peerId?: string,\n            keystore?: Keystore,\n            cache?: Cache,\n            identity?: Identity\n        }): Promise<OrbitDB>\n\n        create(name: string, type: TStoreType, options?: ICreateOptions): Promise<Store>;\n\n        open(address: string, options?: IOpenOptions): Promise<Store>;\n\n        disconnect(): Promise<void>;\n        stop(): Promise<void>;\n\n        feed<T>(address: string, options?: IStoreOptions): Promise<FeedStore<T>>;\n        log<T>(address: string, options?: IStoreOptions): Promise<EventStore<T>>;\n        eventlog<T>(address: string, options?: IStoreOptions): Promise<EventStore<T>>;\n        keyvalue<T>(address: string, options?: IStoreOptions): Promise<KeyValueStore<T>>;\n        kvstore<T>(address: string, options?: IStoreOptions): Promise<KeyValueStore<T>>;\n        counter(address: string, options?: IStoreOptions): Promise<CounterStore>;\n        docs<T>(address: string, options?: IStoreOptions): Promise<DocumentStore<T>>;\n        docstore<T>(address: string, options?: IStoreOptions): Promise<DocumentStore<T>>;\n\n        static isValidType(type: TStoreType);\n        static addDatabaseType(type: string, store: typeof Store);\n        static getDatabaseTypes(): {};\n        static isValidAddress(address: string): boolean;\n    }\n\n    export default OrbitDB;\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/AccessControllerInterface.d.ts",["1513"],"\ndeclare module \"orbit-db-access-controllers/src/access-controller-interface\" {\n\n    import EventEmitter from 'events'\n    import OrbitDB from 'orbit-db'\n    import { Identity } from 'orbit-db-identity-provider'\n\n\n    /**\n     * Interface for OrbitDB Access Controllers\n     *\n     * Any OrbitDB access controller needs to define and implement\n     * the methods defined by the interface here.\n     */\n    export default class AccessController extends EventEmitter {\n        /*\n            Every AC needs to have a 'Factory' method\n            that creates an instance of the AccessController\n        */\n        static create (orbitdb: OrbitDB, options: any): Promise<AccessController>\n\n        /* Return the type for this controller */\n        static get type (): string\n\n        /*\n            Return the type for this controller\n            NOTE! This is the only property of the interface that\n            shouldn't be overridden in the inherited Access Controller\n        */\n        get type (): string\n\n        /* Each Access Controller has some address to anchor to */\n        get address (): string\n\n        /*\n            Called by the databases (the log) to see if entry should\n            be allowed in the database. Return true if the entry is allowed,\n            false is not allowed\n        */\n        canAppend (entry: LogEntry<any>, identityProvider): Promise<boolean>\n\n        /* Add and remove access */\n        grant (access: string, identity: any): Promise<any>\n        revoke (access: string, identity: any): Promise<any>\n\n        /* AC creation and loading */\n        load (address: string): Promise<any>\n        /* Returns AC manifest parameters object */\n        save (): Promise<any>\n        /* Called when the database for this AC gets closed */\n        close (): Promise<void>\n    }\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessController.d.ts",["1514"],"\ndeclare module \"orbit-db-access-controllers/src/orbitdb-access-controller\" {\n    import AccessController from \"orbit-db-access-controllers/src/access-controller-interface\"\n    import OrbitDB from \"orbit-db\"\n\n    export default class OrbitDBAccessController extends AccessController {\n        constructor (orbitdb: OrbitDB, options: any)\n\n        // Returns the type of the access controller\n        static get type (): string\n\n        // Returns the address of the OrbitDB used as the AC\n        get address (): string\n\n        // Return true if entry is allowed to be added to the database\n        canAppend (entry: LogEntry<any>, identityProvider: any): Promise<boolean>\n\n        get capabilities (): {[key: string]: Set<any>}\n        get (capability: string): Set<any>\n\n        close (): Promise<void>\n\n        load (address: string): Promise<void>\n\n        save(): Promise<{ address: string }>\n\n        grant (capability: string, key: string): Promise<void>\n\n        revoke (capability: string, key: string): Promise<void>\n\n        /* Private methods */\n        _onUpdate (): void\n\n        /* Factory */\n        static create (orbitdb: OrbitDB, options: any): Promise<OrbitDBAccessController>\n    }\n\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessControllers.d.ts",["1515"],"declare module \"orbit-db-access-controllers\" {\n    import OrbitDB from 'orbit-db'\n    export default class AccessControllers {\n        static isSupported (type: string): boolean\n        \n        static addAccessController (options: {AccessController: any}): void\n    \n        static addAccessControllers (options: {AccessControllers: string[]}): void\n    \n        static removeAccessController (type: string): void\n    \n        static resolve (orbitdb: OrbitDB, manifestAddress: string, options: string): any\n    \n        static create (orbitdb: OrbitDB, type: string, options: any): string\n    }\n}","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/Store.d.ts",["1516"],"\ndeclare module \"orbit-db-store\" {\n    import IPFS = require(\"ipfs\");\n    import {Identity} from \"orbit-db-identity-provider\";\n    import { EventEmitter } from 'events';\n    import * as elliptic from \"elliptic\";\n\n    export default class Store {\n\n        /**\n         * The identity is used to sign the database entries.\n         */\n        readonly identity: Identity;\n\n        address: { root: string, path: string };\n        /** \n         * Contains all entries of this Store\n         */\n        all: any[];\n        type: string;\n        /**\n         * Returns an instance of `elliptic.ec.KeyPair`.\n         * The keypair is used to sign the database entries.\n         * The key can also be accessed from the OrbitDB instance: `orbitdb.key.getPublic('hex')`.\n         */\n        key: elliptic.ec.KeyPair;\n        replicationStatus: IReplicationStatus;\n         \n        events: EventEmitter;\n\n        /**\n         * Apparently not meant for outside usage\n         * @param ipfs \n         * @param identity \n         * @param address \n         * @param options \n         */\n        protected constructor (ipfs: IPFS, identity, address: string, options: IStoreOptions);\n\n        close(): Promise<void>;\n        drop(): Promise<void>;\n        \n        setIdentity(identity: Identity): void;\n        \n        /**\n         * Load the locally persisted database state to memory.\n         * @param amount Amount of entries loaded into memory\n         * @returns a `Promise` that resolves once complete\n         */\n        load(amount?: number): Promise<void>;\n\n        protected _addOperation(data: any);\n    }\n}\n","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/index.d.ts",["1517"],"/// <reference path=\"./OrbitDB.d.ts\"       />\n/// <reference path=\"./Store.d.ts\"         />\n/// <reference path=\"./CounterStore.d.ts\"  />\n/// <reference path=\"./DocumentStore.d.ts\" />\n/// <reference path=\"./EventStore.d.ts\"    />\n/// <reference path=\"./FeedStore.d.ts\"     />\n/// <reference path=\"./KeyValueStore.d.ts\" />\n/// <reference path=\"./Identity.d.ts\"      />\n/// <reference path=\"./Keystore.d.ts\"      />\n/// <reference path=\"./DBOptions.d.ts\"     />\n/// <reference path=\"./LogEntry.d.ts\" />\n/// <reference path=\"./IReplicationStatus.d.ts\" />\n/// <reference path=\"./OrbitDBAccessControllers/OrbitDBAccessControllers.d.ts\" />\n/// <reference path=\"./OrbitDBAccessControllers/OrbitDBAccessController.d.ts\" />\n/// <reference path=\"./OrbitDBAccessControllers/AccessControllerInterface.d.ts\" />","/home/paul/Projects/protocol/node_modules-local/orbit-db-types/test.ts",["1518"],"import { OrbitDB } from \"orbit-db\";\n\nnew OrbitDB(null).kvstore(\"\", {overwrite: false});\n","/home/paul/Projects/protocol/src/App.tsx",["1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { runTestFirebaseConnectionDatabase } from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database';\nimport { runTestFirebaseCredentialsStorage } from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage';\nimport {\n  runTestCAIdentityWithAuthorityProviderGeneratorV1,\n  runTestCAIdentityV1,\n} from 'test/central-authority.test/central-authority.test';\nimport {\n  runTestCAConnectionFirebase,\n  runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider,\n} from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test';\nimport { runTestErrorExtended } from 'test/error-extended-class-test';\nimport { runTestSwarmConnection } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.test';\nimport { runTestSwarmConnectionIPFS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { runTestSwarmStoreOrbitDBConnection } from 'test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test';\nimport { runTestValidateMessagingTimestampsTest } from 'test/validation-messaging.test/validate-messaging-timestamps-test';\nimport { runTestHttpRequest } from 'test/http-request-class-base.test/http-request-class-base.test';\nimport { runTestPseudoNtpClass } from 'test/pseudo-ntp-class.test/pseudo-ntp-class.test';\nimport { runTestClientTimeSynced } from 'test/common-utils-date-time-synced.test';\nimport { runSwarmMessageFieldsValidator } from 'test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test';\nimport { runTestCAIdentityV2 } from 'test/central-authority-identity.test/central-authority-identity-v2.test';\nimport { runCACredentialsIdentityStorageTest } from 'test/central-authority.test/central-authority-storage-identity-credentials.test';\nimport { runTestCAConnectionsUtilsValidators } from 'test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test';\nimport { runTestCommonUtilsURL } from 'test/common-utils.test/common-utils-url.test';\nimport { runTestCAConnectionsPoolTest } from 'test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test';\nimport { runTestCASwarmCredentilsProvider } from 'test/central-authority.test/central-authority-swarm-credentials-provider';\n\n// import { runCACredentialsIdentityStorageTest } from 'test/central-authority.test/central-authority-storage-identity-credentials.test';\n// import { runTestCachingDecorator } from 'test/common-utils.test/common-utils.test';\n// import { runTestCAIdentity } from 'test/central-authority.test/central-authority.test';\n// import {\n//   runTestKeys,\n//   runTestsCredentialsStorage,\n// } from 'test/central-authority.test/central-authority.test';\n// import 'test/data-sign-test';\n// import 'test/password-key.test';\n// import { runTest } from 'test/safe-storage.test';\n//import { runTest } from 'test/valiation-utils.test';\n// import { runTest } from 'test/secret-storage.test';\nimport { runTestSaltUtils } from './test/salt-generation-utils.test/salt-generation-utils.test';\nimport { testKeyGeneration } from 'test/password-key.test';\nimport { runTestSecretStorage } from 'test/secret-storage.test';\nimport { runTestEncryptionKeysUtils } from 'utils/encryption-keys-utils.test';\nimport { runTestAuthorityStorageCurrentUser } from 'test/central-authority.test/central-authority-storage-current-user-credentials.test';\nimport { runTestCentralAuthorityUtils } from 'test/central-authority.test/central-authority-utils.test';\nimport { runTestOpenStorageTest } from 'test/open-storage.test';\nimport { runTestCentralAuthority } from './test/central-authority.test/central-authority-class.test/central-authority-class.test';\nimport { runSwarmMessageConstructorTests } from './test/swarrm-message-constructor.test/swarrm-message-constructor.test';\nimport { runSwarmMessageStoreTest } from './test/swarm-message-store-test/swarm-message-store-test.test';\n\n// runTest();\n// runTestsCredentialsStorage();\n// runTestCAIdentity();\n// runTestCachingDecorator();\n// runCACredentialsIdentityStorageTest();\n\n// runTestProfileValidation();\n// runTestFirebaseCredentialsStorage();\n\n// runTestErrorExtended();\n// runTestCAConnectionFirebase();\n// runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider();\n// runTestFirebaseConnectionDatabase();\n// runTestCAIdentityWithAuthorityProviderGenerator();\n// runTestFirebaseCredentialsStorage();\n\n// runTestSwarmConnectionIPFS();\n\nconst runTest = async () => {\n  await initializeMocha();\n\n  // runTestSwarmConnection();\n  // runTestSwarmStoreOrbitDBConnection();\n  // runTestValidateMessagingTimestampsTest();\n  // runTestHttpRequest();\n  // runTestClientTimeSynced();\n  // runSwarmMessageFieldsValidator();\n  // runTestFirebaseCredentialsStorage();\n  // runTestCAConnectionsUtilsValidators();\n  // runTestCAConnectionsPoolTest();\n  // runTestAuthorityStorageCurrentUser();\n  // runTestOpenStorageTest();\n  // runCACredentialsIdentityStorageTest();\n  // runTestCASwarmCredentilsProvider();\n  // runTestCentralAuthorityUtils(); // TODO - necessary to test urls comparation\n  // runTestCentralAuthority();\n  // runSwarmMessageConstructorTests();\n  runSwarmMessageStoreTest();\n  runMocha();\n};\n\nrunTest();\n\nconst App: React.FC = () => {\n  return null;\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.tsx</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n};\n\nexport default App;\n","/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/Projects/protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/error-extended-scoped-class-base/error-extended-scoped-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["1550","1551","1552"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["1553"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["1554"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File([result], extension || 'unknown', {\n          type: mimeType || undefined,\n        });\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["1555","1556","1557"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport { ownValueOf } from 'types/helper.types';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["1558","1559"],"import { isURL } from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!isURL(url)) {\n      return new Error('The url is not valid');\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["1560"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-crypto-keys-usages.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["1561","1562"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport type TCentralAuthorityUserLogin = string;\n\nexport type TCentralAuthorityUserPassword = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: TCentralAuthorityUserLogin;\n  password: TCentralAuthorityUserPassword;\n}\n\n/**\n * this credentials used to authorize the user on a central authority\n * provider service and getting access to a local data encrypted.\n * The secret login property used to encrypt some part of a local data\n * and may be empty. If it's empty then user identity value will be used\n * for encryption. But it may take no effect cause it is public value\n * in most cases.\n */\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_SECRET_LOGIN_PROP_NAME]?: string;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor() {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["1563"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["1564"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["1565"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["1566","1567","1568"],"import { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from './../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const {\n    [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authorityProviderURI,\n  } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["1569"],"import {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n  ICAIdentityCommonInstance,\n  TUserIdentityVersion,\n  TCAUserIdentityRawTypes,\n} from './central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from '../central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentitySilent } from '../central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { parseIdentity } from './central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers';\nimport { serializeIdentity } from './central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n  CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER,\n} from './central-authority-class-user-identity.const';\nimport { CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME } from '../central-authority-class-const/central-authority-class-const';\n\nexport class CentralAuthorityIdentity implements ICAIdentityCommonInstance {\n  protected _userIdentitySerialized?: Error | TCentralAuthorityUserIdentity;\n\n  protected _userIdentityParsed?: Error | ICAUserUniqueIdentifierDescription;\n\n  public isValid?: boolean;\n\n  constructor(protected _userIdentity: TCAUserIdentityRawTypes) {\n    if (_userIdentity instanceof CentralAuthorityIdentity) {\n      return _userIdentity;\n    }\n    if (!_userIdentity) {\n      return;\n    }\n\n    let identity = _userIdentity;\n\n    if (typeof _userIdentity === 'object') {\n      //check may be it is a crypto credentials object\n      const identityVal = ((_userIdentity as unknown) as any)[\n        CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME\n      ];\n\n      if (typeof identityVal === 'string') {\n        identity = identityVal;\n      }\n    }\n    if (validateUserIdentitySilent(identity)) {\n      this.parseUserIdentity(identity);\n    } else {\n      const userIdentityDescription = this.extendDescriptionWithVersion(\n        identity as ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n      );\n\n      this.serializeUserIdentityDescription(userIdentityDescription);\n    }\n  }\n\n  protected extendDescriptionWithVersion(\n    _userIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ): ICAUserUniqueIdentifierDescription {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = _userIdentityDescription;\n\n    if (!version) {\n      // extend the description with the\n      // current version\n      const result = {\n        ..._userIdentityDescription,\n        [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSION_CURRENT,\n      };\n\n      this._userIdentity = result;\n      return result as ICAUserUniqueIdentifierDescription;\n    }\n    return _userIdentityDescription as ICAUserUniqueIdentifierDescription;\n  }\n\n  public get identityDescription(): ICAUserUniqueIdentifierDescription | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentityParsed } = this;\n\n    if (!_userIdentityParsed) {\n      return new Error('Failed to parse the user identity');\n    }\n    return _userIdentityParsed;\n  }\n\n  public get identityDescritptionSerialized():\n    | TCentralAuthorityUserIdentity\n    | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { _userIdentitySerialized } = this;\n\n    if (!_userIdentitySerialized) {\n      return new Error('Failed to serialize the user identity');\n    }\n    return _userIdentitySerialized;\n  }\n\n  /**\n   * uniquely identifies the user\n   */\n  public get id(): string | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    const { authorityProviderURI, userUniqueIdentifier } = this\n      .identityDescription as ICAUserUniqueIdentifierDescription;\n\n    return `${authorityProviderURI}${CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER}${userUniqueIdentifier}`;\n  }\n\n  public get version(): TUserIdentityVersion | Error {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return res;\n    }\n\n    return (((this.identityDescription as ICAUserUniqueIdentifierDescription)\n      .version ||\n      CA_USER_IDENTITY_VERSION_CURRENT) as unknown) as TUserIdentityVersion;\n  }\n\n  public toString(): TCentralAuthorityUserIdentity {\n    const res = this.checkUserIdentityDescriptionIsValid();\n\n    if (res instanceof Error) {\n      return '';\n    }\n    return this.identityDescritptionSerialized as string;\n  }\n\n  protected checkUserIdentityDescriptionIsValid = (): Error | void => {\n    const { _userIdentitySerialized, isValid, _userIdentityParsed } = this;\n    let err: Error | void;\n\n    if (!isValid) {\n      err = new Error('The identity is not valid');\n    }\n    if (!_userIdentityParsed) {\n      err = new Error('There is no user identity parsed');\n    }\n    if (_userIdentityParsed instanceof Error) {\n      err = _userIdentityParsed;\n    }\n    if (!_userIdentitySerialized) {\n      err = new Error('The identity description serialized is not defined');\n    }\n    if (_userIdentitySerialized instanceof Error) {\n      err = _userIdentitySerialized;\n    }\n    if (err instanceof Error) {\n      console.error(err);\n      return err;\n    }\n  };\n\n  protected setIdentityIsValid(): void {\n    if (this.isValid !== false) {\n      this.isValid = true;\n    }\n  }\n\n  protected parseUserIdentity(\n    userIdentity: TCentralAuthorityUserIdentity\n  ): void {\n    if (userIdentity) {\n      const parsedUserIdentity = parseIdentity(userIdentity);\n      if (parsedUserIdentity instanceof Error) {\n        console.error(parsedUserIdentity);\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = new Error(\n          'Failed to parse the user identity'\n        );\n      } else {\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = userIdentity;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identity serialized is not defined');\n\n      this._userIdentityParsed = err;\n      this._userIdentitySerialized = err;\n    }\n    this.isValid = false;\n  }\n\n  protected serializeUserIdentityDescription(\n    userIdentityDescription: ICAUserUniqueIdentifierDescription\n  ) {\n    if (userIdentityDescription) {\n      const serializedDescription = serializeIdentity(userIdentityDescription);\n\n      if (serializedDescription instanceof Error) {\n        this._userIdentityParsed = new Error(\n          'Failed to serialize the user identity description'\n        );\n        this._userIdentitySerialized = serializedDescription;\n      } else {\n        this._userIdentityParsed = userIdentityDescription;\n        this._userIdentitySerialized = serializedDescription;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identifier description is not defined');\n\n      this._userIdentitySerialized = err;\n      this._userIdentityParsed = err;\n    }\n    this.isValid = false;\n  }\n}\n\nexport default CentralAuthorityIdentity;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["1570"],"/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport {\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport {\n  ICAConnectionConfigurationFirebase,\n  ICAConnectionFirebaseUserProfile,\n} from '../central-authority-connection-firebase.types.configuration';\nimport {\n  ICentralAuthorityUserAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n  ICentralAuthorityUserProfile,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport { validateUserProfileData } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user';\nimport {\n  dataValidatorUtilEmail,\n  dataValidatorUtilURL,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { generateCryptoCredentialsWithUserIdentityV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { CAConnectionFirestoreUtilsCredentialsStrorage } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS } from '../central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions';\nimport { validatePassword } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport {\n  CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE,\n  CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE,\n} from '../../central-authority-connections-const/central-authority-connections-const';\nimport { valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators';\n\n/**\n *\n * This is the class realized the basic functions\n * allows to connect with the Firebase.\n *\n * @export\n * @class CAConnectionWithFirebase\n */\nexport class CAConnectionWithFirebaseBase {\n  public static validateConfiguration = valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration;\n\n  // if the application is connected with the remote Firebase\n  public isConnected: boolean = false;\n\n  public get isUserSignedIn(): boolean {\n    const { isConnected, isVerifiedAccount } = this;\n\n    if (!isConnected) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return isVerifiedAccount;\n  }\n\n  public get isAuthorized(): boolean {\n    const {\n      isUserSignedIn,\n      valueofCredentialsSignUpOnAuthorizedSuccess: credentialsAuthorizedSuccess,\n    } = this;\n\n    if (!isUserSignedIn) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return !!credentialsAuthorizedSuccess;\n  }\n\n  public get authResult(): ICAConnectionUserAuthorizedResult | void {\n    return this.valueofCredentialsSignUpOnAuthorizedSuccess;\n  }\n\n  protected app?: firebase.app.App;\n\n  protected configuration?: ICAConnectionConfigurationFirebase;\n\n  protected isAuthorizedWithCredentials: boolean = false;\n\n  protected valueofCredentialsSignUpOnAuthorizedSuccess?: ICAConnectionUserAuthorizedResult;\n\n  protected connectionWithCredentialsStorage?: CAConnectionFirestoreUtilsCredentialsStrorage;\n\n  protected get currentUser(): firebase.User | null {\n    const { isConnected, app } = this;\n\n    return isConnected ? app!!.auth().currentUser : null;\n  }\n\n  protected get isVerifiedAccount(): boolean {\n    const { isConnected, currentUser: currentUserData } = this;\n\n    if (!isConnected) {\n      return false;\n    }\n    if (!currentUserData) {\n      return false;\n    }\n    if (!currentUserData.emailVerified) {\n      return false;\n    }\n    return true;\n  }\n\n  protected get databaseURL(): Error | string {\n    const { configuration } = this;\n\n    if (!configuration) {\n      return new Error(\n        'There is no url specified for the Firebase authority provided'\n      );\n    }\n\n    const { databaseURL } = configuration;\n\n    if (dataValidatorUtilURL(databaseURL)) {\n      return databaseURL;\n    }\n    return new Error(\n      'An invalid URL provided for the Firebase authority provider'\n    );\n  }\n\n  // return the firebase application\n  public getApp(): void | firebase.app.App {\n    return this.app;\n  }\n\n  /**\n   * sign out if authorized before\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async signOut(): Promise<boolean | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    // disconnect the strage cause it's necessary\n    // that the user was authorized\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    try {\n      await app!!.auth().signOut();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to sign out');\n    }\n    this.handleUnauthorized();\n\n    return true;\n  }\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @param {string} name - name of the application,\n   * it's necessary to provide a name string if more than one Firebase\n   * applications will be used simultaneousely. But at the first time\n   * no name must be provided, cause it means that the DEFAULT application\n   * will be created, which is required by the Firebase.\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase,\n    name?: string\n  ): Promise<boolean | Error> {\n    let app;\n\n    try {\n      app = firebase.initializeApp(configuration, name);\n      this.configuration = configuration;\n    } catch (err) {\n      console.error(err);\n      this.setConnectedStatus(false);\n      return new Error(\n        'Failed to initialize the application with the given configuration'\n      );\n    }\n    this.setConnectedStatus(app);\n    return true;\n  }\n\n  /**\n   * This method may be substituted by firebase\n   * connection implementation to be compilant\n   * to an CA identifier version.\n   * When call the method createOrSetCredentialsInDB\n   * functions to generate credentials and store\n   * it in the database may be substitudet by\n   * an implementation of it compolant to the\n   * identifier version.\n   * Thi version is compilant to the identity v1.\n   *\n   * @param signUpCredentials\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    return this.createOrSetCredentialsInDB(signUpCredentials.cryptoCredentials);\n  }\n\n  protected setConnectedStatus(isConnected: false | firebase.app.App) {\n    this.isConnected = !!isConnected;\n    if (isConnected) {\n      this.app = isConnected;\n    }\n  }\n\n  protected setAuthorizedStatus(isAuthorized: boolean) {\n    this.isAuthorizedWithCredentials = isAuthorized;\n  }\n\n  protected checkIfConnected(): boolean | Error {\n    const { isConnected, connectionWithCredentialsStorage } = this;\n\n    if (\n      !connectionWithCredentialsStorage ||\n      !connectionWithCredentialsStorage.isConnected\n    ) {\n      return false;\n    }\n    return !isConnected\n      ? new Error('There is no active connection with the Firebase')\n      : true;\n  }\n\n  protected checkSignUpCredentials(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): boolean | Error {\n    if (!signUpCredentials) {\n      return new Error('Sign up credentials must be provided');\n    }\n    if (typeof signUpCredentials !== 'object') {\n      return new Error('Sign up credentials must be an object');\n    }\n\n    const {\n      cryptoCredentials: credentialsGiven,\n      login,\n      password,\n    } = signUpCredentials;\n\n    if (credentialsGiven) {\n      const resultCheckCredentialsGiven = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsGiven\n      );\n\n      if (resultCheckCredentialsGiven instanceof Error) {\n        console.error(resultCheckCredentialsGiven);\n        return new Error(\n          'Credentials given is not valid for the Firebase auth provider'\n        );\n      }\n    }\n    if (!dataValidatorUtilEmail(login)) {\n      return new Error('The login must be an email valid');\n    }\n    if (!validatePassword(password)) {\n      return new Error('The password provided is not valid');\n    }\n    return true;\n  }\n\n  protected setConnectionWithCredentialsStorage(\n    connectionWithCredentialsStorage: CAConnectionFirestoreUtilsCredentialsStrorage\n  ) {\n    this.connectionWithCredentialsStorage = connectionWithCredentialsStorage;\n  }\n\n  protected async startConnectionWithCredentialsStorage(): Promise<\n    boolean | Error\n  > {\n    if (this.connectionWithCredentialsStorage) {\n      // if already connected with the credentials storage\n      return true;\n    }\n\n    const connectionWithCredentialsStorage = new CAConnectionFirestoreUtilsCredentialsStrorage(\n      this\n    );\n    const storageConnectionResult = await connectionWithCredentialsStorage.connect();\n\n    if (storageConnectionResult instanceof Error) {\n      console.error(storageConnectionResult);\n      return new Error('Failed connect to the Firebase credentials storage');\n    }\n    if (!connectionWithCredentialsStorage.isConnected) {\n      return new Error(\n        'Connection to the Firebase credentials storage was not succeed'\n      );\n    }\n    this.setConnectionWithCredentialsStorage(connectionWithCredentialsStorage);\n    return true;\n  }\n\n  protected async waitingUserInit(): Promise<void | firebase.User | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return new Error('The connection is not established');\n    }\n    if (!this.app) {\n      return new Error('The Firebase app is not defined');\n    }\n    return new Promise((res) => {\n      this.app!!.auth().onAuthStateChanged((user) => {\n        if (user && user.email) {\n          res(user);\n        }\n      });\n    });\n  }\n\n  protected handleUnauthorized() {\n    this.setAuthorizedStatus(false);\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  // handle an authorization attemp failed\n  protected onAuthorizationFailed(error: Error | string): Error {\n    const err = error instanceof Error ? error : new Error(String(error));\n\n    console.error(err);\n    console.error('Authorization failed on remote Firebase server');\n    this.handleUnauthorized();\n    return err;\n  }\n\n  protected async singUpWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      authCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    const { login, password } = authCredentials;\n\n    try {\n      await firebase.auth().createUserWithEmailAndPassword(login, password);\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  /**\n   * sign in under the login\n   * provided by the user\n   * @param authCredentials\n   * @param {string} authCredentials.login\n   * @param {string} authCredentials.password\n   */\n  protected async singInWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    let signInResult;\n    const { login, password } = authCredentials;\n\n    try {\n      signInResult = await firebase\n        .auth()\n        .signInWithEmailAndPassword(login, password);\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  // TODO - add to the CentralAuthrotity methods\n  // the ability to get swarm users profiles data\n  protected async getUserProfileData(): Promise<\n    Error | ICentralAuthorityUserProfile\n  > {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser: currentUserData } = this;\n\n    // current user is instance\n    // of the firebase current user\n    if (!currentUserData) {\n      // if there is no profile data\n      return {};\n    }\n\n    const { displayName, photoURL, phoneNumber, email } = currentUserData;\n\n    return {\n      name: displayName || null,\n      email: email || null,\n      phone: phoneNumber || null,\n      photoURL: photoURL || null,\n    };\n  }\n\n  protected async returnOnAuthorizedResult(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const userProfile = await this.getUserProfileData();\n\n    if (userProfile instanceof Error) {\n      console.error(userProfile);\n      return new Error('Failed to get profile data');\n    }\n    return {\n      cryptoCredentials,\n      profile: userProfile,\n    };\n  }\n\n  protected mapAppProfileToFirebaseProfileWithoutEmail(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): ICAConnectionFirebaseUserProfile {\n    return {\n      displayName: (profile && profile.name) || null,\n      photoURL: (profile && profile.photoURL) || null,\n    };\n  }\n\n  protected async setProfileDataEmail(email: string): Promise<Error | boolean> {\n    const checkIsConnectedResult = this.checkIfConnected();\n\n    if (checkIsConnectedResult instanceof Error) {\n      return checkIsConnectedResult;\n    }\n    if (!dataValidatorUtilEmail(email)) {\n      return new Error('The email is not valid');\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('Failed to get the user profile data');\n    }\n    if (currentUser.email !== email) {\n      try {\n        await currentUser.updateEmail(email);\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to update the email address');\n      }\n\n      const sendEmailVerificationResult = await this.handleAuthEmailNotVerified();\n\n      if (sendEmailVerificationResult instanceof Error) {\n        console.error(sendEmailVerificationResult);\n        return new Error('Failed to update the email address');\n      }\n      // TODO - if the user was authentificated by OAuth\n      // it is necessary to invoke the reauthentificate method\n      // of the Firebase\n      const logOutResult = await this.signOut();\n\n      if (logOutResult instanceof Error) {\n        console.error(logOutResult);\n        return new Error('Failed to log out');\n      }\n      return true;\n    }\n    return true;\n  }\n\n  /**\n   * At no a phone number can't be updated\n   * @param profileDataPartialWithoutPhoneNumber\n   */\n  protected async setProfileDataWithFirebase(\n    profileDataPartialWithoutPhoneNumber: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('There is no current user profile');\n    }\n\n    const profileMappedForFirebaseWithoutEmail = this.mapAppProfileToFirebaseProfileWithoutEmail(\n      profileDataPartialWithoutPhoneNumber\n    );\n\n    try {\n      await currentUser.updateProfile(profileMappedForFirebaseWithoutEmail);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to set the Firebase profile data');\n    }\n    // TODO - what to do with a phone number\n    return true;\n  }\n\n  // TODO - test it and change to private method\n  protected async setProfileData(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICentralAuthorityUserProfile> {\n    if (isEmptyObject(profile)) {\n      return await this.getUserProfileData();\n    }\n    if (!validateUserProfileData(profile)) {\n      return new Error('The profile is not valid');\n    }\n\n    const resultUpdateProfile = await this.setProfileDataWithFirebase(profile);\n\n    if (resultUpdateProfile instanceof Error) {\n      return resultUpdateProfile;\n    }\n\n    const updatedProfile = await this.getUserProfileData();\n\n    if (updatedProfile instanceof Error) {\n      console.error(updatedProfile);\n      return new Error('Failed to read the updated profile data');\n    }\n\n    const { email } = profile;\n\n    if (email) {\n      // if it is necessary to update email value\n      // it will cause that user must authentificate\n      // once again\n      const updateEmailResult = await this.setProfileDataEmail(email);\n\n      if (updateEmailResult instanceof Error) {\n        return updateEmailResult;\n      }\n      return {\n        ...updatedProfile,\n        email,\n      };\n    }\n    return updatedProfile;\n  }\n\n  protected async handleAuthEmailNotVerified(): Promise<boolean | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('There is no user authorized');\n    }\n\n    try {\n      await currentUser.sendEmailVerification();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to send the email verification link');\n    }\n    return true;\n  }\n\n  /**\n   * check if an account of the user\n   * was verified or not.\n   * If it wasn't, then send an email\n   * to verify it.\n   * @protected\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebase\n   */\n  protected async chekIfVerifiedAccount(): Promise<boolean | Error> {\n    // if the account was validated by email\n    if (this.isVerifiedAccount) {\n      return true;\n    }\n\n    // if the account was not validated by email\n    // send the verification email\n    const sendVerificationEmailResult = await this.handleAuthEmailNotVerified();\n\n    if (sendVerificationEmailResult instanceof Error) {\n      console.error(sendVerificationEmailResult);\n      return new Error('Failed to send the email verification');\n    }\n    return new ErrorExtendedBaseClass(\n      'Please verify the email address',\n      CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n    );\n  }\n\n  protected generateNewCryptoCredentialsForConfigurationProvided = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV1(\n      {\n        authorityProviderURI: databaseURL,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  protected checkUserIdentityIsValidForConfigurationProvided(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Error | TCentralAuthorityUserCryptoCredentials {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n    if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n      return new Error('The crypto credentials value is not valid');\n    }\n\n    const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n    if (!caUserIdentity.isValid) {\n      return new Error('User identity is not valid');\n    }\n\n    const { identityDescription: identityDescriptionParsed } = caUserIdentity;\n\n    if (identityDescriptionParsed instanceof Error) {\n      console.error(identityDescriptionParsed);\n      return new Error('Failed to get description by identity string');\n    }\n    if (\n      identityDescriptionParsed[\n        CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n      ] !== databaseURL\n    ) {\n      return new Error(\n        'Wrong authority provider url got from the identity string'\n      );\n    }\n    return cryptoCredentials;\n  }\n\n  protected async readCryptoCredentialsForTheUserFromDatabase(): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials | null\n  > {\n    const isConnected = this.checkIfConnected();\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n\n    const { connectionWithCredentialsStorage } = this;\n    const credentialsForTheCurrentUser = await connectionWithCredentialsStorage!!.getCredentialsForTheCurrentUser();\n\n    if (credentialsForTheCurrentUser instanceof Error) {\n      console.error(credentialsForTheCurrentUser);\n      return new Error('Failed to read credentials of the current user');\n    }\n    return credentialsForTheCurrentUser;\n  }\n\n  protected setCryptoCredentialsForTheUserToDatabase = async (\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n    const isConnected = this.checkIfConnected();\n    const { connectionWithCredentialsStorage } = this;\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n    // set the new generated credentials forcely\n    // and rewrite the existing\n    // cause it is not valid\n    const setCredentialsResult = await connectionWithCredentialsStorage!!.setUserCredentials(\n      cryptoCredentials\n    );\n\n    if (setCredentialsResult instanceof Error) {\n      return setCredentialsResult;\n    }\n    // if not an error then return\n    // a crypto credentials\n    return setCredentialsResult;\n  };\n\n  protected async createOrSetCredentialsInDB(\n    credentialsGiven?: TCentralAuthorityUserCryptoCredentials,\n    generateNewCryptoCredentialsForConfigurationProvided: () => Promise<\n      Error | TCentralAuthorityUserCryptoCredentials\n    > = this.generateNewCryptoCredentialsForConfigurationProvided,\n    setCryptoCredentialsForTheUserToDatabase: (\n      cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n    ) => Promise<Error | TCentralAuthorityUserCryptoCredentials> = this\n      .setCryptoCredentialsForTheUserToDatabase\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    let attempt = 0;\n    let cryptoCredentials:\n      | TCentralAuthorityUserCryptoCredentials\n      | Error = new Error(\n      'Failed to generate and set a crypto credentials for the user because of unknown reason'\n    );\n    let isSuccess: boolean = false;\n\n    if (\n      typeof generateNewCryptoCredentialsForConfigurationProvided !== 'function'\n    ) {\n      return new Error(\n        'The generateNewCryptoCredentialsForConfigurationProvided argument must be a function'\n      );\n    }\n    if (typeof setCryptoCredentialsForTheUserToDatabase !== 'function') {\n      return new Error(\n        'The setCryptoCredentialsForTheUserToDatabase argument must be a function'\n      );\n    }\n\n    // try a multiple times cause may be\n    // a network errors or user id\n    // is already exists in the database\n    while (\n      attempt < CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS &&\n      !isSuccess\n    ) {\n      cryptoCredentials = credentialsGiven\n        ? // if a credentials provided, then use it\n          credentialsGiven\n        : // if a credentials not provided, generate a new one\n          await generateNewCryptoCredentialsForConfigurationProvided();\n\n      if (cryptoCredentials instanceof Error) {\n        // fialed to generate a new crypto credentials\n        console.error(cryptoCredentials);\n      } else {\n        const setCredentialsResult = await setCryptoCredentialsForTheUserToDatabase(\n          cryptoCredentials\n        );\n\n        if (setCredentialsResult instanceof Error) {\n          console.error(setCredentialsResult);\n          cryptoCredentials = new Error(\n            'Failed to store credentials for the user in the database'\n          );\n        } else {\n          cryptoCredentials = setCredentialsResult;\n          isSuccess = true;\n        }\n      }\n      attempt += 1;\n    }\n    return cryptoCredentials;\n  }\n\n  /**\n   * check if a credentials are already exists\n   * in the remote storage for the user.\n   *\n   * @protected\n   * @returns\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  protected async checkIfCredentialsExistsForTheUser(): Promise<\n    Error | void | TCentralAuthorityUserCryptoCredentials\n  > {\n    const credentialsExistingForTheCurrentUser = await this.readCryptoCredentialsForTheUserFromDatabase();\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      // if something was going wrong when reading\n      // a credentials for the current user\n      // return an Error, because if ignore\n      // and set a new credentials in storage\n      // the data may become inconsistent, cause\n      // credentials is already exists in the database\n      // but an error has occurred once for a some reason.\n      console.error(credentialsExistingForTheCurrentUser);\n      return new Error(\n        'Failed to read credentials for the user from the Firebase database'\n      );\n    }\n\n    if (credentialsExistingForTheCurrentUser) {\n      const credentialsValidationResult = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsExistingForTheCurrentUser\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        console.error('The credentials stored for the user is not valid');\n        // if credentials exists for the user but invalid at now\n        // return an error to inform that the user can't user\n        // this account for authorization.\n        // Credentials was already read by another users\n        // and if we set a new one in the storage it may\n        // cause inconsistency.\n        return new ErrorExtendedBaseClass(\n          \"Sorry, you can't use this account anymore, cause a credentials existing for the account exists and not valid\",\n          CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE\n        );\n      }\n\n      // if the credentials read from the\n      // Firebase storage is valid\n      // for the current configuration return it\n      return credentialsExistingForTheCurrentUser;\n    }\n  }\n\n  protected async createOrReturnExistingCredentialsForUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsExistingForTheCurrentUser = await this.checkIfCredentialsExistsForTheUser();\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      return credentialsExistingForTheCurrentUser;\n    }\n    if (credentialsExistingForTheCurrentUser != null) {\n      // if an existing credentials returned\n      return credentialsExistingForTheCurrentUser;\n    }\n    // if there is no credentials stored for the user\n\n    // generate a new credentials for the user and\n    // set it in the storage. If a credentials was\n    // provided into signUpCredentials and valid, it will be used\n    // instead of generating a new one.\n    const newCredentialsGenerated = await this.generateAndSetCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (newCredentialsGenerated instanceof Error) {\n      console.error(newCredentialsGenerated);\n      return new Error(\n        'Failed to generate or set a crypto credentials for the user'\n      );\n    }\n    return newCredentialsGenerated;\n  }\n\n  protected async signIn(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<boolean | Error> {\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      firebaseCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    // try to sign in with the credentials, then try to sign up\n    return this.singInWithAuthCredentials(firebaseCredentials);\n  }\n\n  protected async signUp(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    // if failed to sign in with the\n    // credentials, then try to\n    // sign up\n    const signUpResult = await this.singUpWithAuthCredentials(\n      signUpCredentials\n    );\n\n    if (signUpResult instanceof Error) {\n      // if sign up failed then return\n      // error that the authorization\n      // failed\n      return this.onAuthorizationFailed(\n        'Failed to authorize on Firebase remote server with the credentials'\n      );\n    }\n    return true;\n  }\n\n  protected async disconnectCredentialsStorage(): Promise<Error | boolean> {\n    const { connectionWithCredentialsStorage } = this;\n\n    if (\n      connectionWithCredentialsStorage &&\n      connectionWithCredentialsStorage.isConnected\n    ) {\n      const res = await connectionWithCredentialsStorage.disconnect();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new Error(\n          'Failed to disconnect from the Firebase credentials storage'\n        );\n      }\n    }\n\n    this.connectionWithCredentialsStorage = undefined;\n    return true;\n  }\n}\n\nexport default CAConnectionWithFirebaseBase;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["1571","1572","1573","1574"],"import firebase from 'firebase';\nimport 'firebase/auth';\nimport memoize from 'lodash.memoize';\nimport CAConnectionWithFirebaseBase from '../central-authority-connection-firebase-base/central-authority-connection-firebase-base';\nimport {\n  ICAConnection,\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { getVersionOfCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_USER_IDENTITY_VERSIONS,\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentityVersion } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase.types.configuration';\nimport { CA_CONNECTION_STATUS } from '../../central-authority-connections-const/central-authority-connections-const';\n\n/**\n *\n * This is the class realized connection with the Firebase.\n * It allows to sign up and authorize on it, set a crypto credentials\n * for the user and read credentials for another users.\n * The versions of a connections to the Firebase must\n * extends this class. This implementation is compilant\n * to the V1 and V2 of the user identity.\n *\n * @export\n * @class CAConnectionWithFirebase\n * @implements {ICAConnection}\n */\nexport class CAConnectionWithFirebaseImplementation\n  extends CAConnectionWithFirebaseBase\n  implements ICAConnection {\n  public get cryptoCredentials():\n    | TCentralAuthorityUserCryptoCredentials\n    | undefined {\n    const { valueofCredentialsSignUpOnAuthorizedSuccess } = this;\n\n    if (valueofCredentialsSignUpOnAuthorizedSuccess) {\n      const { cryptoCredentials } = valueofCredentialsSignUpOnAuthorizedSuccess;\n\n      return cryptoCredentials;\n    }\n  }\n\n  public get authProviderURL() {\n    const { databaseURL } = this;\n\n    return databaseURL instanceof Error ? undefined : databaseURL;\n  }\n\n  /**\n   * the current status of the connection\n   * to the Firebase remote database\n   *\n   * @readonly\n   * @type {CA_CONNECTION_STATUS}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public get status(): CA_CONNECTION_STATUS {\n    const { isConnected, isAuthorized, isAnonymousely } = this;\n\n    if (!isConnected) {\n      return CA_CONNECTION_STATUS.DISCONNECTED;\n    }\n    if (isAuthorized) {\n      return CA_CONNECTION_STATUS.AUTHORIZED;\n    }\n    if (isAnonymousely) {\n      return CA_CONNECTION_STATUS.CONNECTED;\n    }\n    return CA_CONNECTION_STATUS.DISCONNECTED;\n  }\n\n  /**\n   * whether the user is connected anonymousely\n   * or not. User must be authorized or connected\n   * anonymousely\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected isAnonymousely = false;\n\n  protected userLogin?: string;\n\n  /**\n   * list with identity versions supported by the connection\n   *\n   * @type {Array<TUserIdentityVersion>}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected readonly supportedVersions: Array<TUserIdentityVersion> = [\n    CA_USER_IDENTITY_VERSIONS['01'],\n    CA_USER_IDENTITY_VERSIONS['02'],\n  ];\n\n  /**\n   * checks whether the identity version\n   * is supported by the connection\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public isVersionSupported = memoize(\n    (version: TUserIdentityVersion): boolean =>\n      this.supportedVersions.includes(version)\n  );\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   * To read credentials of another user authorization is not\n   * necessary.\n   * Connection will be established in the anonymous mode\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase\n  ): Promise<boolean | Error> {\n    // if there is an active apps exists then it is necessary\n    // to provide the app name, elswere the Firebase will throw\n    // an error.\n    const appName = firebase.apps.length\n      ? configuration.databaseURL\n      : undefined;\n    const resultConnection = await super.connect(configuration, appName);\n\n    if (resultConnection instanceof Error) {\n      return resultConnection;\n    }\n    try {\n      const connectAnonymouselyResult = await firebase\n        .auth()\n        .signInAnonymously();\n\n      if (connectAnonymouselyResult instanceof Error) {\n        return connectAnonymouselyResult;\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect anonymousely');\n    }\n\n    const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n    if (connectWithStorageResult instanceof Error) {\n      console.error(connectWithStorageResult);\n      return new Error('Failed to connect to the credentials storage');\n    }\n    this.setIsAnonymousely();\n    return resultConnection;\n  }\n\n  /**\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login/email/uuid.\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const { status } = this;\n\n    if (status !== CA_CONNECTION_STATUS.DISCONNECTED) {\n      const { connectionWithCredentialsStorage } = this;\n\n      return connectionWithCredentialsStorage!.getUserCredentials(userId);\n    }\n    return new Error('Not connected to the Firebase');\n  }\n\n  /**\n   * @param {ICAConnectionSignUpCredentials} firebaseCredentials\n   * @param firebaseCredentials.login - there must be an email to authorize with a Firebase account\n   * @param firebaseCredentials.password - password used for encrypt a sensitive data and authorize\n   * in the Firebase account\n   * @param profile - if provided then the user profile will be set in firebase\n   */\n  public async authorize(\n    firebaseCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return this.onAuthorizationFailed(isConnected);\n    }\n\n    let authHandleResult;\n    const { isAuthorized } = this;\n\n    if (isAuthorized) {\n      authHandleResult = this.valueofCredentialsSignUpOnAuthorizedSuccess!!;\n    } else {\n      // try to sign in with the credentials, then try to sign up\n      // const userLoggedPromise = this.waitingUserInit();\n      const signInResult = await this.signIn(firebaseCredentials);\n\n      if (signInResult instanceof Error) {\n        console.warn('Failed to sign in with the credentials given');\n\n        // if failed to sign in with the credentials\n        // try to sign up\n        const signUpResult = await this.signUp(firebaseCredentials);\n\n        if (signUpResult instanceof Error) {\n          console.error(signUpResult);\n          return this.onAuthorizationFailed('The user was failed to sign up');\n        }\n      }\n\n      // const user = await userLoggedPromise;\n      // if (!user) {\n      //   return new Error('Failed to get the user authorized');\n      // }\n      // if (user instanceof Error) {\n      //   return new Error('Error on login');\n      // }\n      // if (!user.emailVerified) {\n\n      // check if the account was verfied by the user\n      const isVerifiedResult = await this.chekIfVerifiedAccount();\n\n      if (isVerifiedResult instanceof Error) {\n        console.error('The account is not verified');\n        return this.onAuthorizationFailed(isVerifiedResult);\n      }\n      //}\n\n      const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n      if (connectWithStorageResult instanceof Error) {\n        console.error(connectWithStorageResult);\n        return new Error('Failed to connect to the credentials storage');\n      }\n      // set the user login to use it to generate\n      // crypto credentials\n      this.setUserLogin(firebaseCredentials.login);\n\n      // create a new credentnials for the user or return\n      // an existing.\n      // if a crytpto credentials provided in signUpCredentials\n      // it will be used to set in the Firebase credentials\n      // storage\n      const cryptoCredentials = await this.createOrReturnExistingCredentialsForUser(\n        firebaseCredentials\n      );\n\n      if (cryptoCredentials instanceof Error) {\n        console.error('Failed to get a crypto credentials valid for the user');\n        return this.onAuthorizationFailed(cryptoCredentials);\n      }\n\n      // give user's profile\n      // with a credentials\n      authHandleResult = await this.returnOnAuthorizedResult(cryptoCredentials);\n    }\n\n    if (authHandleResult instanceof Error) {\n      return this.onAuthorizationFailed(authHandleResult);\n    }\n    // if a profile data is necessary to be set\n    // by a profile data from the arguments given\n    if (profile && !isEmptyObject(profile)) {\n      const setProfileResult = await this.setProfileData(profile);\n\n      if (setProfileResult instanceof Error) {\n        console.error(setProfileResult);\n        return this.onAuthorizationFailed('Failed to set the profile data');\n      }\n\n      // set porofile is the user's profile\n      // data stored in the firebase\n      authHandleResult = {\n        profile: setProfileResult,\n        // TODO it is necessry to set this credentials in the database\n        cryptoCredentials: authHandleResult.cryptoCredentials,\n      };\n    }\n    // set the authentification success\n    // result. To return it on the second authorization\n    // request\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authHandleResult;\n    this.setValueofCredentialsSignUpOnAuthorizedSuccess(authHandleResult);\n    this.unsetIsAnonymousely();\n    return authHandleResult;\n  }\n\n  /**\n   * disconnect from the app and sign out\n   * if authorized\n   *\n   * @returns\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public async disconnect() {\n    const { app } = this;\n    if (!app) {\n      return;\n    }\n    if ((app as any).isDeleted_) {\n      return;\n    }\n    if (this.status === CA_CONNECTION_STATUS.AUTHORIZED) {\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        return signOutResult;\n      }\n      if (signOutResult !== true) {\n        return new Error('An unknown error has occurred while sign out');\n      }\n    }\n    return this.disconnectFromTheApp();\n  }\n\n  public async delete(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (currentUser instanceof Error) {\n      console.error(currentUser);\n      return new Error('Failed to read the current user');\n    }\n    if (currentUser == null) {\n      return new Error('There is no current user');\n    }\n\n    // try to sign in with the credentials.\n    // it is required by the firebase to sign in before\n    // delete the user.\n    const signInResult = await this.signIn(firebaseCredentials);\n\n    if (signInResult instanceof Error) {\n      console.error('Failed to sign in before the user deletion');\n      return signInResult;\n    }\n\n    try {\n      const result = (await currentUser.delete()) as unknown; // or maybe deleteWithCompletion method\n\n      if (result instanceof Error) {\n        console.error(result);\n        return new Error('Failed to delete the user from the firebase');\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to delete the user from the authority');\n    }\n\n    // disconnection from the firebase\n    // is not necessry cause the firebase\n    // disconnects automatically if the user\n    // delete himself\n    return true;\n  }\n\n  /**\n   * set that connected anonymousely\n   * to the Firebase\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setIsAnonymousely() {\n    this.isAnonymousely = true;\n  }\n\n  /**\n   * unset that connected to the Firebase\n   * anonymousely\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected unsetIsAnonymousely() {\n    this.isAnonymousely = false;\n  }\n\n  protected setValueofCredentialsSignUpOnAuthorizedSuccess(\n    authResult: ICAConnectionUserAuthorizedResult\n  ) {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authResult;\n  }\n\n  protected unsetValueofCredentialsSignUpOnAuthorizedSuccess() {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  /**\n   * set identity versions which are\n   * supported by the connection\n   * instance\n   *\n   * @protected\n   * @param {Array<TUserIdentityVersion>} [supportedVersions]\n   * @returns {(Error | void)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setVersionsSupported(\n    supportedVersions?: Array<TUserIdentityVersion>\n  ): Error | void {\n    if (supportedVersions instanceof Array) {\n      const len = supportedVersions.length;\n      let idx = 0;\n      let version;\n\n      for (; idx++; len < idx) {\n        version = supportedVersions[idx];\n        if (validateUserIdentityVersion(version)) {\n          this.supportedVersions.push(version);\n        }\n        return new Error('The version is not supproted');\n      }\n    }\n    return new Error('The argument must be an Array');\n  }\n\n  protected setUserLogin(login: string) {\n    this.userLogin = login;\n  }\n\n  /**\n   * this method generates credentials compilant to the version\n   * version 2 of the user identity. The firebase app user uid\n   * is used as the user id.\n   *\n   * @protected\n   * @returns {(Promise<\n   *     Error | TCentralAuthorityUserCryptoCredentials\n   *   >)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected generateNewCryptoCredentialsForConfigurationProvidedV2 = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL, currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('The user is not defined');\n    }\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV2(\n      {\n        [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: databaseURL,\n        [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: currentUser.uid,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  /**\n   * substitute the method to support v2 identity\n   *\n   * @protected\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @returns {(Promise<Error | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    const { cryptoCredentials } = signUpCredentials;\n    const V1 = CA_USER_IDENTITY_VERSIONS['01'];\n    let credentialsForV1 = false;\n\n    if (this.isVersionSupported(V1)) {\n      credentialsForV1 =\n        CA_USER_IDENTITY_VERSION_CURRENT === CA_USER_IDENTITY_VERSIONS['01'];\n\n      if (cryptoCredentials) {\n        // check a version of the credentials\n        // to decide what to do next\n        const cryptoCredentialsVersion = getVersionOfCryptoCredentials(\n          cryptoCredentials\n        );\n\n        if (cryptoCredentialsVersion instanceof Error) {\n          console.error(cryptoCredentialsVersion);\n          return new Error(\n            'Failed to define a version of the crypto credentials'\n          );\n        }\n        if (cryptoCredentialsVersion === CA_USER_IDENTITY_VERSIONS['01']) {\n          // if the credentials version is 01 we may use the\n          // current implementation cause it is fully\n          // compilant to that version\n          credentialsForV1 = true;\n        } else {\n          credentialsForV1 = false;\n        }\n      }\n      // if a credentials for the V1 must be generated and set\n      if (credentialsForV1 === true) {\n        return this.createOrSetCredentialsInDB(cryptoCredentials);\n      }\n    }\n    // if the version is not 01, then provide another implementations\n    // of the methods to generate and set the crypto credentials\n    return this.createOrSetCredentialsInDB(\n      cryptoCredentials,\n      this.generateNewCryptoCredentialsForConfigurationProvidedV2\n    );\n  }\n\n  /**\n   * disconnect from the Firebase app\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async disconnectFromTheApp(): Promise<Error | void> {\n    this.unsetIsAnonymousely();\n    this.unsetValueofCredentialsSignUpOnAuthorizedSuccess();\n\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    if (app) {\n      try {\n        // delete the application to allow connect to the Firebase with the same settings\n        await app.delete();\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to disconnect from the Firebase app');\n      }\n    } else {\n      return new Error('There is no active Firebase App instance to close');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseImplementation;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["1575","1576","1577","1578","1579"],"import { CAConnectionWithFirebaseUtilDatabase } from '../central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport {\n  getUserIdentityByCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK,\n} from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport {\n  ICAConnectionFirebase,\n  ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure,\n} from './central-authority-connection-firebase-utils.credentials-storage.types';\nimport { encodeForFirebaseKey } from 'utils/firebase-utils/firebase-utils';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsValidExportedCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n/**\n * This class is used for storing\n * and reading the user's credentials.\n * It also used for reading\n * credentials of another user from the\n * Firebase remote database.\n * @export\n * @class CAConnectionFirestoreUtilsCredentialsStrorage\n * @extends {CAConnectionWithFirebaseUtilDatabase}\n */\nexport class CAConnectionFirestoreUtilsCredentialsStrorage extends CAConnectionWithFirebaseUtilDatabase {\n  protected connectionToFirebase?: ICAConnectionFirebase;\n\n  protected get firebaseUserData(): firebase.User | null | Error {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { app } = this;\n\n    try {\n      return app!!.auth().currentUser;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected get firebaseUserId(): string | Error {\n    const { firebaseUserData: userData } = this;\n\n    if (userData instanceof Error) {\n      console.error(userData);\n      return new Error('Failed to read the user data from a firebase');\n    }\n    if (userData == null) {\n      return new Error('There is no user data');\n    }\n    try {\n      return userData.uid;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  constructor(connectionToFirebase: ICAConnectionFirebase) {\n    super();\n\n    this.setUpConnection(connectionToFirebase);\n  }\n\n  /**\n   * returns a string will used to store/read value of\n   * the user credentials\n   * @protected\n   * @param {string} userId\n   * @returns {string}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected getCredentialsKeyByUserId(userId: string): string {\n    return `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${encodeForFirebaseKey(\n      userId\n    )}`;\n  }\n\n  protected checkIsConnected(): boolean | Error {\n    const isConnectedToDatabase = super.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { app, connectionToFirebase } = this;\n\n    if (!connectionToFirebase) {\n      return new Error(\n        'There is no instance implements a connection to the Firebase application'\n      );\n    }\n    if (!connectionToFirebase.isConnected) {\n      return new Error(\n        'There is no active connection to the firebase appliction'\n      );\n    }\n    if (!app) {\n      return new Error('There is no app connection');\n    }\n    return true;\n  }\n\n  protected checkIsAuthorized(): boolean | Error {\n    const isConnectedToDatabase = this.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { firebaseUserId, connectionToFirebase } = this;\n\n    if (!connectionToFirebase || !connectionToFirebase.isUserSignedIn) {\n      return new Error(\n        'The user is not authorized in the Firebase application'\n      );\n    }\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('The user is not authorized');\n    }\n    return true;\n  }\n\n  protected setUpConnection(connectionToFirebase: ICAConnectionFirebase) {\n    this.connectionToFirebase = connectionToFirebase;\n\n    const app = connectionToFirebase.getApp();\n\n    if (!app) {\n      throw new Error(\n        'There is no insatnce which implements a connection to the Firebase app'\n      );\n    }\n    this.app = app;\n  }\n\n  /**\n   *\n   * check if a credentials set in the storage\n   * are in the valid format\n   * @protected\n   * @param {*} storedCredentialsValue\n   * @returns {storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected checkStoredCredentialsFormat(\n    storedCredentialsValue: any\n  ): storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n    if (storedCredentialsValue instanceof Error) {\n      console.error(storedCredentialsValue);\n      return false;\n    }\n    if (storedCredentialsValue && typeof storedCredentialsValue === 'object') {\n      const {\n        credentials,\n        [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseId,\n      } = storedCredentialsValue;\n\n      // an id set for the user by the Firebase\n      if (typeof firebaseId === 'string') {\n        if (checkIsValidExportedCryptoCredentialsToString(credentials)) {\n          return true;\n        }\n        console.error(\n          \"Credentials are't exists or invalid in the stored credentials\"\n        );\n      } else {\n        console.error(\n          'Firebase user id is not valid in the stored credentials'\n        );\n      }\n    }\n    return false;\n  }\n\n  protected async getCredentialsByValueStored(\n    storedCredentialsValue: any\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (storedCredentialsValue == null) {\n      return null;\n    }\n    if (storedCredentialsValue instanceof Error) {\n      return storedCredentialsValue;\n    }\n    if (!this.checkStoredCredentialsFormat(storedCredentialsValue)) {\n      return new Error('the value stored have an unknown format');\n    }\n\n    const { credentials: exportedCredentials } = storedCredentialsValue;\n    const importedCredentials = await importCryptoCredentialsFromAString(\n      exportedCredentials\n    );\n\n    if (importedCredentials instanceof Error) {\n      console.error(importedCredentials);\n      return new Error('Failed to import credentials value stored');\n    }\n    return importedCredentials;\n  }\n\n  /**\n   *\n   * filter a value stored for the user key\n   * to get a value of the credentials\n   * for the user\n   * @protected\n   * @param {{\n   *     [key: string]: any;\n   *   }} [valueStored]\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | null | Error>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected async filterCredentialsValues(valueStored?: {\n    [key: string]: any;\n  }): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (!valueStored) {\n      return null;\n    }\n    if (valueStored instanceof Error) {\n      return valueStored;\n    }\n\n    const keys = Object.keys(valueStored);\n\n    // if an empty object\n    if (keys.length === 0) {\n      return null;\n    }\n\n    const len = Math.min(\n      keys.length,\n      CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK\n    );\n    let idx = 0;\n    let keyValueStored;\n    let valueValueStored;\n    let credentialsImported;\n\n    // for each property of the value stored\n    // check wherether it is a valid\n    // crypto credentials\n    for (; idx < len; idx++) {\n      keyValueStored = keys[idx];\n      valueValueStored = valueStored[keyValueStored];\n      credentialsImported = await this.getCredentialsByValueStored(\n        valueValueStored\n      );\n\n      if (!(credentialsImported instanceof Error)) {\n        return credentialsImported;\n      }\n    }\n    return null;\n  }\n\n  // check if there is a credentials for the current user is exists\n  // and return it if exists\n  public async getCredentialsForTheCurrentUser(): Promise<\n    Error | null | TCentralAuthorityUserCryptoCredentials\n  > {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no connection to the database server');\n    }\n    try {\n      // read a value storerd as user's\n      // credentials in the database\n      const snapshot = await database\n        .ref(CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX)\n        .orderByChild(\n          CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY\n        )\n        .equalTo(firebaseUserId)\n        .once('value');\n\n      if (snapshot.exists()) {\n        const valueStored = snapshot.val();\n        return this.filterCredentialsValues(valueStored);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the user data from the database');\n    }\n    return null;\n  }\n\n  // store the credentials value\n  // for the current user\n  public async setUserCredentials(\n    credentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    // check if a credentials value is\n    // already exists for the user\n    const credentialsForTheCurrentUser = await this.getCredentialsForTheCurrentUser();\n\n    if (\n      credentialsForTheCurrentUser != null &&\n      !(credentialsForTheCurrentUser instanceof Error)\n    ) {\n      // if a credentials are already stored for the user\n      // return it\n      return credentialsForTheCurrentUser;\n    }\n\n    const userId = getUserIdentityByCryptoCredentials(credentials);\n\n    if (userId instanceof Error) {\n      console.error(userId);\n      return new Error(\"Failed to get a user's identity from the credentials\");\n    }\n\n    const exportedCryptoCredentials = await exportCryptoCredentialsToString(\n      credentials\n    );\n\n    if (exportedCryptoCredentials instanceof Error) {\n      console.error(exportedCryptoCredentials);\n      return new Error('Failed to export the crypto credentials value');\n    }\n\n    // check if the user id is not exists in the database\n    // user id is a user identity\n    // TODO - it's necessary to implement on the Firebase server to check whether the user can update credentials for the userid\n    const credentialsForTheUserId = await this.getUserCredentials(userId);\n\n    if (\n      credentialsForTheUserId != null &&\n      !(credentialsForTheUserId instanceof Error)\n    ) {\n      return new Error(\n        'A crypto credentials is already exists for the user id'\n      );\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storeResult = await this.setValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue, {\n      credentials: exportedCryptoCredentials,\n      [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseUserId,\n    });\n\n    if (storeResult instanceof Error) {\n      console.error(storeResult);\n      return new Error('Failed to store the credentials in the database');\n    }\n    return credentials;\n  }\n\n  /**\n   *\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login(email)\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    if (!this.checkIsConnected()) {\n      return new Error('There is no active connection to the Firebase');\n    }\n    if (!validateUserIdentity(userId)) {\n      return new Error('The user identity is not valid');\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storedCredentialsValue = await this.getValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue);\n\n    return this.getCredentialsByValueStored(storedCredentialsValue);\n  }\n\n  // disconnect from the database\n  public async disconnect(): Promise<Error | boolean> {\n    const isConnected = this.checkIsConnected();\n\n    if (!isConnected) {\n      return true;\n    }\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no active database connection');\n    }\n    try {\n      await database.goOffline();\n    } catch (err) {\n      console.error();\n      return new Error('Failed to disconnect from the databases');\n    }\n    return true;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["1580"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["1581","1582","1583","1584","1585","1586","1587"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["1588"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport { isURL } from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return isURL(configuration.databaseURL);\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["1589","1590"],"import { normalizeUrl } from 'utils/common-utils/common-utils-url';\nimport {\n  ICAConnectionsPoolOptions,\n  ICAConnectionsPoolConnections,\n  IAuthProviderConnectionConfiguration,\n  ICAConnectionsPoolCurrentConnections,\n  ICAConnectionPool,\n} from './central-authority-connections-pool.types';\nimport {\n  normalizeCAConnectionAuthProviderURL,\n  validateCAConnectionAuthProviderType,\n  validateCAConnectionAuthProviderConnectionConfiguration,\n  validateCAConnectionAuthProviderUrl,\n} from '../central-authority-connections-utils/central-authority-connections-utils';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { getConnectionConstructorAuthProviderType } from '../central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from '../central-authority-connections-const/central-authority-connections-const';\nimport { ICAConnectionUserAuthorizedResult } from '../central-authority-connections.types';\nimport { TCAuthProviderIdentifier } from '../../central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionPoolAuthResult } from './central-authority-connections-pool.types';\nimport { checkIsValidCryptoCredentials } from '../../central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from '../../central-authority-class-user-identity/central-authority-class-user-identity';\nimport { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from '../../central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { compareAuthProvidersIdentities } from '../../central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\n/**\n * This is used to establish connections\n * with auth providers to collect a\n * crypto keys of swarm users.\n *\n * @export\n * @class CAConnectionsPool\n */\nexport class CAConnectionsPool implements ICAConnectionPool {\n  public userAuthResult?: ICAConnectionPoolAuthResult;\n\n  /**\n   * States of connections to auth\n   * providers\n   *\n   * @protected\n   * @type {ICAConnectionsPoolConnections}\n   * @memberof CAConnectionsPool\n   */\n  protected providersConnectionState: ICAConnectionsPoolConnections = {};\n\n  /**\n   * connection throught which the user\n   * is authorized on auth provider service.\n   * Search trought all the connections\n   * connection with the auth flag.\n   *\n   * @readonly\n   * @protected\n   * @type {(ICAConnection | void)}\n   * @memberof CAConnectionsPool\n   */\n  protected get authConnection(): {\n    connection: ICAConnection;\n    authProviderId: TCAuthProviderIdentifier;\n  } | void {\n    const { providersConnectionState } = this;\n    const providersConnectionsStates = Object.values(providersConnectionState);\n    let idx = 0;\n    let authProviderConnection;\n    let authProviderUrl;\n    const len = providersConnectionsStates.length;\n\n    while (idx < len) {\n      ({\n        connection: authProviderConnection,\n        caProviderUrl: authProviderUrl,\n      } = providersConnectionsStates[idx++]);\n      if (\n        authProviderConnection &&\n        authProviderConnection.status === CA_CONNECTION_STATUS.AUTHORIZED\n      ) {\n        return {\n          connection: authProviderConnection,\n          authProviderId:\n            authProviderUrl ||\n            (authProviderConnection.authProviderURL as string),\n        };\n      }\n    }\n  }\n\n  /**\n   * Creates an instance of CAConnectionsPool.\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  constructor(options: ICAConnectionsPoolOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * at now it is alias for the connect method\n   *\n   * @param {TCAAuthProviderIdentity} authProvider\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  public getConnection(authProvider: TCAAuthProviderIdentity) {\n    return this.connect(authProvider);\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider or returns an existing connection\n   * if it is active(status !== DISCONNECTED)\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<ICAConnection | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async connect(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<ICAConnection | Error> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n\n    const currentConnectionWithAuthProvider = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      console.error(currentConnectionWithAuthProvider);\n      return new Error(\n        `Failed to resolve an active connection with the provider ${authProviderUrl}`\n      );\n    }\n    if (currentConnectionWithAuthProvider) {\n      return currentConnectionWithAuthProvider;\n    }\n\n    const connectionWithAuthProvider = await this.connectWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (connectionWithAuthProvider instanceof Error) {\n      return connectionWithAuthProvider;\n    }\n\n    const setConnectionInAuhProviderConnectionStatesStore = this.setConnectionWithAuthProvider(\n      authProviderUrl,\n      connectionWithAuthProvider\n    );\n\n    if (setConnectionInAuhProviderConnectionStatesStore instanceof Error) {\n      console.error(setConnectionInAuhProviderConnectionStatesStore);\n\n      const disconnectResult = await connectionWithAuthProvider.disconnect();\n\n      if (disconnectResult instanceof Error) {\n        console.error(disconnectResult);\n      }\n      return new Error('Failed to set connection with auth provider');\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * authorize on the service or return an existing\n   * connection which is the user authorized through\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @param {Partial<ICentralAuthorityUserProfile>} [profile]\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  public async authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n    if (this.userAuthResult) {\n      // if the user is already authorized on auth provider service\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        console.error(signOutResult);\n        return new Error(\n          'The user is already authorized on the auth provider service, and failed to sign out from it'\n        );\n      }\n    }\n\n    const currentConnectionWithProviderAuthOn = this.authConnection;\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('Failed to normalize the url of the auth provider');\n    }\n    if (currentConnectionWithProviderAuthOn) {\n      const {\n        authProviderId: currentAuthProviderUrl,\n        connection,\n      } = currentConnectionWithProviderAuthOn;\n      const normalizedUrlAuthProviderCurrent = normalizeUrl(\n        currentAuthProviderUrl\n      );\n\n      if (normalizedUrlAuthProviderCurrent !== normalizedUrl) {\n        return new Error(\n          `Already authorized on the ${normalizedUrlAuthProviderCurrent} service, differ from the requested ${authProviderUrl}`\n        );\n      }\n      return connection;\n    }\n\n    const connectionWithAuthProvider = await this.connect(authProviderUrl);\n\n    if (connectionWithAuthProvider instanceof Error) {\n      console.error(connectionWithAuthProvider);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n\n    const authResult = await connectionWithAuthProvider.authorize(\n      signUpCredentials,\n      profile\n    );\n\n    if (authResult instanceof Error) {\n      const disconnectFromTheConnectionResult = await connectionWithAuthProvider.disconnect();\n\n      if (disconnectFromTheConnectionResult instanceof Error) {\n        console.error(disconnectFromTheConnectionResult);\n        console.error(\n          new Error(\n            'Failed to disconnect form the auth provider which failed to authorize on'\n          )\n        );\n      }\n      console.error(authResult);\n      return new Error(\n        `Failed to authorize with the auth provider ${authProviderUrl}`\n      );\n    }\n    this.setAuthResult(authProviderUrl, authResult);\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * disconnect from the auth provider.\n   * succed even if not connected to.\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<void | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async disconnect(\n    authProviderUrl: TCAuthProviderIdentifier\n  ): Promise<void | Error> {\n    const currentConnectionWithAuthProvider = this.getConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      return currentConnectionWithAuthProvider;\n    }\n    if (currentConnectionWithAuthProvider) {\n      const disconnectionResult = await currentConnectionWithAuthProvider.disconnect();\n\n      if (disconnectionResult instanceof Error) {\n        console.error(disconnectionResult);\n        return new Error(\n          `Failed to disconnect from the auth provider ${authProviderUrl}`\n        );\n      }\n    }\n    return this.unsetConnectionWithAuthProvider(authProviderUrl);\n  }\n\n  /**\n   * disconnect from all the active connections\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async close(): Promise<Error | void> {\n    const { providersConnectionState } = this;\n    const providerConnectionStateValues = Object.values(\n      providersConnectionState\n    );\n    const disconnectResults = [];\n    const len = providerConnectionStateValues.length;\n    let idx = 0;\n    let connectionToAuthProviderStateDesc;\n    let connectionToAuthProvider;\n    let errorMessage = '';\n\n    while (idx < len) {\n      connectionToAuthProviderStateDesc = providerConnectionStateValues[idx++];\n      ({\n        connection: connectionToAuthProvider,\n      } = connectionToAuthProviderStateDesc);\n      idx += 1;\n      if (connectionToAuthProvider) {\n        const connectionToAuthProviderUrl =\n          connectionToAuthProviderStateDesc.caProviderUrl;\n\n        if (\n          connectionToAuthProvider.status !== CA_CONNECTION_STATUS.DISCONNECTED\n        ) {\n          disconnectResults.push(\n            connectionToAuthProvider\n              .disconnect()\n              .then((result) => {\n                if (result instanceof Error) {\n                  console.error(result);\n                  errorMessage += `/nThe error has occured when disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n                } else {\n                  this.unsetConnectionWithAuthProvider(\n                    connectionToAuthProviderUrl\n                  );\n                }\n              })\n              .catch((err) => {\n                console.error(err);\n                errorMessage += `/nCrashed while disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n              })\n          );\n        }\n        this.unsetConnectionWithAuthProvider(connectionToAuthProviderUrl);\n      }\n    }\n    // wait till all connections will be pro\n    await Promise.all(disconnectResults);\n    if (errorMessage) {\n      return new Error(errorMessage);\n    }\n  }\n\n  /**\n   * sign out from the auth provider service\n   * which is currently authorized on and close the connection\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async signOut(): Promise<Error | void> {\n    const { authConnection } = this;\n\n    this.unsetAuthResult();\n    if (authConnection) {\n      const { connection, authProviderId: authProviderUrl } = authConnection;\n\n      if (connection) {\n        const disconnectResult = await this.disconnect(authProviderUrl);\n\n        if (disconnectResult instanceof Error) {\n          console.error(disconnectResult);\n          return new Error(\n            `Failed to disconnect from the auth procider ${authProviderUrl} on sign out from it`\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * set the auth result and check the auth provider\n   * in the result is equals to the auth provider id.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderId\n   * @param {ICAConnectionUserAuthorizedResult} authResult\n   * @returns {(Error | void)}\n   * @memberof CAConnectionsPool\n   */\n  protected setAuthResult(\n    authProviderId: TCAAuthProviderIdentity,\n    authResult: ICAConnectionUserAuthorizedResult\n  ): Error | void {\n    const { cryptoCredentials } = authResult;\n    const validationResult = checkIsValidCryptoCredentials(cryptoCredentials);\n\n    if (!validationResult) {\n      return new Error('The crypto credentials are not valid');\n    }\n\n    const userIdentity = new CentralAuthorityIdentity(\n      cryptoCredentials.userIdentity\n    );\n\n    if (userIdentity.identityDescription instanceof Error) {\n      return new Error('The user identity is not valid');\n    }\n    if (\n      !compareAuthProvidersIdentities(\n        userIdentity.identityDescription[\n          CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n        ],\n        authProviderId\n      )\n    ) {\n      return new Error(`\n        The auth provider url from the auth crdentials ${userIdentity.identityDescription[CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]} is not equals to the provider the user authorized on ${authProviderId}\n      `);\n    }\n\n    this.userAuthResult = {\n      ...authResult,\n      authProviderId,\n    };\n  }\n\n  protected unsetAuthResult() {\n    this.userAuthResult = undefined;\n  }\n\n  /**\n   * returns the current state of a connection\n   * to the auth provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnectionsPoolCurrentConnections | undefined | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getAuthProviderStateDesc(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnectionsPoolCurrentConnections | undefined | Error {\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('The url is not valid');\n    }\n\n    const { providersConnectionState } = this;\n\n    return providersConnectionState[normalizedUrl];\n  }\n\n  /**\n   * returns connection which is active\n   * and the status !== DISCONNECTED\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getActiveConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      const { connection } = authProviderState;\n\n      if (\n        connection &&\n        connection.status !== CA_CONNECTION_STATUS.DISCONNECTED\n      ) {\n        return connection;\n      }\n    }\n  }\n\n  /**\n   * returns any connection\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      return authProviderState.connection;\n    }\n  }\n\n  /**\n   * updates the current state of connection\n   * with the auth provider.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolCurrentConnections} authProviderConnectionState\n   * @memberof CAConnectionsPool\n   */\n  protected updateStateAuthProvider(\n    authProviderConnectionState: Partial<\n      ICAConnectionsPoolCurrentConnections\n    > & { caProviderUrl: ICAConnectionsPoolCurrentConnections['caProviderUrl'] }\n  ) {\n    const { caProviderUrl } = authProviderConnectionState;\n\n    if (!caProviderUrl) {\n      return new Error('An url of the auth provider must be specified');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n\n    if (authProviderUrlNormalized instanceof Error) {\n      return authProviderUrlNormalized;\n    }\n\n    const { providersConnectionState } = this;\n    const existingState = providersConnectionState[authProviderUrlNormalized];\n\n    if (!existingState) {\n      providersConnectionState[\n        caProviderUrl\n      ] = authProviderConnectionState as ICAConnectionsPoolCurrentConnections;\n    } else {\n      Object.assign(existingState, authProviderConnectionState);\n    }\n  }\n\n  /**\n   * set an active connection with an\n   * auth provider in the auth\n   * providers state.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnection} connection\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  protected setConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity,\n    connection: ICAConnection\n  ) {\n    const authProviderUrlNormalized = normalizeUrl(authProviderUrl);\n\n    if (authProviderUrlNormalized instanceof Error) {\n      console.error(authProviderUrlNormalized);\n      return new Error('The url is not valid');\n    }\n\n    if (!connection) {\n      return new Error(\n        `Connection with the auth provider ${authProviderUrl} must be specified`\n      );\n    }\n    if (\n      typeof connection.authorize !== 'function' ||\n      typeof connection.connect !== 'function'\n    ) {\n      return new Error('The instance of the CAConnection is not valid');\n    }\n    if (connection.status === CA_CONNECTION_STATUS.DISCONNECTED) {\n      return new Error('The connection must be in active state');\n    }\n\n    const existingConnection = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (existingConnection instanceof Error) {\n      return existingConnection;\n    }\n    if (existingConnection) {\n      return new Error(\n        `Connection with the ${authProviderUrl} is already exists`\n      );\n    }\n    return this.updateStateAuthProvider({\n      connection,\n      caProviderUrl: authProviderUrl,\n    });\n  }\n\n  /**\n   * unset the current connection in the auth provider\n   * connections states store\n   *\n   * @protected\n   * @memberof CAConnectionsPool\n   */\n  protected unsetConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Error | void {\n    return this.updateStateAuthProvider({\n      caProviderUrl: authProviderUrl,\n      connection: undefined,\n    });\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  protected async connectWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection> {\n    const normalizedAuthProviderUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedAuthProviderUrl instanceof Error) {\n      console.error(normalizedAuthProviderUrl);\n      return new Error('The url provided for the auth provider is not valid');\n    }\n\n    const stateOfAuthProvider = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (stateOfAuthProvider instanceof Error) {\n      console.error(stateOfAuthProvider);\n      return new Error(\n        `The configuration for the ${authProviderUrl} is not valid`\n      );\n    }\n    if (!stateOfAuthProvider) {\n      return new Error(`The url provided ${authProviderUrl} is not known`);\n    }\n\n    const { options, caProvider } = stateOfAuthProvider;\n\n    if (!options) {\n      return new Error(\n        `Connection options is not specified for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (caProvider == null) {\n      return new Error(\n        'Auth provider type is not specified in the current state'\n      );\n    }\n\n    const ConnectionConstructor = getConnectionConstructorAuthProviderType(\n      caProvider\n    );\n\n    if (!ConnectionConstructor) {\n      return new Error(\n        `There is no constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (ConnectionConstructor instanceof Error) {\n      console.error(ConnectionConstructor);\n      return new Error(\n        `An error has occurred on define constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n\n    let connectionWithAuthProvider;\n    try {\n      connectionWithAuthProvider = new ConnectionConstructor();\n    } catch (err) {\n      console.error(err);\n      return new Error('The error has occurred when construct the connection');\n    }\n\n    const connectionResult = await connectionWithAuthProvider.connect(options);\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * add auth provider in the description\n   * of a state of connections\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration} authProviderConnectionConfiguration\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected addAuthProvider = (\n    authProviderConnectionConfiguration: IAuthProviderConnectionConfiguration\n  ): void => {\n    if (!authProviderConnectionConfiguration) {\n      throw new Error('Configuration for the auth provider is not defined');\n    }\n    if (typeof authProviderConnectionConfiguration !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n\n    const {\n      caProvider,\n      caProviderUrl,\n      options,\n    } = authProviderConnectionConfiguration;\n\n    if (caProvider == null) {\n      throw new Error('Provider type must be defined');\n    }\n    if (!validateCAConnectionAuthProviderType(caProvider)) {\n      throw new Error('The auth provider type is wrong');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n    const { providersConnectionState } = this;\n\n    if (authProviderUrlNormalized instanceof Error) {\n      throw authProviderUrlNormalized;\n    }\n    if (providersConnectionState[authProviderUrlNormalized]) {\n      throw new Error(\n        `Configuration was already set for the auth provider ${authProviderUrlNormalized}`\n      );\n    }\n    if (!options) {\n      throw new Error(\n        `Configuration for the auth provider ${authProviderUrlNormalized} is not specified`\n      );\n    }\n    if (\n      !validateCAConnectionAuthProviderConnectionConfiguration(\n        caProvider,\n        options\n      )\n    ) {\n      throw new Error(\n        `The configuration for the auth provider ${authProviderUrlNormalized} is not valid`\n      );\n    }\n\n    const setAuthProviderConnectionStateResult = this.updateStateAuthProvider({\n      caProvider,\n      caProviderUrl,\n      options,\n    });\n\n    if (setAuthProviderConnectionStateResult instanceof Error) {\n      throw setAuthProviderConnectionStateResult;\n    }\n  };\n\n  /**\n   * set options for auth providers connections constructors\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration[]} providers\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptionsOfAuthProviders(\n    providers: IAuthProviderConnectionConfiguration[]\n  ): void {\n    if (!providers) {\n      throw new Error('Providers property must be specified');\n    }\n    if (!(providers instanceof Array)) {\n      throw new Error('Providers must be an instance of Array');\n    }\n    if (!providers.length) {\n      throw new Error('Providers property must not be an empty array');\n    }\n    // add each auth provider configuration\n    // to connect on in a feature\n    providers.forEach(this.addAuthProvider);\n  }\n\n  /**\n   * set options for the instance.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptions(options: ICAConnectionsPoolOptions): void {\n    const { providers } = options;\n\n    this.setOptionsOfAuthProviders(providers);\n  }\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["1591"],"import { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase/central-authority-connection-firebase.types.configuration';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  TCAConnectionsAuthProviderConnectionOptions,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { CA_CONNECTION_AUTH_PROVIDERS } from '../central-authority-connections.const';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAConnectionUserAuthorizedResult } from '../central-authority-connections.types';\nimport { TCAuthProviderIdentifier } from '../../central-authority-class-user-identity/central-authority-class-user-identity.types';\n\n/**\n * options to connect with\n * auth provider extended by the provider type\n */\nexport type TAuthProviderConnectionOptions = TCAConnectionsAuthProviderConnectionOptions;\n\n/**\n * configuration to establish connectoin\n * with an auth provider\n */\nexport interface IAuthProviderConnectionConfiguration {\n  options: TAuthProviderConnectionOptions;\n  caProviderUrl: TCAAuthProviderIdentity;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n}\n\n/**\n * options for all known auth\n * providers, to establish connection\n * with any provider is necessary to\n * read swarm user's crypro credentials\n *\n * @export\n * @interface ICAConnectionsPoolOptions\n */\nexport interface ICAConnectionsPoolOptions {\n  providers: IAuthProviderConnectionConfiguration[];\n}\n\n/**\n * description of a connection which is currently\n * established or not.\n * If connection is defined than it means active.\n *\n * @export\n * @interface ICAConnectionsPoolCurrentConnections\n */\nexport interface ICAConnectionsPoolCurrentConnections {\n  options: TAuthProviderConnectionOptions;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n  caProviderUrl: TCAAuthProviderIdentity;\n  connection?: ICAConnection;\n}\n\n/**\n * States of a connections are in here.\n * If connection is established then\n * it's not necessary to establish a new\n * one.\n *\n * @export\n * @interface ICAConnectionsPoolConnections\n */\nexport interface ICAConnectionsPoolConnections {\n  [key: string]: ICAConnectionsPoolCurrentConnections;\n}\n\nexport interface ICAConnectionPoolAuthResult\n  extends ICAConnectionUserAuthorizedResult {\n  authProviderId: TCAuthProviderIdentifier;\n}\n\nexport interface ICAConnectionPool {\n  // will be defined if the user is authorized\n  // on auth provider service, otherwise\n  // it will be undefined.\n  userAuthResult?: ICAConnectionUserAuthorizedResult;\n  // establish a new connection with the auth provider or returns an existing\n  getConnection(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection>;\n  // establish a new connection with the auth provider or returns an existing\n  connect(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection>;\n  // authorize on the auth provider service or return an existing connection authorized on\n  authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection>;\n  // disconnect from the auth provider service\n  disconnect(authProviderUrl: TCAAuthProviderIdentity): Promise<Error | void>;\n  // disconnect from all the connected providers\n  close(): Promise<Error | void>;\n  // sign out from the service currently authorized throught\n  signOut(): Promise<Error | void>;\n}\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["1592","1593"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport { isURL } from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-credentials/central-authority-storage-current-user-credentials.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.types.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["1594","1595","1596","1597"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["1598"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  exportKeyPairAsString as exportKeyPairDataSignAsString,\n  exportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair),\n    exportKeyPairDataSignAsString(signDataKeyPair),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.const.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["1599","1600"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { calcCryptoKeyPairHash } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections/central-authority-connections.types';\nimport { normalizeUrl } from '../../../../utils/common-utils/common-utils-url';\nimport { CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS } from './central-authority-utils-crypto-credentials.const';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  withoutIdentityVersion: boolean = false\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n  if (withoutIdentityVersion) {\n    const userCAIdentity = new CentralAuthorityIdentity(userIdentity);\n    const { id } = userCAIdentity;\n\n    if (id instanceof Error) {\n      return new Error('The identity is not valid');\n    }\n    cryptoCredentialsExported[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME] = id;\n  }\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\n// allow to absent for a private keys in a pairs\nexport const exportCryptoCredentialsToStringWithoutTheCAIdentityVersion = (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> =>\n  exportCryptoCredentialsToString(userCryptoCredentials, true);\n\nexport const compareAuthProvidersIdentities = (\n  ...authProvidersIds: TCAAuthProviderIdentity[]\n): boolean => {\n  const { length: len } = authProvidersIds;\n\n  if (len < 2) {\n    return true;\n  }\n\n  const firstAuthProviderId = normalizeUrl(\n    authProvidersIds[0],\n    CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n  );\n  let idx = 0;\n\n  while (++idx < len) {\n    if (\n      firstAuthProviderId !==\n      normalizeUrl(\n        authProvidersIds[idx],\n        CA_UTILS_CRYPTO_CREDENTIALS_NORMALIZE_URL_OPTIONS\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const cryptoCredentialsBase = credentials[0];\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsBase)) {\n    return new Error('The crypto credentials on index 0 is not valid');\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  const userIdentityBase = new CentralAuthorityIdentity(\n    cryptoCredentialsBase[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n  );\n\n  if (!userIdentityBase.isValid) {\n    return new Error(\n      'The user identity is not valid in the crypto credentials base'\n    );\n  }\n\n  const cryptoCredentialsKeysBase =\n    cryptoCredentialsBase[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n  const cryptoCredentialsEncryptKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.encryptionKeyPair\n  );\n\n  if (cryptoCredentialsEncryptKeyPairHashBase instanceof Error) {\n    return new Error('Failed to calculate hash of the encrypt key pairs base');\n  }\n\n  const cryptoCredentialsSignKeyPairHashBase = await calcCryptoKeyPairHash(\n    cryptoCredentialsKeysBase.signDataKeyPair\n  );\n\n  if (cryptoCredentialsSignKeyPairHashBase instanceof Error) {\n    return new Error(\n      'Failed to calculate hash of the data sign key pairs base'\n    );\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let nextCryptoCredentials = null;\n  let keyPairs = null;\n  let userIdentity = null;\n  let encryptionKeyPairsHash = null;\n  let signPairsHash = null;\n\n  for (; idx < length; idx += 1) {\n    nextCryptoCredentials = credentials[idx];\n\n    if (!checkIsValidCryptoCredentials(nextCryptoCredentials)) {\n      return new Error(`The crypto credentials on index ${idx} is not valid`);\n    }\n\n    userIdentity = new CentralAuthorityIdentity(\n      nextCryptoCredentials[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]\n    );\n\n    if (!userIdentity.isValid) {\n      return new Error(\n        `The user identity is not valid in the crypto credentials on index ${idx}`\n      );\n    }\n    if (userIdentity.id !== userIdentityBase.id) {\n      return new Error(`The user identity are different on index ${idx}`);\n    }\n\n    keyPairs = nextCryptoCredentials[CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME];\n    encryptionKeyPairsHash = await calcCryptoKeyPairHash(\n      keyPairs.encryptionKeyPair\n    );\n\n    if (cryptoCredentialsEncryptKeyPairHashBase !== encryptionKeyPairsHash) {\n      return new Error(\n        `The encryption key pairs are different on index ${idx}`\n      );\n    }\n\n    signPairsHash = await calcCryptoKeyPairHash(keyPairs.signDataKeyPair);\n\n    if (cryptoCredentialsSignKeyPairHashBase !== signPairsHash) {\n      return new Error(`The data sign key pairs are different on index ${idx}`);\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(cryptoKeysExported);\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(cryptoCredentialsExported);\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity | string,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  if (caIdentity instanceof CentralAuthorityIdentity) {\n    if (caIdentity.isValid) {\n      return getExportedAsStringCryptoCredentials(\n        String(caIdentity), // conver it to identity\n        cryptoCredentialsKeyPairs\n      );\n    }\n    return new Error('The CA identity is wrong');\n  }\n  return new Error('The CA identity must be an instance of caIdentity');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n\nexport const getUserIdentityVersion = (\n  userIdentity: TCentralAuthorityUserIdentity | CentralAuthorityIdentity\n): TUserIdentityVersion | Error => {\n  if (\n    !(userIdentity instanceof CentralAuthorityIdentity) &&\n    typeof userIdentity !== 'string'\n  ) {\n    return new Error(\n      'The userIdentity must be a string or an instance of the CentralAuthorityIdentity class'\n    );\n  }\n\n  const userIdentityObj = new CentralAuthorityIdentity(userIdentity);\n\n  if (!userIdentityObj.isValid) {\n    return new Error('The user identity is not valid');\n  }\n  return userIdentityObj.version;\n};\n\nexport const getVersionOfCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): TUserIdentityVersion | Error => {\n  const userIdentity = getUserIdentityByCryptoCredentials(cryptoCredentials);\n\n  if (userIdentity instanceof Error) {\n    return userIdentity;\n  }\n  return getUserIdentityVersion(userIdentity);\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["1601","1602","1603","1604","1605","1606"],"import {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserCryptoCredentialsExported,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsCryptoKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair by a function provided\n * and user's identity\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsWithFunc = (\n  cryptoCredentials: any,\n  credentialsValidationFunction: (c: any) => boolean\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!credentialsValidationFunction(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, cause the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (\n    !checkIsValidCryptoCredentialsWithFunc(\n      cryptoCredentials,\n      checkIsValidExportedCryptoCredentialsToString\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/Projects/protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["1607"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/Projects/protocol/src/classes/open-storage/open-storage.const.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/open-storage.ts",[],"/home/paul/Projects/protocol/src/classes/open-storage/open-storage.types.ts",[],"/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["1608","1609","1610","1611","1612","1613"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["1614","1615"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/Projects/protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.ts",["1616","1617","1618"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SecretStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/Projects/protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.const.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-login/secret-storage-class-utils-login.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main.ts",["1619"],"import { ISecretStoreCredentialsCryptoKey } from './../../secret-storage-class.types';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const checkIsStorageProviderInstance = (\n  storageProviderInstance: any\n): Error | boolean => {\n  if (!storageProviderInstance || typeof storageProviderInstance !== 'object') {\n    return new Error('Storage provider must be an object');\n  }\n\n  const { connect, get, set, disconnect } = storageProviderInstance;\n\n  if (\n    typeof connect !== 'function' ||\n    typeof get !== 'function' ||\n    typeof set !== 'function' ||\n    typeof disconnect !== 'function'\n  ) {\n    return new Error(\n      'The instance has a wrong implemntation of a StorageProvider interface'\n    );\n  }\n  return true;\n};\n\nexport const validateCryptoKeyCredentials = (\n  credentials?: ISecretStoreCredentialsCryptoKey\n): void | Error => {\n  if (!credentials) {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must not be empty'\n    );\n  }\n  if (typeof credentials !== 'object') {\n    return new Error(\n      'validateCryptoKeyCredentials::Credentials must be an object'\n    );\n  }\n\n  const { key } = credentials;\n\n  if (!key) {\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be provided to authorize'\n    );\n  }\n  if (key instanceof CryptoKey) {\n    return;\n  }\n  return new Error(\n    'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n  );\n};\n","/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-password/secret-storage-class-utils-password.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.ts",[],"/home/paul/Projects/protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-level-js-provider/secret-storage-level-js-provider.ts",["1620","1621"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../storage-providers.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const dbNameRes =\n      dbName || SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n    const levelStorage = levelup(leveljs(dbNameRes));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelup(leveljs(dbNameRes));\n  }\n}\n","/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-forage-provider/secret-storage-local-forage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.const.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-providers.types.ts",[],"/home/paul/Projects/protocol/src/classes/storage-providers/storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["1622"],"import Multiaddr from 'multiaddr';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\nimport { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES } from './swarm-connection-class-subclass-ipfs.signal-star.conf';\n\nexport enum SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS {\n  FLOODSUB = 'floodsub',\n  GOSSIPPSUB = 'gossipsub',\n}\n\n//https://github.com/ipfs/js-ipfs/blob/master/doc/config.md#api\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT = {\n  Addresses: {\n    // if a dommain used then '/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'\n    Swarm: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES,\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n    ],\n    API: '',\n    Gateway: '',\n    Delegates: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10,\n    },\n    webRTCStar: {\n      Enabled: true,\n    },\n  },\n  Bootstrap: [\n    ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  ],\n  Pubsub: {\n    Enabled: true,\n    Router: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS.GOSSIPPSUB,\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500,\n    },\n  },\n};\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["1623"],"import { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT } from './swarm-connection-class-subclass-ipfs.browser.conf';\nimport { getLibPeerToPeer } from './swarm-connection-class-subclass-ipfs.libp2p.conf';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL =\n  'https://cdn.jsdelivr.net/npm/ipfs/dist/index.js';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT = {\n  init: {\n    emptyRepo: true, // TODO - set to false\n    //privateKey TODO - create PeerId instance by the user's public and private keys\n  },\n  start: true,\n  pass: '', // TODO - use the password for it,\n  silent: false, // TODO - set true on production\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  preload: {\n    enabled: true,\n    addresses: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  config: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT,\n  libp2p: getLibPeerToPeer,\n};\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT = 2000;\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS = 3;\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["1624"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as WebSocketStar from 'libp2p-websocket-star';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as SECIO from 'libp2p-secio';\nimport * as WStar from 'libp2p-webrtc-star';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebSocketStar transport and give it our PeerId, straight from the ipfs node\n  const wstar = new WStar({\n    id: peerInfo.id,\n  });\n  const wsstar = new WebSocketStar({\n    id: peerInfo.id,\n  });\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  // Websocket connections failed cause CORS policy\n  // const delegatePeerRouterWS = new DelegatedPeerRouter(\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n  // const delegateContentRouterWS = new DelegatedContentRouter(\n  //   peerInfo.id,\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n\n  console.warn('IPFS delegate node config HTTP');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP);\n  console.warn('IPFS delegate node config HTTP-WS');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS);\n\n  // Build and return our libp2p node\n  return new Libp2p({\n    peerInfo,\n    peerBook,\n    /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n    switch: {\n      denyTTL: 2 * 60 * 1e3, // 2 minute base\n      denyAttempts: 5, // back off 5 times\n      maxParallelDials: 100,\n      maxColdCalls: 25,\n      dialTimeout: 20e3,\n    },\n    // Lets limit the connection managers peers and have it check peer health less frequently\n    connectionManager: {\n      minPeers: 25,\n      maxPeers: 100,\n      pollInterval: 5000,\n    },\n    modules: {\n      transport: [wstar, wsstar],\n      streamMuxer: [MPLEX, SPDY],\n      connEncryption: [SECIO],\n      peerDiscovery: [Bootstrap, wstar.discovery, wsstar.discovery],\n      dht: KadDHT,\n      // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n      pubsub: PubSubGossip,\n      contentRouting: [\n        delegateContentRouter,\n        // TODO - CORS failed for websocket // delegateContentRouterWS,\n      ],\n      peerRouting: [\n        delegatePeerRouter,\n        // TODO - CORS failed for websocket // delegatePeerRouterWS,\n      ],\n    },\n    config: {\n      peerDiscovery: {\n        // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n        autoDial: true,\n        mdns: {\n          interval: 10000,\n          enabled: true,\n        },\n        bootstrap: {\n          interval: 30e3,\n          enabled: true,\n          list: bootstrapList,\n        },\n        webrtcStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n        webSocketStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n      },\n      // Turn on relay with hop active so we can connect to more peers\n      // implements the circuit-relay mechanism that allows nodes that\n      // don't speak the same protocol to communicate using a third relay node.\n      // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n      // can be forund on here\n      // https://github.com/libp2p/specs/tree/master/relay\n      /**\n       * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n       *\n       * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n       * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n       */\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true,\n        },\n      },\n      /**\n       * Create a new KadDHT.\n       *\n       * @param {Switch} sw libp2p-switch instance\n       * @param {object} options DHT options\n       * @param {number} options.kBucketSize k-bucket size (default 20)\n       * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n       * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n       * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n       * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n       * @param {randomWalkOptions} options.randomWalk randomWalk options\n       */\n      /**\n       * Random walk options\n       *\n       * @typedef {Object} randomWalkOptions\n       * @property {boolean} enabled discovery enabled (default: true)\n       * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n       * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n       * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n       * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n       */\n      dht: {\n        enabled: true,\n        kBucketSize: 20,\n        concurrency: 5,\n        randomWalk: {\n          queriesPerPeriod: 2,\n          enabled: true,\n          interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n          timeout: 2e3, // End the query quickly since we're running so frequently\n        },\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true,\n        signMessages: true,\n        strictSigning: true,\n      },\n    },\n  });\n};\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["1625","1626","1627"],"import {\n  ISwarmConnectionSubclass,\n  ESwarmConnectionSubclassStatus,\n  IIPFSSpecificOptions,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS,\n} from './swarm-connection-class-subclass-ipfs.const';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport * as Ipfs from 'types/ipfs.types';\n\nexport class SwarmConnectionSubclassIPFS\n  extends getStatusClass<typeof ESwarmConnectionSubclassStatus>({\n    errorStatus: ESwarmConnectionSubclassStatus.ERROR,\n    instanceName: 'SwarmConnectionSubclassIPFS',\n  })\n  implements ISwarmConnectionSubclass {\n  protected IPFS?: any;\n\n  protected options?: IIPFSSpecificOptions;\n\n  protected connection?: Ipfs.IPFS;\n\n  public isClosed: boolean = false;\n\n  protected reconnectionAttempt: number = 0;\n\n  public get isConnected(): boolean {\n    const { isClosed, connection } = this;\n\n    return !isClosed && !!connection && !!connection.isOnline();\n  }\n\n  public getNativeConnection(): Ipfs.IPFS | undefined {\n    return this.connection;\n  }\n\n  public async close(): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:close');\n    if (isClosed) {\n      return true;\n    }\n    this.setConnectionClosed();\n    await this.stopCurrentConnection();\n    return true;\n  }\n\n  public async connect(\n    options: IIPFSSpecificOptions\n  ): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The connection was closed previousely');\n    }\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      console.error(setOptionsResult);\n      return this.setErrorStatus('Failed to set the options');\n    }\n\n    const scriptLoadingResult = await this.preloadIpfsModule();\n\n    console.warn('ipfs:connect');\n    if (scriptLoadingResult instanceof Error) {\n      console.error(scriptLoadingResult);\n      return this.setErrorStatus('Failed to preload the IPFS library');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect\n      const connectionResult = await this.reconnect();\n\n      if (connectionResult instanceof Error) {\n        console.error(connectionResult);\n        return this.setErrorStatus('Failed to connect the first time');\n      }\n    }\n    return true;\n  }\n\n  protected setConnectionClosed() {\n    console.warn('Ipfs connection is closed');\n    this.isClosed = true;\n    this.setStatus(ESwarmConnectionSubclassStatus.CLOSE);\n  }\n\n  protected setOptions(options?: IIPFSSpecificOptions): Error | boolean {\n    if (!options || typeof options.password !== 'string') {\n      return new Error(\n        'An options and a password must be specified to encrypt the provate data'\n      );\n    }\n    this.options = options;\n    return true;\n  }\n\n  protected setIpfsConstructor(IPFS: any) {\n    this.IPFS = IPFS;\n  }\n\n  protected setIpfsConnection(ipfsNode: Ipfs.IPFS) {\n    this.connection = ipfsNode;\n    // unset the listeners for the node,\n    // cause it may be already set\n    this.unsetListeners(ipfsNode);\n    // set listeners for an events\n    // emitted by the IPFS node\n    this.setListeners(ipfsNode);\n  }\n\n  protected unsetCurrentConnection(ipfsNode?: Ipfs.IPFS) {\n    const { connection } = this;\n\n    if (ipfsNode) {\n      if (ipfsNode === connection) {\n        this.connection = undefined;\n      }\n      if (ipfsNode) {\n        this.unsetListeners(ipfsNode);\n      }\n    }\n  }\n\n  protected async preloadIpfsModule(): Promise<Error | boolean> {\n    let ipfsModule: unknown | Error;\n\n    try {\n      ipfsModule = await import('ipfs');\n    } catch (err) {\n      ipfsModule = err as Error;\n    }\n\n    if (ipfsModule instanceof Error) {\n      console.error(\n        `Failed to load the IPFS main script from the source ${SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL}`\n      );\n      return ipfsModule;\n    }\n    if (!ipfsModule || typeof (ipfsModule as any).create !== 'function') {\n      return new Error('Failed to load an instance of IPFS');\n    }\n    this.setIpfsConstructor(ipfsModule);\n    return true;\n  }\n\n  protected handleStarted = () => {\n    console.warn('IPFS connection to the swarm was started');\n    this.setStatus(ESwarmConnectionSubclassStatus.STARTED);\n  };\n\n  protected handleError = async (error?: Error) => {\n    if (error) {\n      console.error(\n        'An error has occured with the IPFS swarm connection subclass'\n      );\n      console.error(error);\n    }\n  };\n\n  protected handleInitialized = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    this.setStatus(ESwarmConnectionSubclassStatus.INITIALIZED);\n  };\n\n  protected handleStop = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.setStatus(ESwarmConnectionSubclassStatus.STOP);\n      this.reconnect();\n    }\n  };\n\n  protected setListeners(\n    connection: Ipfs.IPFS,\n    isSetListeners: boolean = true\n  ) {\n    const methodName = isSetListeners ? 'on' : 'off';\n\n    connection[methodName]('start', this.handleStarted);\n    connection[methodName]('init', this.handleInitialized);\n    connection[methodName]('error', this.handleError);\n    connection[methodName]('stop', this.handleStop);\n  }\n\n  protected unsetListeners = (connection: Ipfs.IPFS) => {\n    this.setListeners(connection, false);\n  };\n\n  protected async createConnection(): Promise<Error | boolean> {\n    console.warn('create a new IPFS connection to the swarm');\n    const { IPFS, options } = this;\n\n    if (IPFS) {\n      const connection: Ipfs.IPFS = await IPFS.create({\n        ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n        pass: options ? options.password : null, // password from options\n      });\n\n      // this is working connection\n      // const connection: Ipfs.IPFS = await IPFS.create({\n      //   \"preload\":\n      //   {\"enabled\":false},\n      //   \"config\":{\"Addresses\":{\"Swarm\":[\"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"]}},\n      //   \"repo\":\"orbit-chat-ipfs-dfffd\",\n      //   \"EXPERIMENTAL\": {\n      //     \"pubsub\":true,\n      //   }}\n      // );\n\n      if (connection instanceof Error) {\n        console.error('Failed to create a new IPFS node');\n        return connection;\n      }\n      this.setIpfsConnection(connection);\n      console.warn('IPFS node config');\n      console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT);\n      return true;\n    }\n    return new Error('Ipfs was not loaded as a dynamic module previousely');\n  }\n\n  protected async startConnection(): Promise<Error | boolean> {\n    const { connection, isClosed } = this;\n\n    if (isClosed) {\n      return new Error('Unable to start connection closed previousely');\n    }\n    if (!connection) {\n      return new Error(\n        'There is no connection to the IPFS, it must be created before start'\n      );\n    }\n    try {\n      await Promise.race([\n        timeout(SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT),\n        connection.ready,\n      ]);\n    } catch (err) {\n      console.error(err);\n\n      // if failed to start or a timeout has reached\n      // stop the connection\n      const stopConnectionResult = await this.stopConnection(connection);\n\n      if (stopConnectionResult instanceof Error) {\n        this.setErrorStatus(\n          'Failed to stop the connection during creating a new one'\n        );\n        return stopConnectionResult;\n      }\n      return err;\n    }\n\n    const nodeId = await connection.id();\n\n    if (!nodeId) {\n      return new Error('Failed to start node id connection');\n    }\n    console.warn(`Ipfs node was started as: /n ${nodeId}`);\n    return true;\n  }\n\n  protected async stopConnection(connection: Ipfs.IPFS): Promise<Error | void> {\n    console.warn('Stop the connection');\n    try {\n      connection.stop();\n    } catch (err) {\n      console.error(new Error('Failed to stop the ipfs node'));\n      return err;\n    }\n  }\n\n  async stopCurrentConnection(): Promise<Error | void> {\n    const { connection } = this;\n\n    if (connection) {\n      // if the current connection is exists, then stop it\n      // unset the connection and it's listeners\n      this.unsetCurrentConnection(connection);\n      const connectionStopResult = await this.stopConnection(connection);\n\n      if (connectionStopResult instanceof Error) {\n        console.error(connectionStopResult);\n        return connectionStopResult;\n      }\n    }\n  }\n\n  protected incReconnectionAttempt() {\n    this.reconnectionAttempt += 1;\n    console.warn('ipfs:incReconnectionAttempt');\n  }\n\n  protected resetReconnectionAttempt() {\n    this.reconnectionAttempt = 0;\n    console.warn('ipfs:resetReconnectionAttempt');\n  }\n\n  protected async reconnect(): Promise<Error | boolean> {\n    console.warn('ipfs:reconnect');\n    this.incReconnectionAttempt();\n    if (\n      this.reconnectionAttempt >\n      SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS\n    ) {\n      await this.close();\n      this.setStatus(ESwarmConnectionSubclassStatus.CONNECTION_FAILED);\n      return new Error('Failed to connect to the SWARM throught the IPFS');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect once again\n      console.error(startResult);\n      return this.reconnect();\n    }\n    this.resetReconnectionAttempt();\n    return true;\n  }\n\n  protected async start(): Promise<Error | boolean> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:start');\n    if (isClosed) {\n      return new Error(\n        'Unable to connect to the swarm if the connection was closed before'\n      );\n    }\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTING);\n\n    // stop the current connection if exists\n    const stopConnectionResult = await this.stopCurrentConnection();\n\n    if (stopConnectionResult instanceof Error) {\n      this.setErrorStatus('Failed to stop the previous connection');\n    }\n\n    // create a new connection to the ipfs\n    const createConnectionResult = await this.createConnection();\n\n    if (createConnectionResult instanceof Error) {\n      this.setErrorStatus(createConnectionResult);\n      return new Error('Failed to create a new connection');\n    }\n\n    const startConnectionResult = await this.startConnection();\n\n    if (startConnectionResult instanceof Error) {\n      this.setErrorStatus(startConnectionResult);\n      return new Error('Failed to start the connection');\n    }\n    // if started succesfully\n    // then set the status that the node\n    // was started succesfully\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTED);\n    return true;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.ts",["1628"],"import { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport assert from 'assert';\nimport { TSwarmStoreDatabaseIteratorMethodAnswer } from './swarm-store-class.types';\nimport {\n  ESwarmStoreConnector,\n  SWARM_STORE_CONNECTORS,\n  ESwarmStoreEventNames,\n  ESwarmStoreDbStatus,\n  SWARM_STORE_DATABASES_STATUSES_EMPTY,\n} from './swarm-store-class.const';\nimport {\n  ISwarmStoreConnector,\n  ISwarmStoreDatabasesStatuses,\n  TSwarmStoreValueTypes,\n  TSwarmStoreDatabaseMethod,\n  TSwarmStoreDatabaseMethodArgument,\n  TSwarmStoreDatabaseMethodAnswer,\n  TSwarmStoreConnectorEventRetransmitter,\n  TSwarmStoreDatabaseOptions,\n  ISwarmStoreEvents,\n  ISwarmStore,\n  ISwarmStoreOptions,\n} from './swarm-store-class.types';\n\n/**\n * This is decentralized storage.\n * Allows to create a new database,\n * store a value, grant access,\n * validate, store a data on it.\n *\n * @export\n * @class SwarmStore\n * @extends {EventEmitter<ISwarmStoreEvents>}\n * @implements {ISwarmStore<P>}\n * @template P\n */\nexport class SwarmStore<\n  P extends ESwarmStoreConnector,\n  ItemType extends any,\n  E extends ISwarmStoreEvents = ISwarmStoreEvents\n> extends EventEmitter<E> implements ISwarmStore<P, ItemType> {\n  public get isReady(): boolean {\n    return !!this.connector && this.connector.isReady;\n  }\n\n  public get isClosed(): boolean {\n    return !!this.connector && this.connector.isClosed;\n  }\n\n  public get dbStatuses(): ISwarmStoreDatabasesStatuses {\n    if (this.isReady && !this.isClosed) {\n      return this.dbStatusesExisting;\n    }\n    return SWARM_STORE_DATABASES_STATUSES_EMPTY;\n  }\n\n  protected connector: ISwarmStoreConnector<P> | undefined;\n\n  protected dbStatusesExisting: ISwarmStoreDatabasesStatuses = SWARM_STORE_DATABASES_STATUSES_EMPTY;\n\n  protected storeConnectorEventsHandlers:\n    | Record<ESwarmStoreEventNames, TSwarmStoreConnectorEventRetransmitter>\n    | undefined;\n\n  // open connection with all databases\n  public async connect(\n    options: ISwarmStoreOptions<P, ItemType>\n  ): Promise<Error | void> {\n    try {\n      this.validateOptions(options);\n\n      const connectionWithConnector = this.createConnectionWithStorageConnector(\n        options\n      );\n\n      this.createStatusTable(options);\n      await this.startConnectionWithConnector(connectionWithConnector, options);\n      this.subscribeOnConnector();\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * cloase all connections\n   *\n   * @returns {(Promise<Error | undefined>)}\n   * @memberof SwarmStore\n   */\n  public async close(): Promise<Error | undefined> {\n    let error: Error | undefined;\n\n    try {\n      this.closeConnector();\n    } catch (err) {\n      error = err;\n    }\n    this.unSubscribeFromConnector();\n    this.reset();\n    return error;\n  }\n\n  /**\n   * open a new connection to the database specified\n   *\n   * @param {TSwarmStoreDatabaseOptions} dbOptions\n   * @returns {(Promise<void | Error>)}\n   * @memberof SwarmStore\n   */\n  public async openDatabase(\n    dbOptions: TSwarmStoreDatabaseOptions<P, ItemType>\n  ): Promise<void | Error> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setEmptyStatusForDb(dbOptions.dbName);\n    return connector.openDatabase(dbOptions);\n  }\n\n  /**\n   * close an existing connection to the database\n   * with the name specified\n   * if exists\n   *\n   * @param {TSwarmStoreDatabaseOptions} dbOptions\n   * @returns {(Promise<void | Error>)}\n   * @memberof SwarmStore\n   */\n  public async closeDatabase(dbName: string): Promise<void | Error> {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setClosedStatusForDb(dbName);\n    return connector.closeDatabase(dbName);\n  }\n\n  /**\n   * send request (get, set and so on) to a swarm database\n   *\n   * @template V\n   * @template A\n   * @param {TSwarmStoreDatabaseOptions['dbName']} dbName\n   * @param {TSwarmStoreDatabaseMethod<P>} dbMethod\n   * @param {TSwarmStoreDatabaseMethodArgument<P, V>} arg\n   * @returns {(Promise<TSwarmStoreDatabaseMethodAnswer<P, A> | Error>)}\n   * @memberof SwarmStore\n   */\n  public async request<V extends TSwarmStoreValueTypes<P>, A>(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName'],\n    dbMethod: TSwarmStoreDatabaseMethod<P>,\n    arg: TSwarmStoreDatabaseMethodArgument<P, V>\n  ): Promise<\n    | Error\n    | TSwarmStoreDatabaseMethodAnswer<P, A>\n    | TSwarmStoreDatabaseIteratorMethodAnswer<P, A>\n  > {\n    const { connector } = this;\n\n    if (!connector) {\n      return new Error('Connector is not exists');\n    }\n    this.setClosedStatusForDb(dbName);\n    return connector.request(dbName, dbMethod, arg);\n  }\n\n  /**\n   * throws an error if options provided\n   * are not valid\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   * @throws\n   */\n  protected validateOptions(options: ISwarmStoreOptions<P, ItemType>): void {\n    assert(options, 'An options must be specified');\n    assert(\n      typeof options === 'object',\n      'The options specified is not an object'\n    );\n    assert(\n      options.databases instanceof Array,\n      'The options for databases must be an array'\n    );\n    options.databases.forEach((optionsDb) => {\n      assert(optionsDb, 'Database options must be specified');\n      assert(\n        typeof optionsDb === 'object',\n        'Database options must be an object'\n      );\n      assert(\n        typeof optionsDb.dbName === 'string',\n        'Database name must be a string'\n      );\n    });\n    assert(\n      typeof options.directory === 'string',\n      'Directory must be a string if specified'\n    );\n    assert(options.provider, 'Provider must be specified');\n    assert(\n      Object.values(ESwarmStoreConnector).includes(options.provider),\n      `There is unknown provider specified \"${options.provider}\"`\n    );\n    assert(\n      options.providerConnectionOptions &&\n        typeof options.providerConnectionOptions === 'object',\n      'Options specifically for the provider must be set and be an object'\n    );\n    assert(options.userId, 'The user identity must be provided');\n    assert(\n      typeof options.userId === 'string',\n      'The user identity must be a string'\n    );\n    assert(options.credentials, 'A credentials must be provided');\n    assert(\n      typeof options.credentials === 'object',\n      'Credentials must be an object'\n    );\n    assert(\n      options.credentials.login,\n      \"User's login must be provided in the credentials to access on an encrypyted data\"\n    );\n    assert(\n      options.credentials.password,\n      'A password must be provided in the credentials to access on an encrypyted data'\n    );\n  }\n\n  /**\n   * returns a connector constructor specified\n   * or undefined if there is no constructor\n   * for for a connector with a name provided\n   *\n   * @protected\n   * @param {ESwarmStoreConnector} connectorName\n   * @returns\n   * @memberof SwarmStore\n   */\n  protected getStorageConnector(connectorName: ESwarmStoreConnector) {\n    return SWARM_STORE_CONNECTORS[connectorName];\n  }\n\n  /**\n   * create a connection with a connector\n   * specified in options\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @returns {(ISwarmStoreConnector<P> | Error)}\n   * @memberof SwarmStore\n   */\n  protected createConnectionWithStorageConnector(\n    options: ISwarmStoreOptions<P, ItemType>\n  ): ISwarmStoreConnector<P> {\n    const { provider } = options;\n    const Constructor = this.getStorageConnector(options.provider);\n\n    if (!Constructor) {\n      throw new Error(`A constructor was not found for the ${provider}`);\n    }\n\n    const connection = new Constructor(options);\n\n    assert(\n      connection instanceof Constructor,\n      `Failed to create connection with the provider ${provider}`\n    );\n\n    return connection;\n  }\n\n  /**\n   * connect with the connector specified\n   *\n   * @protected\n   * @param {ISwarmStoreConnector<P>} connector\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   */\n  protected async startConnectionWithConnector(\n    connector: ISwarmStoreConnector<P>,\n    options: ISwarmStoreOptions<P, ItemType>\n  ): Promise<void> {\n    const connectionResult = await connector.connect(\n      options.providerConnectionOptions\n    );\n\n    assert(\n      !(connectionResult instanceof Error),\n      `Failed to connect through the provider ${options.provider}`\n    );\n    this.connector = connector;\n  }\n\n  /**\n   * set empty status for a database\n   * if a status was not set before\n   *\n   * @protected\n   * @param {string} dbName\n   * @memberof SwarmStore\n   */\n  protected setEmptyStatusForDb = (dbName: string) => {\n    const { dbStatusesExisting } = this;\n\n    if (!dbStatusesExisting[dbName]) {\n      dbStatusesExisting[dbName] = ESwarmStoreDbStatus.EMPTY;\n    }\n  };\n\n  protected setClosedStatusForDb = (dbName: string) => {\n    this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.CLOSE;\n  };\n\n  /**\n   * create the table with a current status for\n   * a databases, which will be started\n   *\n   * @protected\n   * @param {ISwarmStoreOptions<P>} options\n   * @memberof SwarmStore\n   */\n  protected createStatusTable(options: ISwarmStoreOptions<P, ItemType>) {\n    const { databases } = options;\n\n    databases.forEach((dbOptions) => {\n      this.setEmptyStatusForDb(dbOptions.dbName);\n    });\n  }\n\n  protected dbReadyListener = (dbName: string) =>\n    (this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.READY);\n\n  protected dbUpdateListener = (dbName: string) =>\n    (this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.UPDATE);\n\n  protected dbCloseListener = (dbName: string) =>\n    (this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.CLOSE);\n\n  protected dbLoadingListener = ([dbName, percent]: [string, number]) => {\n    if (percent < 100) {\n      this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.LOADING;\n    } else {\n      this.dbStatusesExisting[dbName] = ESwarmStoreDbStatus.LOADED;\n    }\n  };\n\n  /**\n   * subscribe on events emitted for databases\n   *\n   * @protected\n   * @param {boolean} [isSubscribe=true]\n   * @memberof SwarmStore\n   */\n  protected subscribeOnDbEvents(isSubscribe: boolean = true): void {\n    const { connector } = this;\n\n    if (!connector) {\n      if (isSubscribe) {\n        throw new Error('There is no connection to a connector');\n      }\n      return;\n    }\n\n    const methodName = isSubscribe ? 'addListener' : 'removeListener';\n\n    connector[methodName](ESwarmStoreEventNames.READY, this.dbReadyListener);\n    connector[methodName](ESwarmStoreEventNames.UPDATE, this.dbUpdateListener);\n    connector[methodName](\n      ESwarmStoreEventNames.CLOSE_DATABASE,\n      this.dbCloseListener\n    );\n    connector[methodName](\n      ESwarmStoreEventNames.DB_LOADING,\n      this.dbLoadingListener\n    );\n  }\n\n  protected unsubscribeFromDbEvents() {\n    this.subscribeOnDbEvents(false);\n  }\n\n  /**\n   * subscribe on store connector all events\n   * to retransmit it\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected subscribeConnectorAllEvents() {\n    const { connector } = this;\n\n    if (!connector) {\n      throw new Error('There is no swarm connector');\n    }\n\n    const storeConnectorEventsHandlers = {} as Record<\n      ESwarmStoreEventNames,\n      TSwarmStoreConnectorEventRetransmitter\n    >;\n\n    Object.values(ESwarmStoreEventNames).forEach((eventName) => {\n      storeConnectorEventsHandlers[eventName] = (...args) =>\n        this.emit(eventName, ...args);\n      connector.addListener(eventName, storeConnectorEventsHandlers[eventName]);\n    });\n    this.storeConnectorEventsHandlers = storeConnectorEventsHandlers;\n  }\n\n  protected unSubscribeConnectorAllEvents() {\n    const { storeConnectorEventsHandlers, connector } = this;\n\n    if (storeConnectorEventsHandlers && connector) {\n      Object.keys(ESwarmStoreEventNames).forEach((eventName) => {\n        connector.removeListener(\n          eventName,\n          storeConnectorEventsHandlers[eventName as ESwarmStoreEventNames]\n        );\n      });\n    }\n  }\n\n  /**\n   * subsribes on events from the connector\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected subscribeOnConnector() {\n    this.subscribeOnDbEvents();\n    this.subscribeConnectorAllEvents();\n  }\n\n  /**\n   * subsribes on events from the connector\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected unSubscribeFromConnector() {\n    this.unsubscribeFromDbEvents();\n    this.unSubscribeConnectorAllEvents();\n  }\n\n  /**\n   * close the existing connection\n   * with a swarm store\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected async closeConnector(): Promise<void> {\n    const { connector } = this;\n\n    if (connector) {\n      const result = await connector.close();\n\n      if (result instanceof Error) {\n        throw new Error('Failed to close the connection with the connector');\n      }\n    }\n  }\n\n  /**\n   * reset some options to defaults\n   *\n   * @protected\n   * @memberof SwarmStore\n   */\n  protected reset(): void {\n    Object.keys(this.dbStatusesExisting).forEach(this.setClosedStatusForDb);\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",["1629","1630","1631","1632","1633","1634","1635"],"import { ISecretStoreCredentials } from '../secret-storage-class/secret-storage-class.types';\nimport { ISwarmStoreConnectorOrbitDBConnectionOptions } from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { ESwarmStoreDbStatus as ESwarmStoreDatabaseStatus } from './swarm-store-class.const';\nimport { SWARM_STORE_DATABASE_STATUS_ABSENT } from './swarm-store-class.const';\nimport { ISwarmStoreConnectorOrbitDbDatabaseOptions } from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodArgument,\n} from './swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from './swarm-store-class.const';\n\nexport type TSwarmStoreConnectorEventRetransmitter = (...args: any[]) => void;\n\nexport interface ISwarmStoreEvents {\n  [ESwarmStoreEventNames.STATE_CHANGE]: boolean;\n  [ESwarmStoreEventNames.ERROR]: Error;\n  [ESwarmStoreEventNames.CLOSE]: void;\n  [ESwarmStoreEventNames.UPDATE]: string;\n  [ESwarmStoreEventNames.LOADING]: number;\n  [ESwarmStoreEventNames.DB_LOADING]: [string, number];\n  [ESwarmStoreEventNames.READY]: string;\n}\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseMethodArgument<\n  P extends ESwarmStoreConnector,\n  M\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<M>\n  : never;\n\n// arguments avalilable for a database method\nexport type TSwarmStoreDatabaseIteratorMethodArgument<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseIteratorMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer<T>\n  : never;\n\n// arguments avalilable for a database\nexport type TSwarmStoreDatabaseMethodAnswer<\n  P extends ESwarmStoreConnector,\n  T\n> = P extends ESwarmStoreConnector.OrbitDB ? T : never;\n\n// a value can be stored\nexport type TSwarmStoreValueTypes<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB ? any : never;\n\nexport interface ISwarmStoreDatabaseBaseOptions {\n  // Database name\n  dbName: string;\n  // is a puclic database. Private by\n  isPublic?: boolean;\n}\n\n/**\n * options of a swarm database\n *\n * @export\n * @interface ISwarmStoreDatabaseOptions\n */\nexport type TSwarmStoreDatabaseOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDbDatabaseOptions<T> &\n      ISwarmStoreDatabaseBaseOptions\n  : ISwarmStoreDatabaseBaseOptions;\n/**\n * options of swarm databases want to connect\n *\n * @export\n * @interface ISwarmStoreDatabasesOptions\n */\nexport interface ISwarmStoreDatabasesOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> {\n  // databases which must be started when the orbit db\n  // instance will be ready to use\n  databases: P extends never\n    ? ISwarmStoreDatabaseBaseOptions\n    : TSwarmStoreDatabaseOptions<P, T>[];\n  // a virtual directory name where to store all the data received\n  directory?: string;\n}\n\n/**\n * options about the current user which\n * will be connected to swarm databases\n *\n * @export\n * @interface ISwarmStoreUserOptions\n */\nexport interface ISwarmStoreUserOptions {\n  // the current user identity\n  userId?: string;\n  // credentials used for data encryption\n  credentials?: ISecretStoreCredentials;\n}\n\nexport type TSwarmStoreConnectorConnectionOptions<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? ISwarmStoreConnectorOrbitDBConnectionOptions\n  : never;\n\n/**\n * options defines which provider to use\n *\n * @export\n * @interface ISwarmStoreProviderOptions\n */\nexport interface ISwarmStoreProviderOptions<P extends ESwarmStoreConnector> {\n  provider: P;\n  providerConnectionOptions: TSwarmStoreConnectorConnectionOptions<P>;\n}\n\n/**\n * this options excluded options specific\n * for a provider connection\n *\n * @export\n * @interface ISwarmStoreMainOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreMainOptions<\n  P extends ESwarmStoreConnector = never,\n  T extends any = never\n> extends ISwarmStoreUserOptions, ISwarmStoreDatabasesOptions<P, T> {}\n\n/**\n * options used for connection to a swarm databases\n *\n * @export\n * @interface ISwarmStoreOptions\n * @extends {ISwarmStoreUserOptions}\n * @extends {ISwarmStoreDatabasesOptions}\n */\nexport interface ISwarmStoreOptions<\n  P extends ESwarmStoreConnector,\n  T extends any = never\n>\n  extends Required<ISwarmStoreMainOptions<P, T>>,\n    Required<ISwarmStoreProviderOptions<P>> {}\n\n/**\n * store a status of each database\n *\n * key - database name\n * value - the last event from the database received from the provider\n * @export\n * @interface ISwarmStoreDatabasesStatus\n */\nexport interface ISwarmStoreDatabasesStatuses\n  extends Record<\n    string,\n    ESwarmStoreDatabaseStatus | typeof SWARM_STORE_DATABASE_STATUS_ABSENT\n  > {}\n\n// methods available for a database providers\nexport type TSwarmStoreDatabaseMethod<\n  P extends ESwarmStoreConnector\n> = P extends ESwarmStoreConnector.OrbitDB\n  ? TSwarmStoreConnectorOrbitDbDatabaseMethodNames\n  : never;\n\n/**\n * this interface must be implemented by a swarm storage connectors\n *\n * @export\n * @interface ISwarmStoreConnector\n * @extends {EventEmitter<ISwarmStoreEvents>}\n * @template P\n */\nexport interface ISwarmStoreConnectorBase<P extends ESwarmStoreConnector> {\n  // ready to use\n  isReady: boolean;\n  // disconnected from the swarm\n  isClosed: boolean;\n  // open connection with all databases\n  connect(\n    options: TSwarmStoreConnectorConnectionOptions<P>\n  ): Promise<Error | void>;\n  // close all the existing connections\n  close(): Promise<Error | void>;\n  // open a new connection to the database specified\n  openDatabase(dbOptions: TSwarmStoreDatabaseOptions<P>): Promise<void | Error>;\n  // close connection to a database specified\n  closeDatabase(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName']\n  ): Promise<void | Error>;\n  // send request to a swarm database to perform\n  // an operation such as read or seta value\n  // on a database\n  request<V extends TSwarmStoreValueTypes<P>, A>(\n    dbName: TSwarmStoreDatabaseOptions<P>['dbName'],\n    dbMethod: TSwarmStoreDatabaseMethod<P>,\n    arg: TSwarmStoreDatabaseMethodArgument<P, V>\n  ): Promise<\n    | Error\n    | TSwarmStoreDatabaseMethodAnswer<P, A>\n    | TSwarmStoreDatabaseIteratorMethodAnswer<P, A>\n  >;\n}\n\nexport interface ISwarmStoreConnector<P extends ESwarmStoreConnector>\n  extends EventEmitter<ISwarmStoreEvents>,\n    ISwarmStoreConnectorBase<P> {}\n\n/**\n * Implements connection to a swarm\n * databases.\n * After the instance will be connected\n * to databases it allows to send request\n * to databases connected to.\n * Status of connection to a specific\n * databases is available on subscription\n * to the instance's methods.\n *\n * @export\n * @interface ISwarmStore\n */\nexport interface ISwarmStore<\n  P extends ESwarmStoreConnector,\n  ItemType extends any\n> extends Omit<ISwarmStoreConnectorBase<P>, 'connect'> {\n  // status of a database connected to\n  dbStatuses: ISwarmStoreDatabasesStatuses;\n  // open connection with all databases\n  connect(options: ISwarmStoreOptions<P, ItemType>): Promise<Error | void>;\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["1636"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["1637","1638","1639","1640","1641","1642"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",["1643"],"import { ESwarmConnectorOrbitDbDatabaseEventNames } from './swarm-store-connector-orbit-db-subclass-database.const';\nimport { ISwarmStoreDatabaseBaseOptions } from '../../../../swarm-store-class.types';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback,\n  ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n} from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  extends ISwarmStoreConnectorOrbitDbDatabaseAccessControlleGrantCallback<\n      TFeedStoreType\n    >,\n    ISwarmStoreConnectorOrbitDbAccessConrotllerOrbitDBStandardOptionsWriteAccess,\n    ISwarmStoreDatabaseBaseOptions {}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseEvents<\n  TSwarmStoreConnectorOrbitDBDatabase,\n  TFeedStoreType\n> {\n  [ESwarmConnectorOrbitDbDatabaseEventNames.FATAL]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n\n  [ESwarmConnectorOrbitDbDatabaseEventNames.ERROR]: [\n    string,\n    Error,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  // Database name and percents loaded\n  [ESwarmConnectorOrbitDbDatabaseEventNames.LOADING]: [\n    string,\n    number,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE]: [\n    string,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE]: [\n    string,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmConnectorOrbitDbDatabaseEventNames.READY]: [\n    string,\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n  [ESwarmConnectorOrbitDbDatabaseEventNames.NEW_ENTRY]: [\n    string, // database name\n    LogEntry<TFeedStoreType>, // entry added\n    string, // address of the entry,\n    any, // heads\n    TSwarmStoreConnectorOrbitDBDatabase\n  ];\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseValue<TStoreValueType> {\n  id: string; // id of the user who is store the event\n  value: TStoreValueType;\n  hash: string;\n}\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseIteratorOption {\n  gt = 'gt',\n  gte = 'gte',\n  lt = 'lt',\n  lte = 'lte',\n  limit = 'limit',\n  reverse = 'reverse',\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions {\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.gte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lt]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.lte]?: string;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.limit]?: number;\n  [ESwarmStoreConnectorOrbitDbDatabaseIteratorOption.reverse]?: boolean;\n}\n\nexport interface ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer<T> {\n  collect(): T[];\n}\n\nexport type TFeedStoreHash = string;\n\nexport enum ESwarmStoreConnectorOrbitDbDatabaseMethodNames {\n  'get' = 'get',\n  'add' = 'add',\n  'remove' = 'remove',\n  'iterator' = 'iterator',\n}\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMethodNames = ESwarmStoreConnectorOrbitDbDatabaseMethodNames;\n\nexport type TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<TFeedStoreType> =\n  | TFeedStoreHash\n  | TFeedStoreType\n  | ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions;\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["1644","1645","1646","1647"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    // TODO - may be verify the identity with central authority\n    const verifyResult = await KeystoreClass.verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["1648"],"import { IStorageProviderOptions } from 'classes/storage-providers/storage-providers.types';\nimport { validateCryptoKeyCredentials } from './../../../../../secret-storage-class/secret-storage-class-utils/secret-storage-class-utils-main/secret-storage-class-utils-main';\nimport {\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: IStorageProviderOptions;\n\n  protected secretStorage?: InstanceType<typeof SecretStorage>;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<IStorageProviderOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (isClose) {\n      throw new Error('The instance was closed before');\n    }\n    if (isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public close = async (cb?: TCallbackError): Promise<void> => {\n    if (!this.isOpen || this.isClose) {\n      return;\n    }\n    this.setIsClose();\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  };\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del(key: string, cb?: TCallbackError) {\n    return this.put(key, '', cb);\n  }\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      await this.disconnectSecretStorage();\n    }\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected getSecretStorage(): Error | SecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<IStorageProviderOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    } else if ((credentials as ISecretStoreCredentials).password) {\n      const credentialsValidationResult = SecretStorage.validateCredentials(\n        credentials as ISecretStoreCredentials\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::credentials not valid');\n      }\n      this.credentials = credentials as ISecretStoreCredentials;\n    }\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n    this.unsetSecretStorage();\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["1649","1650","1651","1652","1653","1654"],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/Projects/protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/Projects/protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/Projects/protocol/src/const/common-values/common-values.ts",[],"/home/paul/Projects/protocol/src/const/const-api-conf.ts",[],"/home/paul/Projects/protocol/src/const/const-crypto-keys/const-crypto-keys.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/Projects/protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/Projects/protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/Projects/protocol/src/index.tsx",[],"/home/paul/Projects/protocol/src/react-app-env.d.ts",[],"/home/paul/Projects/protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts",[],"/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.const.ts",[],"/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.shared.ts",[],"/home/paul/Projects/protocol/src/test/central-authority.test/central-authority-swarm-credentials-provider/central-authority-swarm-credentials-provider.ts",[],"/home/paul/Projects/protocol/src/test/data-sign-test.ts",[],"/home/paul/Projects/protocol/src/test/encryption-test.ts",["1655","1656","1657","1658","1659","1660","1661","1662","1663","1664"],"import {\n  generateKeyPair,\n  encryptNative,\n  decryptNative,\n  exportKeyPairAsString,\n  importKeyPairFromString,\n  encryptToString,\n  decryptData,\n  encryptToTypedArray,\n} from 'utils/encryption-utils';\nimport { calculateHash } from 'utils/hash-calculation-utils';\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n\nconst testEncryption = async () => {\n  const kPair = await generateKeyPair();\n\n  if (kPair instanceof Error) {\n    console.error(kPair);\n  } else {\n    /** THE FIRST USE-CASE */\n    // console.log('export key pair', kPair);\n    // const dataToChiper = '245';\n    // const encryptedData = await encryptNative(\n    //   kPair.publicKey,\n    //   decode(btoa(dataToChiper))\n    // );\n    // if (encryptedData instanceof Error) {\n    //   console.error(encryptedData);\n    // } else {\n    //   const decryptedData = await decryptNative(\n    //     kPair.privateKey,\n    //     decode(encode(encryptedData))\n    //   );\n    //   if (decryptedData instanceof Error) {\n    //     console.error(decryptedData);\n    //   } else {\n    //     console.log('decrypted', atob(encode(decryptedData)));\n    //   }\n    //\n    /** THE SECOND USE-CASE */\n    // const exportedKeyPairString = await exportKeyPairAsString(kPair);\n    // console.log(exportedKeyPairString);\n    // const importedKeyPair = await importKeyPairFromString(\n    //   exportedKeyPairString\n    // );\n    // if (importedKeyPair instanceof Error) {\n    //   throw importedKeyPair;\n    // }\n    // const encryptedStringByExported = await encryptToString(\n    //   importedKeyPair,\n    //   'this is a long long text'\n    // );\n    // const encryptedStringByImported = await encryptToTypedArray(\n    //   exportedKeyPairString,\n    //   'this is a long long text'\n    // );\n    // console.log('encryptedStringByExported', encryptedStringByExported);\n    // console.log('encryptedStringByImported', encryptedStringByImported);\n    // if (!(encryptedStringByExported instanceof Error)) {\n    //   const decrypted = await decryptFromString(\n    //     importedKeyPair,\n    //     encryptedStringByExported\n    //   );\n    //   if (!(decrypted instanceof Error)) {\n    //     console.log('decrypted', decrypted);\n    //   }\n    // }\n    /** HASH CALCULATION */\n    // const hashStrOnce = await calculateHash({ d: 1 });\n    // const hashStrTwice = await calculateHash({ d: 1 });\n    // console.log(hashStrOnce);\n    // console.log(hashStrTwice);\n    // if (hashStrTwice !== hashStrOnce) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n    /** HASH CALCULATION STRING */\n    // const stringData =\n    //   '\"1233465)()09850MNLKADFNDSLKJGN%$%^$^#&#^@&*^)(&$#^&%*#%\"';\n    // const hashStrThird = await calculateHash(stringData);\n    // const hashStrFourth = await calculateHash(stringData);\n    // console.log(hashStrThird);\n    // console.log(hashStrFourth);\n    // if (hashStrThird !== hashStrFourth) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n  }\n};\n// testEncryption();\n","/home/paul/Projects/protocol/src/test/error-extended-class-test.ts",[],"/home/paul/Projects/protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",[],"/home/paul/Projects/protocol/src/test/mocha-chai-initialize.ts",["1665"],"/* global mocha */\nimport { lazyLoadScript } from 'utils/lazy-loading-utils/lazy-loading-utils';\nimport Mocha from 'mocha';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport chaiSubset from 'chai-subset';\n\nconst MOCHA_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/mocha/6.2.1/mocha.min.js';\n\nexport async function initializeMocha() {\n  const mochaNode = document.createElement('div');\n\n  mochaNode.id = 'mocha';\n  document.body.prepend(mochaNode);\n  try {\n    await lazyLoadScript(MOCHA_CDN_URL);\n  } catch (err) {\n    console.error('Failed to load Mocha from cdn');\n    return err;\n  }\n\n  const mochaSetupScript = document.createElement('script');\n\n  mochaSetupScript.type = 'text/javascript';\n  mochaSetupScript.className = 'mocha-init';\n  mochaSetupScript.innerHTML = `\n        mocha.setup({\n            ui: 'bdd',\n            globals: ['globalThis']\n        });\n        mocha.checkLeaks();\n    `;\n  document.body.append(mochaSetupScript);\n  chai.use(chaiAsPromised);\n  chai.use(chaiSubset);\n}\n\ntype TCallbackMochaRun = (failures: number) => void;\n\nexport function runMocha(\n  showErrorsOverlay: boolean = true,\n  cb?: TCallbackMochaRun\n) {\n  // it's necessary to disable\n  // error overlay to run test\n  // with mocha\n  if (!showErrorsOverlay) {\n    const hideErrorFrameStyle = document.createElement('style');\n\n    hideErrorFrameStyle.type = 'text/css';\n    hideErrorFrameStyle.innerHTML = `\n            body > iframe {\n                display: none;\n            }\n        `;\n    document.head.appendChild(hideErrorFrameStyle);\n  }\n  mocha.run(cb);\n}\n","/home/paul/Projects/protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts",[],"/home/paul/Projects/protocol/src/types/channels.types.ts",[],"/home/paul/Projects/protocol/src/types/encryption-keys.types.ts",[],"/home/paul/Projects/protocol/src/types/helper.types.ts",["1666","1667","1668"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n\nexport type ArrayFirst<T extends any[]> = T extends Array<infer F> ? F : never;\n\nexport type Defined<T extends {}> = {\n  [k in keyof T]: T[k] extends undefined ? NonNullable<T[k]> : T[k];\n};\n","/home/paul/Projects/protocol/src/types/ipfs.d.ts",[],"/home/paul/Projects/protocol/src/types/ipfs.types.d.ts",[],"/home/paul/Projects/protocol/src/types/main.types.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-cache.d.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/Projects/protocol/src/types/orbit-db-keystore.d.ts",["1669","1670","1671"],"import 'orbit-db-keystore';\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore {\n    status: string;\n    open(): Promise<void>;\n    close(): Promise<void>;\n    put(k: string, v: any): Promise<void>;\n    get(k: string): string | Uint8Array;\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStore;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n}\n","/home/paul/Projects/protocol/src/types/users.types.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-array.ts",["1672","1673","1674","1675"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n\n/**\n * check wherether the array\n * includes all items\n * @param testedArray\n * @param requiredItems\n */\nexport const commonUtilsArrayIncludesAll = (\n  testedArray: any[],\n  requiredItems: any[]\n): boolean => {\n  const len = requiredItems.length;\n  let idx = 0;\n\n  while (idx < len) {\n    if (!testedArray.includes(requiredItems[idx])) {\n      return false;\n    }\n    idx++;\n  }\n  return true;\n};\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-check-value.ts",["1676"],"export const checkIsError = (v: any): v is Error => v instanceof Error;\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-objects.ts",["1677","1678","1679","1680"],"import { TObjectKeys, TDictionary } from '../../types/common.types';\nimport { isDefined } from './common-utils-main';\n\nexport const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n\nexport const getObjectKeys = (o: object): Array<TObjectKeys> =>\n  (Object.keys(o) as Array<TObjectKeys>).concat(\n    Object.getOwnPropertySymbols(o)\n  );\n\n/**\n * extends object with another object if the object\n * have no properties\n *\n * @export\n * @template T\n * @template E\n * @param {T} o\n * @param {E} ext\n * @returns {T}\n */\nexport function extend<T extends TDictionary<any>, E extends TDictionary<any>>(\n  o: T,\n  ext: E\n): T & E {\n  const keys = getObjectKeys(ext);\n  let idx = 0;\n  let k: keyof E;\n  const len = keys.length;\n\n  while (idx < len) {\n    k = keys[idx];\n    idx++;\n    if (!isDefined(ext[k])) {\n      continue;\n    }\n    if (!isDefined(o[k])) {\n      o[k] = ext[k];\n    } else if (typeof o[k] === 'object' && typeof ext[k] === 'object') {\n      o[k] = extend(o[k], ext[k]);\n    }\n  }\n  return o;\n}\n","/home/paul/Projects/protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/Projects/protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["1681","1682","1683"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  isJWK,\n  getJWK,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await exportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return exportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const exportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await exportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  try {\n    const res = await exportKeyPair(keyPair);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = async (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModule.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, true);\n\nexport const importPrivateKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        ),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (isCryptoKeyPairImported(keyPairObject)) {\n        return importKeyPair(keyPairObject);\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return importKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const getKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const importEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return importKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return importKey(jwk);\n    } else if (typeof key === 'string') {\n      return importKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const convertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await importEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return exportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",["1684"],"if (!window.crypto) {\n  window.CryptoKey = require('@trust/webcrypto/src/keys/CryptoKey');\n  window.CryptoKeyPair = require('@trust/webcrypto/src/keys/CryptoKeyPair');\n  (window as any).JsonWebKey = require('@trust/webcrypto/src/keys/JsonWebKey');\n}\n\nexport const ENCRYPTION_FORMAT_SUPPORTED = !window.crypto ? 'SHA-1' : undefined;\n\nexport const crypto = window.crypto || require('@trust/webcrypto');\n\nexport const cryptoModule = crypto.subtle;\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["1685"],"import { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType, exportKey } from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModule.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/Projects/protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["1686"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<true | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModule.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res !== true\n      ? new Error('The signature for the data is not valid')\n      : true;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyData = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_EXTENDED,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<true | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n  return verifyNative(k, d, s);\n};\n","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["1687","1688","1689","1690","1691"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/Projects/protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["1692","1693","1694","1695","1696","1697","1698","1699","1700","1701"],"import {\n  CONST_CRYPTO_KEYS_TYPES,\n  CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS,\n} from 'const/const-crypto-keys/const-crypto-keys';\nimport {\n  HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM,\n  HASH_CALCULATION_UTILS_HASH_ALHORITHM,\n} from 'utils/hash-calculation-utils/hash-calculation-utils.const';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\n\nimport { commonUtilsArrayIncludesAll } from '../common-utils/common-utils-array';\nimport { eCRYPTO_UTILS_KEYS_USAGES } from '../encryption-utils/crypto-utils.const';\nimport {\n  calculateHash,\n  calculateHashNative,\n} from './../hash-calculation-utils/hash-calculation-utils';\nimport {\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n} from './encryption-keys-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (keyPair: any): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    isCryptoKey(keyPair.publicKey) &&\n    isCryptoKey(keyPair.privateKey)\n  );\n};\n\nexport const isCryptoKeyIncludesUsages = (\n  cryptoKey: CryptoKey,\n  expectedUsages: eCRYPTO_UTILS_KEYS_USAGES[] | eCRYPTO_UTILS_KEYS_USAGES\n): boolean => {\n  const { usages } = cryptoKey;\n\n  if (typeof expectedUsages === 'string') {\n    return usages.includes(expectedUsages);\n  }\n  return commonUtilsArrayIncludesAll(usages, expectedUsages as string[]);\n};\n\nexport const isCryptoKeyDataSign = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.sign);\n\nexport const isCryptoKeyDataVerify = (cryptoKey: any): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.verify);\n\nexport const isCryptoKeyDataEncryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.encrypt);\n\nexport const isCryptoKeyDataDecryption = (\n  cryptoKey: any\n): cryptoKey is CryptoKey =>\n  isCryptoKey(cryptoKey) &&\n  isCryptoKeyIncludesUsages(cryptoKey, eCRYPTO_UTILS_KEYS_USAGES.decrypt);\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n\nexport const exportCryptokeyInFormat = async (\n  key: CryptoKey,\n  format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS\n): Promise<ArrayBuffer | JsonWebKey | Error> => {\n  try {\n    const result = await crypto.subtle.exportKey(format, key);\n\n    if (result instanceof Error) {\n      console.error(result);\n      return new Error(\n        'exportCryptokeyInFormat::error returned from the exportKey'\n      );\n    }\n    return result;\n  } catch (err) {\n    console.error(err);\n    return new Error(\n      'exportCryptokeyInFormat::An error thrown when export the crypto key'\n    );\n  }\n};\n\n/**\n * calculates hash string of the crypto key\n * @param {CryptoKey} key\n */\nexport const calcCryptoKeyHash = async (\n  key: CryptoKey,\n  alg: HASH_CALCULATION_UTILS_HASH_ALHORITHM = HASH_CALCULATION_UTILS_DEFAULT_HASH_ALHORITHM\n): Promise<Error | string> => {\n  if (!(key instanceof CryptoKey)) {\n    return new Error('Key os not an instance of CryptoKey');\n  }\n  if (!key.extractable) {\n    return new Error('The crypto key is not extractable');\n  }\n\n  let format: CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS =\n    CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.RAW;\n  const keyAlgName = key.algorithm.name.toLowerCase();\n\n  if (keyAlgName.includes('rsa-') || keyAlgName.includes('ecdsa')) {\n    if (key.type.includes(CONST_CRYPTO_KEYS_TYPES.PUBLIC)) {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.SPKI;\n    } else {\n      format = CONST_CRYPTO_KEYS_TYPES_EXPORT_FORMATS.PKCS8;\n    }\n  }\n\n  const exportedCryptoKey = await exportCryptokeyInFormat(key, format);\n\n  if (exportedCryptoKey instanceof Error) {\n    console.error(exportedCryptoKey);\n    return new Error('Failed to export the crypto key in the RAW format');\n  }\n\n  const hashCalcResult = await calculateHashNative(\n    exportedCryptoKey as ArrayBuffer,\n    alg\n  );\n\n  if (hashCalcResult instanceof Error) {\n    console.error(hashCalcResult);\n    return new Error('Failed to calculate a hash for the exported crypto key');\n  }\n  return encodeArrayBufferToDOMString(hashCalcResult);\n};\n\n// allow to absent for a private keys in a pairs\nexport const calcCryptoKeyPairHash = async (\n  cryptoPair: CryptoKeyPair,\n  alg?: HASH_CALCULATION_UTILS_HASH_ALHORITHM\n): Promise<Error | string> => {\n  const pending = [calcCryptoKeyHash(cryptoPair.publicKey)];\n\n  if (cryptoPair.privateKey) {\n    pending.push(calcCryptoKeyHash(cryptoPair.privateKey));\n  }\n\n  const results = await Promise.all(pending);\n\n  if (results[0] instanceof Error) {\n    return new Error('Failed to calculate hash of the private key');\n  }\n  if (results[1] instanceof Error) {\n    return new Error('Failed to calculate hash of the puclic key');\n  }\n  return calculateHash(`${results[0]}___${results[1]}`);\n};\n","/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["1702"],"import { cryptoModule } from './main.crypto-utils.const';\nimport { crypto } from '../data-sign-utils/main.data-sign-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/Projects/protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["1703"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      return importKeyPair(keyPairObject);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/Projects/protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/Projects/protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/Projects/protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/Projects/protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/Projects/protocol/src/utils/main-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/derive-key.password-utils.ts",[],"/home/paul/Projects/protocol/src/utils/password-utils/encrypt.password-utils.ts",["1704","1705"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.const.ts",["1706","1707"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM = 'SHA-512';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/Projects/protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/Projects/protocol/src/utils/string-encoding-utils.ts",["1708"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/Projects/protocol/src/utils/string-utilities.ts",[],"/home/paul/Projects/protocol/src/utils/typed-array-utils.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils-validation-error.ts",[],"/home/paul/Projects/protocol/src/utils/validation-utils/validation-utils.ts",["1709","1710"],"import { ValidationError } from './validation-utils-validation-error';\nimport Ajv, { ValidateFunction } from 'ajv';\nimport ajvJSONSchemaDraft6 from 'ajv/lib/refs/json-schema-draft-06.json';\nimport memoize from 'lodash.memoize';\nimport { isDEV } from 'const/common-values/common-values-env';\n\nconst ajv = new Ajv({\n  allErrors: isDEV,\n  verbose: isDEV,\n});\n\najv.addMetaSchema(ajvJSONSchemaDraft6);\n\nconst ajvVerbose = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\najvVerbose.addMetaSchema(ajvJSONSchemaDraft6);\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  return !!getValidatorForJSONSchema(schema)(value);\n};\n\nexport const getVerboseValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajvVerbose.compile(schema)\n);\n\nexport const validateVerboseBySchema = (\n  schema: object,\n  value: any\n): Error | void => {\n  const validator = getVerboseValidatorForJSONSchema(schema);\n  const validationResult = validator(value);\n\n  if (!validationResult) {\n    return new ValidationError(validator.errors);\n  }\n};\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.const.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.ts",["1711","1712","1713","1714","1715","1716","1717"],"import { ASYNC_QUEUE_BASE_CLASS_OPTIONS } from './async-queue-class-base.const';\nimport { extend } from '../../../utils/common-utils/common-utils-objects';\nimport {\n  TAsyncQueueBaseClassPromiseProviderPending,\n  TAsyncQueueBaseClassPromiseProvider,\n} from './async-queue-class-base.types';\nimport {\n  TAsyncQueueBaseClass,\n  IAsyncQueueBaseClassOptions,\n} from './async-queue-class-base.types';\nimport { getRun } from './async-queue-class-base.utils';\nimport { delay } from '../../../utils/common-utils/common-utils-timer';\nimport { TAsyncQueueBaseClassPromiseProviderBatch } from './async-queue-class-base.types';\n\nexport class AsyncQueueClassBase extends TAsyncQueueBaseClass {\n  protected queue: TAsyncQueueBaseClassPromiseProvider<any>[] = [];\n\n  protected batch: Promise<any[]> | void = undefined;\n\n  protected runPromiseProvider?: ReturnType<typeof getRun>;\n\n  constructor(options?: Partial<IAsyncQueueBaseClassOptions>) {\n    super(\n      extend(\n        options || {},\n        ASYNC_QUEUE_BASE_CLASS_OPTIONS\n      ) as IAsyncQueueBaseClassOptions\n    );\n    this.runPromiseProvider = getRun(this.options.promiseTimeout);\n  }\n\n  public do = async <T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | (T extends any[] ? Array<T | Error> : never)> => {\n    return new Promise((res) => {\n      this.queue.push(() => {\n        return this.createPromise<T>(promiseProvider)\n          .then(res)\n          .catch(res);\n      });\n      this.start();\n    });\n  };\n\n  protected async createBatch(): Promise<any[]> {\n    if (!this.queue.length) {\n      return [];\n    }\n\n    const { options } = this;\n    const promisePendingBatch = this.queue.splice(0, options.batchSize);\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    return Promise.all(\n      promisePendingBatch.map(this.runPromiseProvider)\n    ).catch((err) => new Array(promisePendingBatch.length).fill(err)); // fill with an error if the batch was rejected\n  }\n\n  protected start = async () => {\n    if (this.batch) {\n      return;\n    }\n    if (!this.queue.length) {\n      return;\n    }\n    this.batch = this.createBatch();\n    try {\n      await this.batch;\n    } catch (err) {\n      console.error('AsyncQueueClassBase::error');\n      console.error(err);\n    }\n\n    const { delayMs } = this.options;\n\n    await delay(delayMs);\n    this.batch = undefined;\n    this.start();\n  };\n\n  protected isBatch<T>(\n    promiseProvider: any\n  ): promiseProvider is TAsyncQueueBaseClassPromiseProviderBatch<T> {\n    return promiseProvider instanceof Array;\n  }\n  protected createPromise<T>(promiseProvider: any): Promise<T | Error>;\n  protected createPromise<T>(promiseProvider: any[]): Promise<Array<T | Error>>;\n  protected createPromise<T>(\n    promiseProvider: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<Array<T | Error> | T | Error> {\n    let result;\n\n    if (!this.runPromiseProvider) {\n      throw new Error('runPromiseProvider is not defined');\n    }\n    if (this.isBatch<T>(promiseProvider)) {\n      result = Promise.all(promiseProvider.map(this.runPromiseProvider));\n    } else {\n      result = this.runPromiseProvider(promiseProvider);\n    }\n    this.start();\n    return result;\n  }\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.types.ts",["1718","1719"],"export interface IAsyncQueueBaseClassOptions {\n  /**\n   * a number of promises in one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  batchSize: number;\n  /**\n   * timeout for a one batch\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  promiseTimeout: number;\n  /**\n   * a delay between executing of a two batches\n   *\n   * @type {number}\n   * @memberof IAsyncQueueBaseClassOptions\n   */\n  delayMs: number;\n}\n\nexport type TAsyncQueueBaseClassPromiseProvider<T> = () => Promise<T>;\n\nexport type TAsyncQueueBaseClassPromiseProviderBatch<\n  T\n> = TAsyncQueueBaseClassPromiseProvider<T>[];\n\nexport type TAsyncQueueBaseClassPromiseProviderPending<T> =\n  | TAsyncQueueBaseClassPromiseProvider<T>\n  | TAsyncQueueBaseClassPromiseProviderBatch<T>;\n\nexport interface IAsyncQueueBaseClass {\n  /**\n   * resolve promises provided in queue\n   *\n   * @template T\n   * @param {Promise<T>[]} pending\n   * @returns {(Promise<T | Error>)}\n   * @memberof IAsyncQueueBaseClass\n   */\n  do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderBatch<T>\n  ): Promise<Array<T | Error> | Error>;\n  do<T>(pending: TAsyncQueueBaseClassPromiseProvider<T>): Promise<T | Error>;\n}\n\nexport abstract class TAsyncQueueBaseClass implements IAsyncQueueBaseClass {\n  /**\n   * queue of promises pending\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract queue: TAsyncQueueBaseClassPromiseProvider<any>[];\n\n  /**\n   * the currently executing batch of a promises\n   *\n   * @protected\n   * @abstract\n   * @type {(Promise<any>[] | void)}\n   * @memberof TAsyncQueueBaseClass\n   */\n  protected abstract batch: Promise<any[]> | void;\n\n  constructor(protected options: IAsyncQueueBaseClassOptions) {}\n\n  public abstract async do<T>(\n    pending: TAsyncQueueBaseClassPromiseProviderPending<T>\n  ): Promise<T | Error | Array<T | Error>>;\n}\n","/home/paul/Projects/protocol/src/classes/basic-classes/async-queue-class-base/async-queue-class-base.utils.ts",["1720"],"import { TAsyncQueueBaseClassPromiseProvider } from './async-queue-class-base.types';\nimport { timeout } from '../../../utils/common-utils/common-utils-timer';\n\nconst returnError = (res: any) => {\n  return res instanceof Error ? res : new Error(String(res));\n};\n\nexport const getRun = (timeoutMs: number) => <T>(\n  promiseProvider: TAsyncQueueBaseClassPromiseProvider<T>\n): Promise<T | Error> => {\n  try {\n    return Promise.race([promiseProvider(), timeout(timeoutMs)]).catch(\n      returnError\n    );\n  } catch (err) {\n    return Promise.resolve(err);\n  }\n};\n","/home/paul/Projects/protocol/src/types/common.types.ts",[],"/home/paul/Projects/protocol/src/utils/common-utils/common-utils-main.ts",[],"/home/paul/Projects/protocol/jest.config.js",["1721"],"/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.ts",[],"/home/paul/Projects/protocol/src/classes/basic-classes/queued-encryption-class-base/queued-encryption-class-base.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",["1722"],"import assert from 'assert';\nimport {\n  commonUtilsArrayDeleteFromArray,\n  commonUtilsArrayDoCallbackTillNoError,\n} from 'utils/common-utils/common-utils';\nimport { TSwarmMessageUserIdentifierVersion } from '../swarm-message-subclass-validator.types';\nimport validateIssuerDesirizlizedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied';\nimport validateIssuerSerializedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized';\nimport { TSwarmMessageIssuerDeserialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types';\nimport validateTypeFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type';\nimport validateUserIdentifier from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier';\nimport createValidatePayload from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload';\nimport createValidateTimestamp from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp';\nimport { TSwarmMessageType } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types';\nimport { ISwarmMessagePayloadValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { ISwarmMessageTimestampValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types';\nimport { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { CA_USER_IDENTITY_VERSIONS_LIST } from '../../../../central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { ISwarmMessage } from '../../../swarm-message-constructor.types';\nimport { validateMessageBodyRawFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-body-raw/swarm-message-subclass-validator-fields-validator-body-raw';\nimport { validateMessageSignatureFormat } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-signature/swarm-message-subclass-validator-fields-validator-signature';\nimport {\n  IMessageFieldsValidatorOptions,\n  ISwarmMessageSubclassFieldsValidator,\n} from './swarm-message-subclass-validator-fields-validator.types';\nimport {\n  ISwarmMessageBodyDeserialized,\n  ISwarmMessageRaw,\n} from '../../../swarm-message-constructor.types';\n\nexport class SwarmMessageSubclassFieldsValidator\n  implements ISwarmMessageSubclassFieldsValidator {\n  /**\n   * list of a valid issuers.\n   * If it is empty then any issuer will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected issuersList: TSwarmMessageIssuerDeserialized[] = [];\n\n  /**\n   * list of a valid user identifier versions.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected supportedUserIdentifierVer: TSwarmMessageUserIdentifierVersion[] = CA_USER_IDENTITY_VERSIONS_LIST;\n\n  /**\n   * list of a valid message types.\n   * If it is empty then any type will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {Array<string | number>}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected typesList: TSwarmMessageType[] = [];\n\n  protected payloadValidationOptions?: ISwarmMessagePayloadValidationOptions;\n\n  protected timestampValidationOptions?: ISwarmMessageTimestampValidationOptions;\n\n  protected validatePayload = createValidatePayload(\n    this.payloadValidationOptions\n  );\n\n  protected validateTimestamp = createValidateTimestamp(\n    this.timestampValidationOptions\n  );\n\n  /**\n   * Creates an instance of SwarmMessageSubclassValidator.\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  constructor(options?: IMessageFieldsValidatorOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * validate message's deserialized body object\n   *\n   * @param {ISwarmMessageBodyDeserialized} messageBody\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessageBody(messageBody: ISwarmMessageBodyDeserialized): void {\n    assert(!!messageBody, 'Message body must be defined');\n    assert(typeof messageBody === 'object', 'Message body must be an object');\n    const { iss, pld, ts, typ } = messageBody;\n\n    this.validateType(typ);\n    this.validateIssuer(iss);\n    this.validatePayload(pld);\n    this.validateTimestamp(ts);\n  }\n\n  /**\n   * validate swarm message object\n   * throw an error if the message\n   * is not valid\n   *\n   * @param {ISwarmMessage} message\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessage(message: ISwarmMessage): void {\n    assert(!!message, 'Message must be defined');\n    assert(typeof message === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig } = message;\n\n    this.validateMessageBody(bdy);\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n\n    const { iss, pld, ts, typ } = bdy;\n\n    this.validateType(typ);\n    this.validateIssuer(iss);\n    this.validatePayload(pld);\n    this.validateTimestamp(ts);\n  }\n\n  /**\n   * validate the message's in format\n   * when the body is serizlized\n   *\n   * @param {ISwarmMessageRaw} messageRaw\n   * @memberof SwarmMessageSubclassFieldsValidator\n   */\n  public validateMessageRaw(messageRaw: ISwarmMessageRaw): void {\n    assert(!!messageRaw, 'Message must be defined');\n    assert(typeof messageRaw === 'object', 'Message must be an object');\n\n    const { bdy, uid, sig } = messageRaw;\n\n    validateMessageBodyRawFormat(bdy);\n    validateMessageSignatureFormat(sig);\n    this.validateUserIdentifier(uid);\n  }\n\n  /**\n   * add an issuer string in the list\n   * as a valid issuer.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  public addIssuerToValidList = (issuer: string): void => {\n    const { issuersList } = this;\n\n    validateIssuerDesirizlizedFormat(issuer);\n    if (!issuersList.includes(issuer)) {\n      issuersList.push(issuer);\n    }\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   */\n  public removeIssuerFromValidList(issuer: string): boolean | Error {\n    const { issuersList } = this;\n\n    if (typeof issuer !== 'string') {\n      return new Error('The issuer must be a string');\n    }\n    commonUtilsArrayDeleteFromArray(issuersList, issuer);\n    return true;\n  }\n\n  /**\n   * checks whether the issuer is in the\n   * list of the valid issuers. If the\n   * list of the valid issuers is empty\n   * then returns true\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkIssuerIsInList(issuer: string): void {\n    const { issuersList } = this;\n\n    assert(\n      !issuersList.length || issuersList.includes(issuer),\n      'The issuer is not into the list of the valid issuers'\n    );\n  }\n\n  /**\n   * validate the Issuer format and\n   * if it is in the list of the valid\n   * issuers\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateIssuer(issuer: string): void {\n    validateIssuerSerializedFormat(issuer);\n    this.checkIssuerIsInList(issuer);\n  }\n\n  /**\n   * add an type string in the list\n   * as a valid types.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected addType = (type: TSwarmMessageType): void => {\n    const { typesList } = this;\n\n    validateTypeFormat(type, typesList);\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected removeType(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    commonUtilsArrayDeleteFromArray(typesList, type);\n  }\n\n  /**\n   * Checks whether the list of valid types is defined and not empty.\n   * If it is then checks if the type is into the list.\n   *\n   * @param {string| number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkTypeInList(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    assert(\n      !typesList.length || typesList.includes(type),\n      'The type is not into the list of the valid types'\n    );\n  }\n\n  /**\n   * check the Type value format and\n   * if the type is in the list of the\n   * valid types\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateType(type: TSwarmMessageType): void {\n    validateTypeFormat(type);\n    this.checkTypeInList(type);\n  }\n\n  protected validateUserIdentifier = (\n    userId: TSwarmMessageUserIdentifierSerialized\n  ): void => {\n    validateUserIdentifier(userId, this.supportedUserIdentifierVer);\n  };\n\n  /**\n   * set the options\n   *\n   * @protected\n   * @param {IMessageFieldsValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected setOptions(options?: IMessageFieldsValidatorOptions) {\n    if (options != null) {\n      assert(typeof options === 'object', 'The options must be an object');\n\n      const {\n        supportedUserIdentifierVer,\n        payloadValidationOptions,\n        issuersList,\n        typesList,\n        timestampValidationOptions,\n      } = options;\n\n      if (timestampValidationOptions) {\n        this.timestampValidationOptions = timestampValidationOptions; // set time to live in milliseconds\n        this.validateTimestamp = createValidateTimestamp(\n          timestampValidationOptions\n        );\n      }\n      if (payloadValidationOptions) {\n        this.payloadValidationOptions = payloadValidationOptions;\n        this.validatePayload = createValidatePayload(payloadValidationOptions);\n      }\n      if (supportedUserIdentifierVer instanceof Array) {\n        this.supportedUserIdentifierVer = supportedUserIdentifierVer.map(\n          (userIdentifierVersion) => {\n            if (typeof userIdentifierVersion === 'string') {\n              return userIdentifierVersion;\n            }\n            assert.fail(\n              `The version ${userIdentifierVersion} must be a string`\n            );\n          }\n        );\n      }\n      if (issuersList) {\n        if (issuersList instanceof Array) {\n          const setIssuersListResult = commonUtilsArrayDoCallbackTillNoError<\n            string\n          >(issuersList, this.addIssuerToValidList);\n\n          if (setIssuersListResult instanceof Error) {\n            assert.fail(setIssuersListResult);\n          }\n        } else {\n          assert.fail('The value of the \"issuersList\" option must be an Array');\n        }\n      }\n      if (typesList) {\n        if (typesList instanceof Array) {\n          const setTypesListResult = commonUtilsArrayDoCallbackTillNoError<\n            TSwarmMessageType\n          >(typesList, this.addType);\n\n          if (setTypesListResult instanceof Error) {\n            throw setTypesListResult;\n          }\n        } else {\n          assert.fail('The value of the \"typesList\" option must be an Array');\n        }\n      }\n    }\n  }\n}\n\nexport default SwarmMessageSubclassFieldsValidator;\n","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types.ts",["1723"],"import { ISwarmMessageSubclassFieldsValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.types';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from '../../swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types';\nimport { ICentralAuthority } from '../../../central-authority-class/central-authority-class.types';\nimport { IQueuedEncrypyionClassBaseOptions } from '../../../basic-classes/queued-encryption-class-base/queued-encryption-class-base.types';\nimport { ISwarmMessageUtilsBodySerializer } from '../../swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types';\nimport { ISwarmMessageUtilsMessageSerializer } from '../../swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types';\nimport { ISwarmMessageSubclassValidator } from '../swarm-message-subclass-validators/swarm-message-subclass-validator.types';\nimport { ISwarmMessageInstance } from '../../swarm-message-constructor.types';\nimport { TSwarmMessageSignatureAlgorithm } from '../../swarm-message-constructor.types';\nimport { ISwarmMessageBodyDeserialized } from '../../swarm-message-constructor.types';\n\nexport interface ISwarmMessageSerializerUtils {\n  getDataToSignBySwarmMsg: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw;\n  swarmMessageBodySerializer: ISwarmMessageUtilsBodySerializer;\n  swarmMessageSerializer: ISwarmMessageUtilsMessageSerializer;\n}\n\n/**\n * data about the user who will create\n * messages.\n *\n * @export\n * @interface ISwarmMessageSerializerUser\n */\nexport interface ISwarmMessageSerializerUser {\n  /**\n   * identity of the user who will be a creator of\n   * swarm messages.\n   *\n   * @type {TSwarmMessageUserIdentifierSerialized}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  userId: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * A crypto key which will be used for\n   * messages signing.\n   *\n   * @type {CryptoKey}\n   * @memberof ISwarmMessageSerializerUser\n   */\n  dataSignKey: CryptoKey;\n}\n\n/**\n * User for messages creation\n *\n * @export\n * @interface ISwarmMessageSerializerConstructorOptions\n */\nexport interface ISwarmMessageSerializerConstructorOptions {\n  /**\n   * options used for the message signing queue\n   *\n   * @type {Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  queueOptions?: Required<IQueuedEncrypyionClassBaseOptions['queueOptions']>;\n  /**\n   * instance implemented connection to the CentralAuthority\n   * to get information described in ISwarmMessageSerializerUser\n   *\n   * @type {ICentralAuthority}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  caConnection: ICentralAuthority;\n  /**\n   * utils used for a message signing\n   *\n   * @type {ISwarmMessageSerializerUtils}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  utils: ISwarmMessageSerializerUtils;\n  /**\n   * instance of the SwarmMessageFieldsValidator subclass\n   *\n   * @type {ISwarmMessageSubclassFieldsValidator}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  messageValidator: ISwarmMessageSubclassValidator;\n  /**\n   * the algorithm used for messages signing\n   *\n   * @type {ESwarmMessageSignatureAlgorithmsDescription}\n   * @memberof ISwarmMessageSerializerConstructorOptions\n   */\n  alg: TSwarmMessageSignatureAlgorithm;\n}\n\n/**\n * this class used for messages serizlization\n * before sending it to the swarm users.\n *\n * @export\n * @interface ISwarmMessageSerializer\n */\nexport interface ISwarmMessageSerializer {\n  /**\n   * serialize the message into a type\n   * which can be used for sending of\n   * a message into the swarm.\n   * If a message's data is not valid\n   * the method throws.\n   *\n   * @param {ISwarmMessageBodyDeserialized} msgBody\n   * @returns {TSwarmMessageSerialized}\n   * @memberof ISwarmMessageSerializer\n   * @throws\n   */\n  serialize(\n    msgBody: ISwarmMessageBodyDeserialized\n  ): Promise<ISwarmMessageInstance>;\n}\n","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-parser/swarm-message-utils-body-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-body-serializer/swarm-message-utils-body-serializer.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-parser/swarm-message-utils-message-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-message-serializer/swarm-message-utils-message-serializer.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/index.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.ts",["1724"],"import {\n  ISwarmMessageRaw,\n  TSwarmMessageSignatureAlgorithm,\n} from '../../swarm-message-constructor.types';\nimport { ISwarmMessageUtilSignatureGetStringForSignByMessageRaw } from './swarm-message-utils-signature.types';\nimport { SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER } from './swarm-message-utils-signature.const';\n\nexport const swarmMessageUtilSignatureGetStringForSignByMessageRaw: ISwarmMessageUtilSignatureGetStringForSignByMessageRaw = (\n  msg: Omit<ISwarmMessageRaw, 'sig'>\n) =>\n  `${msg.alg}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.uid}${SWARM_MESSAGE_UTIL_SIGNATURE_GET_STRING_FOR_SIGN_BY_MESSAGE_RAW_DELIMETER}${msg.bdy}`;\n","/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-utils/swarm-message-utils-signature/swarm-message-utils-signature.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message/swarm-message-constructor.types.ts",["1725"],"import { TSwarmMessageUserIdentifierSerialized } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { ownKeyOf } from '../../types/helper.types';\nimport {\n  ISwarmMessageSubclassParserUtils,\n  ISwarmMessageSubclassParser,\n} from './swarm-message-subclasses/swarm-message-subclass-parser/swarm-message-subclass-parser.types';\nimport {\n  ISwarmMessageSerializerUtils,\n  ISwarmMessageSerializer,\n} from './swarm-message-subclasses/swarm-message-subclass-serializer/swarm-message-subclass-serializer.types';\nimport { IMessageSignatureValidatorOptionsUtils } from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-signature-validator/swarm-message-subclass-validator-signature-validator.types';\nimport { ICentralAuthority } from '../central-authority-class/central-authority-class.types';\nimport { CentralAuthority } from '../central-authority-class/central-authority-class';\nimport {\n  IMessageValidatorOptions,\n  ISwarmMessageSubclassValidator,\n} from './swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator.types';\n\nexport enum ESwarmMessageSignatureAlgorithms {\n  'ep256' = 'ep256',\n}\n\nexport enum ESwarmMessageSignatureAlgorithmsDescription {\n  'ep256' = 'ECDSA_P-256',\n}\n\nexport const SwarmMessageSignatureSupprotedAlgorithms = Object.keys(\n  ESwarmMessageSignatureAlgorithmsDescription\n);\n\nexport type TSwarmMessageSignatureAlgorithm = ownKeyOf<\n  typeof ESwarmMessageSignatureAlgorithmsDescription\n>;\n\n/**\n * message serizlized and ready to send\n * into the swarm.\n */\nexport type TSwarmMessageSerialized = string;\n\n/**\n * message payload deserialized\n */\nexport type TSwarmMessagePayloadDeserialized = string;\n\n/**\n * message for sending an information in\n * the peer to peer decentralized system.\n * This interface describes deserialized\n * message body.\n *\n * @export\n * @interface ISwarmMessage\n * @property {string} typ - a type of the message\n * @property {string | ArrayBuffer} pld - payload of the message is a buffer or a string\n * @property {string} uid - an identity of the user which post the message\n * @property {string} tss - UNIX timestamp in UTC when the message was posted. In seconds\n * @property {string} iss - the service in which the message was generated\n *\n * The signature must sign all the fields, including\n * the algorithm it used.\n */\nexport interface ISwarmMessageBodyDeserialized {\n  typ: string | number;\n  pld: TSwarmMessagePayloadDeserialized | ArrayBuffer;\n  ts: number;\n  iss: string;\n}\n\n/**\n * This is type of the message's body\n * serialized.\n */\nexport type TSwarmMessageBodyRaw = string;\n\n/**\n * This interface represents a message\n * incoming.\n *\n * @export\n * @interface ISwarmMessageRaw\n */\nexport interface ISwarmMessageRaw {\n  /**\n   * body of the message serialized\n   *\n   * @type {TSwarmMessageBodyRaw}\n   * @memberof ISwarmMessageRaw\n   */\n  bdy: TSwarmMessageBodyRaw;\n  /**\n   * sender identifier serialized\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  uid: TSwarmMessageUserIdentifierSerialized;\n  /**\n   * signature of the message body\n   * and sender of the message\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  sig: string;\n  /**\n   * the algorythm used for the signature\n   *\n   * @type {string}\n   * @memberof ISwarmMessageRaw\n   */\n  alg: ownKeyOf<typeof ESwarmMessageSignatureAlgorithmsDescription>;\n}\n\nexport type TSwarmMessageSeriazlized = string;\n\n/**\n * body of a swarm message\n *\n * @export\n * @interface ISwarmMessageBody\n * @extends {Omit<ISwarmMessageBodyDeserialized, 'pld'>}\n */\nexport interface ISwarmMessageBody\n  extends Omit<ISwarmMessageBodyDeserialized, 'pld'> {\n  pld: TSwarmMessagePayloadDeserialized;\n}\n\n/**\n * this is representation of a message deserialized.\n *\n * @export\n * @interface ISwarmMessage\n * @extends {ISwarmMessageBodyDeserialized}\n */\nexport interface ISwarmMessage extends Omit<ISwarmMessageRaw, 'bdy'> {\n  bdy: ISwarmMessageBody;\n}\n\nexport interface ISwarmMessageInstance extends ISwarmMessage {\n  toString(): TSwarmMessageSeriazlized;\n}\n\n/**\n * utilities used for messages parsing,\n * serizlization and validation\n *\n * @export\n * @interface ISwarmMessageConstructorUtils\n * @extends {ISwarmMessageSubclassParserUtils}\n * @extends {ISwarmMessageSerializerUtils}\n * @extends {IMessageSignatureValidatorOptionsUtils}\n */\nexport interface ISwarmMessageConstructorUtils\n  extends ISwarmMessageSubclassParserUtils,\n    ISwarmMessageSerializerUtils,\n    IMessageSignatureValidatorOptionsUtils {}\n\nexport interface ISwarmMessageConstructorOptionsInstances {\n  parser: ISwarmMessageSubclassParser;\n  serizlizer: ISwarmMessageSerializer;\n  validator: ISwarmMessageSubclassValidator;\n}\n\nexport interface ISwarmMessageConstructorOptionsRequired {\n  utils: ISwarmMessageConstructorUtils;\n  caConnection: ICentralAuthority;\n  validation: IMessageValidatorOptions & {\n    signatureValidationOpts: Omit<\n      IMessageValidatorOptions['signatureValidationOpts'],\n      'caConnection'\n    >;\n  };\n  instances?: Partial<ISwarmMessageConstructorOptionsInstances>;\n}\n\n/**\n * options used for swarm messages construction.\n *\n * @export\n * @interface ISwarmMessageConstructorOptions\n */\nexport type TSwarmMessageConstructorOptions = Omit<\n  Omit<ISwarmMessageConstructorOptionsRequired, 'utils'>,\n  'validation'\n> & {\n  utils?: Partial<ISwarmMessageConstructorOptionsRequired['utils']>;\n  validation?: Partial<ISwarmMessageConstructorOptionsRequired['validation']>;\n};\n\n// construct message from a serialized\nexport interface ISwarmMessageConstructor {\n  readonly caConnection?: ICentralAuthority;\n  construct(message: TSwarmMessageSeriazlized): Promise<ISwarmMessageInstance>;\n}\n\nexport type TSwarmMessageConstructorArgumentBody = Omit<\n  ISwarmMessageBodyDeserialized,\n  'ts'\n> &\n  Partial<ISwarmMessageBodyDeserialized>;\n\n// construct message from an object which represents message's body\nexport interface ISwarmMessageConstructor {\n  construct(\n    messageBody: TSwarmMessageConstructorArgumentBody\n  ): Promise<ISwarmMessageInstance>;\n}\n","/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/index.ts",[],"/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/swarrm-message-constructor.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-store-class/swarm-store-class.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-connector-options-provider/swarm-message-store-utils-connector-options-provider.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.const.ts",[],"/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.ts",["1726","1727","1728"],"import assert from 'assert';\nimport { SwarmStore } from '../swarm-store-class/swarm-store-class';\nimport {\n  ESwarmStoreConnector,\n  ESwarmStoreEventNames,\n} from '../swarm-store-class/swarm-store-class.const';\nimport {\n  ISwarmMessageStoreAccessControlOptions,\n  ISwarmMessageDatabaseConstructors,\n} from './swarm-message-store.types';\nimport {\n  ISwarmMessageConstructor,\n  ISwarmMessageInstance,\n} from '../swarm-message/swarm-message-constructor.types';\nimport {\n  ESwarmMessageStoreEventNames,\n  SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT,\n} from './swarm-message-store.const';\nimport { extend } from '../../utils/common-utils/common-utils-objects';\nimport { ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer } from '../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreDatabaseIteratorMethodAnswer,\n  TSwarmStoreDatabaseMethodAnswer,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  TSwarmStoreDatabaseMethodArgument,\n  TSwarmStoreDatabaseIteratorMethodArgument,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  ESwarmStoreConnectorOrbitDbDatabaseMethodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMethodNames,\n} from '../swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport {\n  TSwarmStoreValueTypes,\n  TSwarmStoreDatabaseMethod,\n} from '../swarm-store-class/swarm-store-class.types';\nimport {\n  TSwarmMessageStoreConnectReturnType,\n  ISwarmMessageStoreOptions,\n} from './swarm-message-store.types';\nimport {\n  ISwarmMessageStoreEvents,\n  ISwarmMessageStore,\n} from './swarm-message-store.types';\nimport { swarmMessageStoreUtilsConnectorOptionsProvider } from './swarm-message-store-utils/swarm-message-store-utils-connector-options-provider';\nimport { getMessageConstructorForDatabase } from './swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common';\nimport { TSwarmMessageStoreMessageId } from './swarm-message-store.types';\nimport { TSwarmMessageSeriazlized } from '../swarm-message/swarm-message-constructor.types';\n\nexport class SwarmMessageStore<P extends ESwarmStoreConnector>\n  extends SwarmStore<P, ISwarmMessageStoreEvents>\n  implements ISwarmMessageStore<P> {\n  protected connectorType: P | undefined;\n\n  protected accessControl: ISwarmMessageStoreAccessControlOptions | undefined;\n\n  protected messageConstructors: ISwarmMessageDatabaseConstructors | undefined;\n\n  protected get dbMethodAddMessage(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.add as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  protected get dbMethodRemoveMessage(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.remove as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  protected get dbMethodIterator(): TSwarmStoreDatabaseMethod<P> {\n    const { connectorType } = this;\n\n    switch (connectorType as P) {\n      case ESwarmStoreConnector.OrbitDB:\n        return (ESwarmStoreConnectorOrbitDbDatabaseMethodNames.iterator as TSwarmStoreConnectorOrbitDbDatabaseMethodNames) as TSwarmStoreDatabaseMethod<\n          P\n        >;\n      default:\n        throw new Error('Failed to define the method for adding message');\n    }\n  }\n\n  public async connect(\n    options: ISwarmMessageStoreOptions<P>\n  ): TSwarmMessageStoreConnectReturnType<P> {\n    const optionsSwarmStore = await swarmMessageStoreUtilsConnectorOptionsProvider(\n      options\n    );\n\n    this.setOptions(optionsSwarmStore);\n\n    const connectionResult = await super.connect(optionsSwarmStore);\n\n    if (connectionResult instanceof Error) {\n      throw connectionResult;\n    }\n    this.setListeners();\n  }\n\n  public async addMessage(\n    dbName: string,\n    message: ISwarmMessageInstance | string\n  ): Promise<TSwarmMessageStoreMessageId> {\n    assert(dbName, 'Database name must be provided');\n    this.validateMessageFormat(message);\n\n    const response = (await this.request<\n      TSwarmStoreValueTypes<P>,\n      TSwarmMessageStoreMessageId\n    >(dbName, this.dbMethodAddMessage, this.serializeMessage(message))) as\n      | TSwarmStoreDatabaseMethodAnswer<P, string>\n      | Error;\n\n    if (response instanceof Error) {\n      throw response;\n    }\n    return this.deserializeAddMessageResponse(response);\n  }\n\n  public async deleteMessage(\n    dbName: string,\n    messageAddress: string,\n    message: ISwarmMessageInstance | string\n  ): Promise<void> {\n    assert(dbName, 'Database name must be provided');\n    assert(messageAddress, 'Message address must be provided');\n    this.request(\n      dbName,\n      this.dbMethodRemoveMessage,\n      this.getArgRemoveMessage(messageAddress, message)\n    );\n  }\n\n  public async collect(\n    dbName: string,\n    options: TSwarmStoreDatabaseIteratorMethodArgument<P>\n  ) {\n    assert(typeof dbName === 'string', '');\n\n    const iterator = await this.request(\n      dbName,\n      this.dbMethodIterator,\n      this.getArgIterateDb(dbName, options)\n    );\n\n    if (iterator instanceof Error) {\n      throw iterator;\n    }\n    return this.collectMessages(\n      dbName,\n      iterator as TSwarmStoreDatabaseIteratorMethodAnswer<P, any>\n    );\n  }\n\n  protected validateOpts(options: ISwarmMessageStoreOptions<P>): void {\n    super.validateOptions(options);\n\n    const { messageConstructors } = options;\n\n    assert(messageConstructors, 'messages constructors must be specified');\n    assert(\n      typeof messageConstructors === 'object',\n      'messages constructors must an object'\n    );\n\n    const validateMessageConstructor = (mc: any) => {\n      assert(\n        typeof mc === 'object',\n        'the message constructor must be specified'\n      );\n      assert(\n        typeof mc.construct === 'function',\n        'the message constructor must have the \"construct\" method'\n      );\n    };\n\n    assert(\n      typeof messageConstructors.default === 'object',\n      'the default message constructor must be cpecified'\n    );\n    validateMessageConstructor(messageConstructors.default);\n    Object.values(messageConstructors).forEach(validateMessageConstructor);\n  }\n\n  protected setOptions(options: ISwarmMessageStoreOptions<P>): void {\n    this.validateOpts(options);\n    this.connectorType = options.provider;\n    this.accessControl = options.accessControl;\n    this.messageConstructors = options.messageConstructors;\n  }\n\n  /**\n   * return the message constructor specified\n   * for the database\n   *\n   * @protected\n   * @param {string} dbName\n   * @returns {(ISwarmMessageConstructor | undefined)}\n   * @memberof SwarmMessageStore\n   */\n  protected getMessageConstructor(\n    dbName: string\n  ): ISwarmMessageConstructor | undefined {\n    if (!dbName || !this.messageConstructors) {\n      return;\n    }\n    return getMessageConstructorForDatabase(dbName, this.messageConstructors);\n  }\n\n  /**\n   * emits error occurred on a message creation\n   *\n   * @protected\n   * @memberof SwarmMessageStore\n   */\n  protected emitMessageConstructionFails = (\n    dbName: string,\n    message: string,\n    messageAddr: string,\n    error: Error\n  ) => {\n    this.emit(ESwarmMessageStoreEventNames.NEW_MESSAGE_ERROR, [\n      dbName,\n      message,\n      error,\n      messageAddr,\n    ]);\n  };\n\n  /**\n   * new message incoming\n   *\n   * @protected\n   * @memberof SwarmMessageStore\n   */\n  protected emitMessageNew = (\n    dbName: string,\n    message: ISwarmMessageInstance,\n    messageAddr: string\n  ) => {\n    this.emit(ESwarmMessageStoreEventNames.NEW_MESSAGE, [\n      dbName,\n      message,\n      messageAddr,\n    ]);\n  };\n\n  /**\n   * handle a new message stored in the local database\n   *\n   * @memberof SwarmMessageStore\n   */\n  protected handleNewMessage = async ([dbName, message, messageAddress]: [\n    string,\n    string,\n    string\n  ]): Promise<void> => {\n    debugger;\n    const messageConstructor = this.getMessageConstructor(dbName);\n\n    if (!messageConstructor) {\n      return this.emitMessageConstructionFails(\n        dbName,\n        message,\n        messageAddress,\n        new Error('There is no message constructor specified for the message')\n      );\n    }\n\n    try {\n      const swarmMessage = await messageConstructor.construct(message);\n\n      if (swarmMessage instanceof Error) {\n        return this.emitMessageConstructionFails(\n          dbName,\n          message,\n          messageAddress,\n          swarmMessage\n        );\n      }\n      return this.emitMessageNew(dbName, swarmMessage, messageAddress);\n    } catch (err) {\n      return this.emitMessageConstructionFails(\n        dbName,\n        message,\n        messageAddress,\n        err\n      );\n    }\n  };\n\n  protected setListeners() {\n    this.addListener(ESwarmStoreEventNames.NEW_ENTRY, this.handleNewMessage);\n  }\n\n  /**\n   * validate format of a message to send\n   *\n   * @protected\n   * @param {(ISwarmMessageInstance | string)} message\n   * @memberof SwarmMessageStore\n   */\n  protected validateMessageFormat(message: ISwarmMessageInstance | string) {\n    assert(message, 'Message must be provided');\n    assert(\n      typeof message === 'string' || typeof message === 'object',\n      'Message must be a string or an object'\n    );\n    assert(\n      typeof (message as ISwarmMessageInstance).bdy === 'object' &&\n        typeof (message as ISwarmMessageInstance).uid === 'string' &&\n        typeof (message as ISwarmMessageInstance).sig === 'string',\n      'Message must be a string or an object'\n    );\n  }\n\n  /**\n   * serizlize the message to a fromat\n   * to store it in the store with\n   * a type specified in the options\n   *\n   * @protected\n   * @returns {TSwarmStoreValueTypes<P>}\n   * @memberof SwarmMessageStore\n   */\n  protected serializeMessage(\n    message: ISwarmMessageInstance | string\n  ): TSwarmStoreValueTypes<P> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return String(message) as TSwarmStoreValueTypes<P>;\n      default:\n        throw new Error(\n          'Failed to serizlize the message to the store connector compatible format'\n        );\n    }\n  }\n\n  /**\n   * returns the argument for a message removing request\n   * accepted by the connector type provided\n   *\n   * @protected\n   * @param {string} messageAddress\n   * @param {(ISwarmMessageInstance | string)} message\n   * @returns {TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>>}\n   * @memberof SwarmMessageStore\n   */\n  protected getArgRemoveMessage(\n    messageAddress: string,\n    message: ISwarmMessageInstance | string\n  ): TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return messageAddress as TSwarmStoreDatabaseMethodArgument<\n          P,\n          TSwarmStoreValueTypes<P>\n        >;\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message removing'\n        );\n    }\n  }\n\n  /**\n   * returns argment for a database values iterator\n   *\n   * @protected\n   * @param {string} dbName\n   * @returns {TSwarmStoreDatabaseMethodArgument<P, TSwarmStoreValueTypes<P>>}\n   * @memberof SwarmMessageStore\n   */\n  protected getArgIterateDb(\n    dbName: string,\n    options: TSwarmStoreDatabaseIteratorMethodArgument<P>\n  ): TSwarmStoreDatabaseIteratorMethodArgument<P> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        assert(options, 'The iteratro opti');\n        return options\n          ? (extend(\n              options,\n              SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT\n            ) as TSwarmStoreDatabaseIteratorMethodArgument<P>)\n          : (SWARM_MESSAGE_STORE_CONNECTOR_ORBIT_DB_ITERATOR_OPTIONS_DEFAULT as TSwarmStoreDatabaseIteratorMethodArgument<\n              P\n            >);\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message collecting'\n        );\n    }\n  }\n\n  protected collectMessagesFromOrbitDBIterator(\n    dbName: string,\n    iterator: ISwarmStoreConnectorOrbitDbDatabaseIteratorAnswer<string> // TODO - may be not a string\n  ): Promise<(ISwarmMessageInstance | Error)[]> {\n    const messageConstructor = this.getMessageConstructor(dbName);\n\n    if (!messageConstructor) {\n      throw new Error(\n        `Message constructor is not defined for the database \"${dbName}\"`\n      );\n    }\n\n    const collected = iterator.collect();\n\n    return Promise.all(\n      collected.map((messageSerialized) =>\n        messageConstructor.construct(messageSerialized).catch((err) => err)\n      )\n    );\n  }\n\n  /**\n   * collect messages from iterator\n   *\n   * @protected\n   * @param {TSwarmStoreDatabaseIteratorMethodAnswer<P, any>} iterator\n   * @returns {ISwarmMessageInstance[]}\n   * @memberof SwarmMessageStore\n   */\n  protected collectMessages(\n    dbName: string,\n    iterator: TSwarmStoreDatabaseIteratorMethodAnswer<P, any>\n  ): Promise<(ISwarmMessageInstance | Error)[]> {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        return this.collectMessagesFromOrbitDBIterator(dbName, iterator);\n      default:\n        throw new Error(\n          'Failed to define argument value for a swarm message collecting'\n        );\n    }\n  }\n\n  /**\n   * transforms the result of a query for adding a message\n   * to the unique message's identifier in the database\n   *\n   * @protected\n   * @param {TSwarmStoreDatabaseMethodAnswer<\n   *       P,\n   *       TSwarmMessageSeriazlized\n   *     >} addMessageResponse\n   * @returns {TSwarmMessageStoreMessageId}\n   * @memberof SwarmMessageStore\n   */\n  protected deserializeAddMessageResponse(\n    addMessageResponse: TSwarmStoreDatabaseMethodAnswer<\n      P,\n      TSwarmMessageSeriazlized\n    >\n  ): TSwarmMessageStoreMessageId {\n    const { connectorType } = this;\n\n    switch (connectorType) {\n      case ESwarmStoreConnector.OrbitDB:\n        if (typeof addMessageResponse !== 'string') {\n          throw new Error('There is a wrong responce on add message request');\n        }\n        return addMessageResponse;\n      default:\n        return String(addMessageResponse);\n    }\n  }\n}\n","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store.types.ts",["1729"],"import {\n  ISwarmStore,\n  ISwarmStoreEvents,\n  ISwarmStoreOptions,\n} from '../swarm-store-class/swarm-store-class.types';\nimport { ESwarmStoreConnector } from '../swarm-store-class/swarm-store-class.const';\nimport {\n  ISwarmMessageInstance,\n  ISwarmMessageConstructor,\n} from '../swarm-message/swarm-message-constructor.types';\nimport { EventEmitter } from '../basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { ESwarmMessageStoreEventNames } from './swarm-message-store.const';\nimport { TSwarmMessageUserIdentifierSerialized } from '../swarm-message/swarm-message-subclasses/swarm-message-subclass-validators/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types';\nimport { TSwarmStoreDatabaseIteratorMethodArgument } from '../swarm-store-class/swarm-store-class.types';\nimport { TSwarmMessageSeriazlized } from '../swarm-message/swarm-message-constructor.types';\nimport { TCentralAuthorityUserIdentity } from '../central-authority-class/central-authority-class-types/central-authority-class-types-common';\n\n/**\n * message unique identifier in the database\n */\nexport type TSwarmMessageStoreMessageId = string;\n\nexport interface ISwarmMessageStoreEvents extends ISwarmStoreEvents {\n  /**\n   * new message stored in the local database\n   * 1) the first argument - database name where the message was added\n   * 2) the second argument - swarm message instance\n   * 3) the third argument - the global unique address of the message in the swarm\n   *\n   * @type {[\n   *     string,\n   *     ISwarmMessageInstance,\n   *     string\n   *   ]}\n   * @memberof ISwarmMessageStoreEvents\n   */\n  [ESwarmMessageStoreEventNames.NEW_MESSAGE]: [\n    string,\n    ISwarmMessageInstance,\n    string\n  ];\n  /**\n   * failed to deserialize a new message stored\n   *\n   * @type {[\n   *     string,\n   *     string,\n   *     Error,\n   *     string\n   *   ]}\n   * @memberof ISwarmMessageStoreEvents\n   */\n  [ESwarmMessageStoreEventNames.NEW_MESSAGE_ERROR]: [\n    string,\n    string,\n    Error,\n    string\n  ];\n}\n\nexport type TSwarmMessageStoreAccessControlGrantAccessCallback = (\n  // swarm message\n  message: ISwarmMessageInstance,\n  // identifier of the user sender of the message\n  userId: TCentralAuthorityUserIdentity,\n  // a name of the database from where the message is comming from\n  // TODO - can it be gotten from the database entry??\n  dbName: string\n) => Promise<boolean>;\n\n/**\n * grant the write access options to define access options\n * for the databases connected to\n *\n * @export\n * @interface ISwarmMessageStoreAccessControlOptions\n */\nexport interface ISwarmMessageStoreAccessControlOptions {\n  // async callback which is called each time before a new message will be wrote to the database\n  grantAccess?: TSwarmMessageStoreAccessControlGrantAccessCallback;\n  // a list of the user identifiers for whom an unconditional write access will be given\n  allowAccessFor?: TSwarmMessageUserIdentifierSerialized[];\n}\n\n/**\n * swarm message constructors,specified for a databases\n * and the default constructor for a messages\n *\n * @export\n * @interface ISwarmMessageDatabaseConstructors\n */\nexport interface ISwarmMessageDatabaseConstructors {\n  [dbName: string]: ISwarmMessageConstructor;\n  default: ISwarmMessageConstructor;\n}\n\nexport interface ISwarmMessageStoreOptions<P extends ESwarmStoreConnector>\n  extends ISwarmStoreOptions<P> {\n  accessControl?: ISwarmMessageStoreAccessControlOptions;\n  messageConstructors: ISwarmMessageDatabaseConstructors;\n  providerConnectionOptions: any;\n}\n\nexport type TSwarmMessageStoreConnectReturnType<\n  P extends ESwarmStoreConnector\n> = ReturnType<ISwarmStore<P, TSwarmMessageSeriazlized>['connect']>;\n\n/**\n * allows to write messages to the swarm storage\n *\n * @export\n * @interface ISwarmMessageStore\n * @extends {Omit<ISwarmStore<P>, 'connect'>}\n * @extends {EventEmitter<ISwarmMessageStoreEvents>}\n * @template P\n */\nexport interface ISwarmMessageStore<P extends ESwarmStoreConnector>\n  extends ISwarmStore<P, TSwarmMessageSeriazlized>,\n    EventEmitter<ISwarmMessageStoreEvents> {\n  /**\n   * connect to the swarm storage\n   *\n   * @param {ISwarmMessageStoreOptions<P>} options\n   * @returns {TSwarmMessageStoreConnectReturnType<P>}\n   * @memberof ISwarmMessageStore\n   * @throws\n   */\n  connect(\n    options: ISwarmMessageStoreOptions<P>\n  ): TSwarmMessageStoreConnectReturnType<P>;\n  /**\n   * add message to a database with the given name\n   *\n   * @param {string} dbName - name of the database\n   * @param {ISwarmMessageStoreOptions<P>} message - message to add\n   * @returns {Promise<TSwarmMessageStoreMessageId>} - unique message's identifier in the database\n   * @memberof ISwarmMessageStore\n   * @throws\n   */\n  addMessage(\n    dbName: string,\n    message: ISwarmMessageInstance\n  ): Promise<TSwarmMessageStoreMessageId>;\n  /**\n   * delete a message by it's address from the database\n   * @param dbName\n   * @param messageAddress\n   * @returns {Promise<void>}\n   * @memberof ISwarmMessageStore\n   * @throws\n   */\n  deleteMessage(\n    dbName: string,\n    messageAddress: string,\n    message: ISwarmMessageInstance | string\n  ): Promise<void>;\n  /**\n   * read all messages existing in the database\n   * with the name provided.\n   *\n   * @param dbName\n   * @param messageAddress\n   * @returns {Promise<void>}\n   * @memberof ISwarmMessageStore\n   * @throws\n   */\n  collect(\n    dbName: string,\n    options: TSwarmStoreDatabaseIteratorMethodArgument<P>\n  ): Promise<(ISwarmMessageInstance | Error)[]>;\n}\n","/home/paul/Projects/protocol/src/classes/swarm-message-store/swarm-message-store-utils/swarm-message-store-utils-common/swarm-message-store-utils-common.ts",[],"/home/paul/Projects/protocol/src/test/swarm-message-store-test/swarm-message-store-test.const.ts",[],"/home/paul/Projects/protocol/src/test/swarrm-message-constructor.test/swarrm-message-constructor.shared.ts",[],"/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.const.ts",[],"/home/paul/Projects/protocol/src/utils/ipfs-utils/ipfs-utils.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"1730"},{"ruleId":null,"fatal":true,"severity":2,"message":"1731"},{"ruleId":null,"fatal":true,"severity":2,"message":"1732"},{"ruleId":null,"fatal":true,"severity":2,"message":"1733"},{"ruleId":null,"fatal":true,"severity":2,"message":"1734"},{"ruleId":null,"fatal":true,"severity":2,"message":"1735"},{"ruleId":null,"fatal":true,"severity":2,"message":"1736"},{"ruleId":null,"fatal":true,"severity":2,"message":"1737"},{"ruleId":null,"fatal":true,"severity":2,"message":"1738"},{"ruleId":null,"fatal":true,"severity":2,"message":"1739"},{"ruleId":null,"fatal":true,"severity":2,"message":"1740"},{"ruleId":null,"fatal":true,"severity":2,"message":"1741"},{"ruleId":null,"fatal":true,"severity":2,"message":"1742"},{"ruleId":null,"fatal":true,"severity":2,"message":"1743"},{"ruleId":null,"fatal":true,"severity":2,"message":"1744"},{"ruleId":null,"fatal":true,"severity":2,"message":"1745"},{"ruleId":null,"fatal":true,"severity":2,"message":"1746"},{"ruleId":"1747","severity":1,"message":"1748","line":2,"column":8,"nodeType":"1749","endLine":2,"endColumn":12},{"ruleId":"1747","severity":1,"message":"1750","line":5,"column":10,"nodeType":"1749","endLine":5,"endColumn":43},{"ruleId":"1747","severity":1,"message":"1751","line":6,"column":10,"nodeType":"1749","endLine":6,"endColumn":43},{"ruleId":"1747","severity":1,"message":"1752","line":8,"column":3,"nodeType":"1749","endLine":8,"endColumn":52},{"ruleId":"1747","severity":1,"message":"1753","line":9,"column":3,"nodeType":"1749","endLine":9,"endColumn":22},{"ruleId":"1747","severity":1,"message":"1754","line":12,"column":3,"nodeType":"1749","endLine":12,"endColumn":30},{"ruleId":"1747","severity":1,"message":"1755","line":13,"column":3,"nodeType":"1749","endLine":13,"endColumn":77},{"ruleId":"1747","severity":1,"message":"1756","line":15,"column":10,"nodeType":"1749","endLine":15,"endColumn":30},{"ruleId":"1747","severity":1,"message":"1757","line":16,"column":10,"nodeType":"1749","endLine":16,"endColumn":32},{"ruleId":"1747","severity":1,"message":"1758","line":17,"column":10,"nodeType":"1749","endLine":17,"endColumn":36},{"ruleId":"1747","severity":1,"message":"1759","line":19,"column":10,"nodeType":"1749","endLine":19,"endColumn":44},{"ruleId":"1747","severity":1,"message":"1760","line":20,"column":10,"nodeType":"1749","endLine":20,"endColumn":48},{"ruleId":"1747","severity":1,"message":"1761","line":21,"column":10,"nodeType":"1749","endLine":21,"endColumn":28},{"ruleId":"1747","severity":1,"message":"1762","line":22,"column":10,"nodeType":"1749","endLine":22,"endColumn":31},{"ruleId":"1747","severity":1,"message":"1763","line":23,"column":10,"nodeType":"1749","endLine":23,"endColumn":33},{"ruleId":"1747","severity":1,"message":"1764","line":24,"column":10,"nodeType":"1749","endLine":24,"endColumn":40},{"ruleId":"1747","severity":1,"message":"1765","line":25,"column":10,"nodeType":"1749","endLine":25,"endColumn":29},{"ruleId":"1747","severity":1,"message":"1766","line":26,"column":10,"nodeType":"1749","endLine":26,"endColumn":45},{"ruleId":"1747","severity":1,"message":"1767","line":27,"column":10,"nodeType":"1749","endLine":27,"endColumn":45},{"ruleId":"1747","severity":1,"message":"1768","line":28,"column":10,"nodeType":"1749","endLine":28,"endColumn":31},{"ruleId":"1747","severity":1,"message":"1769","line":29,"column":10,"nodeType":"1749","endLine":29,"endColumn":38},{"ruleId":"1747","severity":1,"message":"1770","line":30,"column":10,"nodeType":"1749","endLine":30,"endColumn":42},{"ruleId":"1747","severity":1,"message":"1771","line":44,"column":10,"nodeType":"1749","endLine":44,"endColumn":26},{"ruleId":"1747","severity":1,"message":"1772","line":45,"column":10,"nodeType":"1749","endLine":45,"endColumn":27},{"ruleId":"1747","severity":1,"message":"1773","line":46,"column":10,"nodeType":"1749","endLine":46,"endColumn":30},{"ruleId":"1747","severity":1,"message":"1774","line":47,"column":10,"nodeType":"1749","endLine":47,"endColumn":36},{"ruleId":"1747","severity":1,"message":"1775","line":48,"column":10,"nodeType":"1749","endLine":48,"endColumn":44},{"ruleId":"1747","severity":1,"message":"1776","line":49,"column":10,"nodeType":"1749","endLine":49,"endColumn":38},{"ruleId":"1747","severity":1,"message":"1777","line":50,"column":10,"nodeType":"1749","endLine":50,"endColumn":32},{"ruleId":"1747","severity":1,"message":"1778","line":51,"column":10,"nodeType":"1749","endLine":51,"endColumn":33},{"ruleId":"1747","severity":1,"message":"1779","line":52,"column":10,"nodeType":"1749","endLine":52,"endColumn":41},{"ruleId":"1747","severity":1,"message":"1780","line":2,"column":10,"nodeType":"1749","endLine":2,"endColumn":13},{"ruleId":"1781","severity":1,"message":"1782","line":9,"column":56,"nodeType":"1783","messageId":"1784","endLine":9,"endColumn":59},{"ruleId":"1781","severity":1,"message":"1782","line":15,"column":55,"nodeType":"1783","messageId":"1784","endLine":15,"endColumn":58},{"ruleId":"1785","severity":1,"message":"1786","line":87,"column":15,"nodeType":"1787","messageId":"1788","endLine":87,"endColumn":27},{"ruleId":"1747","severity":1,"message":"1789","line":32,"column":9,"nodeType":"1749","endLine":32,"endColumn":15},{"ruleId":"1747","severity":1,"message":"1790","line":8,"column":10,"nodeType":"1749","endLine":8,"endColumn":20},{"ruleId":"1781","severity":1,"message":"1782","line":77,"column":27,"nodeType":"1783","messageId":"1784","endLine":77,"endColumn":30},{"ruleId":"1781","severity":1,"message":"1782","line":78,"column":39,"nodeType":"1783","messageId":"1784","endLine":78,"endColumn":42},{"ruleId":"1785","severity":1,"message":"1786","line":98,"column":36,"nodeType":"1787","messageId":"1788","endLine":98,"endColumn":40},{"ruleId":"1781","severity":1,"message":"1782","line":130,"column":38,"nodeType":"1783","messageId":"1784","endLine":130,"endColumn":41},{"ruleId":"1747","severity":1,"message":"1791","line":38,"column":7,"nodeType":"1749","endLine":38,"endColumn":17},{"ruleId":"1792","severity":1,"message":"1793","line":63,"column":3,"nodeType":"1794","endLine":63,"endColumn":19},{"ruleId":"1795","severity":1,"message":"1796","line":63,"column":17,"nodeType":"1797","messageId":"1798"},{"ruleId":"1747","severity":1,"message":"1799","line":3,"column":3,"nodeType":"1749","endLine":3,"endColumn":41},{"ruleId":"1747","severity":1,"message":"1800","line":1,"column":10,"nodeType":"1749","endLine":1,"endColumn":39},{"ruleId":"1781","severity":1,"message":"1782","line":2,"column":7,"nodeType":"1783","messageId":"1784","endLine":2,"endColumn":10},{"ruleId":"1781","severity":1,"message":"1782","line":13,"column":12,"nodeType":"1783","messageId":"1784","endLine":13,"endColumn":15},{"ruleId":"1781","severity":1,"message":"1782","line":47,"column":28,"nodeType":"1783","messageId":"1784","endLine":47,"endColumn":31},{"ruleId":"1781","severity":1,"message":"1782","line":67,"column":28,"nodeType":"1783","messageId":"1784","endLine":67,"endColumn":31},{"ruleId":"1781","severity":1,"message":"1782","line":38,"column":58,"nodeType":"1783","messageId":"1784","endLine":38,"endColumn":61},{"ruleId":"1747","severity":1,"message":"1801","line":391,"column":9,"nodeType":"1749","endLine":391,"endColumn":21},{"ruleId":"1785","severity":1,"message":"1786","line":187,"column":14,"nodeType":"1787","messageId":"1788","endLine":187,"endColumn":47},{"ruleId":"1785","severity":1,"message":"1786","line":213,"column":26,"nodeType":"1787","messageId":"1788","endLine":213,"endColumn":76},{"ruleId":"1785","severity":1,"message":"1786","line":213,"column":26,"nodeType":"1787","messageId":"1788","endLine":213,"endColumn":75},{"ruleId":"1781","severity":1,"message":"1782","line":321,"column":17,"nodeType":"1783","messageId":"1784","endLine":321,"endColumn":20},{"ruleId":"1785","severity":1,"message":"1786","line":44,"column":14,"nodeType":"1787","messageId":"1788","endLine":44,"endColumn":19},{"ruleId":"1785","severity":1,"message":"1786","line":44,"column":14,"nodeType":"1787","messageId":"1788","endLine":44,"endColumn":18},{"ruleId":"1781","severity":1,"message":"1782","line":158,"column":29,"nodeType":"1783","messageId":"1784","endLine":158,"endColumn":32},{"ruleId":"1781","severity":1,"message":"1782","line":188,"column":29,"nodeType":"1783","messageId":"1784","endLine":188,"endColumn":32},{"ruleId":"1781","severity":1,"message":"1782","line":225,"column":20,"nodeType":"1783","messageId":"1784","endLine":225,"endColumn":23},{"ruleId":"1747","severity":1,"message":"1802","line":4,"column":10,"nodeType":"1749","endLine":4,"endColumn":30},{"ruleId":"1781","severity":1,"message":"1782","line":37,"column":32,"nodeType":"1783","messageId":"1784","endLine":37,"endColumn":35},{"ruleId":"1785","severity":1,"message":"1786","line":103,"column":13,"nodeType":"1787","messageId":"1788","endLine":103,"endColumn":23},{"ruleId":"1785","severity":1,"message":"1786","line":103,"column":13,"nodeType":"1787","messageId":"1788","endLine":103,"endColumn":22},{"ruleId":"1785","severity":1,"message":"1786","line":134,"column":13,"nodeType":"1787","messageId":"1788","endLine":134,"endColumn":23},{"ruleId":"1785","severity":1,"message":"1786","line":134,"column":13,"nodeType":"1787","messageId":"1788","endLine":134,"endColumn":22},{"ruleId":"1785","severity":1,"message":"1786","line":152,"column":30,"nodeType":"1787","messageId":"1788","endLine":152,"endColumn":40},{"ruleId":"1785","severity":1,"message":"1786","line":152,"column":30,"nodeType":"1787","messageId":"1788","endLine":152,"endColumn":39},{"ruleId":"1781","severity":1,"message":"1782","line":7,"column":18,"nodeType":"1783","messageId":"1784","endLine":7,"endColumn":21},{"ruleId":"1803","severity":1,"message":"1804","line":327,"column":21,"nodeType":"1805","messageId":"1806","endLine":336,"endColumn":16},{"ruleId":"1803","severity":1,"message":"1804","line":337,"column":22,"nodeType":"1805","messageId":"1806","endLine":340,"endColumn":16},{"ruleId":"1747","severity":1,"message":"1807","line":1,"column":10,"nodeType":"1749","endLine":1,"endColumn":44},{"ruleId":"1781","severity":1,"message":"1782","line":10,"column":19,"nodeType":"1783","messageId":"1784","endLine":10,"endColumn":22},{"ruleId":"1781","severity":1,"message":"1782","line":26,"column":19,"nodeType":"1783","messageId":"1784","endLine":26,"endColumn":22},{"ruleId":"1781","severity":1,"message":"1782","line":19,"column":58,"nodeType":"1783","messageId":"1784","endLine":19,"endColumn":61},{"ruleId":"1781","severity":1,"message":"1782","line":34,"column":13,"nodeType":"1783","messageId":"1784","endLine":34,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":64,"column":13,"nodeType":"1783","messageId":"1784","endLine":64,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":87,"column":15,"nodeType":"1783","messageId":"1784","endLine":87,"endColumn":18},{"ruleId":"1747","severity":1,"message":"1808","line":11,"column":3,"nodeType":"1749","endLine":11,"endColumn":23},{"ruleId":"1781","severity":1,"message":"1782","line":217,"column":30,"nodeType":"1783","messageId":"1784","endLine":217,"endColumn":33},{"ruleId":"1781","severity":1,"message":"1782","line":250,"column":28,"nodeType":"1783","messageId":"1784","endLine":250,"endColumn":31},{"ruleId":"1781","severity":1,"message":"1782","line":16,"column":62,"nodeType":"1783","messageId":"1784","endLine":16,"endColumn":65},{"ruleId":"1781","severity":1,"message":"1782","line":27,"column":22,"nodeType":"1783","messageId":"1784","endLine":27,"endColumn":25},{"ruleId":"1781","severity":1,"message":"1782","line":72,"column":22,"nodeType":"1783","messageId":"1784","endLine":72,"endColumn":25},{"ruleId":"1781","severity":1,"message":"1782","line":73,"column":38,"nodeType":"1783","messageId":"1784","endLine":73,"endColumn":41},{"ruleId":"1781","severity":1,"message":"1782","line":119,"column":22,"nodeType":"1783","messageId":"1784","endLine":119,"endColumn":25},{"ruleId":"1781","severity":1,"message":"1782","line":133,"column":38,"nodeType":"1783","messageId":"1784","endLine":133,"endColumn":41},{"ruleId":"1781","severity":1,"message":"1782","line":6,"column":16,"nodeType":"1783","messageId":"1784","endLine":6,"endColumn":19},{"ruleId":"1781","severity":1,"message":"1782","line":143,"column":14,"nodeType":"1783","messageId":"1784","endLine":143,"endColumn":17},{"ruleId":"1785","severity":1,"message":"1786","line":206,"column":31,"nodeType":"1787","messageId":"1788","endLine":206,"endColumn":43},{"ruleId":"1785","severity":1,"message":"1786","line":231,"column":35,"nodeType":"1787","messageId":"1788","endLine":231,"endColumn":56},{"ruleId":"1785","severity":1,"message":"1786","line":244,"column":34,"nodeType":"1787","messageId":"1788","endLine":244,"endColumn":46},{"ruleId":"1781","severity":1,"message":"1782","line":388,"column":39,"nodeType":"1783","messageId":"1784","endLine":388,"endColumn":42},{"ruleId":"1785","severity":1,"message":"1786","line":546,"column":10,"nodeType":"1787","messageId":"1788","endLine":546,"endColumn":38},{"ruleId":"1781","severity":1,"message":"1782","line":3,"column":42,"nodeType":"1783","messageId":"1784","endLine":3,"endColumn":45},{"ruleId":"1781","severity":1,"message":"1782","line":34,"column":71,"nodeType":"1783","messageId":"1784","endLine":34,"endColumn":74},{"ruleId":"1747","severity":1,"message":"1809","line":546,"column":38,"nodeType":"1749","endLine":546,"endColumn":44},{"ruleId":"1747","severity":1,"message":"1809","line":858,"column":38,"nodeType":"1749","endLine":858,"endColumn":44},{"ruleId":"1781","severity":1,"message":"1782","line":972,"column":34,"nodeType":"1783","messageId":"1784","endLine":972,"endColumn":37},{"ruleId":"1781","severity":1,"message":"1782","line":4,"column":28,"nodeType":"1783","messageId":"1784","endLine":4,"endColumn":31},{"ruleId":"1785","severity":1,"message":"1786","line":144,"column":26,"nodeType":"1787","messageId":"1788","endLine":144,"endColumn":39},{"ruleId":"1785","severity":1,"message":"1786","line":168,"column":26,"nodeType":"1787","messageId":"1788","endLine":168,"endColumn":39},{"ruleId":"1747","severity":1,"message":"1810","line":1,"column":8,"nodeType":"1749","endLine":1,"endColumn":17},{"ruleId":"1747","severity":1,"message":"1811","line":5,"column":3,"nodeType":"1749","endLine":5,"endColumn":70},{"ruleId":"1781","severity":1,"message":"1782","line":24,"column":40,"nodeType":"1783","messageId":"1784","endLine":24,"endColumn":43},{"ruleId":"1781","severity":1,"message":"1782","line":22,"column":20,"nodeType":"1783","messageId":"1784","endLine":22,"endColumn":23},{"ruleId":"1781","severity":1,"message":"1782","line":108,"column":38,"nodeType":"1783","messageId":"1784","endLine":108,"endColumn":41},{"ruleId":"1781","severity":1,"message":"1782","line":150,"column":46,"nodeType":"1783","messageId":"1784","endLine":150,"endColumn":49},{"ruleId":"1781","severity":1,"message":"1782","line":39,"column":20,"nodeType":"1783","messageId":"1784","endLine":39,"endColumn":23},{"ruleId":"1781","severity":1,"message":"1782","line":20,"column":64,"nodeType":"1783","messageId":"1784","endLine":20,"endColumn":67},{"ruleId":"1781","severity":1,"message":"1782","line":64,"column":46,"nodeType":"1783","messageId":"1784","endLine":64,"endColumn":49},{"ruleId":"1781","severity":1,"message":"1782","line":81,"column":13,"nodeType":"1783","messageId":"1784","endLine":81,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":94,"column":13,"nodeType":"1783","messageId":"1784","endLine":94,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":147,"column":13,"nodeType":"1783","messageId":"1784","endLine":147,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":160,"column":13,"nodeType":"1783","messageId":"1784","endLine":160,"endColumn":16},{"ruleId":"1781","severity":1,"message":"1782","line":244,"column":20,"nodeType":"1783","messageId":"1784","endLine":244,"endColumn":23},{"ruleId":"1781","severity":1,"message":"1782","line":161,"column":33,"nodeType":"1783","messageId":"1784","endLine":161,"endColumn":36},{"ruleId":"1781","severity":1,"message":"1782","line":270,"column":14,"nodeType":"1783","messageId":"1784","endLine":270,"endColumn":17},{"ruleId":"1785","severity":1,"message":"1786","line":273,"column":24,"nodeType":"1787","messageId":"1788","endLine":273,"endColumn":32},{"ruleId":"1785","severity":1,"message":"1786","line":291,"column":19,"nodeType":"1787","messageId":"1788","endLine":291,"endColumn":28},{"ruleId":"1781","severity":1,"message":"1782","line":294,"column":26,"nodeType":"1783","messageId":"1784","endLine":294,"endColumn":29},{"ruleId":"1781","severity":1,"message":"1782","line":418,"column":12,"nodeType":"1783","messageId":"1784","endLine":418,"endColumn":15},{"ruleId":"1785","severity":1,"message":"1786","line":531,"column":26,"nodeType":"1787","messageId":"1788","endLine":531,"endColumn":34},{"ruleId":"1781","severity":1,"message":"1782","line":52,"column":5,"nodeType":"1783","messageId":"1784","endLine":52,"endColumn":8},{"ruleId":"1781","severity":1,"message":"1782","line":85,"column":11,"nodeType":"1783","messageId":"1784","endLine":85,"endColumn":14},{"ruleId":"1785","severity":1,"message":"1786","line":95,"column":23,"nodeType":"1787","messageId":"1788","endLine":95,"endColumn":32},{"ruleId":"1785","severity":1,"message":"1786","line":101,"column":27,"nodeType":"1787","messageId":"1788","endLine":101,"endColumn":36},{"ruleId":"1781","severity":1,"message":"1782","line":101,"column":40,"nodeType":"1783","messageId":"1784","endLine":101,"endColumn":43},{"ruleId":"1795","severity":1,"message":"1812","line":160,"column":23,"nodeType":"1797","messageId":"1798"},{"ruleId":"1781","severity":1,"message":"1782","line":78,"column":24,"nodeType":"1783","messageId":"1784","endLine":78,"endColumn":27},{"ruleId":"1781","severity":1,"message":"1782","line":98,"column":40,"nodeType":"1783","messageId":"1784","endLine":98,"endColumn":43},{"ruleId":"1781","severity":1,"message":"1782","line":98,"column":50,"nodeType":"1783","messageId":"1784","endLine":98,"endColumn":53},{"ruleId":"1781","severity":1,"message":"1782","line":275,"column":22,"nodeType":"1783","messageId":"1784","endLine":275,"endColumn":25},{"ruleId":"1781","severity":1,"message":"1782","line":290,"column":42,"nodeType":"1783","messageId":"1784","endLine":290,"endColumn":45},{"ruleId":"1781","severity":1,"message":"1782","line":1078,"column":5,"nodeType":"1783","messageId":"1784","endLine":1078,"endColumn":8},{"ruleId":"1747","severity":1,"message":"1813","line":3,"column":3,"nodeType":"1749","endLine":3,"endColumn":16},{"ruleId":"1747","severity":1,"message":"1814","line":4,"column":3,"nodeType":"1749","endLine":4,"endColumn":16},{"ruleId":"1747","severity":1,"message":"1815","line":5,"column":3,"nodeType":"1749","endLine":5,"endColumn":24},{"ruleId":"1747","severity":1,"message":"1816","line":6,"column":3,"nodeType":"1749","endLine":6,"endColumn":26},{"ruleId":"1747","severity":1,"message":"1817","line":7,"column":3,"nodeType":"1749","endLine":7,"endColumn":18},{"ruleId":"1747","severity":1,"message":"1818","line":8,"column":3,"nodeType":"1749","endLine":8,"endColumn":14},{"ruleId":"1747","severity":1,"message":"1819","line":9,"column":3,"nodeType":"1749","endLine":9,"endColumn":22},{"ruleId":"1747","severity":1,"message":"1820","line":11,"column":10,"nodeType":"1749","endLine":11,"endColumn":23},{"ruleId":"1747","severity":1,"message":"1821","line":13,"column":10,"nodeType":"1749","endLine":13,"endColumn":29},{"ruleId":"1747","severity":1,"message":"1822","line":23,"column":7,"nodeType":"1749","endLine":23,"endColumn":21},{"ruleId":"1747","severity":1,"message":"1823","line":3,"column":8,"nodeType":"1749","endLine":3,"endColumn":13},{"ruleId":"1781","severity":1,"message":"1782","line":15,"column":6,"nodeType":"1783","messageId":"1784","endLine":15,"endColumn":9},{"ruleId":"1781","severity":1,"message":"1782","line":25,"column":48,"nodeType":"1783","messageId":"1784","endLine":25,"endColumn":51},{"ruleId":"1781","severity":1,"message":"1782","line":27,"column":34,"nodeType":"1783","messageId":"1784","endLine":27,"endColumn":37},{"ruleId":"1781","severity":1,"message":"1782","line":8,"column":23,"nodeType":"1783","messageId":"1784","endLine":8,"endColumn":26},{"ruleId":"1781","severity":1,"message":"1782","line":15,"column":23,"nodeType":"1783","messageId":"1784","endLine":15,"endColumn":26},{"ruleId":"1781","severity":1,"message":"1782","line":16,"column":21,"nodeType":"1783","messageId":"1784","endLine":16,"endColumn":24},{"ruleId":"1781","severity":1,"message":"1782","line":40,"column":25,"nodeType":"1783","messageId":"1784","endLine":40,"endColumn":28},{"ruleId":"1781","severity":1,"message":"1782","line":48,"column":18,"nodeType":"1783","messageId":"1784","endLine":48,"endColumn":21},{"ruleId":"1781","severity":1,"message":"1782","line":123,"column":16,"nodeType":"1783","messageId":"1784","endLine":123,"endColumn":19},{"ruleId":"1781","severity":1,"message":"1782","line":124,"column":18,"nodeType":"1783","messageId":"1784","endLine":124,"endColumn":21},{"ruleId":"1781","severity":1,"message":"1782","line":1,"column":33,"nodeType":"1783","messageId":"1784","endLine":1,"endColumn":36},{"ruleId":"1781","severity":1,"message":"1782","line":4,"column":37,"nodeType":"1783","messageId":"1784","endLine":4,"endColumn":40},{"ruleId":"1781","severity":1,"message":"1782","line":8,"column":34,"nodeType":"1783","messageId":"1784","endLine":8,"endColumn":37},{"ruleId":"1781","severity":1,"message":"1782","line":28,"column":46,"nodeType":"1783","messageId":"1784","endLine":28,"endColumn":49},{"ruleId":"1781","severity":1,"message":"1782","line":28,"column":74,"nodeType":"1783","messageId":"1784","endLine":28,"endColumn":77},{"ruleId":"1747","severity":1,"message":"1824","line":23,"column":3,"nodeType":"1749","endLine":23,"endColumn":8},{"ruleId":"1747","severity":1,"message":"1825","line":24,"column":3,"nodeType":"1749","endLine":24,"endColumn":9},{"ruleId":"1781","severity":1,"message":"1782","line":32,"column":8,"nodeType":"1783","messageId":"1784","endLine":32,"endColumn":11},{"ruleId":"1781","severity":1,"message":"1782","line":4,"column":14,"nodeType":"1783","messageId":"1784","endLine":4,"endColumn":17},{"ruleId":"1747","severity":1,"message":"1826","line":11,"column":24,"nodeType":"1749","endLine":11,"endColumn":33},{"ruleId":"1747","severity":1,"message":"1827","line":4,"column":3,"nodeType":"1749","endLine":4,"endColumn":21},{"ruleId":"1781","severity":1,"message":"1782","line":10,"column":41,"nodeType":"1783","messageId":"1784","endLine":10,"endColumn":44},{"ruleId":"1781","severity":1,"message":"1782","line":14,"column":41,"nodeType":"1783","messageId":"1784","endLine":14,"endColumn":44},{"ruleId":"1781","severity":1,"message":"1782","line":20,"column":44,"nodeType":"1783","messageId":"1784","endLine":20,"endColumn":47},{"ruleId":"1781","severity":1,"message":"1782","line":24,"column":43,"nodeType":"1783","messageId":"1784","endLine":24,"endColumn":46},{"ruleId":"1781","severity":1,"message":"1782","line":28,"column":47,"nodeType":"1783","messageId":"1784","endLine":28,"endColumn":50},{"ruleId":"1781","severity":1,"message":"1782","line":24,"column":32,"nodeType":"1783","messageId":"1784","endLine":24,"endColumn":35},{"ruleId":"1781","severity":1,"message":"1782","line":26,"column":42,"nodeType":"1783","messageId":"1784","endLine":26,"endColumn":45},{"ruleId":"1781","severity":1,"message":"1782","line":46,"column":48,"nodeType":"1783","messageId":"1784","endLine":46,"endColumn":51},{"ruleId":"1781","severity":1,"message":"1782","line":50,"column":50,"nodeType":"1783","messageId":"1784","endLine":50,"endColumn":53},{"ruleId":"1781","severity":1,"message":"1782","line":55,"column":14,"nodeType":"1783","messageId":"1784","endLine":55,"endColumn":17},{"ruleId":"1781","severity":1,"message":"1782","line":61,"column":14,"nodeType":"1783","messageId":"1784","endLine":61,"endColumn":17},{"ruleId":"1781","severity":1,"message":"1782","line":66,"column":58,"nodeType":"1783","messageId":"1784","endLine":66,"endColumn":61},{"ruleId":"1781","severity":1,"message":"1782","line":99,"column":8,"nodeType":"1783","messageId":"1784","endLine":99,"endColumn":11},{"ruleId":"1781","severity":1,"message":"1782","line":122,"column":36,"nodeType":"1783","messageId":"1784","endLine":122,"endColumn":39},{"ruleId":"1781","severity":1,"message":"1782","line":125,"column":35,"nodeType":"1783","messageId":"1784","endLine":125,"endColumn":38},{"ruleId":"1747","severity":1,"message":"1826","line":15,"column":24,"nodeType":"1749","endLine":15,"endColumn":33},{"ruleId":"1781","severity":1,"message":"1782","line":23,"column":8,"nodeType":"1783","messageId":"1784","endLine":23,"endColumn":11},{"ruleId":"1747","severity":1,"message":"1828","line":3,"column":3,"nodeType":"1749","endLine":3,"endColumn":68},{"ruleId":"1747","severity":1,"message":"1829","line":12,"column":3,"nodeType":"1749","endLine":12,"endColumn":33},{"ruleId":"1747","severity":1,"message":"1830","line":1,"column":10,"nodeType":"1749","endLine":1,"endColumn":38},{"ruleId":"1747","severity":1,"message":"1831","line":2,"column":10,"nodeType":"1749","endLine":2,"endColumn":22},{"ruleId":"1781","severity":1,"message":"1782","line":7,"column":66,"nodeType":"1783","messageId":"1784","endLine":7,"endColumn":69},{"ruleId":"1781","severity":1,"message":"1782","line":25,"column":57,"nodeType":"1783","messageId":"1784","endLine":25,"endColumn":60},{"ruleId":"1781","severity":1,"message":"1782","line":35,"column":10,"nodeType":"1783","messageId":"1784","endLine":35,"endColumn":13},{"ruleId":"1781","severity":1,"message":"1782","line":16,"column":56,"nodeType":"1783","messageId":"1784","endLine":16,"endColumn":59},{"ruleId":"1781","severity":1,"message":"1782","line":18,"column":28,"nodeType":"1783","messageId":"1784","endLine":18,"endColumn":31},{"ruleId":"1781","severity":1,"message":"1782","line":34,"column":37,"nodeType":"1783","messageId":"1784","endLine":34,"endColumn":40},{"ruleId":"1781","severity":1,"message":"1782","line":45,"column":42,"nodeType":"1783","messageId":"1784","endLine":45,"endColumn":45},{"ruleId":"1781","severity":1,"message":"1782","line":84,"column":22,"nodeType":"1783","messageId":"1784","endLine":84,"endColumn":25},{"ruleId":"1781","severity":1,"message":"1782","line":88,"column":47,"nodeType":"1783","messageId":"1784","endLine":88,"endColumn":50},{"ruleId":"1781","severity":1,"message":"1782","line":89,"column":47,"nodeType":"1783","messageId":"1784","endLine":89,"endColumn":50},{"ruleId":"1781","severity":1,"message":"1782","line":59,"column":65,"nodeType":"1783","messageId":"1784","endLine":59,"endColumn":68},{"ruleId":"1781","severity":1,"message":"1782","line":69,"column":37,"nodeType":"1783","messageId":"1784","endLine":69,"endColumn":40},{"ruleId":"1781","severity":1,"message":"1782","line":4,"column":27,"nodeType":"1783","messageId":"1784","endLine":4,"endColumn":30},{"ruleId":null,"fatal":true,"severity":2,"message":"1832"},{"ruleId":"1833","severity":1,"message":"1834","line":317,"column":35,"nodeType":"1805","messageId":"1835"},{"ruleId":"1747","severity":1,"message":"1836","line":1,"column":10,"nodeType":"1749","endLine":1,"endColumn":46},{"ruleId":"1747","severity":1,"message":"1837","line":3,"column":3,"nodeType":"1749","endLine":3,"endColumn":34},{"ruleId":"1747","severity":1,"message":"1838","line":13,"column":10,"nodeType":"1749","endLine":13,"endColumn":26},{"ruleId":"1781","severity":1,"message":"1782","line":166,"column":62,"nodeType":"1783","messageId":"1784","endLine":166,"endColumn":65},{"ruleId":"1781","severity":1,"message":"1782","line":181,"column":45,"nodeType":"1783","messageId":"1784","endLine":181,"endColumn":48},{"ruleId":"1781","severity":1,"message":"1782","line":448,"column":58,"nodeType":"1783","messageId":"1784","endLine":448,"endColumn":61},{"ruleId":"1781","severity":1,"message":"1782","line":101,"column":30,"nodeType":"1783","messageId":"1784","endLine":101,"endColumn":33},"Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/CounterStore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/DBOptions.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/DocumentStore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/EventStore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/FeedStore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/IReplicationStatus.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/Identity.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/KeyValueStore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/Keystore.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/LogEntry.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/OrbitDB.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/OrbitDBAccessControllers/AccessControllerInterface.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessController.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/OrbitDBAccessControllers/OrbitDBAccessControllers.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/Store.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/index.d.ts.\nThe file must be included in at least one of the projects provided.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: node_modules-local/orbit-db-types/test.ts.\nThe file must be included in at least one of the projects provided.","@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","'runTestFirebaseConnectionDatabase' is defined but never used.","'runTestFirebaseCredentialsStorage' is defined but never used.","'runTestCAIdentityWithAuthorityProviderGeneratorV1' is defined but never used.","'runTestCAIdentityV1' is defined but never used.","'runTestCAConnectionFirebase' is defined but never used.","'runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider' is defined but never used.","'runTestErrorExtended' is defined but never used.","'runTestSwarmConnection' is defined but never used.","'runTestSwarmConnectionIPFS' is defined but never used.","'runTestSwarmStoreOrbitDBConnection' is defined but never used.","'runTestValidateMessagingTimestampsTest' is defined but never used.","'runTestHttpRequest' is defined but never used.","'runTestPseudoNtpClass' is defined but never used.","'runTestClientTimeSynced' is defined but never used.","'runSwarmMessageFieldsValidator' is defined but never used.","'runTestCAIdentityV2' is defined but never used.","'runCACredentialsIdentityStorageTest' is defined but never used.","'runTestCAConnectionsUtilsValidators' is defined but never used.","'runTestCommonUtilsURL' is defined but never used.","'runTestCAConnectionsPoolTest' is defined but never used.","'runTestCASwarmCredentilsProvider' is defined but never used.","'runTestSaltUtils' is defined but never used.","'testKeyGeneration' is defined but never used.","'runTestSecretStorage' is defined but never used.","'runTestEncryptionKeysUtils' is defined but never used.","'runTestAuthorityStorageCurrentUser' is defined but never used.","'runTestCentralAuthorityUtils' is defined but never used.","'runTestOpenStorageTest' is defined but never used.","'runTestCentralAuthority' is defined but never used.","'runSwarmMessageConstructorTests' is defined but never used.","'any' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","'thirdParam' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'signInResult' is assigned a value but never used.","'CA_CONNECTION_STATUS' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","ArrowFunctionExpression","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'status' is assigned a value but never used.","'Multiaddr' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","Unexpected empty async method 'load'.","'encryptNative' is defined but never used.","'decryptNative' is defined but never used.","'exportKeyPairAsString' is defined but never used.","'importKeyPairFromString' is defined but never used.","'encryptToString' is defined but never used.","'decryptData' is defined but never used.","'encryptToTypedArray' is defined but never used.","'calculateHash' is defined but never used.","'arrayBufferToBase64' is defined but never used.","'testEncryption' is assigned a value but never used.","'Mocha' is defined but never used.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'exportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used.","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: jest.config.js.\nThe file must be included in at least one of the projects provided.","array-callback-return","Expected to return a value at the end of arrow function.","expectedAtEnd","'ISwarmMessageSubclassFieldsValidator' is defined but never used.","'TSwarmMessageSignatureAlgorithm' is defined but never used.","'CentralAuthority' is defined but never used."]