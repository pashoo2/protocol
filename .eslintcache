[{"/home/paul/projects/decentrilized-protocol/src/App.tsx":"1","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts":"2","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts":"3","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts":"4","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts":"5","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts":"6","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts":"7","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts":"8","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts":"9","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts":"10","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts":"11","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts":"12","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts":"13","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts":"14","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts":"15","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts":"16","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts":"17","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts":"18","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts":"19","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts":"20","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts":"21","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts":"22","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts":"23","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts":"24","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts":"25","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts":"26","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts":"27","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts":"28","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts":"29","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts":"30","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts":"31","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts":"32","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts":"33","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts":"34","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts":"35","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts":"36","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts":"37","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts":"38","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts":"39","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts":"40","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts":"41","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts":"42","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts":"43","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts":"44","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts":"45","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts":"46","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts":"47","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts":"48","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts":"49","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts":"50","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts":"51","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts":"52","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts":"53","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts":"54","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts":"55","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts":"56","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts":"57","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts":"58","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts":"59","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts":"60","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts":"61","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts":"62","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts":"63","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts":"64","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts":"65","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts":"66","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts":"67","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts":"68","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts":"69","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts":"70","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts":"71","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts":"72","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts":"73","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts":"74","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.const.ts":"75","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.ts":"76","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.const.ts":"77","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.ts":"78","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-storage-provider/secret-storage-local-storage-provider.ts":"79","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-session-storage-provider/secret-storage-session-storage-provider.ts":"80","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts":"81","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts":"82","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts":"83","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts":"84","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts":"85","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts":"86","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts":"87","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts":"88","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts":"89","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts":"90","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts":"91","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts":"92","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts":"93","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts":"94","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts":"95","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts":"96","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts":"97","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts":"98","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts":"99","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts":"100","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts":"101","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts":"102","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts":"103","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts":"104","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts":"105","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts":"106","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts":"107","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts":"108","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts":"109","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts":"110","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts":"111","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts":"112","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts":"113","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts":"114","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts":"115","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts":"116","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts":"117","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts":"118","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts":"119","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts":"120","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts":"121","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts":"122","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts":"123","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts":"124","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts":"125","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts":"126","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts":"127","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts":"128","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts":"129","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts":"130","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts":"131","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts":"132","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts":"133","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts":"134","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts":"135","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts":"136","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts":"137","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts":"138","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts":"139","/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts":"140","/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts":"141","/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts":"142","/home/paul/projects/decentrilized-protocol/src/index.tsx":"143","/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts":"144","/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts":"145","/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts":"146","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts":"147","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts":"148","/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts":"149","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts":"150","/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts":"151","/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts":"152","/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts":"153","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts":"154","/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts":"155","/home/paul/projects/decentrilized-protocol/src/types/main.types.ts":"156","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts":"157","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts":"158","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts":"159","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts":"160","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts":"161","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts":"162","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts":"163","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts":"164","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts":"165","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts":"166","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts":"167","/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts":"168","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts":"169","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts":"170","/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts":"171","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts":"172","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts":"173","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts":"174","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts":"175","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts":"176","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts":"177","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts":"178","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts":"179","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts":"180","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts":"181","/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts":"182","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts":"183","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts":"184","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts":"185","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts":"186","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts":"187","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts":"188","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts":"189","/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts":"190","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts":"191","/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts":"192","/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts":"193","/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts":"194","/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts":"195","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts":"196","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts":"197","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts":"198","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts":"199","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts":"200","/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts":"201","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts":"202","/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts":"203","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts":"204","/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts":"205","/home/paul/projects/decentrilized-protocol/src/App.test.tsx":"206","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts":"207","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts":"208","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts":"209","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts":"210","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts":"211","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts":"212","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts":"213","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts":"214","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts":"215","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts":"216","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts":"217","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts":"218","/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts":"219","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts":"220","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts":"221","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js":"222","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts":"223","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts":"224","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts":"225","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts":"226","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts":"227","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts":"228","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts":"229","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts":"230","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts":"231","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts":"232","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts":"233","/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts":"234","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts":"235","/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts":"236","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts":"237","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts":"238","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts":"239","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts":"240","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts":"241","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts":"242","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts":"243","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts":"244","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts":"245","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts":"246","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts":"247","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts":"248","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts":"249","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts":"250","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts":"251","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts":"252","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts":"253","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts":"254","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts":"255","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts":"256","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts":"257","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts":"258","/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts":"259","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.const.ts":"260","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.ts":"261","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts":"262","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts":"263","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts":"264","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-auth/central-authority-storage-auth-providers-credentials.ts":"265","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-auth/central-authority-storage-auth-providers-credentials.types.ts":"266","/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts":"267","/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts":"268","/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts":"269","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts":"270","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts":"271","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts":"272","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts":"273","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts":"274","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts":"275","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts":"276","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts":"277","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts":"278","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts":"279","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts":"280","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts":"281","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts":"282","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts":"283","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts":"284","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts":"285","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts":"286","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts":"287","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts":"288","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.types.ts":"289","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.utils.ts":"290","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts":"291","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts":"292","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts":"293","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials copy.ts":"294"},{"size":4887,"mtime":1577797708340,"results":"295","hashOfConfig":"296"},{"size":578,"mtime":1574620670429,"results":"297","hashOfConfig":"296"},{"size":235,"mtime":1574620670429,"results":"298","hashOfConfig":"296"},{"size":1329,"mtime":1574797996119,"results":"299","hashOfConfig":"296"},{"size":2819,"mtime":1574797996123,"results":"300","hashOfConfig":"296"},{"size":1636,"mtime":1574620670433,"results":"301","hashOfConfig":"296"},{"size":3466,"mtime":1574797996123,"results":"302","hashOfConfig":"296"},{"size":4421,"mtime":1574797996123,"results":"303","hashOfConfig":"296"},{"size":1311,"mtime":1574797996123,"results":"304","hashOfConfig":"296"},{"size":7950,"mtime":1574797996123,"results":"305","hashOfConfig":"296"},{"size":1874,"mtime":1574797996123,"results":"306","hashOfConfig":"296"},{"size":2547,"mtime":1574797996123,"results":"307","hashOfConfig":"296"},{"size":728,"mtime":1574620670433,"results":"308","hashOfConfig":"296"},{"size":1648,"mtime":1574620670433,"results":"309","hashOfConfig":"296"},{"size":191,"mtime":1574620670433,"results":"310","hashOfConfig":"296"},{"size":2582,"mtime":1574797996123,"results":"311","hashOfConfig":"296"},{"size":978,"mtime":1574620670433,"results":"312","hashOfConfig":"296"},{"size":58,"mtime":1574620670433,"results":"313","hashOfConfig":"296"},{"size":2147,"mtime":1574797996123,"results":"314","hashOfConfig":"296"},{"size":216,"mtime":1574620670433,"results":"315","hashOfConfig":"296"},{"size":1603,"mtime":1576614230822,"results":"316","hashOfConfig":"296"},{"size":66,"mtime":1574620670433,"results":"317","hashOfConfig":"296"},{"size":2236,"mtime":1577798824458,"results":"318","hashOfConfig":"296"},{"size":1103,"mtime":1575729809239,"results":"319","hashOfConfig":"296"},{"size":751,"mtime":1574620670433,"results":"320","hashOfConfig":"296"},{"size":187,"mtime":1574620670437,"results":"321","hashOfConfig":"296"},{"size":1579,"mtime":1576607687453,"results":"322","hashOfConfig":"296"},{"size":738,"mtime":1575729809239,"results":"323","hashOfConfig":"296"},{"size":224,"mtime":1574620670437,"results":"324","hashOfConfig":"296"},{"size":379,"mtime":1574620670437,"results":"325","hashOfConfig":"296"},{"size":2670,"mtime":1574620670437,"results":"326","hashOfConfig":"296"},{"size":781,"mtime":1575729809243,"results":"327","hashOfConfig":"296"},{"size":1934,"mtime":1576607687453,"results":"328","hashOfConfig":"296"},{"size":671,"mtime":1575729809243,"results":"329","hashOfConfig":"296"},{"size":215,"mtime":1574620670437,"results":"330","hashOfConfig":"296"},{"size":340,"mtime":1574620670437,"results":"331","hashOfConfig":"296"},{"size":3790,"mtime":1574620670437,"results":"332","hashOfConfig":"296"},{"size":1494,"mtime":1575729809243,"results":"333","hashOfConfig":"296"},{"size":676,"mtime":1575729809243,"results":"334","hashOfConfig":"296"},{"size":224,"mtime":1574620670437,"results":"335","hashOfConfig":"296"},{"size":76,"mtime":1574620670437,"results":"336","hashOfConfig":"296"},{"size":3771,"mtime":1576696023657,"results":"337","hashOfConfig":"296"},{"size":1035,"mtime":1576086673740,"results":"338","hashOfConfig":"296"},{"size":6532,"mtime":1576086673740,"results":"339","hashOfConfig":"296"},{"size":2384,"mtime":1576086673740,"results":"340","hashOfConfig":"296"},{"size":514,"mtime":1575729809243,"results":"341","hashOfConfig":"296"},{"size":311,"mtime":1575835109451,"results":"342","hashOfConfig":"296"},{"size":14399,"mtime":1576607687457,"results":"343","hashOfConfig":"296"},{"size":1182,"mtime":1576607687457,"results":"344","hashOfConfig":"296"},{"size":145,"mtime":1574620670441,"results":"345","hashOfConfig":"296"},{"size":4334,"mtime":1576607687457,"results":"346","hashOfConfig":"296"},{"size":110,"mtime":1574620670441,"results":"347","hashOfConfig":"296"},{"size":77,"mtime":1574620670441,"results":"348","hashOfConfig":"296"},{"size":75,"mtime":1574620670441,"results":"349","hashOfConfig":"296"},{"size":736,"mtime":1576086673744,"results":"350","hashOfConfig":"296"},{"size":306,"mtime":1574620670441,"results":"351","hashOfConfig":"296"},{"size":385,"mtime":1575393601489,"results":"352","hashOfConfig":"296"},{"size":130,"mtime":1576607687457,"results":"353","hashOfConfig":"296"},{"size":4321,"mtime":1576607687457,"results":"354","hashOfConfig":"296"},{"size":3891,"mtime":1574620670445,"results":"355","hashOfConfig":"296"},{"size":3547,"mtime":1574797996123,"results":"356","hashOfConfig":"296"},{"size":7755,"mtime":1576086673744,"results":"357","hashOfConfig":"296"},{"size":4913,"mtime":1574620670445,"results":"358","hashOfConfig":"296"},{"size":453,"mtime":1574620670445,"results":"359","hashOfConfig":"296"},{"size":310,"mtime":1574620670445,"results":"360","hashOfConfig":"296"},{"size":11613,"mtime":1576086673744,"results":"361","hashOfConfig":"296"},{"size":3236,"mtime":1576696023657,"results":"362","hashOfConfig":"296"},{"size":665,"mtime":1574620670445,"results":"363","hashOfConfig":"296"},{"size":4181,"mtime":1576086673744,"results":"364","hashOfConfig":"296"},{"size":1589,"mtime":1574620670445,"results":"365","hashOfConfig":"296"},{"size":504,"mtime":1576692426605,"results":"366","hashOfConfig":"296"},{"size":1510,"mtime":1574620670449,"results":"367","hashOfConfig":"296"},{"size":32718,"mtime":1574797996127,"results":"368","hashOfConfig":"296"},{"size":1498,"mtime":1574620670449,"results":"369","hashOfConfig":"296"},{"size":80,"mtime":1574797996127,"results":"370","hashOfConfig":"296"},{"size":5237,"mtime":1574797996127,"results":"371","hashOfConfig":"296"},{"size":216,"mtime":1574797996127,"results":"372","hashOfConfig":"296"},{"size":5726,"mtime":1574797996127,"results":"373","hashOfConfig":"296"},{"size":1378,"mtime":1574620670449,"results":"374","hashOfConfig":"296"},{"size":1423,"mtime":1574620670449,"results":"375","hashOfConfig":"296"},{"size":1435,"mtime":1574797996127,"results":"376","hashOfConfig":"296"},{"size":23221,"mtime":1577799029140,"results":"377","hashOfConfig":"296"},{"size":2106,"mtime":1576699423128,"results":"378","hashOfConfig":"296"},{"size":1467,"mtime":1574620670453,"results":"379","hashOfConfig":"296"},{"size":1403,"mtime":1574797996127,"results":"380","hashOfConfig":"296"},{"size":4370,"mtime":1574797996127,"results":"381","hashOfConfig":"296"},{"size":8907,"mtime":1574797996127,"results":"382","hashOfConfig":"296"},{"size":1851,"mtime":1574797996127,"results":"383","hashOfConfig":"296"},{"size":10977,"mtime":1574797996131,"results":"384","hashOfConfig":"296"},{"size":114,"mtime":1574797996131,"results":"385","hashOfConfig":"296"},{"size":35,"mtime":1574620670453,"results":"386","hashOfConfig":"296"},{"size":51,"mtime":1574620670453,"results":"387","hashOfConfig":"296"},{"size":48,"mtime":1574620670453,"results":"388","hashOfConfig":"296"},{"size":35,"mtime":1574620670453,"results":"389","hashOfConfig":"296"},{"size":33,"mtime":1574620670453,"results":"390","hashOfConfig":"296"},{"size":31,"mtime":1574620670453,"results":"391","hashOfConfig":"296"},{"size":30,"mtime":1574620670453,"results":"392","hashOfConfig":"296"},{"size":37,"mtime":1574620670453,"results":"393","hashOfConfig":"296"},{"size":40,"mtime":1574620670453,"results":"394","hashOfConfig":"296"},{"size":25,"mtime":1574620670453,"results":"395","hashOfConfig":"296"},{"size":28,"mtime":1574620670453,"results":"396","hashOfConfig":"296"},{"size":29,"mtime":1574620670453,"results":"397","hashOfConfig":"296"},{"size":5821,"mtime":1574797996131,"results":"398","hashOfConfig":"296"},{"size":2201,"mtime":1574797996131,"results":"399","hashOfConfig":"296"},{"size":76,"mtime":1574797996131,"results":"400","hashOfConfig":"296"},{"size":780,"mtime":1574797996131,"results":"401","hashOfConfig":"296"},{"size":1208,"mtime":1574797996131,"results":"402","hashOfConfig":"296"},{"size":465,"mtime":1574797996131,"results":"403","hashOfConfig":"296"},{"size":46,"mtime":1575231081809,"results":"404","hashOfConfig":"296"},{"size":4093,"mtime":1575231081809,"results":"405","hashOfConfig":"296"},{"size":34,"mtime":1574797996131,"results":"406","hashOfConfig":"296"},{"size":29,"mtime":1574797996131,"results":"407","hashOfConfig":"296"},{"size":894,"mtime":1574797996131,"results":"408","hashOfConfig":"296"},{"size":20,"mtime":1574797996135,"results":"409","hashOfConfig":"296"},{"size":20,"mtime":1574797996135,"results":"410","hashOfConfig":"296"},{"size":270,"mtime":1574797996135,"results":"411","hashOfConfig":"296"},{"size":7019,"mtime":1574797996135,"results":"412","hashOfConfig":"296"},{"size":2052,"mtime":1574797996135,"results":"413","hashOfConfig":"296"},{"size":1153,"mtime":1574797996135,"results":"414","hashOfConfig":"296"},{"size":15837,"mtime":1574797996135,"results":"415","hashOfConfig":"296"},{"size":2293,"mtime":1574797996135,"results":"416","hashOfConfig":"296"},{"size":126,"mtime":1574797996135,"results":"417","hashOfConfig":"296"},{"size":2744,"mtime":1574797996135,"results":"418","hashOfConfig":"296"},{"size":157,"mtime":1574797996135,"results":"419","hashOfConfig":"296"},{"size":677,"mtime":1574797996135,"results":"420","hashOfConfig":"296"},{"size":1607,"mtime":1574797996135,"results":"421","hashOfConfig":"296"},{"size":763,"mtime":1574797996135,"results":"422","hashOfConfig":"296"},{"size":2655,"mtime":1574797996139,"results":"423","hashOfConfig":"296"},{"size":158,"mtime":1574797996139,"results":"424","hashOfConfig":"296"},{"size":562,"mtime":1574797996139,"results":"425","hashOfConfig":"296"},{"size":8360,"mtime":1574797996139,"results":"426","hashOfConfig":"296"},{"size":286,"mtime":1574797996139,"results":"427","hashOfConfig":"296"},{"size":2536,"mtime":1574797996139,"results":"428","hashOfConfig":"296"},{"size":36272,"mtime":1574797996139,"results":"429","hashOfConfig":"296"},{"size":1582,"mtime":1574797996139,"results":"430","hashOfConfig":"296"},{"size":54,"mtime":1574797996139,"results":"431","hashOfConfig":"296"},{"size":228,"mtime":1574797996139,"results":"432","hashOfConfig":"296"},{"size":1713,"mtime":1575729809251,"results":"433","hashOfConfig":"296"},{"size":480,"mtime":1574620670465,"results":"434","hashOfConfig":"296"},{"size":56,"mtime":1574620670465,"results":"435","hashOfConfig":"296"},{"size":1262,"mtime":1575231081809,"results":"436","hashOfConfig":"296"},{"size":592,"mtime":1575729809251,"results":"437","hashOfConfig":"296"},{"size":168,"mtime":1574797996143,"results":"438","hashOfConfig":"296"},{"size":40,"mtime":1574620670465,"results":"439","hashOfConfig":"296"},{"size":2348,"mtime":1574620670469,"results":"440","hashOfConfig":"296"},{"size":3237,"mtime":1574797996143,"results":"441","hashOfConfig":"296"},{"size":2982,"mtime":1574620670469,"results":"442","hashOfConfig":"296"},{"size":343,"mtime":1574797996143,"results":"443","hashOfConfig":"296"},{"size":1529,"mtime":1574797996143,"results":"444","hashOfConfig":"296"},{"size":1525,"mtime":1575231081809,"results":"445","hashOfConfig":"296"},{"size":534,"mtime":1574620670473,"results":"446","hashOfConfig":"296"},{"size":215,"mtime":1574620670473,"results":"447","hashOfConfig":"296"},{"size":646,"mtime":1575231081809,"results":"448","hashOfConfig":"296"},{"size":23,"mtime":1574797996147,"results":"449","hashOfConfig":"296"},{"size":10916,"mtime":1574797996147,"results":"450","hashOfConfig":"296"},{"size":393,"mtime":1577800424277,"results":"451","hashOfConfig":"296"},{"size":2965,"mtime":1574797996147,"results":"452","hashOfConfig":"296"},{"size":261,"mtime":1574797996147,"results":"453","hashOfConfig":"296"},{"size":937,"mtime":1574797996147,"results":"454","hashOfConfig":"296"},{"size":338,"mtime":1574620670473,"results":"455","hashOfConfig":"296"},{"size":2973,"mtime":1575231081809,"results":"456","hashOfConfig":"296"},{"size":215,"mtime":1574620670473,"results":"457","hashOfConfig":"296"},{"size":314,"mtime":1574797996147,"results":"458","hashOfConfig":"296"},{"size":38,"mtime":1574620670473,"results":"459","hashOfConfig":"296"},{"size":66,"mtime":1574620670477,"results":"460","hashOfConfig":"296"},{"size":3866,"mtime":1574797996151,"results":"461","hashOfConfig":"296"},{"size":178,"mtime":1574620670477,"results":"462","hashOfConfig":"296"},{"size":89,"mtime":1574620670477,"results":"463","hashOfConfig":"296"},{"size":532,"mtime":1574620670477,"results":"464","hashOfConfig":"296"},{"size":63,"mtime":1574620670477,"results":"465","hashOfConfig":"296"},{"size":50,"mtime":1574620670477,"results":"466","hashOfConfig":"296"},{"size":1290,"mtime":1574620670477,"results":"467","hashOfConfig":"296"},{"size":136,"mtime":1574620670477,"results":"468","hashOfConfig":"296"},{"size":1614,"mtime":1574620670477,"results":"469","hashOfConfig":"296"},{"size":9208,"mtime":1574797996151,"results":"470","hashOfConfig":"296"},{"size":50,"mtime":1574620670477,"results":"471","hashOfConfig":"296"},{"size":1935,"mtime":1574797996151,"results":"472","hashOfConfig":"296"},{"size":2157,"mtime":1574797996151,"results":"473","hashOfConfig":"296"},{"size":986,"mtime":1575729809255,"results":"474","hashOfConfig":"296"},{"size":48,"mtime":1574620670477,"results":"475","hashOfConfig":"296"},{"size":281,"mtime":1574620670477,"results":"476","hashOfConfig":"296"},{"size":2120,"mtime":1574620670477,"results":"477","hashOfConfig":"296"},{"size":961,"mtime":1574620670477,"results":"478","hashOfConfig":"296"},{"size":1800,"mtime":1574620670477,"results":"479","hashOfConfig":"296"},{"size":2313,"mtime":1574620670477,"results":"480","hashOfConfig":"296"},{"size":4319,"mtime":1574797996151,"results":"481","hashOfConfig":"296"},{"size":141,"mtime":1574620670477,"results":"482","hashOfConfig":"296"},{"size":6608,"mtime":1574797996151,"results":"483","hashOfConfig":"296"},{"size":50,"mtime":1574620670481,"results":"484","hashOfConfig":"296"},{"size":554,"mtime":1574620670481,"results":"485","hashOfConfig":"296"},{"size":231,"mtime":1574620670481,"results":"486","hashOfConfig":"296"},{"size":1262,"mtime":1574620670481,"results":"487","hashOfConfig":"296"},{"size":75,"mtime":1574620670481,"results":"488","hashOfConfig":"296"},{"size":560,"mtime":1574620670481,"results":"489","hashOfConfig":"296"},{"size":718,"mtime":1575209769469,"results":"490","hashOfConfig":"296"},{"size":3088,"mtime":1577799165602,"results":"491","hashOfConfig":"296"},{"size":5913,"mtime":1577794994768,"results":"492","hashOfConfig":"296"},{"size":2493,"mtime":1577799215990,"results":"493","hashOfConfig":"296"},{"size":2097,"mtime":1577790085445,"results":"494","hashOfConfig":"296"},{"size":473,"mtime":1574620670481,"results":"495","hashOfConfig":"296"},{"size":575,"mtime":1577791330280,"results":"496","hashOfConfig":"296"},{"size":462,"mtime":1574620670481,"results":"497","hashOfConfig":"296"},{"size":3990,"mtime":1577800915846,"results":"498","hashOfConfig":"296"},{"size":1042,"mtime":1575197547567,"results":"499","hashOfConfig":"296"},{"size":603,"mtime":1575729809255,"results":"500","hashOfConfig":"296"},{"size":248,"mtime":1574620670429,"results":"501","hashOfConfig":"502"},{"size":10900,"mtime":1574620863005,"results":"503","hashOfConfig":"502"},{"size":730,"mtime":1574620670465,"results":"504","hashOfConfig":"502"},{"size":3946,"mtime":1574620670465,"results":"505","hashOfConfig":"502"},{"size":2920,"mtime":1574620670465,"results":"506","hashOfConfig":"502"},{"size":6824,"mtime":1574620863005,"results":"507","hashOfConfig":"502"},{"size":2098,"mtime":1574620670465,"results":"508","hashOfConfig":"502"},{"size":8252,"mtime":1574620863009,"results":"509","hashOfConfig":"502"},{"size":5943,"mtime":1574620670469,"results":"510","hashOfConfig":"502"},{"size":428,"mtime":1574620670469,"results":"511","hashOfConfig":"502"},{"size":162,"mtime":1574620670469,"results":"512","hashOfConfig":"502"},{"size":3057,"mtime":1574620670469,"results":"513","hashOfConfig":"502"},{"size":55,"mtime":1574620670469,"results":"514","hashOfConfig":"502"},{"size":474,"mtime":1574621187430,"results":"515","hashOfConfig":"502"},{"size":1618,"mtime":1574620863009,"results":"516","hashOfConfig":"502"},{"size":3186,"mtime":1574620863009,"results":"517","hashOfConfig":"502"},{"size":1228,"mtime":1574620863009,"results":"518","hashOfConfig":"502"},{"size":3100,"mtime":1574620670469,"results":"519","hashOfConfig":"502"},{"size":2100,"mtime":1574620670469,"results":"520","hashOfConfig":"502"},{"size":1477,"mtime":1574620670473,"results":"521","hashOfConfig":"502"},{"size":4769,"mtime":1574620863009,"results":"522","hashOfConfig":"502"},{"size":33866,"mtime":1574620863009,"results":"523","hashOfConfig":"502"},{"size":1642,"mtime":1574620670473,"results":"524","hashOfConfig":"502"},{"size":133,"mtime":1574620863009,"results":"525","hashOfConfig":"502"},{"size":839,"mtime":1575054389462,"results":"526","hashOfConfig":"296"},{"size":15628,"mtime":1575729809251,"results":"527","hashOfConfig":"296"},{"size":3120,"mtime":1575054389462,"results":"528","hashOfConfig":"296"},{"size":514,"mtime":1575054389462,"results":"529","hashOfConfig":"296"},{"size":78,"mtime":1574797996139,"results":"530","hashOfConfig":"296"},{"size":72,"mtime":1575197547567,"results":"531","hashOfConfig":"296"},{"size":434,"mtime":1575197547567,"results":"532","hashOfConfig":"296"},{"size":2419,"mtime":1575231081809,"results":"533","hashOfConfig":"296"},{"size":594,"mtime":1575231081805,"results":"534","hashOfConfig":"296"},{"size":54,"mtime":1575231081805,"results":"535","hashOfConfig":"296"},{"size":529,"mtime":1575231081805,"results":"536","hashOfConfig":"296"},{"size":53,"mtime":1575231081805,"results":"537","hashOfConfig":"296"},{"size":699,"mtime":1575231081805,"results":"538","hashOfConfig":"296"},{"size":2280,"mtime":1575231081805,"results":"539","hashOfConfig":"296"},{"size":249,"mtime":1575231081805,"results":"540","hashOfConfig":"296"},{"size":803,"mtime":1575231081805,"results":"541","hashOfConfig":"296"},{"size":1893,"mtime":1575231081805,"results":"542","hashOfConfig":"296"},{"size":214,"mtime":1575231081809,"results":"543","hashOfConfig":"296"},{"size":738,"mtime":1575231081809,"results":"544","hashOfConfig":"296"},{"size":49,"mtime":1575231081809,"results":"545","hashOfConfig":"296"},{"size":1122,"mtime":1575231081809,"results":"546","hashOfConfig":"296"},{"size":60,"mtime":1575231081809,"results":"547","hashOfConfig":"296"},{"size":9632,"mtime":1575231081809,"results":"548","hashOfConfig":"296"},{"size":260,"mtime":1575231081809,"results":"549","hashOfConfig":"296"},{"size":266,"mtime":1575231081809,"results":"550","hashOfConfig":"296"},{"size":453,"mtime":1575231081809,"results":"551","hashOfConfig":"296"},{"size":33,"mtime":1575729809239,"results":"552","hashOfConfig":"296"},{"size":602,"mtime":1575729809239,"results":"553","hashOfConfig":"296"},{"size":43,"mtime":1575729809239,"results":"554","hashOfConfig":"296"},{"size":163,"mtime":1575729809239,"results":"555","hashOfConfig":"296"},{"size":2157,"mtime":1575729809247,"results":"556","hashOfConfig":"296"},{"size":14880,"mtime":1577798834426,"results":"557","hashOfConfig":"296"},{"size":1081,"mtime":1575729809243,"results":"558","hashOfConfig":"296"},{"size":1962,"mtime":1576607687453,"results":"559","hashOfConfig":"296"},{"size":1516,"mtime":1575729809243,"results":"560","hashOfConfig":"296"},{"size":344,"mtime":1575729809247,"results":"561","hashOfConfig":"296"},{"size":923,"mtime":1575729809247,"results":"562","hashOfConfig":"296"},{"size":27,"mtime":1575729809251,"results":"563","hashOfConfig":"296"},{"size":1749,"mtime":1575729809251,"results":"564","hashOfConfig":"296"},{"size":3785,"mtime":1575729809251,"results":"565","hashOfConfig":"296"},{"size":360,"mtime":1575729809239,"results":"566","hashOfConfig":"296"},{"size":1786,"mtime":1576607687453,"results":"567","hashOfConfig":"296"},{"size":1395,"mtime":1575729809247,"results":"568","hashOfConfig":"296"},{"size":13978,"mtime":1575729809247,"results":"569","hashOfConfig":"296"},{"size":2816,"mtime":1575729809247,"results":"570","hashOfConfig":"296"},{"size":30574,"mtime":1576607687453,"results":"571","hashOfConfig":"296"},{"size":19308,"mtime":1576607687457,"results":"572","hashOfConfig":"296"},{"size":651,"mtime":1576607687457,"results":"573","hashOfConfig":"296"},{"size":746,"mtime":1576607687457,"results":"574","hashOfConfig":"296"},{"size":21504,"mtime":1576607687457,"results":"575","hashOfConfig":"296"},{"size":3007,"mtime":1576607687457,"results":"576","hashOfConfig":"296"},{"size":868,"mtime":1576607687457,"results":"577","hashOfConfig":"296"},{"size":181,"mtime":1576607687457,"results":"578","hashOfConfig":"296"},{"size":192,"mtime":1576607687457,"results":"579","hashOfConfig":"296"},{"size":1290,"mtime":1576607687457,"results":"580","hashOfConfig":"296"},{"size":575,"mtime":1576607687457,"results":"581","hashOfConfig":"296"},{"size":471,"mtime":1576607687457,"results":"582","hashOfConfig":"296"},{"size":758,"mtime":1576607687457,"results":"583","hashOfConfig":"296"},{"size":333,"mtime":1576607687457,"results":"584","hashOfConfig":"296"},{"size":2590,"mtime":1577798238608,"results":"585","hashOfConfig":"296"},{"size":1331,"mtime":1577798878999,"results":"586","hashOfConfig":"296"},{"size":186,"mtime":1577791958063,"results":"587","hashOfConfig":"296"},{"size":3133,"mtime":1577803063006,"results":"588","hashOfConfig":"296"},{"size":132,"mtime":1577800646643,"results":"589","hashOfConfig":"296"},{"size":14891,"mtime":1577798728745,"results":"590","hashOfConfig":"296"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593"},"bf29m9",{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"719","messages":"720","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"745","messages":"746","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"778"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"785","messages":"786","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793"},{"filePath":"794","messages":"795","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"796"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"864","messages":"865","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"866"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"905"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"928","messages":"929","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"930"},{"filePath":"931","messages":"932","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"935","messages":"936","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946"},{"filePath":"947","messages":"948","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"949","messages":"950","errorCount":0,"warningCount":128,"fixableErrorCount":0,"fixableWarningCount":0,"source":"951"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"954","messages":"955","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"964","messages":"965","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"969"},{"filePath":"970","messages":"971","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"974","messages":"975","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"976","messages":"977","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"978","messages":"979","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"980","messages":"981","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"982","messages":"983","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"984","messages":"985","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"992","messages":"993","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1014"},{"filePath":"1015","messages":"1016","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1023"},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1028"},{"filePath":"1029","messages":"1030","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1035","messages":"1036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1047"},{"filePath":"1048","messages":"1049","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1050"},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1053"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1056","messages":"1057","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1058"},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1067"},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o2e4c6",{"filePath":"1070","messages":"1071","errorCount":2,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"1072"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1075"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1078"},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1081"},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1084"},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090"},{"filePath":"1091","messages":"1092","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1096"},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1099","messages":"1100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1101"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1104","messages":"1105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1106"},{"filePath":"1107","messages":"1108","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1109"},{"filePath":"1110","messages":"1111","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112"},{"filePath":"1113","messages":"1114","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1115"},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1118"},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1121"},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124"},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1127"},{"filePath":"1128","messages":"1129","errorCount":24,"warningCount":48,"fixableErrorCount":18,"fixableWarningCount":0,"source":"1130"},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1133"},{"filePath":"1134","messages":"1135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1136","messages":"1137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1140"},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1143"},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1152","messages":"1153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1160","messages":"1161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1166","messages":"1167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1172","messages":"1173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1182","messages":"1183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1184"},{"filePath":"1185","messages":"1186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1191","messages":"1192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1193","messages":"1194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1201","messages":"1202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203"},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1206","messages":"1207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1208","messages":"1209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1210"},{"filePath":"1211","messages":"1212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1213","messages":"1214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1215","messages":"1216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1217","messages":"1218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1221","messages":"1222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1223","messages":"1224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1225","messages":"1226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1227","messages":"1228","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1229"},{"filePath":"1230","messages":"1231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1232","messages":"1233","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1234"},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1237"},{"filePath":"1238","messages":"1239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1240","messages":"1241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1242"},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1245"},{"filePath":"1246","messages":"1247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1248"},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1257"},{"filePath":"1258","messages":"1259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1260","messages":"1261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1262","messages":"1263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1264","messages":"1265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1266","messages":"1267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1268"},{"filePath":"1269","messages":"1270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1271","messages":"1272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1273","messages":"1274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1275","messages":"1276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1277","messages":"1278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/paul/projects/decentrilized-protocol/src/App.tsx",["1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { runTestFirebaseConnectionDatabase } from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database';\nimport { runTestFirebaseCredentialsStorage } from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage';\nimport {\n  runTestCAIdentityWithAuthorityProviderGeneratorV1,\n  runTestCAIdentityV1,\n} from 'test/central-authority.test/central-authority.test';\nimport {\n  runTestCAConnectionFirebase,\n  runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider,\n} from 'test/central-authority.test/central-authority-connection.test/central-authority-connection.test';\nimport { runTestErrorExtended } from 'test/error-extended-class-test';\nimport { runTestSwarmConnection } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.test';\nimport { runTestSwarmConnectionIPFS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { runTestSwarmStoreOrbitDBConnection } from 'test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test';\nimport { runTestValidateMessagingTimestampsTest } from 'test/validation-messaging.test/validate-messaging-timestamps-test';\nimport { runTestHttpRequest } from 'test/http-request-class-base.test/http-request-class-base.test';\nimport { runTestPseudoNtpClass } from 'test/pseudo-ntp-class.test/pseudo-ntp-class.test';\nimport { runTestClientTimeSynced } from 'test/common-utils-date-time-synced.test';\nimport { runSwarmMessageFieldsValidator } from 'test/validation-messaging.test/swarm-message.test/swarm-message.fields-validator.test';\nimport { runTestCAIdentityV2 } from 'test/central-authority-identity.test/central-authority-identity-v2.test';\nimport { runCACredentialsIdentityStorageTest } from 'test/central-authority.test/central-authority-storage-identity-credentials.test';\nimport { runTestCAConnectionsUtilsValidators } from 'test/central-authority.test/central-authority-connection.test/central-authority-connections-utils.validators.test';\nimport { runTestCommonUtilsURL } from 'test/common-utils.test/common-utils-url.test';\nimport { runTestCAConnectionsPoolTest } from 'test/central-authority.test/central-authority-connection.test/central-authority-connections-pool.test/central-authority-connections-pool.test';\n\n// import { runCACredentialsIdentityStorageTest } from 'test/central-authority.test/central-authority-storage-identity-credentials.test';\n// import { runTestCachingDecorator } from 'test/common-utils.test/common-utils.test';\n// import { runTestCAIdentity } from 'test/central-authority.test/central-authority.test';\n// import {\n//   runTestKeys,\n//   runTestsCredentialsStorage,\n// } from 'test/central-authority.test/central-authority.test';\n// import 'test/data-sign-test';\n// import 'test/password-key.test';\n// import { runTest } from 'test/safe-storage.test';\n//import { runTest } from 'test/valiation-utils.test';\n// import { runTest } from 'test/secret-storage.test';\nimport { runTestSaltUtils } from './test/salt-generation-utils.test/salt-generation-utils.test';\n\n// runTest();\n// runTestsCredentialsStorage();\n// runTestCAIdentity();\n// runTestCachingDecorator();\n// runCACredentialsIdentityStorageTest();\n\n// runTestProfileValidation();\n// runTestFirebaseCredentialsStorage();\n\n// runTestErrorExtended();\n// runTestCAConnectionFirebase();\n// runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider();\n// runTestFirebaseConnectionDatabase();\n// runTestCAIdentityWithAuthorityProviderGenerator();\n// runTestFirebaseCredentialsStorage();\n\n// runTestSwarmConnectionIPFS();\n\nconst runTest = async () => {\n  await initializeMocha();\n\n  // runTestSwarmConnection();\n  // runTestSwarmStoreOrbitDBConnection();\n  // runTestValidateMessagingTimestampsTest();\n  // runTestHttpRequest();\n  // runTestClientTimeSynced();\n  // runSwarmMessageFieldsValidator();\n  // runTestFirebaseCredentialsStorage();\n  // runTestCAConnectionsUtilsValidators();\n  // runTestCAConnectionsPoolTest();\n  runTestSaltUtils();\n  runMocha();\n};\n\nrunTest();\n\nconst App: React.FC = () => {\n  return null;\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.tsx</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n};\n\nexport default App;\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/error-extended-class-base/error-extended-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/event-emitter-class-base/event-emitter-class-base.types.ts",["1300","1301","1302"],"import { ownKeyOf } from 'types/helper.types';\nimport { any } from 'prop-types';\n\n/**\n * the source code is based on\n * https://github.com/andywer/typed-emitter\n */\n\ntype Arguments<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\nexport type TEventsList = { [key in string | symbol]: any };\n\ntype keyOf<T extends TEventsList> = ownKeyOf<T> extends string | symbol\n  ? keyof T\n  : never;\n\ntype TEvent = keyOf<TEventsList>;\n\nexport interface TypedEventEmitter<Events extends TEventsList> {\n  addListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  on<E extends TEvent>(event: E, listener: Events[E]): this;\n  once<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependListener<E extends TEvent>(event: E, listener: Events[E]): this;\n  prependOnceListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  removeAllListeners<E extends TEvent>(event: E): this;\n  removeListener<E extends TEvent>(event: E, listener: Events[E]): this;\n\n  emit<E extends TEvent>(event: E, ...args: Arguments<Events[E]>): boolean;\n  eventNames(): TEvent[];\n  listeners<E extends TEvent>(event: E): Function[];\n  listenerCount<E extends TEvent>(event: E): number;\n\n  getMaxListeners(): number;\n  setMaxListeners(maxListeners: number): this;\n}\n\nexport default TypedEventEmitter;\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-body-processor.ts",["1303","1304"],"import { IHttpRequestOptions } from '../http-request-class-base.types';\nimport {\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_CONTENT_TYPE,\n} from '../http-request-class-base.const';\nimport {\n  objectToUrlEncodedString,\n  IParamsObject,\n  objectToFormData,\n  IParamsObjectFormData,\n} from '../http-request-class-base.utils';\n\nexport class HttpRequestBodyProcessor {\n  protected static logError(methodName: string, err: string | Error) {\n    console.error(`HttpRequestBodyProcessor::${methodName}`, err);\n  }\n\n  constructor(protected options: IHttpRequestOptions) {}\n\n  private get bodyRAW() {\n    const { options } = this;\n    const { body } = options;\n\n    return body;\n  }\n\n  private get bodyType() {\n    const { bodyRAW: body } = this;\n\n    return typeof body;\n  }\n\n  protected processBodyAsMultipart() {\n    const { bodyRAW: body, bodyType } = this;\n\n    if (body instanceof FormData) {\n      return body;\n    }\n    if (bodyType === 'object') {\n      return objectToFormData(body as IParamsObjectFormData);\n    }\n    HttpRequestBodyProcessor.logError(\n      'checkBodyIsMultipart',\n      'a wrong type of the body'\n    );\n    return undefined;\n  }\n\n  protected processBodyAsUrlEncoded() {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return encodeURI(String(body));\n      case 'object':\n        return objectToUrlEncodedString(body as IParamsObject);\n      default: {\n        HttpRequestBodyProcessor.logError(\n          'processBodyAsUrlEncoded',\n          'a wrong type of the body'\n        );\n        return undefined;\n      }\n    }\n  }\n\n  protected processBodyAsJSON(): string | FormData | undefined {\n    const { bodyRAW: body, bodyType } = this;\n\n    switch (bodyType) {\n      case 'string':\n        return body as string;\n      case 'number':\n      case 'object':\n        return JSON.stringify(body);\n      default:\n        return undefined;\n    }\n  }\n\n  protected preProcessBody(): string | FormData | undefined {\n    const { options } = this;\n    const { contentType } = options;\n\n    if (typeof contentType === 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      switch (contentType!) {\n        case HTTP_REQUEST_CONTENT_TYPE.JSON:\n          return this.processBodyAsJSON();\n        case HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED:\n          return this.processBodyAsUrlEncoded();\n        case HTTP_REQUEST_CONTENT_TYPE.MULTIPART:\n          return this.processBodyAsMultipart();\n      }\n    }\n    return undefined;\n  }\n\n  protected getBody(): string | FormData | undefined {\n    const { options } = this;\n    const { method } = options;\n\n    if (\n      method === HTTP_REQUEST_METHOD.GET ||\n      method === HTTP_REQUEST_METHOD.DELETE\n    ) {\n      return undefined;\n    }\n    return this.preProcessBody();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-base-response-error.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-subclasses/http-request-class-response-processor.ts",["1305"],"import { HttpResponseError } from './http-request-class-base-response-error';\nimport { THttpResponseResult } from '../http-request-class-base.types';\nimport {\n  isSucceedResponse,\n  getContentTypeRAW,\n} from '../http-request-class-base-utils';\nimport { HTTP_RESPONSE_TYPES } from '../http-request-class-base.const';\nimport { MimeTypeClass } from 'classes/basic-classes/mime-types-class-base/mime-types-class-base';\n\nexport class HttpRequestResponseProcessor {\n  constructor(protected response: Response) {}\n\n  protected logError(error: Error): Error {\n    console.error(error);\n    return error;\n  }\n\n  protected async processAsText(): Promise<string | Error> {\n    const { response } = this;\n\n    try {\n      const result = await response.text();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFormData(): Promise<Error | FormData> {\n    const { response } = this;\n    let result;\n\n    try {\n      if (typeof response.formData === 'function') {\n        result = await response.formData();\n      } else {\n      }\n\n      return new Error(\"Can't process the response as FormData\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsBlob(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      return result;\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsFile(\n    mimeType?: string | null,\n    extension?: string | null\n  ): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.blob();\n\n      if (result instanceof Blob) {\n        return new File([result], extension || 'unknown', {\n          type: mimeType || undefined,\n        });\n      }\n      return new Error(\"Can't process the response as a file\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processAsJSON(): Promise<Error | object> {\n    const { response } = this;\n\n    try {\n      const result = await response.json();\n\n      if (result && typeof result === 'object') {\n        return result;\n      }\n      return new Error(\"Can't process the response as json\");\n    } catch (err) {\n      return this.logError(err);\n    }\n  }\n\n  protected async processResponse(): Promise<Error | THttpResponseResult> {\n    const { response } = this;\n    const contentType = getContentTypeRAW(response);\n\n    if (contentType) {\n      const mimeType = new MimeTypeClass(contentType);\n\n      if (mimeType.isBlob) {\n        return this.processAsBlob();\n      }\n      if (mimeType.isJSON) {\n        return this.processAsJSON();\n      }\n      if (mimeType.isText) {\n        return this.processAsText();\n      }\n      if (mimeType.isFile) {\n        return this.processAsFile(contentType, mimeType.extension);\n      }\n      return new Error('There is unknown mime-type of the response content');\n    }\n\n    return new Error('There is no \"Content-Type\" in the response headers');\n  }\n\n  public async getResult(): Promise<\n    Error | HttpResponseError | THttpResponseResult\n  > {\n    const { response } = this;\n\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE) {\n      return undefined;\n    }\n    if (response.type === HTTP_RESPONSE_TYPES.OPAQUE_REDIRECT) {\n      return undefined;\n    }\n    if (!isSucceedResponse(response)) {\n      return new HttpResponseError(response);\n    }\n    return this.processResponse();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base-utils.ts",["1306","1307","1308"],"import {\n  HTTP_REQUEST_ERROR_CODES_RANGE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_CONTENT_TYPES_KNOWN,\n  HTTP_RESPONSE_TYPES,\n} from './http-request-class-base.const';\nimport { ownValueOf } from 'types/helper.types';\nimport {\n  TQueryStringParamsObject,\n  TQueryStringAllowedParamValue,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport { concatStrings } from 'utils/string-utilities';\n\nconst { NO_ERROR, CLIENT_ERROR } = HTTP_REQUEST_ERROR_CODES_RANGE;\nconst [MIN_CODE_SUCCESS, MAX_CODE_SUCCESS] = NO_ERROR;\nconst [MIN_CODE_ERROR_CLIENT, MAX_CODE_ERROR_CLIENT] = CLIENT_ERROR;\n\nexport const isSucceedResponse = (response: Response): boolean => {\n  const { status, type } = response;\n\n  if (type === HTTP_RESPONSE_TYPES.ERROR) {\n    return false;\n  }\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_SUCCESS && status <= MAX_CODE_SUCCESS) {\n    return true;\n  }\n  return false;\n};\n\nexport const isClientSideError = (response: Response): boolean => {\n  const { status } = response;\n\n  if (!status) {\n    return false;\n  }\n  if (status >= MIN_CODE_ERROR_CLIENT && status <= MAX_CODE_ERROR_CLIENT) {\n    return true;\n  }\n  return false;\n};\n\nexport const getContentType = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(\n      HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE\n    ) as HTTP_REQUEST_CONTENT_TYPE;\n\n    if (contentType && HTTP_REQUEST_CONTENT_TYPES_KNOWN.includes(contentType)) {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getContentTypeRAW = (response: Response): void | string => {\n  const { headers } = response;\n\n  if (headers) {\n    const contentType = headers.get(HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE);\n\n    if (typeof contentType === 'string') {\n      return contentType;\n    }\n  }\n  return undefined;\n};\n\nexport const getNetworkError = (response: Response): Error | void => {\n  if (typeof (response as any).error === 'function') {\n    const networkError = (response as any).error();\n\n    return networkError;\n  }\n  return undefined;\n};\n\n/**\n * resolve a param as a string can be used as\n * a query string param\n * @param {object | string | number | Array<object | string | number> } paramValue\n * @returns string\n */\nexport const resolveQueryStringParam = (\n  paramValue: TQueryStringAllowedParamValue\n): string => {\n  if (paramValue instanceof Array) {\n    return `[${paramValue.map(resolveQueryStringParam)}]`;\n  }\n\n  const paramValueType = typeof paramValue;\n  let resolvedValue;\n\n  try {\n    switch (paramValueType) {\n      case 'string':\n        resolvedValue = paramValue as string;\n        break;\n      case 'number':\n        resolvedValue = String(paramValue);\n        break;\n      default:\n        resolvedValue = JSON.stringify(paramValue);\n        break;\n    }\n    if (resolvedValue) {\n      return encodeURIComponent(resolvedValue);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n  return '';\n};\n\n/**\n *\n * @param {object} obj\n * @returns {string} - string in the format of\n * param1=value1....&paramN=valueN\n */\nexport const queryStringFromObject = (\n  obj: TQueryStringParamsObject\n): string => {\n  if (obj && typeof obj === 'object') {\n    const paramNames = Object.keys(obj);\n    const paramsCount = paramNames.length;\n    const paramsLastIdx = paramsCount - 1;\n    let idx = 0;\n    let result = '';\n    let paramName;\n    let paramValue;\n    let paramValueString;\n\n    for (; idx < paramsCount; idx += 1) {\n      paramName = paramNames[idx];\n      paramValue = obj[paramName];\n      paramValueString = resolveQueryStringParam(paramValue);\n      result = `${encodeURIComponent(paramName)}=${paramValueString}${\n        idx !== paramsLastIdx ? '&' : ''\n      }`;\n    }\n    return result;\n  }\n  return '';\n};\n\nexport const resolveQueryStringParams = (\n  ...params: TQueryStringParams[]\n): string => {\n  const paramsCount = params.length;\n  let idx = 0;\n  let result = '';\n  let paramValue;\n  let paramStringValue;\n\n  for (; idx < paramsCount; idx += 1) {\n    paramValue = params[idx];\n    if (paramValue && typeof paramValue === 'object') {\n      paramStringValue = queryStringFromObject(\n        paramValue as TQueryStringParamsObject\n      );\n    } else {\n      paramStringValue = resolveQueryStringParam(paramValue);\n    }\n    result = concatStrings('&', result, paramStringValue);\n  }\n  return result;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.ts",["1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319"],"import { isURL } from 'validator';\nimport { HttpRequestBodyProcessor } from './http-request-class-base-subclasses/http-request-class-base-body-processor';\nimport {\n  IHttpRequestOptions,\n  IHttpRequestHeaders,\n  THttpResponseResult,\n  THttpRequestToken,\n  TQueryStringParams,\n} from './http-request-class-base.types';\nimport {\n  HTTP_REQUEST_HEADERS_NAMES,\n  HTTP_REQUEST_METHOD,\n  HTTP_REQUEST_MODE,\n  HTTP_REQUEST_CONTENT_TYPE,\n  HTTP_REQUEST_MODES_SUPPORTED,\n} from './http-request-class-base.const';\nimport { HttpRequestResponseProcessor } from './http-request-class-base-subclasses/http-request-class-response-processor';\nimport { HttpResponseError } from './http-request-class-base-subclasses/http-request-class-base-response-error';\nimport { ownValueOf } from 'types/helper.types';\nimport { resolveQueryStringParams } from './http-request-class-base-utils';\nimport { prefixUrlWithHTTPProtocol } from './http-request-class-base.utils';\n\nexport class HttpRequest extends HttpRequestBodyProcessor {\n  public static ContentType = HTTP_REQUEST_CONTENT_TYPE;\n\n  public static HeaderName = HTTP_REQUEST_HEADERS_NAMES;\n\n  public static RequestMode = HTTP_REQUEST_MODE;\n\n  public static RequestMethod = HTTP_REQUEST_METHOD;\n\n  protected static baseUrl?: string;\n\n  private static token?: THttpRequestToken;\n\n  public static setBaseUrl(baseUrl: string): void | Error {\n    if (!isURL(baseUrl)) {\n      return new Error('This is not a valid url');\n    }\n    HttpRequest.baseUrl = baseUrl;\n  }\n\n  public static setToken(token: THttpRequestToken): void | Error {\n    HttpRequest.token = token;\n  }\n\n  protected baseUrl?: string = HttpRequest.baseUrl;\n\n  protected url?: string;\n\n  protected method?: string;\n\n  protected mode?: RequestMode;\n\n  protected token?: THttpRequestToken = HttpRequest.token;\n\n  protected contentType?: string;\n\n  protected queryStringParams?: string;\n\n  protected credentials?: RequestCredentials;\n\n  /**\n   * Creates an instance of HttpRequest.\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  constructor(options: IHttpRequestOptions) {\n    super(options);\n\n    const resultSetOptions = this.setOptions(options);\n\n    if (resultSetOptions instanceof Error) {\n      console.error(\n        'HttpRequest::setOptions::failed',\n        resultSetOptions,\n        options\n      );\n      throw resultSetOptions;\n    }\n  }\n\n  /**\n   * send the request to the server\n   * on the url defined in the\n   * options\n   *\n   * @memberof HttpRequest\n   */\n  public send = async () => {\n    const { url, method, credentials, mode } = this;\n    const body = this.getBody();\n    const headers = this.getRequestHeaders();\n    const cache = this.getCacheMode();\n\n    try {\n      const response = await fetch(url!, {\n        mode,\n        body,\n        headers,\n        cache,\n        method,\n        credentials,\n      });\n\n      return this.preProcessResponse(response);\n    } catch (err) {\n      console.error(`HttpRequest::${url}::send::failed`, err);\n      return err;\n    }\n  };\n\n  protected getRequestMethod(\n    method: string | undefined,\n    options: IHttpRequestOptions\n  ): Error | HTTP_REQUEST_METHOD {\n    if (!method) {\n      const { body } = options;\n\n      if (body) {\n        return HTTP_REQUEST_METHOD.POST;\n      }\n      return HTTP_REQUEST_METHOD.GET;\n    }\n\n    const methodRes = method.trim().toUpperCase();\n\n    if (HTTP_REQUEST_METHOD.hasOwnProperty(methodRes)) {\n      return (HTTP_REQUEST_METHOD as any)[methodRes] as ownValueOf<\n        typeof HTTP_REQUEST_METHOD\n      >;\n    }\n    return new Error(`An unknown request method \"${method}\"`);\n  }\n\n  protected getCredentials(\n    options: IHttpRequestOptions\n  ): RequestCredentials | undefined {\n    const { withCookie, credentials } = options;\n\n    if (credentials) {\n      return credentials;\n    }\n    if (withCookie) {\n      return 'same-origin';\n    }\n  }\n\n  protected getRequestMode(\n    method: HTTP_REQUEST_METHOD,\n    options: IHttpRequestOptions\n  ): RequestMode | Error | undefined {\n    const { mode, contentType, body, token } = options;\n\n    if (!mode) {\n      if (token) {\n        return 'cors';\n      }\n      if (\n        method === HTTP_REQUEST_METHOD.DELETE ||\n        method === HTTP_REQUEST_METHOD.PUT\n      ) {\n        return 'cors';\n      }\n      if (\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.URL_ENCODED &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.MULTIPART &&\n        contentType !== HTTP_REQUEST_CONTENT_TYPE.PLAIN\n      ) {\n        return 'cors';\n      }\n      if (body instanceof ReadableStream) {\n        return 'cors';\n      }\n      return undefined;\n    }\n\n    if (typeof mode === 'string') {\n      const methodRes = mode.trim().toLowerCase();\n\n      if ((HTTP_REQUEST_MODES_SUPPORTED as string[]).includes(methodRes)) {\n        return methodRes as RequestMode;\n      }\n      return new Error(`An unknown request mode \"${mode}\"`);\n    }\n  }\n\n  /**\n   * resolve the url where to send the request\n   * depending on the options url\n   * base url and a query string\n   */\n  protected resolveTargetUrl(url: string): string {\n    const { baseUrl, queryStringParams } = this;\n    const urlInstance = new URL(\n      baseUrl ? url : prefixUrlWithHTTPProtocol(url),\n      baseUrl ? prefixUrlWithHTTPProtocol(baseUrl) : undefined\n    );\n\n    if (queryStringParams) {\n      urlInstance.search = queryStringParams;\n    }\n    return String(urlInstance);\n  }\n\n  protected getQueryStringParams(params: TQueryStringParams): string {\n    const { queryStringParams } = this;\n    const resolvedParams = resolveQueryStringParams(\n      queryStringParams || '',\n      params\n    );\n\n    return resolvedParams;\n  }\n\n  /**\n   * @protected\n   * @param {IHttpRequestOptions} options\n   * @memberof HttpRequest\n   * @throws\n   */\n  protected setOptions(options: IHttpRequestOptions) {\n    if (!options) {\n      throw new Error('The options must be defined for the request');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n    if (typeof options.url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n\n    const { url, baseUrl, method, token, queryStringParams } = options;\n\n    if (typeof url !== 'string') {\n      return new Error('The url must be defined in options');\n    }\n    if (typeof baseUrl === 'string') {\n      if (!isURL(baseUrl)) {\n        return new Error('The baseUrl is not valid');\n      }\n      this.baseUrl = baseUrl;\n    } else if (!isURL(url)) {\n      return new Error('The url is not valid');\n    }\n    if (token) {\n      this.token = token;\n    }\n\n    const methodRes = this.getRequestMethod(method, options);\n\n    if (methodRes instanceof Error) {\n      return methodRes;\n    }\n    this.method = methodRes;\n\n    const modeRes = this.getRequestMode(methodRes, options);\n\n    if (modeRes instanceof Error) {\n      return modeRes;\n    }\n    this.mode = modeRes;\n    this.credentials = this.getCredentials(options);\n    if (queryStringParams) {\n      this.queryStringParams = this.getQueryStringParams(queryStringParams);\n    }\n    this.url = this.resolveTargetUrl(url);\n  }\n\n  protected getRequestHeaders(): HeadersInit {\n    const { options, token } = this;\n    const { contentType } = options;\n    const headers: IHttpRequestHeaders = {};\n\n    if (contentType) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.CONTENT_TYPE] = contentType;\n    }\n    if (token) {\n      headers[HTTP_REQUEST_HEADERS_NAMES.AUTHORIZATION] = `Bearer ${token}`;\n    }\n    return headers as HeadersInit;\n  }\n\n  protected getCacheMode(): RequestCache {\n    const { options } = this;\n    const { cache } = options;\n\n    return cache as RequestCache;\n  }\n\n  protected preProcessResponse(\n    response: Response\n  ): Promise<Error | HttpResponseError | THttpResponseResult> {\n    const responseProcessor = new HttpRequestResponseProcessor(response);\n\n    return responseProcessor.getResult();\n  }\n}\n\nexport default HttpRequest;\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/http-request-class-base/http-request-class-base.utils.ts",["1320"],"import { CONST_API_CONF_CURRENT_PROTOCOL_USED } from 'const/const-api-conf';\nimport { HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP } from './http-request-class-base.const';\n\nexport interface IParamsObject {\n  [paramName: string]: string | number | object;\n}\n/**\n * transforms object to a stirng url encoded\n * where a param names will be the object's\n * keys and it's values will be the object's\n * values\n * @param obj\n * @param {string} obj[name]\n */\nexport const objectToUrlEncodedString = (obj: IParamsObject): string => {\n  return Object.keys(obj).reduce((querystring, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n    let paramValueCasted;\n\n    if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else {\n      paramValueCasted = String(paramValue);\n    }\n    return `${querystring}${querystring.length ? '&' : ''}${encodeURIComponent(\n      paramName\n    )}=${encodeURIComponent(paramValueCasted)}`;\n  }, '');\n};\n\nexport interface IParamsObjectFormData {\n  [paramName: string]: string | File | Blob | object;\n}\n\nexport const objectToFormData = (obj: IParamsObjectFormData): FormData => {\n  let paramValueCasted;\n  let thirdParam;\n\n  return Object.keys(obj).reduce((formData: FormData, paramName) => {\n    const paramValue = obj[paramName] || '';\n    const paramValueType = typeof paramValue;\n\n    paramValueCasted = undefined;\n    thirdParam = undefined;\n    if (paramValue instanceof File) {\n      paramValueCasted = paramValue;\n      thirdParam = paramValueCasted.name;\n    } else if (paramValue instanceof Blob) {\n      paramValueCasted = paramValue;\n      thirdParam = 'file';\n    } else if (paramValueType === 'object') {\n      paramValueCasted = JSON.stringify(paramValue);\n    } else if (paramValueType === 'string' || paramValueType === 'number') {\n      paramValueCasted = String(paramValue);\n    }\n    if (paramValueCasted) {\n      formData.append(paramName, paramValueCasted, paramValueType);\n    } else {\n      console.error(\n        `Can't append the ${paramName} field as the form data value`\n      );\n    }\n    return formData;\n  }, new FormData());\n};\n\nexport const prefixUrlWithHTTPProtocol = (urlString: string): string => {\n  const urlTrimmed = urlString.trim().toLowerCase();\n\n  return urlTrimmed.startsWith('http://') || urlTrimmed.startsWith('https://')\n    ? urlTrimmed\n    : `${CONST_API_CONF_CURRENT_PROTOCOL_USED}//${urlTrimmed.replace(\n        HTTP_REQUEST_URL_PROTOCOL_DELIIMETR_REGEXP,\n        ''\n      )}`;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/mime-types-class-base/mime-types-class-base.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.ts",["1321","1322","1323","1324","1325","1326"],"import { EventEmitter } from '../event-emitter-class-base';\nimport {\n  TQueue,\n  TIntervalEmitReadyMs,\n  TLastEmitReadyTimestamp,\n  TQueueManagerEvents,\n  IQueueOptions,\n  TMaxItemsInBatch,\n} from './queue-manager-class-base.types';\nimport {\n  QUEUE_MANAGER_EVENT_START,\n  DEFAULT_INTERVAL_MS,\n  QUEUE_MANAGER_EVENT_READY,\n  QUEUE_MANAGER_EVENT_STOP,\n} from './queue-manager-class-base.const';\n\nexport class QueueManagerClassBase<T> extends EventEmitter<\n  TQueueManagerEvents<T>\n> {\n  public static logError = (methodName: string, error: Error) => {\n    console.error(`QueueManagerClassBase::${methodName}`, error);\n  };\n\n  protected queue: TQueue<T> = [];\n  protected itemsInBatch?: TMaxItemsInBatch;\n  protected intervalMs: TIntervalEmitReadyMs = DEFAULT_INTERVAL_MS;\n  protected lastEmitMs: TLastEmitReadyTimestamp = 0;\n  protected interval?: NodeJS.Timer;\n\n  constructor(options: IQueueOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  setOptions(options: IQueueOptions) {\n    const { intervalMs, itemsInBatch } = options;\n\n    this.intervalMs = intervalMs;\n    this.itemsInBatch = itemsInBatch;\n  }\n\n  getTimestamp() {\n    return Date.now();\n  }\n\n  getBatchOfItems(): T[] {\n    const { queue, itemsInBatch } = this;\n\n    return queue.slice(0, itemsInBatch || undefined);\n  }\n\n  /**\n   * @memberof QueueManagerClassBase\n   * @param items - items to remove from queue\n   */\n  deleteItemsFromQueue(items: T[]): void {\n    this.queue = this.queue.filter((itemQueued) => items.includes(itemQueued));\n  }\n\n  emitEvent(\n    event: typeof QUEUE_MANAGER_EVENT_READY | typeof QUEUE_MANAGER_EVENT_STOP\n  ) {\n    const itemsInBatch = this.getBatchOfItems();\n\n    this.lastEmitMs = this.getTimestamp();\n    try {\n      this.emit(event, itemsInBatch);\n    } catch (err) {\n      QueueManagerClassBase.logError('emitReadyEvent', err);\n    }\n    this.deleteItemsFromQueue(itemsInBatch);\n  }\n\n  /**\n   * emit 'ready' event with a next batched\n   * items, wich are will be removed from the\n   * queue if there will no errors while\n   * handling the event\n   * @memberof QueueManagerClassBase\n   */\n  emitReadyEvent = () => {\n    this.emit(QUEUE_MANAGER_EVENT_READY);\n  };\n\n  startInterval() {\n    this.interval = setInterval(this.emitReadyEvent, this.intervalMs);\n  }\n\n  clearInterval() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = undefined;\n    }\n  }\n\n  start() {\n    this.startInterval();\n    this.emit(QUEUE_MANAGER_EVENT_START);\n  }\n\n  stop() {\n    this.clearInterval();\n    this.emit(QUEUE_MANAGER_EVENT_STOP);\n    this.queue = [];\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/queue-manager-class-base/queue-manager-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.ts",["1327","1328","1329"],"import { ownValueOf } from 'types/helper.types';\nimport { TStatusClassBaseOptions } from './status-class-base.types';\nimport { EventEmitter } from '../event-emitter-class-base/event-emitter-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from './status-class-base.const';\n\nexport const STATUS_EVENT = STATUS_CLASS_STATUS_CHANGE_EVENT;\n\nexport const getStatusClass = <TStatus extends object>({\n  errorStatus,\n  instanceName,\n  initialStatus,\n}: TStatusClassBaseOptions<TStatus>) =>\n  class StatusClassBase {\n    protected static error(err: string | Error): Error {\n      let errorInstance: Error;\n\n      if (err instanceof Error) {\n        errorInstance = err;\n      } else {\n        errorInstance = new Error(String(err));\n      }\n      console.error(instanceName, errorInstance);\n      return errorInstance;\n    }\n    public status?: ownValueOf<TStatus> = initialStatus\n      ? initialStatus\n      : undefined;\n\n    public errorOccurred?: Error;\n\n    /**\n     * emit an events described in\n     * TSafeStorageEvents\n     * @public\n     * @memberof StatusClassBase\n     */\n    public statusEmitter = new EventEmitter<{\n      [STATUS_CLASS_STATUS_CHANGE_EVENT]: TStatus;\n    }>();\n\n    protected clearError() {\n      this.errorOccurred = undefined;\n    }\n\n    protected clearStatus() {\n      this.status = undefined;\n    }\n\n    protected clearState() {\n      this.clearStatus();\n      this.clearError();\n    }\n\n    /**\n     *\n     * @param status\n     * @returns {Function} - function to set the previous status value\n     */\n    protected setStatus = (status: ownValueOf<TStatus>): (() => void) => {\n      const { statusEmitter, status: prevStatus } = this;\n\n      this.status = status;\n      statusEmitter.emit(STATUS_CLASS_STATUS_CHANGE_EVENT, status);\n      return () => {\n        this.status = prevStatus;\n      };\n    };\n\n    protected setErrorStatus = (err: Error | string): Error => {\n      if (err) {\n        const errorOccurred = StatusClassBase.error(err);\n\n        this.errorOccurred = errorOccurred;\n        return errorOccurred;\n      }\n      this.setStatus(errorStatus);\n      return new Error('Unknown error');\n    };\n  };\n","/home/paul/projects/decentrilized-protocol/src/classes/basic-classes/status-class-base/status-class-base.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const-auth-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-const/central-authority-class-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-common.ts",["1330","1331"],"import { IUserDescription, TUesrIdentity } from 'types/users.types';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\nimport {\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from '../central-authority-class-const/central-authority-class-const-auth-credentials';\nimport { TCACryptoKeyPairs } from './central-authority-class-types-crypto-keys';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n} from './central-authority-class-types-crypto-credentials';\n\nexport type TCentralAuthorityUserIdentity = string;\n\nexport type TCentralAuthorityUserLogin = string;\n\nexport type TCentralAuthorityUserPassword = string;\n\nexport interface ICentralAuthorityUserAuthCredentials {\n  login: TCentralAuthorityUserLogin;\n  password: TCentralAuthorityUserPassword;\n}\n\nexport type TCentralAuthorityAuthCredentials = {\n  [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: string;\n  [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: TCentralAuthorityUserIdentity;\n};\n\nexport interface ICentralAuthorityUserProfile {\n  name?: string | null;\n  email?: string | null;\n  phone?: string | null;\n  photoURL?: string | null;\n}\n\nexport interface ICentralAuthorityStorageCryptoCredentials {\n  connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error>;\n  setCredentials(cryptoKeyPairs: TCACryptoKeyPairs): Promise<Error | boolean>;\n  getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  >;\n  disconnect(): Promise<boolean | Error>;\n}\n\nexport interface ICentralAuthorityConnectionOptions {\n  serverUrl: string;\n  getUsersDescriptionsRequestOptions: IHttpRequestOptions;\n}\n\nexport abstract class CentralAuthorityConnection {\n  constructor() {}\n  /**\n   * request the users descriptions by the user identities\n   */\n  public abstract getUsersDescription(\n    users: TUesrIdentity[]\n  ): Promise<(IUserDescription | null)[] | Error>;\n}\n\nexport interface ICentralAuthorityConnection {\n  new (): CentralAuthorityConnection;\n}\n\nexport type TInstanceOfCentralAuthorityConnection = InstanceType<\n  ICentralAuthorityConnection\n>;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials.ts",["1332"],"import {\n  TCACryptoKeyPairsExported,\n  TCACryptoKeyPairs,\n} from './central-authority-class-types-crypto-keys';\nimport {\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME,\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n} from '../central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityAuthCredentials,\n} from './central-authority-class-types-common';\n\nexport type TCentralAuthorityUserCryptoCredentials = {\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME]: TCentralAuthorityUserIdentity;\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: TCACryptoKeyPairs;\n};\n\nexport type TCentralAuthorityUserCryptoCredentialsExported = {\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_USER_ID_KEY_NAME]: TCentralAuthorityUserIdentity;\n  [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: string;\n};\n\nexport type TCentralAuthorityCredentialsStorageAuthCredentials = TCentralAuthorityAuthCredentials;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-types/central-authority-class-types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v1/central-authority-class-user-identity-formatters-formatter-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters.utils.ts",["1333"],"import { IUserIdentityFormatter } from './central-authority-class-user-identity-formatters.types';\nimport {\n  validateUserIdentityDescriptionVersion,\n  validateUserIdentityDescription,\n} from '../central-authority-class-user-identity-validators/central-authority-class-user-identity-validators';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { CA_USER_IDENTITY_FORMATTERS_BY_VERSION } from './central-authority-class-user-identity-formatters.const';\nimport { ICAUserUniqueIdentifierDescription } from '../central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\n\nexport const getSerializerForIdentityVersion = (\n  userIdentityVersion: string\n): Error | IUserIdentityFormatter => {\n  const serializerFunction =\n    CA_USER_IDENTITY_FORMATTERS_BY_VERSION[userIdentityVersion];\n\n  if (typeof serializerFunction === 'function') {\n    return serializerFunction;\n  }\n  return new Error(\n    `There is no serializer was found for the identity version ${userIdentityVersion}`\n  );\n};\n\nexport const serializeIdentity = (\n  identity: ICAUserUniqueIdentifierDescription\n): TCentralAuthorityUserIdentity | Error => {\n  const validationResult = validateUserIdentityDescription(identity);\n\n  if (validationResult instanceof Error) {\n    return new Error('The user identity description have a wrong format');\n  }\n\n  const { [CA_USER_IDENTITY_VERSION_PROP_NAME]: version } = identity;\n\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    return new Error(`The version of the user identity given is not supported`);\n  }\n\n  const serializerFunction = getSerializerForIdentityVersion(version);\n\n  if (serializerFunction instanceof Error) {\n    console.error(serializerFunction);\n    return new Error(\n      `There is no serializer function for the user identity description version ${version}`\n    );\n  }\n\n  const serializeResult = serializerFunction(identity);\n\n  if (serializeResult instanceof Error) {\n    return new Error(\n      `Failed serialization for the user identity description version ${version}`\n    );\n  }\n  if (!validateUserIdentity(serializeResult)) {\n    return new Error(\n      `Failed serialization to the right format for the user identity description version ${version}`\n    );\n  }\n  return serializeResult;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v1/central-authority-class-user-identity-parsers-parser-v1.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.types.ts",["1334"],"import { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserIdentityDescription } from '../central-authority-class-user-identity.types';\n\nexport interface IParser {\n  (userIdentityWithoutVersion: string): ICAUserIdentityDescription | Error;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v1/central-authority-class-user-identity-validator-v1.ts",["1335"],"import {\n  dataValidatorUtilURL,\n  dataValidatorUtilUUIDV4,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n} from '../../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierDescription } from '../../central-authority-class-user-identity.types';\n\nexport const validatorV1 = (\n  v: any\n): v is ICAUserUniqueIdentifierDescription => {\n  if (v && typeof v === 'object') {\n    const {\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: userUniqueIdentifier,\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authProviderURI,\n    } = v;\n\n    if (\n      typeof version !== 'string' ||\n      version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT\n    ) {\n      return false;\n    }\n    if (!dataValidatorUtilURL(authProviderURI)) {\n      console.warn(\n        `The auth provider's uri ${authProviderURI} have a wrong format`\n      );\n      return false;\n    }\n    if (!dataValidatorUtilUUIDV4(userUniqueIdentifier)) {\n      console.warn(\n        `The user unique identifier ${userUniqueIdentifier} have a format different from the UUIDv4`\n      );\n      return false;\n    }\n    return true;\n  }\n  console.warn('The URI must be an object');\n  return false;\n};\n\nexport default validatorV1;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.types.ts",["1336"],"export interface IUserIdentityDescriptionValidator {\n  (v: any): boolean;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validators.utils.ts",["1337","1338","1339"],"import { CA_USER_IDENTITY_VALIDATORS_BY_VERSION } from './central-authority-class-user-identity-validators.const';\nimport { IUserIdentityDescriptionValidator } from './central-authority-class-user-identity-validators.types';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n  CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED,\n} from '../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierMetadata } from '../central-authority-class-user-identity.types';\nimport { dataValidatorUtilURL } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateIdentityDescriptionVersion = (\n  version: any\n): version is string => {\n  if (typeof version !== 'string') {\n    console.error('An identity description version must be a string');\n    return false;\n  }\n  if (version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT) {\n    console.error(\n      `An identity description version length must be a ${CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT} characters`\n    );\n    return false;\n  }\n  if (!CA_USER_IDENTITY_PARSER_VERSIONS_SUPPORTED.includes(version)) {\n    console.error(`The version ${version} is not supported`);\n    return false;\n  }\n  return true;\n};\n\nexport const getValidatorByIdentityVersion = (\n  identityVersion: string\n): IUserIdentityDescriptionValidator | Error => {\n  const validator = CA_USER_IDENTITY_VALIDATORS_BY_VERSION[identityVersion];\n\n  if (typeof validator === 'function') {\n    return validator;\n  }\n  return new Error(\n    `There is no validator for the identity version ${identityVersion}`\n  );\n};\n\nexport const validateUserIdentityDescriptionVersion = (\n  identityVersion: string,\n  userIdentityDescription: any\n): boolean | Error => {\n  const validatorForVersion = getValidatorByIdentityVersion(identityVersion);\n\n  if (validatorForVersion instanceof Error) {\n    console.error(validatorForVersion);\n    return new Error(\n      `Can't define a validator for the user's identity version ${validatorForVersion}`\n    );\n  }\n\n  const validationResult = validatorForVersion(userIdentityDescription);\n\n  if (validationResult !== true) {\n    return new Error(\"There is a wrong format of user's identity\");\n  }\n  return true;\n};\n\nexport const validateUserIdentityDescription = (\n  userIdetnityDescription: any\n): boolean | Error => {\n  if (userIdetnityDescription && typeof userIdetnityDescription === 'object') {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = userIdetnityDescription;\n\n    if (!version) {\n      return new Error(\n        'There is no version defined in the user identity description object'\n      );\n    }\n    if (validateIdentityDescriptionVersion(version)) {\n      return validateUserIdentityDescriptionVersion(\n        version,\n        userIdetnityDescription\n      );\n    }\n    return new Error(\n      'There is a wrong version in the user identity description object'\n    );\n  }\n  return new Error('There is a wrong format of the user identity description');\n};\n\nexport const checkIsValidUserIdentityMetadata = (\n  identityMetadata: ICAUserUniqueIdentifierMetadata\n): boolean | Error => {\n  if (typeof identityMetadata !== 'object') {\n    return new Error('Identity metadata must be an object');\n  }\n  if (identityMetadata instanceof Error) {\n    return identityMetadata;\n  }\n  if (!identityMetadata) {\n    return new Error('Identity metadata must not be empty');\n  }\n\n  const { version, authorityProviderURI } = identityMetadata;\n\n  if (version && !validateIdentityDescriptionVersion(version)) {\n    return new Error('Version in Identity metadata have a wrong format');\n  }\n  if (!dataValidatorUtilURL(authorityProviderURI)) {\n    return new Error('The URL of an authority provider is not valid');\n  }\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.ts",["1340","1341","1342"],"import {\n  ICAUserUniqueIdentifierDescription,\n  ICAUserUniqueIdentifierDescriptionWithOptionalVersion,\n  ICAIdentityCommonInstance,\n  TUserIdentityVersion,\n} from './central-authority-class-user-identity.types';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityUserCryptoCredentials,\n} from '../central-authority-class-types/central-authority-class-types';\nimport { validateUserIdentitySilent } from '../central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { parseIdentity } from './central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers';\nimport { serializeIdentity } from './central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters';\nimport {\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n  CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER,\n  CA_USER_IDENTITY_VERSIONS,\n} from './central-authority-class-user-identity.const';\nimport { CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME } from '../central-authority-class-const/central-authority-class-const';\nimport { ownValueOf } from 'types/helper.types';\nexport class CentralAuthorityIdentity implements ICAIdentityCommonInstance {\n  protected _userIdentitySerialized?: Error | TCentralAuthorityUserIdentity;\n\n  protected _userIdentityParsed?: Error | ICAUserUniqueIdentifierDescription;\n\n  public isValid?: boolean;\n\n  constructor(\n    protected _userIdentity:\n      | CentralAuthorityIdentity\n      | TCentralAuthorityUserCryptoCredentials\n      | TCentralAuthorityUserIdentity\n      | ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ) {\n    if (_userIdentity instanceof CentralAuthorityIdentity) {\n      return _userIdentity;\n    }\n\n    let identity = _userIdentity;\n\n    if (_userIdentity && typeof _userIdentity === 'object') {\n      //check may be it is a crypto credentials object\n      const identityVal = ((_userIdentity as unknown) as any)[\n        CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME\n      ];\n\n      if (typeof identityVal === 'string') {\n        identity = identityVal;\n      }\n    }\n    if (validateUserIdentitySilent(identity)) {\n      this.parseUserIdentity(identity);\n    } else {\n      const userIdentityDescription = this.extendDescriptionWithVersion(\n        identity as ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n      );\n\n      this.serializeUserIdentityDescription(userIdentityDescription);\n    }\n  }\n\n  protected extendDescriptionWithVersion(\n    _userIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion\n  ): ICAUserUniqueIdentifierDescription {\n    const {\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n    } = _userIdentityDescription;\n\n    if (!version) {\n      // extend the description with the\n      // current version\n      const result = {\n        ..._userIdentityDescription,\n        [CA_USER_IDENTITY_VERSION_PROP_NAME]: CA_USER_IDENTITY_VERSION_CURRENT,\n      };\n\n      this._userIdentity = result;\n      return result as ICAUserUniqueIdentifierDescription;\n    }\n    return _userIdentityDescription as ICAUserUniqueIdentifierDescription;\n  }\n\n  public get identityDescription(): ICAUserUniqueIdentifierDescription | Error {\n    const { _userIdentityParsed } = this;\n\n    if (!_userIdentityParsed) {\n      return new Error('Failed to parse the user identity');\n    }\n    return _userIdentityParsed;\n  }\n\n  public get identityDescritptionSerialized():\n    | TCentralAuthorityUserIdentity\n    | Error {\n    const { _userIdentitySerialized } = this;\n\n    if (!_userIdentitySerialized) {\n      return new Error('Failed to serialize the user identity');\n    }\n    return _userIdentitySerialized;\n  }\n\n  /**\n   * uniquely identifies the user\n   */\n  public get id(): string | Error {\n    const { identityDescription } = this;\n\n    if (identityDescription instanceof Error) {\n      return identityDescription;\n    }\n\n    const { authorityProviderURI, userUniqueIdentifier } = identityDescription;\n\n    return `${authorityProviderURI}${CA_USER_IDENTITY_AUTH_PROVIDER_URL_DELIMETER}${userUniqueIdentifier}`;\n  }\n\n  public get version(): TUserIdentityVersion | Error {\n    const { identityDescription } = this;\n\n    if (identityDescription instanceof Error) {\n      return identityDescription;\n    }\n\n    return ((identityDescription.version ||\n      CA_USER_IDENTITY_VERSION_CURRENT) as unknown) as TUserIdentityVersion;\n  }\n\n  public toString(): TCentralAuthorityUserIdentity {\n    const { identityDescritptionSerialized } = this;\n\n    if (identityDescritptionSerialized instanceof Error) {\n      return '';\n    }\n    return identityDescritptionSerialized;\n  }\n\n  protected setIdentityIsValid(): void {\n    if (this.isValid !== false) {\n      this.isValid = true;\n    }\n  }\n\n  protected parseUserIdentity(\n    userIdentity: TCentralAuthorityUserIdentity\n  ): void {\n    if (userIdentity) {\n      const parsedUserIdentity = parseIdentity(userIdentity);\n      if (parsedUserIdentity instanceof Error) {\n        console.error(parsedUserIdentity);\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = new Error(\n          'Failed to parse the user identity'\n        );\n      } else {\n        this._userIdentityParsed = parsedUserIdentity;\n        this._userIdentitySerialized = userIdentity;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identity serialized is not defined');\n\n      this._userIdentityParsed = err;\n      this._userIdentitySerialized = err;\n    }\n    this.isValid = false;\n  }\n\n  protected serializeUserIdentityDescription(\n    userIdentityDescription: ICAUserUniqueIdentifierDescription\n  ) {\n    if (userIdentityDescription) {\n      const serializedDescription = serializeIdentity(userIdentityDescription);\n\n      if (serializedDescription instanceof Error) {\n        this._userIdentityParsed = new Error(\n          'Failed to serialize the user identity description'\n        );\n        this._userIdentitySerialized = serializedDescription;\n      } else {\n        this._userIdentityParsed = userIdentityDescription;\n        this._userIdentitySerialized = serializedDescription;\n        this.setIdentityIsValid();\n        return;\n      }\n    } else {\n      const err = new Error('The user identifier description is not defined');\n\n      this._userIdentitySerialized = err;\n      this._userIdentityParsed = err;\n    }\n    this.isValid = false;\n  }\n}\n\nexport default CentralAuthorityIdentity;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.ts",["1343","1344","1345","1346","1347","1348","1349"],"import { CAConnectionWithFirebaseUtilDatabase } from '../central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport {\n  getUserIdentityByCryptoCredentials,\n  exportCryptoCredentialsToString,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY,\n  CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK,\n} from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport {\n  ICAConnectionFirebase,\n  ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure,\n} from './central-authority-connection-firebase-utils.credentials-storage.types';\nimport { encodeForFirebaseKey } from 'utils/firebase-utils/firebase-utils';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { checkIsValidExportedCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\n/**\n * This class is used for storing\n * and reading the user's credentials.\n * It also used for reading\n * credentials of another user from the\n * Firebase remote database.\n * @export\n * @class CAConnectionFirestoreUtilsCredentialsStrorage\n * @extends {CAConnectionWithFirebaseUtilDatabase}\n */\nexport class CAConnectionFirestoreUtilsCredentialsStrorage extends CAConnectionWithFirebaseUtilDatabase {\n  protected connectionToFirebase?: ICAConnectionFirebase;\n\n  /**\n   * returns a string will used to store/read value of\n   * the user credentials\n   * @protected\n   * @param {string} userId\n   * @returns {string}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected getCredentialsKeyByUserId(userId: string): string {\n    return `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${encodeForFirebaseKey(\n      userId\n    )}`;\n  }\n\n  protected checkIsConnected(): boolean | Error {\n    const isConnectedToDatabase = super.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { app, connectionToFirebase } = this;\n\n    if (!connectionToFirebase) {\n      return new Error(\n        'There is no instance implements a connection to the Firebase application'\n      );\n    }\n    if (!connectionToFirebase.isConnected) {\n      return new Error(\n        'There is no active connection to the firebase appliction'\n      );\n    }\n    if (!app) {\n      return new Error('There is no app connection');\n    }\n    return true;\n  }\n\n  protected get firebaseUserData(): firebase.User | null | Error {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { app } = this;\n\n    try {\n      return app!!.auth().currentUser;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected get firebaseUserId(): string | Error {\n    const { firebaseUserData: userData } = this;\n\n    if (userData instanceof Error) {\n      console.error(userData);\n      return new Error('Failed to read the user data from a firebase');\n    }\n    if (userData == null) {\n      return new Error('There is no user data');\n    }\n    try {\n      return userData.uid;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to get the user id for firebase');\n    }\n  }\n\n  protected checkIsAuthorized(): boolean | Error {\n    const isConnectedToDatabase = this.checkIsConnected();\n\n    if (isConnectedToDatabase instanceof Error) {\n      return isConnectedToDatabase;\n    }\n\n    const { firebaseUserId, connectionToFirebase } = this;\n\n    if (!connectionToFirebase || !connectionToFirebase.isUserSignedIn) {\n      return new Error(\n        'The user is not authorized in the Firebase application'\n      );\n    }\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('The user is not authorized');\n    }\n    return true;\n  }\n\n  constructor(connectionToFirebase: ICAConnectionFirebase) {\n    super();\n\n    this.setUpConnection(connectionToFirebase);\n  }\n\n  protected setUpConnection(connectionToFirebase: ICAConnectionFirebase) {\n    this.connectionToFirebase = connectionToFirebase;\n\n    const app = connectionToFirebase.getApp();\n\n    if (!app) {\n      throw new Error(\n        'There is no insatnce which implements a connection to the Firebase app'\n      );\n    }\n    this.app = app;\n  }\n\n  /**\n   *\n   * check if a credentials set in the storage\n   * are in the valid format\n   * @protected\n   * @param {*} storedCredentialsValue\n   * @returns {storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected checkStoredCredentialsFormat(\n    storedCredentialsValue: any\n  ): storedCredentialsValue is ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n    if (storedCredentialsValue instanceof Error) {\n      console.error(storedCredentialsValue);\n      return false;\n    }\n    if (storedCredentialsValue && typeof storedCredentialsValue === 'object') {\n      const {\n        credentials,\n        [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseId,\n      } = storedCredentialsValue;\n\n      // an id set for the user by the Firebase\n      if (typeof firebaseId === 'string') {\n        if (checkIsValidExportedCryptoCredentialsToString(credentials)) {\n          return true;\n        }\n        console.error(\n          \"Credentials are't exists or invalid in the stored credentials\"\n        );\n      } else {\n        console.error(\n          'Firebase user id is not valid in the stored credentials'\n        );\n      }\n    }\n    return false;\n  }\n\n  protected async getCredentialsByValueStored(\n    storedCredentialsValue: any\n  ): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (storedCredentialsValue == null) {\n      return null;\n    }\n    if (storedCredentialsValue instanceof Error) {\n      return storedCredentialsValue;\n    }\n    if (!this.checkStoredCredentialsFormat(storedCredentialsValue)) {\n      return new Error('the value stored have an unknown format');\n    }\n\n    const { credentials: exportedCredentials } = storedCredentialsValue;\n    const importedCredentials = await importCryptoCredentialsFromAString(\n      exportedCredentials\n    );\n\n    if (importedCredentials instanceof Error) {\n      console.error(importedCredentials);\n      return new Error('Failed to import credentials value stored');\n    }\n    return importedCredentials;\n  }\n\n  /**\n   *\n   * filter a value stored for the user key\n   * to get a value of the credentials\n   * for the user\n   * @protected\n   * @param {{\n   *     [key: string]: any;\n   *   }} [valueStored]\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | null | Error>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  protected async filterCredentialsValues(valueStored?: {\n    [key: string]: any;\n  }): Promise<TCentralAuthorityUserCryptoCredentials | null | Error> {\n    if (!valueStored) {\n      return null;\n    }\n    if (valueStored instanceof Error) {\n      return valueStored;\n    }\n\n    const keys = Object.keys(valueStored);\n\n    // if an empty object\n    if (keys.length === 0) {\n      return null;\n    }\n\n    const len = Math.min(\n      keys.length,\n      CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_MAXIMUM_STORED_VALUES_CHECK\n    );\n    let idx = 0;\n    let keyValueStored;\n    let valueValueStored;\n    let credentialsImported;\n\n    // for each property of the value stored\n    // check wherether it is a valid\n    // crypto credentials\n    for (; idx < len; idx++) {\n      keyValueStored = keys[idx];\n      valueValueStored = valueStored[keyValueStored];\n      credentialsImported = await this.getCredentialsByValueStored(\n        valueValueStored\n      );\n\n      if (!(credentialsImported instanceof Error)) {\n        return credentialsImported;\n      }\n    }\n    return null;\n  }\n\n  // check if there is a credentials for the current user is exists\n  // and return it if exists\n  public async getCredentialsForTheCurrentUser(): Promise<\n    Error | null | TCentralAuthorityUserCryptoCredentials\n  > {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no connection to the database server');\n    }\n    try {\n      // read a value storerd as user's\n      // credentials in the database\n      const snapshot = await database\n        .ref(CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX)\n        .orderByChild(\n          CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY\n        )\n        .equalTo(firebaseUserId)\n        .once('value');\n\n      if (snapshot.exists()) {\n        const valueStored = snapshot.val();\n        return this.filterCredentialsValues(valueStored);\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the user data from the database');\n    }\n    return null;\n  }\n\n  // store the credentials value\n  // for the current user\n  public async setUserCredentials(\n    credentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const isAuthorizedResult = this.checkIsAuthorized();\n\n    if (isAuthorizedResult instanceof Error) {\n      console.error(isAuthorizedResult);\n      return new Error('The user is not authorized');\n    }\n\n    const { firebaseUserId } = this;\n\n    if (firebaseUserId instanceof Error) {\n      console.error(firebaseUserId);\n      return new Error('Failed to get user id of the firebase user');\n    }\n\n    // check if a credentials value is\n    // already exists for the user\n    const credentialsForTheCurrentUser = await this.getCredentialsForTheCurrentUser();\n\n    if (\n      credentialsForTheCurrentUser != null &&\n      !(credentialsForTheCurrentUser instanceof Error)\n    ) {\n      // if a credentials are already stored for the user\n      // return it\n      return credentialsForTheCurrentUser;\n    }\n\n    const userId = getUserIdentityByCryptoCredentials(credentials);\n\n    if (userId instanceof Error) {\n      console.error(userId);\n      return new Error(\"Failed to get a user's identity from the credentials\");\n    }\n\n    const exportedCryptoCredentials = await exportCryptoCredentialsToString(\n      credentials\n    );\n\n    if (exportedCryptoCredentials instanceof Error) {\n      console.error(exportedCryptoCredentials);\n      return new Error('Failed to export the crypto credentials value');\n    }\n\n    // check if the user id is not exists in the database\n    // user id is a user identity\n    // TODO - it's necessary to implement on the Firebase server to check whether the user can update credentials for the userid\n    const credentialsForTheUserId = await this.getUserCredentials(userId);\n\n    if (\n      credentialsForTheUserId != null &&\n      !(credentialsForTheUserId instanceof Error)\n    ) {\n      return new Error(\n        'A crypto credentials is already exists for the user id'\n      );\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storeResult = await this.setValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue, {\n      credentials: exportedCryptoCredentials,\n      [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: firebaseUserId,\n    });\n\n    if (storeResult instanceof Error) {\n      console.error(storeResult);\n      return new Error('Failed to store the credentials in the database');\n    }\n    return credentials;\n  }\n\n  /**\n   *\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login(email)\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    if (!this.checkIsConnected()) {\n      return new Error('There is no active connection to the Firebase');\n    }\n    if (!validateUserIdentity(userId)) {\n      return new Error('The user identity is not valid');\n    }\n\n    const keyForValue = this.getCredentialsKeyByUserId(userId);\n    const storedCredentialsValue = await this.getValue<\n      ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure\n    >(keyForValue);\n\n    return this.getCredentialsByValueStored(storedCredentialsValue);\n  }\n\n  // disconnect from the database\n  public async disconnect(): Promise<Error | boolean> {\n    const isConnected = this.checkIsConnected();\n\n    if (!isConnected) {\n      return true;\n    }\n    const { database } = this;\n\n    if (!database) {\n      return new Error('There is no active database connection');\n    }\n    try {\n      await database.goOffline();\n    } catch (err) {\n      console.error();\n      return new Error('Failed to disconnect from the databases');\n    }\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.types.ts",["1350"],"import * as firebase from 'firebase/app';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY } from './central-authority-connection-firebase-utils.credentials-storage.const';\nimport { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from 'classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const';\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorage {\n  setUserCredentials(\n    userId: string,\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean>;\n  getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials>;\n}\n\nexport interface ICAConnectionFirestoreUtilsCredentialsStrorageCredentialsSaveStructure {\n  [CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_FIREBASE_USER_ID_PROPERTY]: string;\n  credentials: string;\n}\n\nexport interface ICAConnectionFirebase {\n  isConnected: boolean;\n  isUserSignedIn: boolean;\n  getApp(): void | firebase.app.App;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database.ts",["1351","1352","1353","1354","1355","1356","1357"],"import * as firebase from 'firebase';\nimport {\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH,\n  CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH,\n} from './central-authority-connection-firebase-utils.database.const';\n\nexport class CAConnectionWithFirebaseUtilDatabase {\n  protected app?: firebase.app.App;\n\n  protected database?: firebase.database.Database;\n\n  protected wasConnected: boolean = false;\n\n  public get isConnected(): boolean {\n    const { wasConnected, database } = this;\n\n    return wasConnected && !!database;\n  }\n\n  protected setWasConnectedStatus(wasConnected = false) {\n    this.wasConnected = !!wasConnected;\n  }\n\n  protected setDatabaseInstance(db: firebase.database.Database) {\n    this.database = db;\n  }\n\n  protected checkIsConnected(): Error | boolean {\n    const { isConnected } = this;\n\n    if (!isConnected) {\n      return new Error('There is no connection with the remote database');\n    }\n    return true;\n  }\n\n  protected checkKeyValue(key: any): key is string {\n    if (typeof key !== 'string') {\n      console.error('Key must be a string');\n      return false;\n    }\n\n    const keyLen = key.length;\n\n    if (keyLen > CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH) {\n      console.error(\n        `Key must be less than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    if (keyLen < CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MIN_LENGTH) {\n      console.error(\n        `Key must be greater than ${CA_CONNECTION_FIREBASE_UTILS_DATABASE_KEY_MAX_LENGTH}, but the value is ${keyLen} characters len`\n      );\n      return false;\n    }\n    return true;\n  }\n\n  public async connect(): Promise<boolean | Error> {\n    const { isConnected, app } = this;\n\n    if (isConnected) {\n      return true;\n    }\n    if (!app) {\n      return new Error('The app is not defined');\n    }\n    try {\n      const database = app.database();\n\n      await database.goOnline();\n      this.setDatabaseInstance(database);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect to the Database server');\n    }\n    this.setWasConnectedStatus(true);\n    return true;\n  }\n\n  /**\n   * This method destroys the\n   * application instance, Not just\n   * go offline. This means that\n   * the reconnection with calling of\n   * the 'connect' method will failed\n   * and therefore is not allowed.\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseUtilDatabase\n   */\n  public async disconnect(): Promise<boolean | Error> {\n    const isConnected = this.checkIsConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.goOffline();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to go offline before destroy the application');\n    }\n    this.setWasConnectedStatus(false);\n    return true;\n  }\n\n  protected checkBeforeReadWrite(key: string): Error | boolean {\n    const isConnectedResult = this.checkIsConnected();\n\n    if (isConnectedResult instanceof Error) {\n      return isConnectedResult;\n    }\n    if (!this.checkKeyValue(key)) {\n      return new Error('The key value is not valid');\n    }\n    return true;\n  }\n\n  public async setValue<T>(key: string, value: T): Promise<Error | boolean> {\n    const canWrite = this.checkBeforeReadWrite(key);\n\n    if (canWrite instanceof Error) {\n      return canWrite;\n    }\n\n    const { database } = this;\n\n    try {\n      await database!!.ref(key).set(value);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the value in the database');\n    }\n    return true;\n  }\n\n  public async getValue<T>(key: string): Promise<Error | null | T> {\n    const canRead = this.checkBeforeReadWrite(key);\n\n    if (canRead instanceof Error) {\n      return canRead;\n    }\n\n    const { database } = this;\n\n    try {\n      const snapshot = await database!!.ref(key).once('value');\n      const isExists = snapshot.exists();\n\n      if (!isExists) {\n        return null;\n      }\n      return snapshot.val() as T;\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to read the value from the storage');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseUtilDatabase;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.const/central-authority-connection-firebase.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.ts",["1358"],"import * as firebase from 'firebase/app';\nimport { ICAConnection } from '../central-authority-connections.types';\nimport { CAConnectionWithFirebaseImplementation } from './central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation';\n\n/**\n *\n * This is the class realized connection with the Firebase.\n * It allows to sign up and authorize on it, set a crypto credentials\n * for the user and read credentials for another users.\n * @export\n * @class CAConnectionWithFirebase\n * @implements {ICAConnection}\n */\nexport class CAConnectionWithFirebase\n  extends CAConnectionWithFirebaseImplementation\n  implements ICAConnection {}\n\nexport default CAConnectionWithFirebase;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase.types.configuration.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-error-codes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-common.ts",["1359","1360","1361","1362"],"import {\n  isCryptoKeyPair,\n  isCryptoKey,\n  isCryptoKeyPairExportedAsString,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n  TCACryptoKeyPairsExported,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\n\nexport const checkIsCryptoKeyPairsExportedAsString = (v: any): boolean => {\n  return (\n    typeof v === 'string' &&\n    v.length >= CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH\n  );\n};\n\n/**\n * check is a given value\n * have a key pairs in a\n * raw format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairs = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairs => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair,\n    } = keyPairs;\n\n    if (!isCryptoKeyPair(encryptionKeyPair)) {\n      console.error('Encryption key pair is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPair(signKeyPair)) {\n      console.error('Data sign key pair is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs');\n  return false;\n};\n\n/**\n * check is a given value\n * have a key pairs in an\n * exported format\n * @param keyPairs\n * @returns {boolean}\n */\nexport const checkIsCryptoKeyPairsExported = (\n  keyPairs: any\n): keyPairs is TCACryptoKeyPairsExported => {\n  if (keyPairs && typeof keyPairs === 'object') {\n    const {\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPairExported,\n    } = keyPairs;\n\n    if (!isCryptoKeyPairExportedAsString(encryptionKeyPairExported)) {\n      console.error('Encryption key pair exported is not valid');\n      return false;\n    }\n    if (!isCryptoKeyPairExportedAsString(signKeyPairExported)) {\n      console.error('Data sign key pair exported is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format of the keyPairs exported');\n  return false;\n};\n\nexport const checkIsPublicKeys = (\n  keysPublic: any\n): keysPublic is TCACryptoPubilicKeys => {\n  if (keysPublic && typeof keysPublic === 'object') {\n    if (\n      !isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME])\n    ) {\n      console.error('Encryption public key is not valid');\n      return false;\n    }\n    if (!isCryptoKey(keysPublic[CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME])) {\n      console.error('Sign data public key is not valid');\n      return false;\n    }\n    return true;\n  }\n  console.error('A wrong format for the keysPublic');\n  return false;\n};\n\n/**\n * returns only a public keys\n * from a key pairs object\n * @param keyPairs\n * @returns {Error | object}\n */\nexport const getPublicKeysFromCryptoKeyPairs = (\n  keyPairs: TCACryptoKeyPairs\n): TCACryptoPubilicKeys | Error => {\n  if (!checkIsCryptoKeyPairs(keyPairs)) {\n    return new Error('There is a wrong format of the key pairs');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  }: TCACryptoKeyPairs = keyPairs;\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]:\n      encryptionKeyPair.publicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: dataSignKeyPair.publicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error(\n    'Failed to receive a valid public keys from the encryption key pairs'\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-export.ts",["1363"],"import {\n  exportKeyPairAsString as exportKeyPairDataEncryptAsString,\n  exportKeyAsString as exportPublicKeyDataEncryptAsString,\n} from 'utils/encryption-utils';\nimport {\n  exportKeyPairAsString as exportKeyPairDataSignAsString,\n  exportKeyAsString as exportPublicKeyDataSignAsString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from './central-authority-util-crypto-keys.const';\nimport {\n  checkIsCryptoKeyPairs,\n  getPublicKeysFromCryptoKeyPairs,\n} from './central-authority-util-crypto-keys-common';\nimport { compressString } from 'utils/data-compression-utils/data-compression-utils-strings';\nimport { stringify } from 'utils/main-utils';\n\n/**\n * export two key pairs\n * (data sign and data encryption)\n * as a one string\n * @param {object} cryptoKeyPairs\n * @returns {Promise<string | Error>}\n */\nexport const exportKeyPairsAsString = async (\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The keypair is not valid');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPair,\n  } = cryptoKeyPairs;\n  const [encryptionKeyPairString, signDataKeyPairString] = await Promise.all([\n    exportKeyPairDataEncryptAsString(encryptionKeyPair),\n    exportKeyPairDataSignAsString(signDataKeyPair),\n  ]);\n\n  if (encryptionKeyPairString instanceof Error) {\n    return encryptionKeyPairString;\n  }\n  if (signDataKeyPairString instanceof Error) {\n    return signDataKeyPairString;\n  }\n  try {\n    const stringifyResult = stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n    });\n\n    if (stringifyResult instanceof Error) {\n      return stringifyResult;\n    }\n    return compressString(stringifyResult);\n  } catch (err) {\n    return err;\n  }\n};\n\n/**\n * export a public keys only\n * from a keyPairs as a string\n * @param {object} keyPairs\n * @returns {string | Error}\n */\nexport const exportPublicKeysAsString = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<string | Error> => {\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    return publicKeys;\n  }\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKey,\n  } = publicKeys;\n\n  const [\n    encryptionPublicKeyExported,\n    signPublicKeyExported,\n  ] = await Promise.all([\n    exportPublicKeyDataEncryptAsString(encryptionPublicKey),\n    exportPublicKeyDataSignAsString(signPublicKey),\n  ]);\n\n  if (encryptionPublicKeyExported instanceof Error) {\n    console.error('export of the encryptionPublicKey was failed');\n    return encryptionPublicKeyExported;\n  }\n  if (signPublicKeyExported instanceof Error) {\n    console.error('export of the signPublicKeyExported was failed');\n    return signPublicKeyExported;\n  }\n  try {\n    return stringify({\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: encryptionPublicKeyExported,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: signPublicKeyExported,\n    });\n  } catch (err) {\n    return err;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-generate.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys-import.ts",["1364"],"import {\n  importKeyPairFromString as importKeyPairDataEncryptionFromString,\n  importKeyFromString as importKeyEncryptionFromString,\n} from 'utils/encryption-utils';\nimport {\n  importKeyPairFromString as importKeyPairDataSignFromString,\n  importKeyFromString as importKeySignFromString,\n} from 'utils/data-sign-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from '../../central-authority-class-types/central-authority-class-types';\nimport {\n  CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH,\n} from './central-authority-util-crypto-keys.const';\nimport { caValidateCryptoKeyPairExportedObject } from '../../central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport {\n  checkIsPublicKeys,\n  checkIsCryptoKeyPairs,\n  checkIsCryptoKeyPairsExportedAsString,\n} from './central-authority-util-crypto-keys-common';\nimport { decompressString } from 'utils/data-compression-utils/data-compression-utils-strings';\n\n/**\n * import an exported key pair\n * and returs it a crypto key pair\n * @param {string} keyPairsString\n * @returns {Promise<Error | object>}\n */\nexport const importKeyPairsFromString = async (\n  keyPairsString: string\n): Promise<TCACryptoKeyPairs | Error> => {\n  if (!checkIsCryptoKeyPairsExportedAsString(keyPairsString)) {\n    return new Error('This is a wrong type of exported crypto keys');\n  }\n\n  let parsedKeyPairsObject;\n\n  const decompressedValue = decompressString(keyPairsString);\n\n  if (decompressedValue instanceof Error) {\n    console.error(decompressedValue);\n    return new Error('Failed to decompress key pairs');\n  }\n\n  try {\n    parsedKeyPairsObject = JSON.parse(decompressedValue);\n  } catch (err) {\n    return err;\n  }\n  if (!caValidateCryptoKeyPairExportedObject(parsedKeyPairsObject)) {\n    return new Error('There is a wrong format of a key pairs exported');\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPairString,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signDataKeyPairString,\n  } = parsedKeyPairsObject;\n  const [encryptionKeyPair, dataSignKeyPair] = await Promise.all([\n    importKeyPairDataEncryptionFromString(encryptionKeyPairString),\n    importKeyPairDataSignFromString(signDataKeyPairString),\n  ]);\n\n  if (encryptionKeyPair instanceof Error) {\n    return encryptionKeyPair;\n  }\n  if (dataSignKeyPair instanceof Error) {\n    return dataSignKeyPair;\n  }\n\n  const encryptionKeyPairs = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: dataSignKeyPair,\n  };\n\n  if (checkIsCryptoKeyPairs(encryptionKeyPairs)) {\n    return encryptionKeyPairs;\n  }\n  return new Error('Failed to import key pairs');\n};\n\nexport const importPublicKeyPairsFromString = async (\n  publicKeyPairsString: string\n): Promise<Error | TCACryptoPubilicKeys> => {\n  let publicKeyPairsImport;\n  try {\n    publicKeyPairsImport = JSON.parse(publicKeyPairsString);\n  } catch (err) {\n    return err;\n  }\n\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: importedStringEncryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: importedStringSignPublicKey,\n  } = publicKeyPairsImport;\n\n  if (\n    typeof importedStringEncryptionPublicKey !== 'string' ||\n    importedStringEncryptionPublicKey.length <\n      CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH\n  ) {\n    const err = new Error(\n      'Encryption public key import as a string was failed'\n    );\n\n    console.error(err);\n    return err;\n  }\n  if (\n    typeof importedStringSignPublicKey !== 'string' ||\n    importedStringSignPublicKey.length <\n      CA_CRYPTO_KEY_PAIRS_PUBLIC_KEYS_STRINGIFIED_MIN_LENGTH\n  ) {\n    const err = new Error('Sign public key import as a string was failed');\n\n    console.error(err);\n    return err;\n  }\n\n  const [\n    importedEncryptionPublicKey,\n    importedSignPublicKey,\n  ] = await Promise.all([\n    importKeyEncryptionFromString(importedStringEncryptionPublicKey),\n    importKeySignFromString(importedStringSignPublicKey),\n  ]);\n\n  if (importedEncryptionPublicKey instanceof Error) {\n    console.error('Failed to import encryption public key from the string');\n    return importedEncryptionPublicKey;\n  }\n  if (importedSignPublicKey instanceof Error) {\n    console.error('Failed to import sign public key from the string');\n    return importedSignPublicKey;\n  }\n\n  const publicKeys = {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME]: importedEncryptionPublicKey,\n    [CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME]: importedSignPublicKey,\n  };\n\n  if (checkIsPublicKeys(publicKeys)) {\n    return publicKeys;\n  }\n  return new Error('Failed to import a public keys');\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials.ts",["1365","1366"],"import { TCentralAuthorityUserCryptoCredentials } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentity } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CentralAuthorityIdentity } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  checkIsValidCryptoCredentials,\n  checkIsValidCryptoCredentialsExportedFormat,\n  checkIsValidExportedCryptoCredentialsToString,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { stringify } from 'utils/main-utils';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\nexport const exportCryptoCredentialsToString = async (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  withoutIdentityVersion: boolean = false\n): Promise<Error | string> => {\n  if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n    return new Error('The given value is not a valid crypto credentials');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = userCryptoCredentials;\n  const exportedCryptoKeys = await exportKeyPairsAsString(cryptoKeys);\n\n  if (exportedCryptoKeys instanceof Error) {\n    return exportedCryptoKeys;\n  }\n\n  const cryptoCredentialsExported = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: exportedCryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  };\n  if (withoutIdentityVersion) {\n    const userCAIdentity = new CentralAuthorityIdentity(userIdentity);\n    const { id } = userCAIdentity;\n\n    if (id instanceof Error) {\n      return new Error('The identity is not valid');\n    }\n    cryptoCredentialsExported[CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME] = id;\n  }\n\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error(\n      'Failed to create a crypto credentials in the exported format'\n    );\n  }\n  try {\n    const exportedCryptoCredentialsAsString = stringify(\n      cryptoCredentialsExported\n    );\n\n    if (\n      !checkIsValidExportedCryptoCredentialsToString(\n        exportedCryptoCredentialsAsString\n      )\n    ) {\n      return new Error(\n        'Failed cause the crypto credentials exported as a sting have a wrong format'\n      );\n    }\n    return exportedCryptoCredentialsAsString;\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to stringify the crypto credentials');\n  }\n};\n\nexport const exportCryptoCredentialsToStringWithoutTheCAIdentityVersion = (\n  userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Promise<Error | string> =>\n  exportCryptoCredentialsToString(userCryptoCredentials, true);\n\nexport const compareCryptoCredentials = async (\n  ...credentials: TCentralAuthorityUserCryptoCredentials[]\n): Promise<boolean | Error> => {\n  if (!(credentials instanceof Array)) {\n    return new Error('Crdentails to compare must be an array');\n  }\n\n  const exportResult = await exportCryptoCredentialsToStringWithoutTheCAIdentityVersion(\n    credentials[0]\n  );\n\n  if (exportResult instanceof Error) {\n    return exportResult;\n  }\n  if (credentials.length === 1) {\n    return true;\n  }\n\n  let idx = 1;\n  const length = credentials.length;\n  let exportCredentialsResult = null;\n\n  for (; idx < length; idx += 1) {\n    exportCredentialsResult = await exportCryptoCredentialsToStringWithoutTheCAIdentityVersion(\n      credentials[idx]\n    );\n\n    if (exportCredentialsResult instanceof Error) {\n      console.error(\n        `Failed to export the credentials on index ${idx} === ${credentials[idx]}`\n      );\n      return exportCredentialsResult;\n    }\n    if (exportCredentialsResult !== exportResult) {\n      return new Error(\n        `The credentials on index ${idx} are not equals to the first credentials`\n      );\n    }\n  }\n  return true;\n};\n\nexport const importCryptoCredentialsFromExportedFromat = async (\n  cryptoCredentialsExported: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  if (!checkIsValidCryptoCredentialsExportedFormat(cryptoCredentialsExported)) {\n    return new Error('The crypto credentials exported have a wrong format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysExported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  } = cryptoCredentialsExported;\n  const cryptoKeysImported = await importKeyPairsFromString(cryptoKeysExported);\n\n  if (cryptoKeysImported instanceof Error) {\n    console.error(cryptoKeysImported);\n    return new Error(\n      'Failed to import a crypto key pairs from the given string'\n    );\n  }\n\n  const cryptoCredentials = {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeysImported,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentityExported,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error(\n      'Failed to return the crypto credentials imorted in the valid format'\n    );\n  }\n  return cryptoCredentials;\n};\n\nexport const importCryptoCredentialsFromAString = async (\n  cryptoCredentialsString: any\n): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n  const typeCryptoCredentials = typeof cryptoCredentialsString;\n\n  if (typeCryptoCredentials !== 'string') {\n    return new Error(\n      `The cryptoCredentials value have the wrong type::${typeCryptoCredentials}::`\n    );\n  }\n  if (!checkIsValidExportedCryptoCredentialsToString(cryptoCredentialsString)) {\n    return new Error('The cryptoCredentials value have a wrong format');\n  }\n\n  let cryptoCredentialsExported;\n  try {\n    cryptoCredentialsExported = JSON.parse(cryptoCredentialsString);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to parse the given crypto credentials string');\n  }\n  return importCryptoCredentialsFromExportedFromat(cryptoCredentialsExported);\n};\n\nexport const getUserCredentialsByUserIdentityAndCryptoKeys = (\n  userIdentity: TCentralAuthorityUserIdentity,\n  cryptoKeyPairs: TCACryptoKeyPairs\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (!validateUserIdentity(userIdentity)) {\n    return new Error('The user identity has a wrong format');\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return new Error('The crypto key pairs has a wrong format');\n  }\n\n  const cryptoCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  };\n\n  if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return new Error('Failed to create a valid crypto credentials');\n  }\n  return cryptoCredentials;\n};\n\nexport const getExportedAsStringCryptoCredentials = async (\n  identity: TCentralAuthorityUserIdentity,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  try {\n    // parse the identity\n    const caIdentity = new CentralAuthorityIdentity(identity);\n    const { isValid } = caIdentity;\n\n    if (!isValid) {\n      return new Error('The identity is not valid or have an unknown format');\n    }\n    if (!checkIsCryptoKeyPairs(cryptoCredentialsKeyPairs)) {\n      return new Error(\n        'The crypto keys are not valid or have an unknown format'\n      );\n    }\n\n    const caUserCryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      identity,\n      cryptoCredentialsKeyPairs\n    );\n\n    if (caUserCryptoCredentials instanceof Error) {\n      console.error(caUserCryptoCredentials);\n      return new Error('Failed to get User crypto credentials');\n    }\n    return exportCryptoCredentialsToString(caUserCryptoCredentials);\n  } catch (err) {\n    console.error(err);\n    return new Error('Failed to process the credentials or identity');\n  }\n};\n\nexport const getExportedCryptoCredentialsByCAIdentity = async (\n  caIdentity: CentralAuthorityIdentity | string,\n  cryptoCredentialsKeyPairs: TCACryptoKeyPairs\n): Promise<Error | string> => {\n  if (caIdentity instanceof CentralAuthorityIdentity) {\n    if (caIdentity.isValid) {\n      return getExportedAsStringCryptoCredentials(\n        String(caIdentity), // conver it to identity\n        cryptoCredentialsKeyPairs\n      );\n    }\n    return new Error('The CA identity is wrong');\n  }\n  return new Error('The CA identity must be an instance of caIdentity');\n};\n\nexport const replaceCryptoCredentialsIdentity = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials,\n  identity: TCentralAuthorityUserIdentity\n): Error | TCentralAuthorityUserCryptoCredentials => {\n  if (checkIsValidCryptoCredentials(cryptoCredentials)) {\n    return {\n      ...cryptoCredentials,\n      [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: identity,\n    };\n  }\n  return new Error('The crypto credentials have a wrong format');\n};\n\nexport const getUserIdentityByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCentralAuthorityUserIdentity => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (validateUserIdentity(userIdentity)) {\n    return userIdentity;\n  }\n  return new Error('The user identity is not valid');\n};\n\nexport const getCryptoKeyPairsByCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): Error | TCACryptoKeyPairs => {\n  if (typeof cryptoCredentials !== 'object') {\n    return new Error('The crypto credentials have an unknown format');\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairs,\n  } = cryptoCredentials;\n\n  if (checkIsCryptoKeyPairs(cryptoKeyPairs)) {\n    return cryptoKeyPairs;\n  }\n  return new Error('The crypto key pairs are not valid');\n};\n\nexport const getUserIdentityVersion = (\n  userIdentity: TCentralAuthorityUserIdentity | CentralAuthorityIdentity\n): TUserIdentityVersion | Error => {\n  if (\n    !(userIdentity instanceof CentralAuthorityIdentity) &&\n    typeof userIdentity !== 'string'\n  ) {\n    return new Error(\n      'The userIdentity must be a string or an instance of the CentralAuthorityIdentity class'\n    );\n  }\n\n  const userIdentityObj = new CentralAuthorityIdentity(userIdentity);\n\n  if (!userIdentityObj.isValid) {\n    return new Error('The user identity is not valid');\n  }\n  return userIdentityObj.version;\n};\n\nexport const getVersionOfCryptoCredentials = (\n  cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n): TUserIdentityVersion | Error => {\n  const userIdentity = getUserIdentityByCryptoCredentials(cryptoCredentials);\n\n  if (userIdentity instanceof Error) {\n    return userIdentity;\n  }\n  return getUserIdentityVersion(userIdentity);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials.ts",["1367","1368","1369","1370","1371","1372","1373"],"import {\n  CA_USER_IDENTITY_TYPE,\n  CA_USER_IDENTITY_MIN_LENGTH,\n  CA_USER_PASSWORD_MIN_LENGTH,\n  CA_USER_PASSWORD_TYPE,\n  CA_USER_IDENTITY_MAX_LENGTH,\n  CA_USER_LOGIN_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { UTILS_DATA_COMPRESSION_COMPRESSION_RATIO_MAX } from 'utils/data-compression-utils/data-compression-utils.const';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCentralAuthorityUserPassword,\n  TCentralAuthorityUserLogin,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_USER_IDENTITY_VERSIONS_LIST } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { dataValidatorUtilSafeLogin } from 'utils/data-validators-utils/data-validators-utils';\n\nexport const validateUserIdentityType = (v: any): boolean =>\n  typeof v === CA_USER_IDENTITY_TYPE;\n\nexport const validateUserIdentityVersion = (\n  v: any\n): v is TUserIdentityVersion =>\n  typeof v === 'string' && CA_USER_IDENTITY_VERSIONS_LIST.includes(v);\n\nexport const validateUserIdentity = (\n  v: any,\n  isSilentMode: boolean = false\n): v is TCentralAuthorityUserIdentity => {\n  if (!validateUserIdentityType(v)) {\n    if (!isSilentMode) {\n      console.error('There is a wrong type of the user identity');\n    }\n    return false;\n  }\n  if (\n    v.length <\n    CA_USER_IDENTITY_MIN_LENGTH / UTILS_DATA_COMPRESSION_COMPRESSION_RATIO_MAX\n  ) {\n    if (!isSilentMode) {\n      console.error('There is a too small length of the user identity');\n    }\n    return false;\n  }\n  if (v.length > CA_USER_IDENTITY_MAX_LENGTH) {\n    if (!isSilentMode) {\n      console.error('There is a too big length of the user identity');\n    }\n    return false;\n  }\n  return true;\n};\n\nexport const validateUserIdentitySilent = (\n  v: any\n): v is TCentralAuthorityUserIdentity => validateUserIdentity(v, true);\n\nexport const validatePassword = (\n  v: any\n): v is TCentralAuthorityUserPassword => {\n  return (\n    typeof v === CA_USER_PASSWORD_TYPE &&\n    v.length >= CA_USER_PASSWORD_MIN_LENGTH\n  );\n};\n\nexport const validateLogin = (v: any): v is TCentralAuthorityUserLogin => {\n  return typeof v === 'string' && v.length >= CA_USER_LOGIN_MIN_LENGTH;\n};\n\nexport const validateAuthCredentials = (authCredentials: any): void | Error => {\n  if (!authCredentials) {\n    return new Error('The auth credentials is not defined');\n  }\n  if (typeof authCredentials !== 'object') {\n    return new Error('The auth credentials must be an object');\n  }\n\n  const { login, password } = authCredentials;\n\n  if (!login) {\n    return new Error('The login must be defined');\n  }\n  if (!password) {\n    return new Error('The password must be defined');\n  }\n  if (!validatePassword(password)) {\n    return new Error('The password has an incorrect format');\n  }\n  if (!validateLogin(login)) {\n    return new Error('The login has an incorrect format');\n  }\n  if (!dataValidatorUtilSafeLogin(login)) {\n    return new Error('The login is not safe');\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys-schemas.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys.ts",["1374","1375","1376","1377"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { caValidatorsCryptoKeysExportedObjectValidationSchema } from './central-authority-validators-crypto-keys-schemas';\nimport {\n  CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME,\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { validateUserIdentity } from '../central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  TCentralAuthorityUserCryptoCredentialsExported,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  checkIsCryptoKeyPairs,\n  checkIsCryptoKeyPairsExportedAsString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const caValidateCryptoKeyPairExportedObject = (value: any): boolean =>\n  validateBySchema(caValidatorsCryptoKeysExportedObjectValidationSchema, value);\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the raw format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentials = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentials => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairs(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * validate is a given value has\n * a valid crypto key pair and\n * the user identity\n * in the exported format\n * @param {any} cryptoCredentials\n */\nexport const checkIsValidCryptoCredentialsExportedFormat = (\n  cryptoCredentials: any\n): cryptoCredentials is TCentralAuthorityUserCryptoCredentialsExported => {\n  if (!cryptoCredentials || typeof cryptoCredentials !== 'object') {\n    return false;\n  }\n\n  const {\n    [CA_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeys,\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n  } = cryptoCredentials;\n\n  if (!cryptoKeys) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a crypto keys was not found'\n    );\n    return false;\n  }\n  if (!userIdentity) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case a user identity value was not found'\n    );\n    return false;\n  }\n  if (!validateUserIdentity(userIdentity)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the user identity value have a wrong type'\n    );\n    return false;\n  }\n  if (!checkIsCryptoKeyPairsExportedAsString(cryptoKeys)) {\n    console.error(\n      'There is a wrong format of the crypto credentials value, case the crypto keys exported as a string value have a wrong type'\n    );\n    return false;\n  }\n  return true;\n};\n\nexport const checkIsValidExportedCryptoCredentialsToString = (\n  cryptoCredentialsExportedAsString: any\n): boolean => {\n  return (\n    typeof cryptoCredentialsExportedAsString === 'string' &&\n    cryptoCredentialsExportedAsString.length >\n      CA_CREDENTIALS_KEY_CRYPTO_CREDENTIALS_EXPORTED_AS_STRING_MIN_LENGTH\n  );\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user.ts",["1378"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { CA_VALIDATORS_USER_PROFILE_SCHEME } from './central-authority-validators-user.schemes';\n\nexport const validateUserProfileData = (\n  profileData: any\n): profileData is ICentralAuthorityUserProfile => {\n  return validateBySchema(CA_VALIDATORS_USER_PROFILE_SCHEME, profileData);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.ts",["1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392"],"import {\n  ISafeStorageOptions,\n  TSafeStorageStoredDataType,\n  TSafeStorageStoredDataTypeKeyValue,\n  TSafeStorageStoredDataTypeAppendLog,\n  TSafeStorageDataTypesAvail,\n  TSafeStorageKeyType,\n  TSafeStorageDataType,\n  TSafeStorageStorageAppendLogDataType,\n} from './safe-storage-class.types';\nimport { DEFAULT_INTERVAL_MS } from 'classes/basic-classes/queue-manager-class-base/queue-manager-class-base.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n  SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX,\n  ESAFE_STORAGE_STORAGE_TYPE,\n  SAFE_STORAGE_MAX_ITEMS_APPEND_LOG,\n  SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE,\n  SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE,\n  SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX,\n  SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE,\n  SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS,\n} from './safe-storage-class.const';\nimport {\n  getStatusClass,\n  STATUS_EVENT,\n} from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SafeStorage<\n  TYPE extends ESAFE_STORAGE_STORAGE_TYPE\n> extends getStatusClass<typeof ESAFE_STORAGE_PROVIDER_STATUS>({\n  errorStatus: ESAFE_STORAGE_PROVIDER_STATUS.ERROR,\n  instanceName: 'SecretStorage',\n}) {\n  static storagesNames: string[] = []; // exists storages names, put it from constructor\n\n  static checkIfNameIsExists(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    return storagesNames.includes(storageName);\n  }\n\n  static addStorageName(storageName: string) {\n    const { storagesNames } = SafeStorage;\n\n    storagesNames.push(storageName);\n  }\n\n  protected storageName: string = '';\n\n  protected storageNameAppendLog: string = '';\n\n  protected options?: ISafeStorageOptions;\n\n  protected dumpIntervalMs?: number;\n\n  protected dumpIntervalRunning?: NodeJS.Timeout | number;\n\n  protected secretStorageConnection?: InstanceType<typeof SecretStorage>;\n\n  protected tableData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * this is data which will be merged with the data from storage\n   * and then will be write to the storage\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendData: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  /**\n   *\n   * here a data will be placed if any dumping of appendData is in progress,\n   * on a dumping will be ended up, data\n   * from this property will be merged with the appendData property\n   * @protected\n   * @type {TSafeStorageStoredDataType<\n   *     ESAFE_STORAGE_STORAGE_TYPE\n   *   >}\n   * @memberof SafeStorage\n   */\n  protected appendDataTemp: TSafeStorageStoredDataType<\n    ESAFE_STORAGE_STORAGE_TYPE\n  > = [] as TSafeStorageStoredDataType<ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG>;\n\n  protected storageType?: ESAFE_STORAGE_STORAGE_TYPE;\n\n  constructor(options: ISafeStorageOptions) {\n    super();\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      throw setOptionsResult;\n    }\n    this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.NEW);\n    if (options.storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.appendData = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendDataTemp = [] as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.appendData = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendDataTemp = {} as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  get secretStorageOptions() {\n    const { options } = this;\n    const { storageDumpProvider } = options as ISafeStorageOptions;\n\n    return {\n      storageProviderName:\n        storageDumpProvider || SAFE_STORAGE_DUMP_PROVIDER_DEFAULT,\n    };\n  }\n\n  get isStorageBusy(): boolean {\n    const { status } = this;\n\n    return status === ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE;\n  }\n\n  /**\n   * connect to the secret storage\n   * and preload a data dumped\n   * from it\n   * @returns {boolean | Error} - true on success, false if connecting is\n   * already in progress, Error if an error has occurred\n   */\n  async connect(): Promise<boolean | Error> {\n    const { status, options } = this;\n\n    if (status !== ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE) {\n      const { credentials } = options as ISafeStorageOptions;\n      const connectionToTheSecretStorage = this.createSecretStorageInstance();\n\n      if (connectionToTheSecretStorage instanceof Error) {\n        return connectionToTheSecretStorage;\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTING_TO_STORAGE);\n\n      const connectionToSecretStorageResult = await connectionToTheSecretStorage.authorize(\n        credentials\n      );\n\n      if (connectionToSecretStorageResult instanceof Error) {\n        return this.setErrorStatus(connectionToSecretStorageResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.CONNECTED_TO_STORAGE);\n\n      const preloadDataResult = await this.reloadOverallTableData();\n\n      if (preloadDataResult instanceof Error) {\n        return preloadDataResult;\n      }\n\n      const startIntervalResult = this.startInterval();\n\n      if (startIntervalResult instanceof Error) {\n        return this.setErrorStatus(startIntervalResult);\n      }\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.READY);\n      return true;\n    }\n    return false;\n  }\n\n  checkOptionsAreValid(options: ISafeStorageOptions): Error | true {\n    const { name, credentials } = options;\n    const { checkIfNameIsExists } = SafeStorage;\n\n    if (\n      typeof credentials !== 'object' ||\n      !credentials ||\n      !credentials.password\n    ) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    if (checkIfNameIsExists(name)) {\n      return this.setErrorStatus(\n        'SafeStorage: a storage with the name is already exists'\n      );\n    }\n    return true;\n  }\n\n  setOptions(options: ISafeStorageOptions): Error | true {\n    const { name, dumpIntervalMs, storageType } = options;\n    const checkOptionsResult = this.checkOptionsAreValid(options);\n    const { addStorageName } = SafeStorage;\n    const dumpInterval =\n      typeof dumpIntervalMs === 'number' ? dumpIntervalMs : DEFAULT_INTERVAL_MS;\n    const storageTypeResolved =\n      storageType &&\n      Object.values(ESAFE_STORAGE_STORAGE_TYPE).includes(storageType)\n        ? storageType\n        : ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (checkOptionsResult instanceof Error) {\n      return checkOptionsResult;\n    }\n    addStorageName(name);\n    this.options = {\n      ...options,\n      dumpIntervalMs: dumpInterval,\n      storageType: storageTypeResolved,\n    };\n    this.storageType = storageTypeResolved;\n\n    const storageName = `${SAFE_STORAGE_STORAGE_NAME_COMMON_PREFIX}${name}`;\n\n    this.storageName = storageName;\n    this.storageNameAppendLog = `${storageName}${SAFE_STORAGE_STORAGE_APPEND_LOG_COMMON_POSTFIX}`;\n    this.dumpIntervalMs = dumpInterval;\n    return true;\n  }\n\n  /**\n   * load all the data from the secret storage\n   * and put all the data to the memory table\n   */\n  async reloadOverallTableData(): Promise<boolean | Error> {\n    // load data from the storage\n    // and it's append log\n    const tableData = await this.loadOverallTable();\n\n    if (tableData instanceof Error) {\n      return this.setErrorStatus(tableData);\n    }\n    // set all data to the memory table\n    this.setTableData(tableData);\n    return true;\n  }\n\n  /**\n   * disconnect from the secret storage\n   * and dump the data before it\n   */\n  async disconnect(): Promise<Error | true> {\n    const { dumpIntervalRunning } = this;\n\n    if (typeof dumpIntervalRunning === 'number') {\n      clearInterval(dumpIntervalRunning);\n    }\n\n    // dump the data before disconnection\n    const resultDumping = await this.dumpData();\n\n    if (resultDumping === true) {\n      this.setStatus(ESAFE_STORAGE_PROVIDER_STATUS.DISCONNECTED);\n      return true;\n    }\n    return this.setErrorStatus(\n      \"Can't dump the table's data before disconnected\"\n    );\n  }\n\n  /**\n   * @returns {boolean} - returns true if the storage is freed\n   * false - on timeout\n   */\n  waitingStorageFreed(): Promise<boolean | undefined> | true {\n    if (!this.isStorageBusy) {\n      return true;\n    }\n\n    return new Promise((res) => {\n      const timeout = setTimeout(\n        res,\n        SAFE_STORAGE_DEFAULT_STORAGE_BUSY_TIMEOUT_MS\n      );\n      const { statusEmitter } = this;\n\n      statusEmitter.once(STATUS_EVENT, () => {\n        if (!this.isStorageBusy) {\n          clearTimeout(timeout);\n          res(true);\n        }\n      });\n    });\n  }\n\n  castDataToAppendLogType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeAppendLog | Error {\n    if (data == null) {\n      return [] as TSafeStorageStoredDataTypeAppendLog;\n    }\n    if (data instanceof Array) {\n      return data as TSafeStorageStoredDataTypeAppendLog;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for the append log storage`\n    );\n  }\n\n  castDataToKeyValueType(\n    data?: null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataTypeKeyValue | Error {\n    if (data == null) {\n      return {} as TSafeStorageStoredDataTypeKeyValue;\n    }\n    if (!(data instanceof Array) && typeof data === 'object') {\n      return data as TSafeStorageStoredDataTypeKeyValue;\n    }\n    return new Error(\n      `There is a wrong data type ${typeof data} for a key value storage`\n    );\n  }\n\n  /**\n   * check if the data given\n   * is conformed to the\n   * storage type and\n   * return an Error if it's\n   * not conformed or data in\n   * storage type\n   * @param data\n   */\n  castDataToStorageType(\n    data?: Error | null | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error {\n    if (data instanceof Error) {\n      return data;\n    }\n\n    const { storageType } = this;\n\n    switch (storageType) {\n      case ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG:\n        return this.castDataToAppendLogType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n      default:\n        return this.castDataToKeyValueType(data) as TSafeStorageStoredDataType<\n          TYPE\n        >;\n    }\n  }\n\n  /**\n   * parse a data stringified\n   * before save it to the storage\n   * and read from the secret storage\n   * as a string.\n   * @param {string | Error | undefined} data\n   */\n  parseDataFromStorage<D>(\n    data: string | undefined | Error\n  ): Error | D | undefined {\n    if (data instanceof Error) {\n      return this.setErrorStatus(data);\n    }\n    if (data == null) {\n      return undefined;\n    }\n    try {\n      return JSON.parse(data) as D | undefined;\n    } catch (err) {\n      return err as Error;\n    }\n  }\n\n  /**\n   * merge the data and cast it to the\n   * storage type\n   * returns the merged data\n   * casted to the storage type\n   * @memberof SafeStorage\n   * @param { object | array } result\n   * @param { string | object | array }\n   * @returns { object | array | Error }\n   */\n  mergeData = (\n    result: TSafeStorageStoredDataType<TYPE> | Error,\n    dataToAppend: string | TSafeStorageStoredDataType<TYPE>\n  ): TSafeStorageStoredDataType<TYPE> | Error => {\n    const { storageType } = this;\n    const isAppendLogStorage =\n      storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG;\n\n    if (result instanceof Error) {\n      return result;\n    }\n\n    const dataObj =\n      typeof dataToAppend === 'string'\n        ? this.parseDataFromStorage(dataToAppend)\n        : dataToAppend;\n    const dataCastedToStorageType = this.castDataToStorageType(\n      dataObj as Error | TSafeStorageStoredDataType<TYPE>\n    );\n    if (dataCastedToStorageType instanceof Error) {\n      return this.setErrorStatus(dataCastedToStorageType);\n    }\n    return (isAppendLogStorage\n      ? [\n          ...(result as TSafeStorageStoredDataTypeAppendLog),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeAppendLog),\n        ]\n      : {\n          ...(result as TSafeStorageStoredDataTypeKeyValue),\n          ...(dataCastedToStorageType as TSafeStorageStoredDataTypeKeyValue),\n        }) as TSafeStorageStoredDataType<TYPE>;\n  };\n\n  /**\n   * load a data from the key\n   * named as storage name param\n   * of the secret storage connected\n   * to and return this data\n   * @param {string} storageName\n   */\n  async loadDataFromTable<D>(\n    storageName: string\n  ): Promise<D | undefined | Error> {\n    const { secretStorageConnection } = this;\n\n    if (await this.waitingStorageFreed()) {\n      const setPreviousStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n      const data = await (secretStorageConnection as SecretStorage).get(\n        storageName\n      );\n\n      setPreviousStatus();\n\n      const parsedDate = this.parseDataFromStorage(data);\n\n      if (parsedDate instanceof Error) {\n        return this.setErrorStatus(parsedDate);\n      }\n      return parsedDate as D | undefined;\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * load data from append log key\n   * of the secret storage connected to\n   */\n  loadDataFromStorageAppendLog(): Promise<\n    TSafeStorageStorageAppendLogDataType | undefined | Error\n  > {\n    const { storageNameAppendLog } = this;\n\n    return this.loadDataFromTable<TSafeStorageStorageAppendLogDataType>(\n      storageNameAppendLog\n    );\n  }\n\n  /**\n   * load data from the append log key\n   * of the secret storage connected to\n   * parse it as an array of data append\n   * and return in a type of the storage:\n   * 1) array for an APPEND LOG type storage\n   * 2) object for an KEY VALUE type storage\n   */\n  async loadAndParseDataFromAppendLogStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const tableAppendlogsArray = await this.loadDataFromStorageAppendLog();\n    if (tableAppendlogsArray instanceof Error) {\n      return tableAppendlogsArray;\n    }\n    if (tableAppendlogsArray == null) {\n      return undefined;\n    }\n    if (tableAppendlogsArray instanceof Array) {\n      return tableAppendlogsArray\n        .map((str) => (typeof str === 'string' ? decodeURIComponent(str) : str))\n        .reduce(\n          this.mergeData,\n          this.castDataToStorageType(undefined) as TSafeStorageStoredDataType<\n            TYPE\n          >\n        );\n    }\n  }\n\n  loadDataFromMainStorage(): Promise<\n    TSafeStorageStoredDataType<TYPE> | undefined | Error\n  > {\n    const { storageName } = this;\n\n    return this.loadDataFromTable<TSafeStorageStoredDataType<TYPE>>(\n      storageName\n    );\n  }\n\n  /**\n   * loads a data from the main storage\n   * and the append log\n   * and merge it\n   */\n  async loadOverallData(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    const storageMainTableData = this.castDataToStorageType(\n      await this.loadDataFromMainStorage()\n    );\n    if (storageMainTableData instanceof Error) {\n      return this.setErrorStatus(storageMainTableData);\n    }\n\n    const storageDataFromAppendLogTable = this.castDataToStorageType(\n      await this.loadAndParseDataFromAppendLogStorage()\n    );\n    if (storageDataFromAppendLogTable instanceof Error) {\n      return this.setErrorStatus(storageDataFromAppendLogTable);\n    }\n    return this.mergeData(storageMainTableData, storageDataFromAppendLogTable);\n  }\n\n  /**\n   * save a data to the secret storage\n   * to the key with name\n   * storageName\n   * @param {string} storageName\n   * @param {string | null | undefined} dataStringified\n   */\n  async saveDataToStorage(\n    storageName: string,\n    dataStringified?: string | null\n  ): Promise<boolean | Error> {\n    const { secretStorageConnection, status } = this;\n\n    if (dataStringified !== null && typeof dataStringified !== 'string') {\n      const err = new Error(\n        `The table overall data must be null or string, but ${typeof dataStringified} was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    let attempt = 0;\n\n    if (await this.waitingStorageFreed()) {\n      const setPrevStatus = this.setStatus(\n        ESAFE_STORAGE_PROVIDER_STATUS.WORKING_WITH_STORAGE\n      );\n\n      while ((attempt += 1) < SAFE_STORAGE_ATTEMPTS_TO_SAVE_DATA_TO_STORAGE) {\n        if (\n          !(\n            (secretStorageConnection as InstanceType<typeof SecretStorage>).set(\n              storageName,\n              dataStringified || ''\n            ) instanceof Error\n          )\n        ) {\n          setPrevStatus();\n          return true;\n        }\n      }\n      setPrevStatus();\n      return new Error(`Can't save the data to the storage ${storageName}`);\n    }\n    return new Error(`The storage is too busy`);\n  }\n\n  /**\n   * stringify data for the\n   * storage\n   * @param dataAppendLog\n   * @returns {Error | string | false} - sating -stringified data, falser - no data, Error - an error has occurred\n   */\n  async stringifyDataForStorage(\n    dataAppendLog: TSafeStorageDataType[] | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<string | null | Error> {\n    if (this.checkIfEmptyData(dataAppendLog)) {\n      return null;\n    }\n\n    try {\n      return JSON.stringify(dataAppendLog);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  async writeOverallDataToMainTable(\n    data?:\n      | string\n      | null\n      | TSafeStorageDataType[]\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<boolean | Error> {\n    const { storageName } = this;\n    let dataStringified;\n    if (data && typeof data === 'object') {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an object data can be write to the main table key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageName, dataStringified);\n  }\n\n  /**\n   * write the data to the secret storage's\n   * key used as append log data for the\n   * main storage key\n   * @param [string[]] [undefined] data\n   */\n  async writeDataToStorageAppengLog(\n    data?: string | null | TSafeStorageStorageAppendLogDataType\n  ): Promise<Error | boolean> {\n    const { storageNameAppendLog } = this;\n    let dataStringified;\n    if (data && data instanceof Array) {\n      dataStringified = await this.stringifyDataForStorage(data);\n    } else if (data && typeof data === 'string') {\n      dataStringified = data;\n    } else if (data) {\n      return new Error(\n        'Only an array data can be write to the append log key of the secret storage'\n      );\n    }\n    if (dataStringified instanceof Error) {\n      return dataStringified;\n    }\n    return this.saveDataToStorage(storageNameAppendLog, dataStringified);\n  }\n\n  async clearAppendLogData(): Promise<boolean | Error> {\n    const { storageNameAppendLog } = this;\n\n    return this.saveDataToStorage(storageNameAppendLog, null);\n  }\n\n  async loadOverallTable(): Promise<TSafeStorageStoredDataType<TYPE> | Error> {\n    /**\n     * read data from the main storage table\n     * and storage append log table\n     * merge it\n     */\n    const overallData = await this.loadOverallData();\n    if (overallData instanceof Error) {\n      return this.setErrorStatus(overallData);\n    }\n\n    /*\n      save data from the main storage and \n      append log storage to the main storage\n      table\n    */\n    const resultSaveDataToMainStorage = await this.writeOverallDataToMainTable(\n      overallData\n    );\n    if (resultSaveDataToMainStorage instanceof Error) {\n      this.setErrorStatus(resultSaveDataToMainStorage);\n      // if an error is occurred while writing\n      // an overall data on the main storage\n      // set an error and return overall data\n      // without clearing the storage append\n      // log table\n      return overallData;\n    }\n\n    const resultClearStorageAppendLogData = await this.clearAppendLogData();\n    if (resultClearStorageAppendLogData instanceof Error) {\n      // if an error occurred while clearing the\n      // storage append log table\n      // return an error occurred as the\n      // result\n      return this.setErrorStatus(resultClearStorageAppendLogData);\n    }\n    return overallData;\n  }\n\n  setTableData(tableData?: TSafeStorageStoredDataType<TYPE>) {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_APPEND_LOG_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n      this.appendData = SAFE_STORAGE_APPEND_LOG_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      >;\n    } else {\n      this.tableData = (tableData ||\n        SAFE_STORAGE_KEY_VALUE_INITIAL_VALUE) as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n      this.appendData = SAFE_STORAGE_KEY_VALUE_APPEND_DATA_INITIAL_VALUE as TSafeStorageStoredDataType<\n        ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n      >;\n    }\n  }\n\n  createSecretStorageInstance(): Error | SecretStorage {\n    const { secretStorageOptions } = this;\n    try {\n      const connectionToTheSecretStorage = new SecretStorage(\n        secretStorageOptions\n      );\n\n      this.secretStorageConnection = connectionToTheSecretStorage;\n      return connectionToTheSecretStorage;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  startInterval(): boolean | Error {\n    const { dumpIntervalMs } = this;\n\n    try {\n      this.dumpIntervalRunning = setInterval(this.dumpData, dumpIntervalMs);\n      return true;\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n  }\n\n  checkIfEmptyData(\n    data: TSafeStorageStoredDataType<\n      | ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n      | ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n    >\n  ): boolean {\n    if (data instanceof Array && !data.length) {\n      return true;\n    }\n    if (typeof data === 'object' && !Object.keys(data).length) {\n      return true;\n    }\n    return false;\n  }\n\n  async writeDump(\n    data:\n      | TSafeStorageStoredDataTypeAppendLog\n      | TSafeStorageStoredDataTypeKeyValue\n  ): Promise<Error | boolean> {\n    if (this.checkIfEmptyData(data)) {\n      return true;\n    }\n    let dataStringified: string;\n\n    try {\n      dataStringified = JSON.stringify(data);\n    } catch (err) {\n      return this.setErrorStatus(err);\n    }\n    return this.writeDataToStorageAppengLog(dataStringified);\n  }\n\n  async dumpAllStorageTypes(): Promise<Error | boolean> {\n    const tableOverallDataDump = await this.loadDataFromStorageAppendLog();\n    if (tableOverallDataDump instanceof Error) {\n      return this.setErrorStatus(tableOverallDataDump);\n    }\n\n    const { appendData } = this;\n    const appendDataString = await this.stringifyDataForStorage(appendData);\n    if (appendDataString instanceof Error) {\n      return this.setErrorStatus(appendDataString);\n    }\n    if (\n      tableOverallDataDump != null &&\n      !(tableOverallDataDump instanceof Array)\n    ) {\n      return this.setErrorStatus('A wrong data type was read from storage');\n    }\n\n    const tableOverallData = [\n      ...(tableOverallDataDump || []),\n      appendDataString,\n    ] as TSafeStorageStoredDataTypeAppendLog;\n    return this.writeDump(tableOverallData);\n  }\n\n  async dumpDataAppendLog(): Promise<Error | true> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = [\n        ...(appendData as TSafeStorageStoredDataTypeAppendLog),\n        ...(this.appendDataTemp as TSafeStorageStoredDataTypeAppendLog),\n      ];\n      this.appendDataTemp = [];\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = [];\n    return true;\n  }\n\n  async dumpDataKeyValueStorage(): Promise<Error | boolean> {\n    const writeDumpResult = await this.dumpAllStorageTypes();\n\n    if (writeDumpResult instanceof Error) {\n      const { appendData } = this;\n\n      this.appendData = {\n        ...(appendData as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n        ...(this.appendDataTemp as TSafeStorageStoredDataType<\n          ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE\n        >),\n      };\n      this.appendDataTemp = {};\n      return writeDumpResult;\n    }\n    this.appendData = this.appendDataTemp;\n    this.appendDataTemp = {};\n    return true;\n  }\n\n  /**\n   * write the data from the append log\n   * in-memory table to the secret storage\n   * append log table. On error merge data\n   * from in-memory append log and\n   * in-memory temporary append log data,\n   * then clear the in-memory append log data.\n   * On success clear the in-memory\n   * append log data table and copy data\n   * from the temporary append log\n   * to the in-memory append log. And\n   * clear in-memory temporary append log\n   */\n  dumpData = async (): Promise<Error | boolean> => {\n    const { storageType, appendData, status } = this;\n\n    if (this.isStorageBusy) {\n      // if already writing a dump\n      return true;\n    }\n    if (this.checkIfEmptyData(appendData)) {\n      return true;\n    }\n\n    let resultWritingDump;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      resultWritingDump = await this.dumpDataKeyValueStorage();\n    } else {\n      resultWritingDump = await this.dumpDataAppendLog();\n    }\n    if (resultWritingDump === true) {\n      // TODO - ??reload all the data from storage\n      // to guarantee the data persistance\n      return true;\n    }\n    return this.setErrorStatus(\n      'An unknown error has occurred while writing the dump of the data to the SecretStorage'\n    );\n  };\n\n  /**\n   * check if too much data in the in-memory\n   * append log storage\n   * If it is, write a data from it\n   * to the secret storage\n   */\n  checkIfMemoryAppendLogOverflow() {\n    const { appendData } = this;\n\n    if (\n      appendData instanceof Array &&\n      appendData.length > SAFE_STORAGE_MAX_ITEMS_APPEND_LOG\n    ) {\n      this.dumpData();\n    }\n  }\n\n  getDataFromAppendLogStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  getDataFromKeyValueStorage<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | null | undefined | D {\n    const { tableData } = this;\n    const keyType = typeof key;\n\n    if (keyType !== 'string') {\n      const err = new Error(\n        `For append log storage only a string keys are available but ${keyType} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n    return (tableData as TSafeStorageStoredDataTypeKeyValue)[key as string] as\n      | Error\n      | null\n      | undefined\n      | D;\n  }\n\n  /**\n   * get data for the key specified\n   * from the in-memory table\n   * @param key\n   */\n  get<D extends TSafeStorageDataTypesAvail>(\n    key: TSafeStorageKeyType\n  ): Error | undefined | null | D {\n    const { storageType } = this;\n\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.getDataFromAppendLogStorage<D>(key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.getDataFromKeyValueStorage<D>(key);\n    }\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * try to stringify the data\n   * and return true if all is\n   * ok or an Error otherwise\n   * @param data\n   */\n  checkDataIsSafetyForSave(data: any): boolean | Error {\n    try {\n      JSON.stringify(data);\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * encode the data to the JSON\n   * format, e.g. Date type\n   * will be normalized to\n   * a stringified date in ISO\n   * @param data\n   */\n  normilizeData(\n    data: TSafeStorageDataTypesAvail | undefined | null\n  ): string | null | undefined {\n    return data != null ? JSON.parse(JSON.stringify(data)) : undefined;\n  }\n\n  async setDataInAppendLogStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (key && typeof key !== 'number') {\n      const err = new Error(\n        `For append log storage only a numeric keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    if (!key) {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n      (tableData as TSafeStorageStoredDataTypeAppendLog).push(\n        stringifiedData || null\n      );\n    } else {\n      (tempStorage as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n      (tableData as TSafeStorageStoredDataTypeAppendLog)[key as number] =\n        stringifiedData || null;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param data\n   * @param [numbder] key [undefined] - index where\n   * put the data given.\n   * If it's not specified\n   * then set the data given\n   * by the last index\n   */\n  async setDataInKeyValueStorage(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    if (typeof key !== 'string') {\n      const err = new Error(\n        `For key value storage only a string keys are available but ${typeof key} type key was given`\n      );\n\n      console.error(err);\n      return err;\n    }\n\n    const { appendData, appendDataTemp, tableData } = this;\n    const tempStorage = this.isStorageBusy ? appendDataTemp : appendData;\n    const stringifiedData = this.normilizeData(data);\n\n    (tableData as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    (tempStorage as TSafeStorageStoredDataTypeKeyValue)[key] =\n      stringifiedData || null;\n    return true;\n  }\n\n  /**\n   * set data in the in-memory\n   * table and in-memory append log\n   * table or in-memory temporary\n   * append-log table\n   * if any operations on append log\n   * in-memory table is active.\n   * Also the data set into\n   * the in-memory overall data\n   * table for the key specified\n   * @param data\n   * @param key\n   */\n  async set(\n    data: TSafeStorageDataTypesAvail | undefined | null,\n    key?: TSafeStorageKeyType\n  ): Promise<Error | boolean> {\n    const { storageType } = this;\n\n    const dataSafeResult = this.checkDataIsSafetyForSave(data);\n    if (dataSafeResult instanceof Error) {\n      return dataSafeResult;\n    }\n    this.checkIfMemoryAppendLogOverflow();\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG) {\n      return this.setDataInAppendLogStorage(data, key);\n    }\n    if (storageType === ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE) {\n      return this.setDataInKeyValueStorage(data, key);\n    }\n\n    const err = new Error('An unknown storage type');\n\n    console.error(err);\n    return err;\n  }\n\n  /**\n   * remove a data by fot a key specified\n   */\n  async remove(key: TSafeStorageKeyType) {\n    if (!key) {\n      return new Error('A key must be specified to remove a data from it');\n    }\n    return this.set(null, key);\n  }\n\n  /**\n   * clear the data in the storage\n   */\n  async clear(): Promise<Error | boolean> {\n    this.appendData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.appendDataTemp = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    this.tableData = this.castDataToStorageType() as TSafeStorageStoredDataType<\n      TYPE\n    >;\n    return this.writeDataToStorageAppengLog(null);\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/safe-storage-class/safe-storage-class.types.ts",["1393"],"import {\n  ISecretStoreCredentials,\n  TSecretStoreConfiguration,\n  TSecretStorageProviderName,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  ESAFE_STORAGE_STORAGE_TYPE,\n  ESAFE_STORAGE_PROVIDER_STATUS,\n} from './safe-storage-class.const';\n\nexport type TSafeStorageProviderName = TSecretStorageProviderName;\n\nexport type TSafeStorageStorageAppendLogDataType = string[];\n\nexport type TSafeStorageKeyType = string | number;\n\nexport type TSafeStorageDataType = string | object | number | null;\n\nexport type TSafeStorageStoredDataTypeKeyValue = {\n  [keyName: string]: TSafeStorageDataType;\n};\n\nexport type TSafeStorageStoredDataTypeAppendLog = Array<TSafeStorageDataType>;\n\nexport type TSafeStorageStoredDataType<\n  T extends ESAFE_STORAGE_STORAGE_TYPE\n> = T extends ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG\n  ? TSafeStorageStoredDataTypeAppendLog\n  : TSafeStorageStoredDataTypeKeyValue;\n\nexport interface ISafeStorageOptions {\n  name: string; // a unique name for the storage\n  credentials: ISecretStoreCredentials; // credentials for access to the secret storage\n  dumpIntervalMs?: number; // how often a dump of a data must be saved in secret storage\n  storageDumpProvider?: TSafeStorageProviderName; // name for the provider where the dumps will be stored\n  storageType?: ESAFE_STORAGE_STORAGE_TYPE; // storage data type\n}\n\nexport type TSafeStorageDataTypesAvail = string | number | object;\n\nexport type TSafeStorageEvents = {\n  status: ESAFE_STORAGE_PROVIDER_STATUS;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-level-js-provider/secret-storage-level-js-provider.ts",["1394","1395","1396"],"import levelup, { LevelUp } from 'levelup';\nimport leveljs from 'level-js';\nimport encodingDown from 'encoding-down';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../../secret-storage-class.types';\nimport { SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME } from './secret-storage-level-js-provider.const';\n\nexport class SecretStorageProviderLevelJS implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private levelStorage?: LevelUp;\n\n  private dbName: string = SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLevelDB();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { levelStorage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (levelStorage) {\n        await levelStorage.close();\n\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.del(key);\n      } else {\n        await levelStorage.put(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      const item = await levelStorage!.get(key, { asBuffer: false });\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.get(key, { asBuffer: true });\n\n      return new Uint8Array(item);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLevelDB(): Promise<void | Error> {\n    const { dbName } = this;\n    const dbNameRes =\n      dbName || SECRET_STORAGE_LEVELJS_PROVIDER_DEFAULTS_DB_NAME;\n\n    const levelStorage = levelup(leveljs(dbNameRes));\n\n    try {\n      await levelStorage.open();\n    } catch (err) {\n      return err;\n    }\n    this.levelStorage = levelup(leveljs(dbNameRes));\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-forage-provider/secret-storage-local-forage-provider.ts",["1397","1398","1399"],"import localforage from 'localforage';\nimport {\n  StorageProvider,\n  IStorageProviderOptions,\n} from '../../secret-storage-class.types';\nimport {\n  SECRET_STORAGE_LOCAL_FORAGE_PROVIDER_DEFAULTS_DB_NAME,\n  SECRET_STORAGE_LOCAL_FORAGE_PROVIDER_DRIVER,\n} from './secret-storage-local-forage-provider.const';\n\n/**\n * The main advantage of using the LocalForage provider because\n * it can store a large binary data(such as UInt8Array) as is\n * without an issues caused unsupported encoding\n *\n * @export\n * @class SecretStorageProviderLocalForage\n * @implements {StorageProvider}\n */\nexport class SecretStorageProviderLocalForage implements StorageProvider {\n  public static isBufferSupported = true;\n\n  private localForage?: LocalForage;\n\n  private dbName: string = SECRET_STORAGE_LOCAL_FORAGE_PROVIDER_DEFAULTS_DB_NAME;\n\n  private options?: IStorageProviderOptions;\n\n  private isDisconnected: boolean = false;\n\n  public async connect(\n    options?: IStorageProviderOptions\n  ): Promise<true | Error> {\n    try {\n      const { isDisconnected } = this;\n\n      if (isDisconnected) {\n        return new Error(\n          'The instance of the SecretStorageProvider was closed before'\n        );\n      }\n\n      this.setOptions(options);\n\n      const res = await this.createInstanceOfLocalforage();\n\n      if (res instanceof Error) {\n        console.error('SecretStorageProviderLevelJS', res);\n        return res;\n      }\n      return true;\n    } catch (err) {\n      console.error('SecretStorageProviderLevelJS', err);\n      return err;\n    }\n  }\n\n  public async disconnect(): Promise<true | Error> {\n    try {\n      const { localForage, isDisconnected } = this;\n\n      if (isDisconnected) {\n        return true;\n      }\n      this.setIsDisconnected();\n      if (localForage) {\n        await localForage.ready();\n\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return true;\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async set(key: string, value?: string): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { localForage: levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.removeItem(key);\n      } else {\n        await levelStorage.setItem(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * WARNING! If the value is empty\n   * it will be removed with the leveljs.del\n   *\n   * @param {string} key\n   * @param {string} [value]\n   * @returns {(Promise<Error | true>)}\n   * @memberof SecretStorageProviderLevelJS\n   */\n  public async setUInt8Array(\n    key: string,\n    value?: Uint8Array\n  ): Promise<Error | true> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { localForage: levelStorage } = this;\n\n      if (!levelStorage) {\n        return new Error('There is no storage connected');\n      }\n      if (!value) {\n        await levelStorage.removeItem(key);\n      } else {\n        await levelStorage.setItem(key, value);\n      }\n      return true;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(key: string): Promise<Error | string | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { localForage: levelStorage } = this;\n      const item = await levelStorage!.getItem(key);\n\n      if (typeof item !== 'string') {\n        return undefined;\n      }\n      return item;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async getUInt8Array(\n    key: string\n  ): Promise<Error | Uint8Array | undefined> {\n    try {\n      const isDisconnected = this.checkIsReady();\n\n      if (isDisconnected instanceof Error) {\n        return isDisconnected;\n      }\n\n      const { localForage: levelStorage } = this;\n      // TODO - the custom patch used to return\n      // Uint8Array instead of Buffer\n      const item = await levelStorage!.getItem(key);\n\n      if (!item) {\n        return undefined;\n      }\n      return new Uint8Array(item as any);\n    } catch (err) {\n      return err;\n    }\n  }\n\n  protected setOptions(options?: IStorageProviderOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  protected setIsDisconnected() {\n    this.isDisconnected = true;\n  }\n\n  protected checkIsReady(): void | Error {\n    const { isDisconnected, localForage: levelStorage } = this;\n\n    if (isDisconnected) {\n      return new Error('The StorageProvider instance is disconnected');\n    }\n    if (!levelStorage) {\n      return new Error('There is no storage connected');\n    }\n  }\n\n  protected async createInstanceOfLocalforage(): Promise<void | Error> {\n    const { dbName } = this;\n    const dbNameRes =\n      dbName || SECRET_STORAGE_LOCAL_FORAGE_PROVIDER_DEFAULTS_DB_NAME;\n\n    const localForage = localforage.createInstance({\n      name: dbNameRes,\n      storeName: dbNameRes,\n      driver: SECRET_STORAGE_LOCAL_FORAGE_PROVIDER_DRIVER,\n    });\n\n    try {\n      await localForage.ready();\n    } catch (err) {\n      return err;\n    }\n    this.localForage = localForage;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-local-storage-provider/secret-storage-local-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret_storage_providers/secret-storage-session-storage-provider/secret-storage-session-storage-provider.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.ts",["1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411"],"import {\n  TInstanceofStorageProvider,\n  TSecretStoreConfiguration,\n  IStorageProvider,\n  ISecretStoreCredentials,\n  ISecretStorage,\n  ISecretStorageOptions,\n  ISecretStoreCredentialsCryptoKey,\n} from './secret-storage-class.types';\nimport {\n  SECRET_STORAGE_PROVIDERS,\n  SECRET_STORAGE_PROVIDERS_NAME,\n  SECRET_STORAGE_PROVIDERS_NAMES,\n  SECRET_STORAGE_STATUS,\n  SECRET_STORAGE_PASSWORD_MIN_LENGTH,\n} from './secret-storage-class.const';\nimport { ownValueOf, ownKeyOf } from 'types/helper.types';\nimport {\n  importPasswordKey,\n  exportPasswordKeyAsString,\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from 'utils/password-utils/derive-key.password-utils';\nimport { TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES } from 'utils/password-utils/password-utils.types';\nimport {\n  decryptDataWithKey,\n  decryptDataWithKeyFromUint8Array,\n} from 'utils/password-utils/decrypt.password-utils';\nimport {\n  encryptDataToString,\n  encryptDataToUInt8Array,\n} from 'utils/password-utils/encrypt.password-utils';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\n\nexport class SecretStorage\n  extends getStatusClass<typeof SECRET_STORAGE_STATUS>({\n    errorStatus: SECRET_STORAGE_STATUS.ERROR,\n    instanceName: 'SecretStorage',\n  })\n  implements ISecretStorage {\n  public static validateCredentials(\n    credentials?: ISecretStoreCredentials\n  ): void | Error {\n    if (!credentials) {\n      return new Error('validateCredentials::Credentials must not be empty');\n    }\n    if (typeof credentials !== 'object') {\n      return new Error('validateCredentials::Credentials must be an object');\n    }\n\n    const { password } = credentials;\n\n    if (typeof password !== 'string') {\n      return new Error(\n        'validateCredentials::A password string must be provided to authorize'\n      );\n    }\n    if (!password) {\n      return new Error(\n        'validateCredentials::A password non-empty string must be provided to authorize'\n      );\n    }\n    if (password.length < SECRET_STORAGE_PASSWORD_MIN_LENGTH) {\n      return new Error(\n        `validateCredentials::The password string must be a ${SECRET_STORAGE_PASSWORD_MIN_LENGTH} characters ar least`\n      );\n    }\n  }\n\n  public static validateCryptoKeyCredentials(\n    credentials?: ISecretStoreCredentialsCryptoKey\n  ): void | Error {\n    if (!credentials) {\n      return new Error(\n        'validateCryptoKeyCredentials::Credentials must not be empty'\n      );\n    }\n    if (typeof credentials !== 'object') {\n      return new Error(\n        'validateCryptoKeyCredentials::Credentials must be an object'\n      );\n    }\n\n    const { key } = credentials;\n\n    if (!key) {\n      return new Error(\n        'validateCryptoKeyCredentials::A Key must be provided to authorize'\n      );\n    }\n    if (key instanceof CryptoKey) {\n      return;\n    }\n    return new Error(\n      'validateCryptoKeyCredentials::A Key must be ab instance of CryptoKey'\n    );\n  }\n\n  public static async generatePasswordKeyByPasswordString(\n    password: string\n  ): Promise<CryptoKey | Error> {\n    if (!password) {\n      return new Error();\n    }\n\n    // TODO\n    return generatePasswordKeyByPasswordString(password, '');\n  }\n\n  private static checkIsStorageProviderInstance(\n    storageProviderInstance: any\n  ): Error | boolean {\n    if (\n      !storageProviderInstance ||\n      typeof storageProviderInstance !== 'object'\n    ) {\n      return new Error('Storage provider must be an object');\n    }\n\n    const { connect, get, set, disconnect } = storageProviderInstance;\n\n    if (\n      typeof connect !== 'function' ||\n      typeof get !== 'function' ||\n      typeof set !== 'function' ||\n      typeof disconnect !== 'function'\n    ) {\n      return new Error(\n        'The instance has a wrong implemntation of a StorageProvider interface'\n      );\n    }\n    return true;\n  }\n\n  private static AuthStorageProvider: IStorageProvider =\n    SECRET_STORAGE_PROVIDERS[SECRET_STORAGE_PROVIDERS_NAME.SESSION_STORAGE];\n\n  private static KEY_IN_AUTH_STORAGE = '__SecretStorage__uk';\n\n  private k?: CryptoKey;\n\n  private storageProvider?: TInstanceofStorageProvider;\n\n  /**\n   * check whether the storage provider\n   * is support operations on\n   * UInt8Array values\n   *\n   * @private\n   * @type {boolean}\n   * @memberof SecretStorage\n   */\n  private isStorageProviderSupportUInt8Array: boolean = false;\n\n  private authStorageProvider?: TInstanceofStorageProvider;\n\n  private storageProviderName?: ownValueOf<\n    typeof SECRET_STORAGE_PROVIDERS_NAME\n  >;\n\n  /**\n   * options for the instance\n   *\n   * @private\n   * @type {ISecretStorageOptions}\n   * @memberof SecretStorage\n   */\n  private options?: ISecretStorageOptions;\n\n  /**\n   * name of the database\n   *\n   * @private\n   * @type {string}\n   * @memberof SecretStorage\n   */\n  private dbName?: string;\n\n  /**\n   * returns true if connected succesfully to\n   * a storage and have a vaild crypto key\n   */\n  protected isRunning() {\n    const { status } = this;\n\n    return status === SECRET_STORAGE_STATUS.RUNNING;\n  }\n\n  public get isActive() {\n    return !!this.isRunning();\n  }\n\n  /**\n   * @param {object} configuration\n   * @param {strig} [SECRET_STORAGE_PROVIDERS_NAME.LOCAL_STORAGE] configuration.storageProviderName\n   * - provider name use to store a secret data\n   */\n  constructor(\n    protected configuration: Partial<TSecretStoreConfiguration> = {}\n  ) {\n    super();\n  }\n\n  private setStorageProviderName(\n    storageProviderName: string = SECRET_STORAGE_PROVIDERS_NAME.LOCAL_STORAGE\n  ): boolean {\n    if (SECRET_STORAGE_PROVIDERS_NAMES.includes(storageProviderName)) {\n      this.storageProviderName = storageProviderName;\n      return true;\n    }\n    return false;\n  }\n\n  private createInstanceOfStorageProvider(\n    StorageProviderConstructor: IStorageProvider\n  ): TInstanceofStorageProvider | Error {\n    try {\n      const storageProvider = new StorageProviderConstructor();\n      const checkResult = SecretStorage.checkIsStorageProviderInstance(\n        storageProvider\n      );\n\n      if (checkResult instanceof Error) {\n        return checkResult;\n      }\n      return storageProvider;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  private setSupportForUInt8Array(\n    StorageProviderConstructor: IStorageProvider\n  ): void {\n    this.isStorageProviderSupportUInt8Array = !!StorageProviderConstructor.isBufferSupported;\n  }\n\n  private async runAuthStorageProvider(): Promise<boolean | Error> {\n    const { authStorageProvider: runningAuthStorageProvider } = this;\n    const checkIsRunning = SecretStorage.checkIsStorageProviderInstance(\n      runningAuthStorageProvider\n    );\n\n    /**\n     * if running already\n     */\n    if (checkIsRunning === true) {\n      return true;\n    }\n\n    const { AuthStorageProvider } = SecretStorage;\n\n    if (!AuthStorageProvider) {\n      return new Error('There is no provider for the auth storage is defined');\n    }\n\n    const authStorageProvider = this.createInstanceOfStorageProvider(\n      AuthStorageProvider\n    );\n\n    if (authStorageProvider instanceof Error) {\n      return authStorageProvider;\n    }\n\n    const { dbName } = this;\n    const connectResult = await authStorageProvider.connect({\n      dbName,\n    });\n\n    if (connectResult instanceof Error) {\n      return connectResult;\n    }\n    if (connectResult !== true) {\n      return new Error(\n        'There is a wrong result was returned by auth storage provider'\n      );\n    }\n    this.authStorageProvider = authStorageProvider;\n    return true;\n  }\n\n  protected async runStorageProvider(): Promise<Error | boolean> {\n    const { configuration } = this;\n\n    if (configuration) {\n      const { storageProviderName } = configuration;\n\n      if (this.setStorageProviderName(storageProviderName)) {\n        const { storageProviderName: storageProviderChosenName } = this;\n\n        if (!storageProviderChosenName) {\n          return new Error('There is no storage provider was choosed');\n        }\n\n        const storageProviderConstructor =\n          SECRET_STORAGE_PROVIDERS[storageProviderChosenName];\n\n        this.setSupportForUInt8Array(storageProviderConstructor);\n        if (storageProviderConstructor) {\n          const storageProvider = this.createInstanceOfStorageProvider(\n            storageProviderConstructor\n          );\n\n          if (storageProvider instanceof Error) {\n            return storageProvider;\n          }\n\n          const { dbName } = this;\n          const storageProviderIsRunning = await storageProvider.connect({\n            dbName,\n          });\n\n          if (storageProviderIsRunning instanceof Error) {\n            return storageProviderIsRunning;\n          }\n          this.storageProvider = storageProvider;\n          return true;\n        }\n      }\n      throw new Error('Failed to set the name of the storage provider');\n    }\n    throw new Error('There is no storage provider configuration was defined');\n  }\n\n  protected async setEncryptonKeyAuthInStorage(\n    key: string\n  ): Promise<boolean | Error> {\n    try {\n      const { KEY_IN_AUTH_STORAGE: KEY_IN_SESSION_STORAGE } = SecretStorage;\n      const { authStorageProvider } = this;\n\n      if (!authStorageProvider) {\n        return new Error('There is no an auth storage running');\n      }\n      return authStorageProvider.set(KEY_IN_SESSION_STORAGE, key);\n    } catch (err) {\n      this.setErrorStatus(err);\n      return err;\n    }\n  }\n\n  protected async readEncryptionKeyFomAuthStorage(): Promise<\n    CryptoKey | Error\n  > {\n    try {\n      const { KEY_IN_AUTH_STORAGE: KEY_IN_SESSION_STORAGE } = SecretStorage;\n      const { authStorageProvider } = this;\n\n      if (!authStorageProvider) {\n        return new Error('There is no an auth storage running');\n      }\n\n      const kFromStorage = await authStorageProvider.get(\n        KEY_IN_SESSION_STORAGE\n      );\n\n      if (typeof kFromStorage !== 'string') {\n        return new Error('There is no a valid user secret key was stored');\n      }\n\n      const cryptoKeyImported = await importPasswordKeyFromString(kFromStorage);\n\n      if (!(cryptoKeyImported instanceof CryptoKey)) {\n        return new Error(\"Can't import the key from the storage format\");\n      }\n      return cryptoKeyImported;\n    } catch (err) {\n      this.setErrorStatus(err);\n      return err;\n    }\n  }\n\n  protected async setEncryptionKey(\n    key: TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES | CryptoKey\n  ): Promise<boolean | Error> {\n    let k;\n\n    if (key instanceof CryptoKey) {\n      k = key;\n    } else {\n      const importedKey = await importPasswordKey(key);\n\n      if (importedKey instanceof Error) {\n        return importedKey;\n      }\n    }\n    if (!(k instanceof CryptoKey)) {\n      return new Error('Unknown type of the key');\n    }\n\n    const keyString = await exportPasswordKeyAsString(k);\n\n    if (keyString instanceof Error) {\n      return new Error(\"Can't convert the key to exported format\");\n    }\n\n    const result = await this.setEncryptonKeyAuthInStorage(keyString);\n\n    if (result instanceof Error) {\n      return new Error(\"Can't save the key in storage\");\n    }\n    this.k = k;\n    return true;\n  }\n\n  protected async importCryptoKey(): Promise<boolean | Error> {\n    const { k: cryptoKey } = this;\n\n    // check if already imported\n    if (cryptoKey instanceof CryptoKey) {\n      return true;\n    }\n\n    const importedCryptoKey = await this.readEncryptionKeyFomAuthStorage();\n\n    if (importedCryptoKey instanceof Error) {\n      this.setErrorStatus(importedCryptoKey);\n      return importedCryptoKey;\n    }\n\n    const resultSetImportKey = await this.setEncryptionKey(importedCryptoKey);\n\n    if (resultSetImportKey instanceof Error) {\n      this.setErrorStatus(resultSetImportKey);\n      return resultSetImportKey;\n    }\n    return true;\n  }\n\n  /**\n   * check if a crypto key is already exists\n   * in session storage or a cached in memory\n   */\n  protected async checkIsAuthorized(): Promise<boolean> {\n    const result = await this.importCryptoKey();\n\n    return result === true;\n  }\n\n  protected setOptions(options?: ISecretStorageOptions): void {\n    if (options && typeof options === 'object') {\n      this.options = options;\n\n      const { dbName } = options;\n\n      if (dbName && typeof dbName === 'string') {\n        this.dbName = dbName;\n      }\n    }\n  }\n\n  public async connect(\n    options?: ISecretStorageOptions\n  ): Promise<boolean | Error> {\n    this.clearState();\n    this.setStatus(SECRET_STORAGE_STATUS.CONNECTING);\n    this.setOptions(options);\n\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const isKeyExists = await this.importCryptoKey();\n\n    if (isKeyExists instanceof Error) {\n      this.setErrorStatus(isKeyExists);\n      return isKeyExists;\n    }\n\n    const isStorageProviderStarted = await this.runStorageProvider();\n\n    if (isStorageProviderStarted instanceof Error) {\n      this.setErrorStatus(isStorageProviderStarted);\n      return isStorageProviderStarted;\n    }\n    this.setStatus(SECRET_STORAGE_STATUS.RUNNING);\n    return true;\n  }\n\n  protected reset() {\n    this.clearError();\n    this.clearStatus();\n    this.clearState();\n    this.k = undefined;\n    this.authStorageProvider = undefined;\n  }\n\n  protected async storageProviderDisconnect(): Promise<boolean | Error> {\n    const { authStorageProvider } = this;\n\n    if (authStorageProvider) {\n      return authStorageProvider.disconnect();\n    }\n    return new Error('There is no Auth storage provider defined');\n  }\n\n  public async disconnect(): Promise<boolean | Error> {\n    const resultDisconnectFromStorageProvider = await this.storageProviderDisconnect();\n\n    if (resultDisconnectFromStorageProvider instanceof Error) {\n      console.error(resultDisconnectFromStorageProvider);\n      return new Error('Failed to disconnect from the storage provider');\n    }\n    this.reset();\n    this.setStatus(SECRET_STORAGE_STATUS.STOPPED);\n    return true;\n  }\n\n  public async authorize(\n    credentials: ISecretStoreCredentials,\n    options?: ISecretStorageOptions\n  ): Promise<boolean | Error> {\n    const credentialsValidationResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (credentialsValidationResult instanceof Error) {\n      this.setErrorStatus(credentialsValidationResult);\n      return credentialsValidationResult;\n    }\n\n    const cryptoKey = await SecretStorage.generatePasswordKeyByPasswordString(\n      credentials.password\n    );\n\n    if (cryptoKey instanceof Error) {\n      this.setErrorStatus(cryptoKey);\n      return cryptoKey;\n    }\n\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const setKeyResult = await this.setEncryptionKey(cryptoKey);\n\n    if (setKeyResult instanceof Error) {\n      this.setErrorStatus(setKeyResult);\n      return setKeyResult;\n    }\n    return this.connect(options);\n  }\n\n  public async authorizeByKey(\n    credentials: ISecretStoreCredentialsCryptoKey,\n    options?: ISecretStorageOptions\n  ): Promise<boolean | Error> {\n    const credentialsValidationResult = SecretStorage.validateCryptoKeyCredentials(\n      credentials\n    );\n\n    if (credentialsValidationResult instanceof Error) {\n      this.setErrorStatus(credentialsValidationResult);\n      return credentialsValidationResult;\n    }\n\n    const { key: cryptoKey } = credentials;\n    const resultRunAuthProvider = await this.runAuthStorageProvider();\n\n    if (resultRunAuthProvider instanceof Error) {\n      this.setErrorStatus(resultRunAuthProvider);\n      return resultRunAuthProvider;\n    }\n\n    const setKeyResult = await this.setEncryptionKey(cryptoKey);\n\n    if (setKeyResult instanceof Error) {\n      this.setErrorStatus(setKeyResult);\n      return setKeyResult;\n    }\n    return this.connect(options);\n  }\n\n  protected async getWithStorageProvider(\n    key: string\n  ): Promise<string | Error | undefined> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error('There is no connection with a storage provider');\n    }\n\n    const value = await storageProvider.get(key);\n\n    if (value instanceof Error) {\n      return SecretStorage.error(value);\n    }\n    if (value === undefined) {\n      return value;\n    }\n    if (typeof value !== 'string' || !value.length) {\n      return SecretStorage.error(\n        'There is a wrong value type returned by the storage provider. A string must be returned'\n      );\n    }\n    return value;\n  }\n\n  protected async getWithStorageProviderUint8Array(\n    key: string\n  ): Promise<Uint8Array | Error | undefined> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error('There is no connection with a storage provider');\n    }\n\n    if (typeof storageProvider.getUInt8Array !== 'function') {\n      return new Error(\n        'The storage provider which support Uint8Array must provide the method called getUInt8Array'\n      );\n    }\n\n    const value = await storageProvider.getUInt8Array(key);\n\n    if (!value) {\n      return undefined;\n    }\n    if (value instanceof Error) {\n      return SecretStorage.error(value);\n    }\n    if (!(value instanceof Uint8Array) || !value.length) {\n      return SecretStorage.error(\n        'There is a wrong value type returned by the storage provider. An instance of Uint8Array must be returned'\n      );\n    }\n    return value;\n  }\n\n  protected async decryptValue(value: string): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return SecretStorage.error(\n        'There is no a valid key to decrypt the value'\n      );\n    }\n\n    const decryptedValue = await decryptDataWithKey(k, value);\n\n    if (decryptedValue instanceof Error) {\n      return SecretStorage.error(decryptedValue);\n    }\n    if (typeof decryptedValue !== 'string') {\n      return SecretStorage.error('A wrong value decrypted');\n    }\n    return decryptedValue;\n  }\n\n  protected async decryptValueFromUInt8Array(\n    value: Uint8Array\n  ): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return SecretStorage.error(\n        'There is no a valid key to decrypt the value'\n      );\n    }\n    if (!value.length) {\n      return SecretStorage.error('The value must not be empty');\n    }\n\n    const decryptedValue = await decryptDataWithKeyFromUint8Array(k, value);\n\n    if (decryptedValue instanceof Error) {\n      return SecretStorage.error(decryptedValue);\n    }\n    if (typeof decryptedValue !== 'string') {\n      return SecretStorage.error('A wrong value decrypted');\n    }\n    return decryptedValue;\n  }\n\n  public get = async (key: string): Promise<string | Error | undefined> => {\n    const { isRunning } = this;\n\n    if (!isRunning) {\n      return new Error('There is no connection with storage or not authorized');\n    }\n\n    const { isStorageProviderSupportUInt8Array } = this;\n\n    const valueEncrypted = await (isStorageProviderSupportUInt8Array\n      ? this.getWithStorageProviderUint8Array(key)\n      : this.getWithStorageProvider(key));\n\n    if (valueEncrypted === undefined) {\n      return valueEncrypted;\n    }\n    if (valueEncrypted instanceof Error) {\n      return SecretStorage.error(valueEncrypted);\n    }\n\n    const decryptResult = await (valueEncrypted instanceof Uint8Array\n      ? this.decryptValueFromUInt8Array(valueEncrypted)\n      : this.decryptValue(valueEncrypted));\n\n    if (decryptResult instanceof Error) {\n      return decryptResult;\n    }\n    return decryptResult || undefined;\n  };\n\n  protected async setWithStorageProvider(\n    key: string,\n    value: string\n  ): Promise<boolean | Error> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error(\n        'There is no an active connection with storage provider'\n      );\n    }\n\n    const result = await storageProvider.set(key, value);\n\n    if (result instanceof Error) {\n      return result;\n    }\n    if (result !== true) {\n      return new Error(\n        'A wrong result on set the value into the storage provider'\n      );\n    }\n    return true;\n  }\n\n  protected async setWithStorageProviderUInt8Array(\n    key: string,\n    value: Uint8Array\n  ): Promise<boolean | Error> {\n    const { storageProvider } = this;\n\n    if (!storageProvider) {\n      return new Error(\n        'There is no an active connection with storage provider'\n      );\n    }\n    if (typeof storageProvider.setUInt8Array !== 'function') {\n      return new Error(\n        \"The storage provider doesn't have the method setUInt8Array\"\n      );\n    }\n\n    const result = await storageProvider.setUInt8Array(key, value);\n\n    if (result instanceof Error) {\n      return result;\n    }\n    if (result !== true) {\n      return new Error(\n        'A wrong result on set the value into the storage provider'\n      );\n    }\n    return true;\n  }\n\n  protected async encryptValue(value: string): Promise<string | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return new Error('There is no key to encrypt the value');\n    }\n\n    const encryptedValue = await encryptDataToString(k, value);\n\n    if (encryptedValue instanceof Error) {\n      return encryptedValue;\n    }\n    if (typeof encryptedValue !== 'string' || !encryptedValue.length) {\n      return new Error('A wrong encryption result for the value');\n    }\n    return encryptedValue;\n  }\n\n  /**\n   * encrypts string to the UInt8Array\n   *\n   * @protected\n   * @param {string} value\n   * @returns {(Promise<Uint8Array | Error>)}\n   * @memberof SecretStorage\n   */\n  protected async encryptValueAsInt8Array(\n    value: string | Uint8Array\n  ): Promise<Uint8Array | Error> {\n    const { k } = this;\n\n    if (!(k instanceof CryptoKey)) {\n      return new Error('There is no key to encrypt the value');\n    }\n\n    const encryptedValue = await encryptDataToUInt8Array(k, value);\n\n    if (encryptedValue instanceof Error) {\n      return encryptedValue;\n    }\n    if (!(encryptedValue instanceof Uint8Array) || !encryptedValue.length) {\n      return new Error('A wrong encryption result for the value');\n    }\n    return encryptedValue;\n  }\n\n  public async set(key: string, value: string): Promise<boolean | Error> {\n    const { isRunning } = this;\n\n    if (!isRunning) {\n      return SecretStorage.error(\n        'The instance of SecretStorage is not connected to the storage provider or there is no an encryption key'\n      );\n    }\n\n    //value - must be an escaped sctring\n    const encryptedValue = this.isStorageProviderSupportUInt8Array\n      ? await this.encryptValueAsInt8Array(value)\n      : await this.encryptValue(value);\n\n    if (encryptedValue instanceof Error) {\n      return SecretStorage.error(encryptedValue);\n    }\n\n    const storeValueResult = await (encryptedValue instanceof Uint8Array\n      ? this.setWithStorageProviderUInt8Array(key, encryptedValue)\n      : this.setWithStorageProvider(key, encryptedValue));\n\n    if (storeValueResult instanceof Error) {\n      return SecretStorage.error(storeValueResult);\n    }\n    return storeValueResult;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/secret-storage-class/secret-storage-class.types.ts",["1412"],"import { TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES } from 'utils/password-utils/password-utils.types';\n\nexport interface ISecretStorageOptions {\n  dbName?: string;\n}\n\nexport interface ISecretStorage {\n  // returns true if connected succesfully to\n  // a storage and have a vaild crypto key\n  isActive: boolean;\n  connect(options?: ISecretStorageOptions): Promise<boolean | Error>;\n  // authorize and connect to the storage\n  authorize(\n    credentials: ISecretStoreCredentials,\n    options?: ISecretStorageOptions\n  ): Promise<boolean | Error>;\n  // disconnect from the storage\n  disconnect(): Promise<boolean | Error>;\n  set(key: string, value: string): Promise<boolean | Error>;\n  get(key: string): Promise<string | undefined | Error>;\n}\n\nexport interface IStorageProviderOptions {\n  dbName?: string;\n}\n\nexport abstract class StorageProvider {\n  public abstract connect(\n    options?: IStorageProviderOptions\n  ): Promise<boolean | Error>;\n  public abstract disconnect(): Promise<boolean | Error>;\n  public abstract set(key: string, value: string): Promise<boolean | Error>;\n\n  public abstract setUInt8Array?(\n    key: string,\n    value: Uint8Array\n  ): Promise<boolean | Error>;\n  public abstract get(key: string): Promise<string | undefined | Error>;\n\n  public abstract getUInt8Array?(\n    key: string\n  ): Promise<Uint8Array | undefined | Error>;\n}\n\nexport type TStorageProvider = typeof StorageProvider;\n/**\n * static isBufferSupported {boolean} - whether the class\n * supports operations with the Int8Array\n *\n * @export\n * @interface IStorageProvider\n */\nexport interface IStorageProvider {\n  isBufferSupported?: boolean;\n  new (): StorageProvider;\n}\n\nexport type TInstanceofStorageProvider = InstanceType<IStorageProvider>;\n\nexport type TSecretStorageProviderName = string;\n\nexport interface ILocalStorageProviderTable {\n  [providerName: string]: IStorageProvider;\n}\n\nexport type TSecretStoreConfiguration = {\n  storageProviderName?: string;\n};\n\nexport interface ISecretStoreCredentials {\n  password: string;\n}\n\nexport interface ISecretStoreCredentialsCryptoKey {\n  key: CryptoKey;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.browser.conf.ts",["1413"],"import Multiaddr from 'multiaddr';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\nimport { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES } from './swarm-connection-class-subclass-ipfs.signal-star.conf';\n\nexport enum SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS {\n  FLOODSUB = 'floodsub',\n  GOSSIPPSUB = 'gossipsub',\n}\n\n//https://github.com/ipfs/js-ipfs/blob/master/doc/config.md#api\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT = {\n  Addresses: {\n    // if a dommain used then '/dns4/wrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'\n    Swarm: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_SIGNAL_STAR_MULTIADDRESSES,\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n    ],\n    API: '',\n    Gateway: '',\n    Delegates: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10,\n    },\n    webRTCStar: {\n      Enabled: true,\n    },\n  },\n  Bootstrap: [\n    ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n  ],\n  Pubsub: {\n    Enabled: true,\n    Router: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_ROUTERS.GOSSIPPSUB,\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500,\n    },\n  },\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.const.ts",["1414"],"import { SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT } from './swarm-connection-class-subclass-ipfs.browser.conf';\nimport { getLibPeerToPeer } from './swarm-connection-class-subclass-ipfs.libp2p.conf';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL =\n  'https://cdn.jsdelivr.net/npm/ipfs/dist/index.js';\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT = {\n  init: {\n    emptyRepo: true, // TODO - set to false\n    //privateKey TODO - create PeerId instance by the user's public and private keys\n  },\n  start: true,\n  pass: '', // TODO - use the password for it,\n  silent: false, // TODO - set true on production\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true,\n      active: true,\n    },\n  },\n  preload: {\n    enabled: true,\n    addresses: [\n      ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_MULTIADDRS,\n    ],\n  },\n  EXPERIMENTAL: {\n    ipnsPubsub: true,\n    sharding: true,\n  },\n  config: SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_FOR_BROWSER_DEFAULT,\n  libp2p: getLibPeerToPeer,\n};\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT = 2000;\n\nexport const SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS = 3;\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.delegate.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.libp2p.conf.ts",["1415"],"// example https://github.com/ipfs/js-ipfs/blob/master/examples/custom-libp2p/index.js\n// TODO use https://github.com/libp2p/js-libp2p-webrtc-star as transport\n// https://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf\n// TODO - use https://github.com/daviddias/webrtc-explorer\n// about libp2p-secio https://github.com/auditdrivencrypto/secure-channel/blob/master/prior-art.md#ipfss-secure-channel\nimport * as Libp2p from 'libp2p';\nimport * as KadDHT from 'libp2p-kad-dht';\nimport * as WebSocketStar from 'libp2p-websocket-star';\nimport * as SPDY from 'libp2p-spdy';\nimport * as MPLEX from 'pull-mplex';\nimport * as Bootstrap from 'libp2p-bootstrap';\nimport * as SECIO from 'libp2p-secio';\nimport * as WStar from 'libp2p-webrtc-star';\nimport * as PubSubGossip from 'libp2p-gossipsub';\nimport DelegatedPeerRouter from 'libp2p-delegated-peer-routing';\nimport DelegatedContentRouter from 'libp2p-delegated-content-routing';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS,\n} from './swarm-connection-class-subclass-ipfs.delegate.conf';\n\n// libp2p configuration for browsers\n// https://github.com/ipfs/js-ipfs/blob/master/src/core/runtime/libp2p-browser.js\nexport const getLibPeerToPeer = (opts: any) => {\n  // Set convenience variables to clearly showcase some of the useful things that are available\n  const peerInfo = opts.peerInfo;\n  const peerBook = opts.peerBook;\n  // bootstrap peers in the main configuration\n  const bootstrapList = opts.config.Bootstrap;\n\n  // Create our WebSocketStar transport and give it our PeerId, straight from the ipfs node\n  const wstar = new WStar({\n    id: peerInfo.id,\n  });\n  const wsstar = new WebSocketStar({\n    id: peerInfo.id,\n  });\n  // Content and peer routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/peer-and-content-routing\n  // https://github.com/libp2p/js-libp2p/tree/master/examples/delegated-routing\n  const delegatePeerRouter = new DelegatedPeerRouter(\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  const delegateContentRouter = new DelegatedContentRouter(\n    peerInfo.id,\n    SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP\n  );\n  // Websocket connections failed cause CORS policy\n  // const delegatePeerRouterWS = new DelegatedPeerRouter(\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n  // const delegateContentRouterWS = new DelegatedContentRouter(\n  //   peerInfo.id,\n  //   SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS\n  // );\n\n  console.warn('IPFS delegate node config HTTP');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_HTTP);\n  console.warn('IPFS delegate node config HTTP-WS');\n  console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_API_OPTIONS_WS);\n\n  // Build and return our libp2p node\n  return new Libp2p({\n    peerInfo,\n    peerBook,\n    /**\n     *  https://github.com/libp2p/js-libp2p/tree/master/src/switch\n     * bp2p-switch is a dialer machine, it leverages the multiple libp2p transports, stream muxers, crypto channels and other connection upgrades to dial to peers in the libp2p network. It also supports Protocol Multiplexing through a multicodec and multistream-select handshake.\n     * libp2p-switch supports private networking. In order to enabled private networks, the switch.protector must be set and must contain a protect method. \n     * denyTTL: - number of ms a peer should not be dialable to after it errors. Each successive deny will increase the TTL from the base value. Defaults to 5 minutes\n       denyAttempts: - number of times a peer can be denied before they are permanently denied. Defaults to 5.\n       maxParallelDials: - number of concurrent dials the switch should allow. Defaults to 100\n       maxColdCalls: - number of queued cold calls that are allowed. Defaults to 50\n       dialTimeout: - number of ms a dial to a peer should be allowed to run. Defaults to 30000 (30 seconds)\n     * \n     */\n    switch: {\n      denyTTL: 2 * 60 * 1e3, // 2 minute base\n      denyAttempts: 5, // back off 5 times\n      maxParallelDials: 100,\n      maxColdCalls: 25,\n      dialTimeout: 20e3,\n    },\n    // Lets limit the connection managers peers and have it check peer health less frequently\n    connectionManager: {\n      minPeers: 25,\n      maxPeers: 100,\n      pollInterval: 5000,\n    },\n    modules: {\n      transport: [wstar, wsstar],\n      streamMuxer: [MPLEX, SPDY],\n      connEncryption: [SECIO],\n      peerDiscovery: [Bootstrap, wstar.discovery, wsstar.discovery],\n      dht: KadDHT,\n      // https://github.com/libp2p/specs/tree/master/pubsub/gossipsub\n      pubsub: PubSubGossip,\n      contentRouting: [\n        delegateContentRouter,\n        // TODO - CORS failed for websocket // delegateContentRouterWS,\n      ],\n      peerRouting: [\n        delegatePeerRouter,\n        // TODO - CORS failed for websocket // delegatePeerRouterWS,\n      ],\n    },\n    config: {\n      peerDiscovery: {\n        // auto dial to peers we find when we have less peers than `connectionManager.minPeers`\n        autoDial: true,\n        mdns: {\n          interval: 10000,\n          enabled: true,\n        },\n        bootstrap: {\n          interval: 30e3,\n          enabled: true,\n          list: bootstrapList,\n        },\n        webrtcStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n        webSocketStar: {\n          // webrtc-star options\n          interval: 1000, // ms\n          enabled: true,\n        },\n      },\n      // Turn on relay with hop active so we can connect to more peers\n      // implements the circuit-relay mechanism that allows nodes that\n      // don't speak the same protocol to communicate using a third relay node.\n      // https://github.com/libp2p/js-libp2p-circuit - DEPRECATED, but docs\n      // can be forund on here\n      // https://github.com/libp2p/specs/tree/master/relay\n      /**\n       * The circuit relay is a means to establish connectivity between libp2p nodes (e.g. IPFS nodes) that wouldn't otherwise be able to establish a direct connection to each other.\n       *\n       * Relay is needed in situations where nodes are behind NAT, reverse proxies, firewalls and/or simply don't support the same transports (e.g. go-ipfs vs. browser-ipfs). Even though libp2p has modules for NAT traversal (go-libp2p-nat), piercing through NATs isn't always an option. The circuit relay protocol exists to overcome those scenarios.\n       * Unlike a transparent tunnel, where a libp2p peer would just proxy a communication stream to a destination (the destination being unaware of the original source), a circuit relay makes the destination aware of the original source and the circuit followed to establish communication between the two.\n       */\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true,\n        },\n      },\n      /**\n       * Create a new KadDHT.\n       *\n       * @param {Switch} sw libp2p-switch instance\n       * @param {object} options DHT options\n       * @param {number} options.kBucketSize k-bucket size (default 20)\n       * @param {number} options.concurrency alpha concurrency of queries (default 3) limiting the scope of queries to k closest peers\n       * @param {Datastore} options.datastore datastore (default MemoryDatastore)\n       * @param {object} options.validators validators object with namespace as keys and function(key, record, callback)\n       * @param {object} options.selectors selectors object with namespace as keys and function(key, records)\n       * @param {randomWalkOptions} options.randomWalk randomWalk options\n       */\n      /**\n       * Random walk options\n       *\n       * @typedef {Object} randomWalkOptions\n       * @property {boolean} enabled discovery enabled (default: true)\n       * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n       * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n       * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n       * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n       */\n      dht: {\n        enabled: true,\n        kBucketSize: 20,\n        concurrency: 5,\n        randomWalk: {\n          queriesPerPeriod: 2,\n          enabled: true,\n          interval: 10e3, // This is set low intentionally, so more peers are discovered quickly. Higher intervals are recommended\n          timeout: 2e3, // End the query quickly since we're running so frequently\n        },\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true,\n        signMessages: true,\n        strictSigning: true,\n      },\n    },\n  });\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.signal-star.conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.ts",["1416","1417","1418"],"import {\n  ISwarmConnectionSubclass,\n  ESwarmConnectionSubclassStatus,\n  IIPFSSpecificOptions,\n} from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport {\n  SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL,\n  SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT,\n  SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS,\n} from './swarm-connection-class-subclass-ipfs.const';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport { timeout } from 'utils/common-utils/common-utils-timer';\nimport * as Ipfs from 'types/ipfs.types';\n\nexport class SwarmConnectionSubclassIPFS\n  extends getStatusClass<typeof ESwarmConnectionSubclassStatus>({\n    errorStatus: ESwarmConnectionSubclassStatus.ERROR,\n    instanceName: 'SwarmConnectionSubclassIPFS',\n  })\n  implements ISwarmConnectionSubclass {\n  protected IPFS?: any;\n\n  protected options?: IIPFSSpecificOptions;\n\n  protected connection?: Ipfs.IPFS;\n\n  public isClosed: boolean = false;\n\n  protected reconnectionAttempt: number = 0;\n\n  public get isConnected(): boolean {\n    const { isClosed, connection } = this;\n\n    return !isClosed && !!connection && !!connection.isOnline();\n  }\n\n  public getNativeConnection(): Ipfs.IPFS | undefined {\n    return this.connection;\n  }\n\n  public async close(): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:close');\n    if (isClosed) {\n      return true;\n    }\n    this.setConnectionClosed();\n    await this.stopCurrentConnection();\n    return true;\n  }\n\n  public async connect(\n    options: IIPFSSpecificOptions\n  ): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The connection was closed previousely');\n    }\n\n    const setOptionsResult = this.setOptions(options);\n\n    if (setOptionsResult instanceof Error) {\n      console.error(setOptionsResult);\n      return this.setErrorStatus('Failed to set the options');\n    }\n\n    const scriptLoadingResult = await this.preloadIpfsModule();\n\n    console.warn('ipfs:connect');\n    if (scriptLoadingResult instanceof Error) {\n      console.error(scriptLoadingResult);\n      return this.setErrorStatus('Failed to preload the IPFS library');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect\n      const connectionResult = await this.reconnect();\n\n      if (connectionResult instanceof Error) {\n        console.error(connectionResult);\n        return this.setErrorStatus('Failed to connect the first time');\n      }\n    }\n    return true;\n  }\n\n  protected setConnectionClosed() {\n    console.warn('Ipfs connection is closed');\n    this.isClosed = true;\n    this.setStatus(ESwarmConnectionSubclassStatus.CLOSE);\n  }\n\n  protected setOptions(options?: IIPFSSpecificOptions): Error | boolean {\n    if (!options || typeof options.password !== 'string') {\n      return new Error(\n        'An options and a password must be specified to encrypt the provate data'\n      );\n    }\n    this.options = options;\n    return true;\n  }\n\n  protected setIpfsConstructor(IPFS: any) {\n    this.IPFS = IPFS;\n  }\n\n  protected setIpfsConnection(ipfsNode: Ipfs.IPFS) {\n    this.connection = ipfsNode;\n    // unset the listeners for the node,\n    // cause it may be already set\n    this.unsetListeners(ipfsNode);\n    // set listeners for an events\n    // emitted by the IPFS node\n    this.setListeners(ipfsNode);\n  }\n\n  protected unsetCurrentConnection(ipfsNode?: Ipfs.IPFS) {\n    const { connection } = this;\n\n    if (ipfsNode) {\n      if (ipfsNode === connection) {\n        this.connection = undefined;\n      }\n      if (ipfsNode) {\n        this.unsetListeners(ipfsNode);\n      }\n    }\n  }\n\n  protected async preloadIpfsModule(): Promise<Error | boolean> {\n    let ipfsModule: unknown | Error;\n\n    try {\n      ipfsModule = await import('ipfs');\n    } catch (err) {\n      ipfsModule = err as Error;\n    }\n\n    if (ipfsModule instanceof Error) {\n      console.error(\n        `Failed to load the IPFS main script from the source ${SWARM_CONNECTION_SUBCLASS_IPFS_CDN_SCRIPT_URL}`\n      );\n      return ipfsModule;\n    }\n    if (!ipfsModule || typeof (ipfsModule as any).create !== 'function') {\n      return new Error('Failed to load an instance of IPFS');\n    }\n    this.setIpfsConstructor(ipfsModule);\n    return true;\n  }\n\n  protected handleStarted = () => {\n    console.warn('IPFS connection to the swarm was started');\n    this.setStatus(ESwarmConnectionSubclassStatus.STARTED);\n  };\n\n  protected handleError = async (error?: Error) => {\n    if (error) {\n      console.error(\n        'An error has occured with the IPFS swarm connection subclass'\n      );\n      console.error(error);\n    }\n  };\n\n  protected handleInitialized = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    this.setStatus(ESwarmConnectionSubclassStatus.INITIALIZED);\n  };\n\n  protected handleStop = () => {\n    console.warn('IPFS connection to the swarm was initialized');\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.setStatus(ESwarmConnectionSubclassStatus.STOP);\n      this.reconnect();\n    }\n  };\n\n  protected setListeners(\n    connection: Ipfs.IPFS,\n    isSetListeners: boolean = true\n  ) {\n    const methodName = isSetListeners ? 'on' : 'off';\n\n    connection[methodName]('start', this.handleStarted);\n    connection[methodName]('init', this.handleInitialized);\n    connection[methodName]('error', this.handleError);\n    connection[methodName]('stop', this.handleStop);\n  }\n\n  protected unsetListeners = (connection: Ipfs.IPFS) => {\n    this.setListeners(connection, false);\n  };\n\n  protected async createConnection(): Promise<Error | boolean> {\n    console.warn('create a new IPFS connection to the swarm');\n    const { IPFS, options } = this;\n\n    if (IPFS) {\n      const connection: Ipfs.IPFS = await IPFS.create({\n        ...SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT,\n        pass: options ? options.password : null, // password from options\n      });\n\n      // this is working connection\n      // const connection: Ipfs.IPFS = await IPFS.create({\n      //   \"preload\":\n      //   {\"enabled\":false},\n      //   \"config\":{\"Addresses\":{\"Swarm\":[\"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\"]}},\n      //   \"repo\":\"orbit-chat-ipfs-dfffd\",\n      //   \"EXPERIMENTAL\": {\n      //     \"pubsub\":true,\n      //   }}\n      // );\n\n      if (connection instanceof Error) {\n        console.error('Failed to create a new IPFS node');\n        return connection;\n      }\n      this.setIpfsConnection(connection);\n      console.warn('IPFS node config');\n      console.warn(SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DEFALT);\n      return true;\n    }\n    return new Error('Ipfs was not loaded as a dynamic module previousely');\n  }\n\n  protected async startConnection(): Promise<Error | boolean> {\n    const { connection, isClosed } = this;\n\n    if (isClosed) {\n      return new Error('Unable to start connection closed previousely');\n    }\n    if (!connection) {\n      return new Error(\n        'There is no connection to the IPFS, it must be created before start'\n      );\n    }\n    try {\n      await Promise.race([\n        timeout(SWARM_CONNECTION_SUBCLASS_IPFS_NODE_START_TIMEOUT),\n        connection.ready,\n      ]);\n    } catch (err) {\n      console.error(err);\n\n      // if failed to start or a timeout has reached\n      // stop the connection\n      const stopConnectionResult = await this.stopConnection(connection);\n\n      if (stopConnectionResult instanceof Error) {\n        this.setErrorStatus(\n          'Failed to stop the connection during creating a new one'\n        );\n        return stopConnectionResult;\n      }\n      return err;\n    }\n\n    const nodeId = await connection.id();\n\n    if (!nodeId) {\n      return new Error('Failed to start node id connection');\n    }\n    console.warn(`Ipfs node was started as: /n ${nodeId}`);\n    return true;\n  }\n\n  protected async stopConnection(connection: Ipfs.IPFS): Promise<Error | void> {\n    console.warn('Stop the connection');\n    try {\n      connection.stop();\n    } catch (err) {\n      console.error(new Error('Failed to stop the ipfs node'));\n      return err;\n    }\n  }\n\n  async stopCurrentConnection(): Promise<Error | void> {\n    const { connection } = this;\n\n    if (connection) {\n      // if the current connection is exists, then stop it\n      // unset the connection and it's listeners\n      this.unsetCurrentConnection(connection);\n      const connectionStopResult = await this.stopConnection(connection);\n\n      if (connectionStopResult instanceof Error) {\n        console.error(connectionStopResult);\n        return connectionStopResult;\n      }\n    }\n  }\n\n  protected incReconnectionAttempt() {\n    this.reconnectionAttempt += 1;\n    console.warn('ipfs:incReconnectionAttempt');\n  }\n\n  protected resetReconnectionAttempt() {\n    this.reconnectionAttempt = 0;\n    console.warn('ipfs:resetReconnectionAttempt');\n  }\n\n  protected async reconnect(): Promise<Error | boolean> {\n    console.warn('ipfs:reconnect');\n    this.incReconnectionAttempt();\n    if (\n      this.reconnectionAttempt >\n      SWARM_CONNECTION_SUBCLASS_IPFS_NODE_RECONNECTION_MAX_ATTEMPTS\n    ) {\n      await this.close();\n      this.setStatus(ESwarmConnectionSubclassStatus.CONNECTION_FAILED);\n      return new Error('Failed to connect to the SWARM throught the IPFS');\n    }\n\n    const startResult = await this.start();\n\n    if (startResult instanceof Error) {\n      // if failed to start, then try to reconnect once again\n      console.error(startResult);\n      return this.reconnect();\n    }\n    this.resetReconnectionAttempt();\n    return true;\n  }\n\n  protected async start(): Promise<Error | boolean> {\n    const { isClosed } = this;\n\n    console.warn('ipfs:start');\n    if (isClosed) {\n      return new Error(\n        'Unable to connect to the swarm if the connection was closed before'\n      );\n    }\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTING);\n\n    // stop the current connection if exists\n    const stopConnectionResult = await this.stopCurrentConnection();\n\n    if (stopConnectionResult instanceof Error) {\n      this.setErrorStatus('Failed to stop the previous connection');\n    }\n\n    // create a new connection to the ipfs\n    const createConnectionResult = await this.createConnection();\n\n    if (createConnectionResult instanceof Error) {\n      this.setErrorStatus(createConnectionResult);\n      return new Error('Failed to create a new connection');\n    }\n\n    const startConnectionResult = await this.startConnection();\n\n    if (startConnectionResult instanceof Error) {\n      this.setErrorStatus(startConnectionResult);\n      return new Error('Failed to start the connection');\n    }\n    // if started succesfully\n    // then set the status that the node\n    // was started succesfully\n    this.setStatus(ESwarmConnectionSubclassStatus.CONNECTED);\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-bootstrap.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-content-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-delegated-peer-routing.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-gossipsub.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-kad-dht.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-secio.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-spdy.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-webrtc-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p-websocket-star.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/libp2p.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/multiaddr.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/types/pull-mplex.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.ts",["1419","1420"],"import {\n  ISwarmConnection,\n  ISwarmConnectionSubclass,\n  ESwarmConnectionClassStatus,\n  ISwarmConnectionOptions,\n  ESwarmConnectionClassSubclassType,\n  TSwarmConnectionSubclassSpecificOptions,\n  ESwarmConnectionSubclassStatus,\n} from './swarm-connection-class.types';\nimport { SwarmConnectionSubclassIPFS } from './swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from 'classes/basic-classes/status-class-base/status-class-base.const';\nimport * as Ipfs from 'types/ipfs.types';\n\nexport class SwarmConnection\n  extends getStatusClass<typeof ESwarmConnectionClassStatus>({\n    errorStatus: ESwarmConnectionClassStatus.ERROR,\n    instanceName: 'SwarmConnection',\n  })\n  implements ISwarmConnection {\n  public get isClosed(): boolean {\n    const { connection } = this;\n\n    if (connection) {\n      return !!connection.isClosed;\n    }\n    return this.status === ESwarmConnectionSubclassStatus.CLOSE;\n  }\n\n  public get isConnected() {\n    const { connection } = this;\n\n    if (connection) {\n      return !!connection.isConnected;\n    }\n    return false;\n  }\n\n  public get connectionType(): ESwarmConnectionClassSubclassType | void {\n    const { options } = this;\n\n    if (options) {\n      const { type } = options;\n\n      return type;\n    }\n  }\n\n  public getNativeConnection(): Ipfs.IPFS | undefined {\n    if (this.connection) {\n      return this.connection.getNativeConnection();\n    }\n    return undefined;\n  }\n\n  private connection?: ISwarmConnectionSubclass;\n\n  private options?: ISwarmConnectionOptions;\n\n  public async connect(\n    options: ISwarmConnectionOptions\n  ): Promise<boolean | Error> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error(\n        'Failed to start the connetion which was closed perviouselly'\n      );\n    }\n\n    this.setOptions(options);\n    this.setStatus(ESwarmConnectionClassStatus.CONNECTING);\n\n    const createConnectionInstanceResult = this.createConnectionInstance();\n\n    if (createConnectionInstanceResult instanceof Error) {\n      this.setErrorStatus(createConnectionInstanceResult);\n      return new Error(\n        'Failed to create the instance of the connection with swarm subclass'\n      );\n    }\n\n    const connectionResult = await this.startConnection();\n\n    if (connectionResult instanceof Error) {\n      this.setErrorStatus(connectionResult);\n      return connectionResult;\n    }\n    return true;\n  }\n\n  public async close(): Promise<Error | boolean> {\n    const { connection, isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The connection was closed previousely');\n    }\n    this.setStatus(ESwarmConnectionClassStatus.CLOSE);\n    this.unsetConnectionSubClassInstance(connection);\n    if (connection) {\n      const subclassConnectionCloseResult = await connection.close();\n\n      if (subclassConnectionCloseResult instanceof Error) {\n        console.error(subclassConnectionCloseResult);\n        return this.setErrorStatus('Failed to close the sub connection');\n      }\n    }\n    return true;\n  }\n\n  /**\n   *\n   * returns options specific for the subclass connection\n   * @private\n   * @returns {(TSwarmConnectionSubclassSpecificOptions | void)}\n   * @memberof SwarmConnection\n   */\n  private getSubclassSpecificOptions(): TSwarmConnectionSubclassSpecificOptions | void {\n    const { options } = this;\n\n    if (options && typeof options === 'object') {\n      const { subclassOptions } = options;\n\n      return subclassOptions ? subclassOptions : undefined;\n    }\n  }\n\n  private setOptions(options: ISwarmConnectionOptions) {\n    this.options = options;\n  }\n\n  private setConnectionStatusListener(\n    connection: ISwarmConnectionSubclass,\n    isSet = true\n  ) {\n    const { statusEmitter } = connection;\n\n    statusEmitter[isSet ? 'addListener' : 'removeListener'](\n      STATUS_CLASS_STATUS_CHANGE_EVENT,\n      this.setStatus\n    );\n  }\n\n  private unsetConnectionStatusListener(connection: ISwarmConnectionSubclass) {\n    this.setConnectionStatusListener(connection, false);\n  }\n\n  private setConnectionSubClassInstance(connection: ISwarmConnectionSubclass) {\n    this.connection = connection;\n    this.setConnectionStatusListener(connection);\n  }\n\n  private unsetConnectionSubClassInstance(\n    connection?: ISwarmConnectionSubclass\n  ) {\n    if (connection === this.connection) {\n      this.connection = undefined;\n    }\n    if (connection) {\n      this.unsetConnectionStatusListener(connection);\n    }\n  }\n\n  private createConnectionToIPFS(): boolean | Error {\n    try {\n      const connectionToIPFS = new SwarmConnectionSubclassIPFS();\n\n      this.setConnectionSubClassInstance(connectionToIPFS);\n      return true;\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to create an instance of IPFS connection to swarm'\n      );\n    }\n  }\n\n  private createConnectionInstance(): boolean | Error {\n    const { connectionType: type } = this;\n\n    if (type === ESwarmConnectionClassSubclassType.IPFS) {\n      return this.createConnectionToIPFS();\n    }\n    return new Error('An unknown connection subclass type provided in options');\n  }\n\n  private async startConnection(): Promise<boolean | Error> {\n    const { connection, connectionType } = this;\n\n    if (!connection || typeof connection.connect !== 'function') {\n      return new Error('There is no connection');\n    }\n\n    const subclassSpecificOptions = this.getSubclassSpecificOptions();\n    const result = await connection.connect(subclassSpecificOptions);\n\n    if (result instanceof Error) {\n      console.error(\n        `Failed to start connection to the swarm ${connectionType}`\n      );\n      return result;\n    }\n    return result;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-connection-class/swarm-connection-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.ts",["1421","1422"],"import { ISwarmMessageSubclassRawConstructorOptions } from './swarm-message-subclass-raw-constructor.types';\n\nexport class SwarmMessageSubclassRawConstructor {\n  constructor(options: ISwarmMessageSubclassRawConstructorOptions) {}\n\n  protected validateOptions(\n    options: ISwarmMessageSubclassRawConstructorOptions\n  ): Error | boolean {\n    if (!options) {\n      return new Error('An options must be provided');\n    }\n    if (typeof options !== 'object') {\n      return new Error('The options must be an object');\n    }\n\n    // const {\n    //     typ: string | number;\n    //     pld: string | Buffer;\n    //     uid: string;\n    //     iss: string;\n    //     k: CryptoKey;\n    // } = options;\n\n    // if (!typ) {\n    //     return new Error();\n    // }\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-raw-constructor/swarm-message-subclass-raw-constructor.types.ts",["1423"],"import CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  TCentralAuthorityUserCryptoCredentials,\n  TCentralAuthorityUserIdentity,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\n/**\n * @property { string | number } typ - type of the message\n * @property { string | Buffer } pld - payload of the message\n * @property { string | CentralAuthorityIdentity } uid - the user identifier\n * @property { string } iss - the issuer service\n * @property { CryptoKey } k - the crypto key used to sign the data\n *\n * @export\n * @interface ISwarmMessageSubclassRawConstructorOptions\n */\nexport interface ISwarmMessageSubclassRawConstructorOptions {\n  typ: string | number;\n  pld: string | Buffer;\n  uid:\n    | TCentralAuthorityUserCryptoCredentials\n    | TCentralAuthorityUserIdentity\n    | ICAUserUniqueIdentifierDescriptionWithOptionalVersion;\n  iss: string;\n  k: CryptoKey;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.ts",["1424","1425","1426","1427","1428","1429"],"import OrbitDB from 'orbit-db';\nimport AccessController from 'orbit-db-access-controllers/src/access-controller-interface';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.const';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions,\n  TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback,\n  ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest,\n} from './swarm-store-connector-orbit-db-subclass-access-controller.types';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport class SwarmStoreConnectorOrbitDBSubclassAccessController<\n  T\n> extends AccessController {\n  // Returns the type of the access controller\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_TYPE;\n  }\n  /**\n   * create and preload an instance\n   * of the SwarmStoreConnectorOrbitDBSubclassAccessController\n   *\n   * @static\n   * @template T\n   * @param {OrbitDB} orbitdb\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>} [options={}]\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public static async create<T>(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ): Promise<SwarmStoreConnectorOrbitDBSubclassAccessController<T>> {\n    return new SwarmStoreConnectorOrbitDBSubclassAccessController<T>(\n      orbitdb,\n      options\n    );\n  }\n\n  // if true then anyone have access\n  // to the database\n  protected _isPublic: boolean = false;\n\n  protected _grantAccessCallback?: TSwarmStoreConnectorOrbitDbAccessConrotllerGrantAccessCallback<\n    T\n  >;\n\n  protected _orbitdb?: OrbitDB;\n\n  protected _options?: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    T\n  >;\n\n  constructor(\n    orbitdb: OrbitDB,\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T> = {}\n  ) {\n    super();\n    this._orbitdb = orbitdb;\n    this.setOptions(options);\n  }\n\n  /**\n   * Called by the databases (the log) to see if entry should\n   * be allowed in the database. Return true if the entry is allowed,\n   * false is not allowed.\n   *\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async canAppend(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      console.warn(\n        `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::entry have an unknown format`\n      );\n      return false;\n    }\n\n    // Write keys and admins keys are allowed\n    const { _options, _isPublic } = this;\n\n    if (_isPublic) {\n      return this.checkAccess(entry, identityProvider);\n    }\n\n    if (!_options) {\n      return false;\n    }\n\n    const { identity } = entry;\n    const { id: userPerformedActionOnEntryId } = identity;\n    const { write: accessListForUsers } = _options;\n\n    // If the ACL contains the writer's public key or it contains '*'\n    if (\n      accessListForUsers &&\n      accessListForUsers.includes(userPerformedActionOnEntryId)\n    ) {\n      return this.checkAccess(entry, identityProvider);\n    }\n    return false;\n  }\n\n  /**\n   *  return manifest params\n   *\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  public async save(): Promise<\n    ISwarmStoreConnectorOrbitDbDatabaseAccessControllerManifest\n  > {\n    return {};\n  }\n\n  /**\n   * check if the entry have the common fields\n   * used to verfy the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {entry is LogEntry<T>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyEntryFormat(entry: LogEntry<T>): entry is LogEntry<T> {\n    if (!entry || typeof entry !== 'object') {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n\n    if (!id) {\n      return false;\n    }\n    if (payload === undefined) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * validate the identiry provided by the entity\n   *\n   * @protected\n   * @param {IdentityJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected verifyIdentity(\n    identity: IdentityJson,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    return (identityProvider as any).verifyIdentity(identity);\n  }\n\n  /**\n   * validate the entity format and\n   * check the access on it for the\n   * identity provided\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async verifyEntity(entry: LogEntry<T>): Promise<boolean> {\n    if (!this.verifyEntryFormat(entry)) {\n      return false;\n    }\n\n    const { identity, payload } = entry;\n    const { id } = identity;\n    const { _grantAccessCallback } = this;\n\n    if (typeof _grantAccessCallback === 'function') {\n      return _grantAccessCallback(payload, id);\n    }\n    return true;\n  }\n\n  /**\n   * validates the enetry and verify the user have\n   * the access on it\n   *\n   * @protected\n   * @param {LogEntry<T>} entry\n   * @param {IdentityProvider} identityProvider\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassAccessController\n   */\n  protected async checkAccess(\n    entry: LogEntry<T>,\n    identityProvider: IdentityProvider\n  ): Promise<boolean> {\n    try {\n      if (!this.verifyEntryFormat(entry)) {\n        return false;\n      }\n\n      const { identity } = entry;\n      const validateIdentityResult = await this.verifyIdentity(\n        identity,\n        identityProvider\n      );\n\n      if (validateIdentityResult !== true) {\n        return false;\n      }\n      return this.verifyEntity(entry);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  protected setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<T>\n  ) {\n    if (options) {\n      const { write, grantAcess } = options;\n\n      if (write instanceof Array) {\n        if (write.includes('*')) {\n          this._isPublic = true;\n        }\n      } else {\n        console.warn(\n          `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::Noone have access on the database`\n        );\n      }\n      if (typeof grantAcess === 'function') {\n        if (grantAcess.length !== 2) {\n          console.warn(\n            `${SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_ACCESS_CONTROLLER_LOG_PREFIX}::A grant access callback must receives 2 arguments generally, but receives ${grantAcess.length}`\n          );\n        }\n        this._grantAccessCallback = grantAcess;\n      }\n      this._options = options;\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.ts",["1430","1431","1432","1433","1434","1435","1436","1437"],"import * as orbitDbModule from 'orbit-db';\nimport OrbitDbFeedStore from 'orbit-db-feedstore';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  ISwarmStoreConnectorOrbitDbDatabaseEvents,\n  ISwarmStoreConnectorOrbitDbDatabaseValue,\n  ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions,\n  TFeedStoreHash,\n} from './swarm-store-connector-orbit-db-subclass-database.types';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  ESwarmConnectorOrbitDbDatabaseEventNames,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX,\n  EOrbidDBFeedSoreEvents,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT,\n} from './swarm-store-connector-orbit-db-subclass-database.const';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport { ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions } from '../swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller.types';\n\nexport class SwarmStoreConnectorOrbitDBDatabase<\n  TFeedStoreType\n> extends EventEmitter<\n  ISwarmStoreConnectorOrbitDbDatabaseEvents<\n    SwarmStoreConnectorOrbitDBDatabase<TFeedStoreType>\n  >\n> {\n  // is loaded fully and ready to use\n  public isReady: boolean = false;\n\n  // whether is closed\n  public isClosed: boolean = false;\n\n  // a name of the database\n  public dbName: string = '';\n\n  private isFullyLoaded: boolean = false;\n\n  public constructor(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>,\n    orbitDb: orbitDbModule.OrbitDB\n  ) {\n    super();\n    this.setOptions(options);\n    this.setOrbitDbInstance(orbitDb);\n  }\n\n  public async connect(): Promise<Error | void> {\n    this.unsetReadyState();\n\n    const dbStoreCreationResult = await this.createDbInstance();\n\n    if (dbStoreCreationResult instanceof Error) {\n      return dbStoreCreationResult;\n    }\n\n    const loadDbResult = await dbStoreCreationResult.load(\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ENTITIES_LOAD_COUNT\n    );\n\n    if ((loadDbResult as unknown) instanceof Error) {\n      console.error(loadDbResult);\n      return this.onFatalError(\n        'The fatal error has occurred on databse loading',\n        'connect'\n      );\n    }\n  }\n\n  public async close(): Promise<Error | void> {\n    const closeCurrentStoreResult = await this.closeCurrentStore();\n\n    this.unsetReadyState();\n    this.isClosed = true;\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, this);\n    this.unsetAllListenersForEvents();\n    if (closeCurrentStoreResult instanceof Error) {\n      return closeCurrentStoreResult;\n    }\n  }\n\n  public async add(value: TFeedStoreType): Promise<string | Error> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hash = await database.add(value);\n\n      if (typeof hash !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value stored'\n        );\n      }\n      return hash;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async get(\n    hash: TFeedStoreHash\n  ): Promise<\n    Error | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType> | void\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    try {\n      const e = database.get(hash);\n\n      if (e instanceof Error) {\n        return new Error('An error has occurred on get the data from the key');\n      }\n      if (e) {\n        return this.parseValueStored(e);\n      }\n    } catch (err) {\n      return err;\n    }\n    return undefined;\n  }\n\n  public async remove(hash: TFeedStoreHash): Promise<Error | void> {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n    try {\n      const hashRemoved = await database.remove(hash);\n\n      if (typeof hashRemoved !== 'string') {\n        return new Error(\n          'An unknown type of hash was returned for the value removed'\n        );\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async iterator(\n    options?: ISwarmStoreConnectorOrbitDbDatabaseIteratorOptions\n  ): Promise<\n    | Error\n    | Array<\n        ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType> | Error | void\n      >\n  > {\n    const database = this.getDbStoreInstance();\n\n    if (database instanceof Error) {\n      return database;\n    }\n\n    const iteratorOptionsRes =\n      options ||\n      SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_ITERATOR_OPTIONS_DEFAULT;\n\n    return database\n      .iterator(iteratorOptionsRes)\n      .collect()\n      .map(this.parseValueStored);\n  }\n\n  protected parseValueStored = (\n    e: LogEntry<TFeedStoreType>\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseValue<TFeedStoreType>\n    | Error\n    | void => {\n    const { payload, identity, hash } = e;\n\n    if (payload) {\n      return {\n        id: identity.id,\n        value: payload.value,\n        hash,\n      };\n    } else {\n      return new Error('An unknown fromat of the data stored');\n    }\n  };\n\n  private getDbStoreInstance(): Error | OrbitDbFeedStore<TFeedStoreType> {\n    const { isReady, database } = this;\n\n    if (!isReady) {\n      return new Error('The store is not ready to use');\n    }\n    if (!database) {\n      return this.emitError('The database store instance is empty');\n    }\n    return database;\n  }\n\n  private setReadyState(isReady: boolean = true) {\n    this.isReady = isReady;\n  }\n\n  private unsetReadyState() {\n    this.setReadyState(false);\n  }\n\n  private options?: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>;\n\n  protected orbitDb?: orbitDbModule.OrbitDB;\n\n  protected database?: OrbitDbFeedStore<TFeedStoreType>;\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(EOrbidDBFeedSoreEvents).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitError(\n    error: Error | string,\n    mehodName?: string,\n    isFatal: boolean = false\n  ): Error {\n    const err = typeof error === 'string' ? new Error() : error;\n    const eventName = isFatal\n      ? ESwarmConnectorOrbitDbDatabaseEventNames.FATAL\n      : ESwarmConnectorOrbitDbDatabaseEventNames.ERROR;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(eventName, err);\n    return err;\n  }\n\n  protected onFatalError(error: Error | string, methodName: string) {\n    this.unsetReadyState();\n    this.emitError(error, methodName, true);\n\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.close();\n    }\n    return this.emitError(\n      'The database closed cause a fatal error',\n      methodName,\n      true\n    );\n  }\n\n  protected emitEvent(\n    event: ESwarmConnectorOrbitDbDatabaseEventNames,\n    ...args: any[]\n  ) {\n    const { options } = this;\n    const { dbName } = options!;\n\n    this.emit(event, dbName, ...args);\n  }\n\n  private getFeedStoreOptions(): IStoreOptions | undefined | Error {\n    return SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION;\n  }\n\n  private emitFullyLoaded() {\n    if (!this.isFullyLoaded) {\n      this.isFullyLoaded = true;\n      this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.LOADING, 100);\n    }\n  }\n\n  protected logStore = () => {\n    const { database } = this;\n    const posts = database!.iterator({ limit: -1 }).collect();\n\n    console.log('STORE::READY--');\n    posts.forEach((post: any) => {\n      if (post && post.identity) {\n        console.log(post.identity.id);\n      }\n    });\n    console.log('--STORE::READY');\n  };\n\n  private handleFeedStoreReady = () => {\n    this.emitFullyLoaded();\n    this.setReadyState();\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.READY);\n    this.logStore();\n  };\n\n  private handleFeedStoreLoaded = () => {\n    // emit event that the database local copy was fully loaded\n    this.emitFullyLoaded();\n  };\n\n  private handleFeedStoreLoadProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    total: number\n  ) => {\n    // emit event database local copy loading progress\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.LOADING, progress);\n  };\n\n  private handleFeedStoreReplicated = () => {\n    // emit event that the db updated, cause it\n    // was replicated with another peer db copy\n    const { dbName } = this;\n\n    this.emitEvent(ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE, dbName);\n    this.logStore();\n  };\n\n  private handleFeedStoreClosed = () => {\n    const { isClosed } = this;\n\n    if (!isClosed) {\n      this.unsetReadyState();\n      this.emitError(\n        'The instance was closed unexpected',\n        'handleFeedStoreClosed'\n      );\n      this.restartStore();\n    }\n  };\n\n  private async closeInstanceOfStore(\n    storeInstance: OrbitDbFeedStore<TFeedStoreType>\n  ): Promise<Error | void> {\n    if (!storeInstance) {\n      return new Error('An instance of the store must be specified');\n    }\n    this.unsetFeedStoreEventListeners(storeInstance);\n    try {\n      await storeInstance.close();\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Fatal error has occurred on close the instance of the Feed store'\n      );\n    }\n  }\n\n  private async closeCurrentStore(): Promise<Error | void> {\n    const { database } = this;\n\n    if (database) {\n      const closeStoreResult = await this.closeInstanceOfStore(database);\n\n      if (closeStoreResult instanceof Error) {\n        console.error(closeStoreResult);\n        return new Error(\n          'Failed to close the current instance of the Database store'\n        );\n      }\n      this.database = undefined;\n    }\n  }\n\n  // restart the store\n  private async restartStore(): Promise<Error | void> {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The store was closed previousely');\n    }\n\n    const currentStoreStopResult = await this.closeCurrentStore();\n\n    if (currentStoreStopResult instanceof Error) {\n      console.error(currentStoreStopResult);\n      return this.onFatalError(\n        'Failed to restart the Database cause failed to close the store instance',\n        'restartStore'\n      );\n    }\n    return this.connect();\n  }\n\n  private handleFeedStoreReplicateInProgress = (\n    address: string,\n    hash: string,\n    entry: LogEntry<TFeedStoreType>,\n    progress: number,\n    have: unknown\n  ) => {\n    console.warn(`handleFeedStoreReplicateInProgress::\n            addr: ${address}\n            hash: ${hash}\n            progress: ${progress}\n        `);\n    this.logStore();\n  };\n\n  private setFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>,\n    isSet = true\n  ): Error | void {\n    if (!feedStore) {\n      return new Error('An instance of the FeedStore must be specified');\n    }\n    if (!feedStore.events) {\n      return new Error('An unknown API of the FeedStore');\n    }\n    if (\n      typeof feedStore.events.addListener !== 'function' ||\n      typeof feedStore.events.removeListener !== 'function'\n    ) {\n      return new Error('An unknown API of the FeedStore events');\n    }\n\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.READY,\n      this.handleFeedStoreReady\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD,\n      this.handleFeedStoreLoaded\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.LOAD_PROGRESS,\n      this.handleFeedStoreLoadProgress\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATED,\n      this.handleFeedStoreReplicated\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.CLOSE,\n      this.handleFeedStoreClosed\n    );\n    feedStore.events[methodName](\n      EOrbidDBFeedSoreEvents.REPLICATE_PROGRESS,\n      this.handleFeedStoreReplicateInProgress\n    );\n  }\n\n  private unsetFeedStoreEventListeners(\n    feedStore: OrbitDbFeedStore<TFeedStoreType>\n  ) {\n    this.setFeedStoreEventListeners(feedStore, false);\n  }\n\n  private getAccessControllerOptions(): ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<\n    TFeedStoreType\n  > {\n    const { options } = this;\n    const resultedOptions: ISwarmStoreConnectorOrbitDbDatabaseAccessControllerOptions<TFeedStoreType> = {\n      type: SwarmStoreConnectorOrbitDBSubclassAccessController.type,\n    };\n\n    if (!options) {\n      return resultedOptions;\n    }\n\n    const { isPublic, write, grantAcess } = options;\n\n    if (isPublic) {\n      resultedOptions.write = ['*'];\n    } else if (write instanceof Array) {\n      resultedOptions.write = write.filter(\n        (identity) => identity && typeof identity === 'string'\n      );\n    }\n    if (typeof grantAcess === 'function') {\n      if (grantAcess.length !== 2) {\n        console.warn(\n          'The grant access callback function must have 2 arguments'\n        );\n      }\n      resultedOptions.grantAcess = grantAcess;\n    }\n    return resultedOptions;\n  }\n\n  private async createDbInstance(): Promise<\n    Error | OrbitDbFeedStore<TFeedStoreType>\n  > {\n    try {\n      const { orbitDb, options } = this;\n\n      if (!orbitDb) {\n        return this.onFatalError(\n          'There is no intance of the OrbitDb is specified',\n          'createDbInstance'\n        );\n      }\n\n      const { dbName } = options!;\n\n      if (!dbName) {\n        return this.onFatalError(\n          'A name of the database must be specified',\n          'createDbInstance'\n        );\n      }\n\n      const dbFeedStoreOptions = this.getFeedStoreOptions();\n\n      if (dbFeedStoreOptions instanceof Error) {\n        return this.onFatalError(\n          dbFeedStoreOptions,\n          'createDbInstance::getFeedStoreOptions'\n        );\n      }\n\n      const db = await orbitDb.feed<TFeedStoreType>(dbName, {\n        ...SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONFIGURATION,\n        accessController: this.getAccessControllerOptions(),\n      });\n\n      if (db instanceof Error) {\n        return this.onFatalError(db, 'createDbInstance::feed store creation');\n      }\n\n      const setStoreListenersResult = this.setFeedStoreEventListeners(db);\n\n      if (setStoreListenersResult instanceof Error) {\n        return this.onFatalError(\n          setStoreListenersResult,\n          'createDbInstance::set feed store listeners'\n        );\n      }\n      this.database = db;\n      return db;\n    } catch (err) {\n      return this.onFatalError(err, 'createDbInstance');\n    }\n  }\n\n  private setOptions(\n    options: ISwarmStoreConnectorOrbitDbDatabaseOptions<TFeedStoreType>\n  ): void | Error {\n    if (!options) {\n      return this.onFatalError('Options must be specified', 'setOptions');\n    }\n\n    const { dbName } = options;\n\n    if (typeof dbName !== 'string') {\n      return this.onFatalError(\n        'A name of the database must be specified',\n        'setOptions'\n      );\n    }\n    this.options = options;\n    this.dbName = dbName;\n  }\n\n  private setOrbitDbInstance(orbitDb: orbitDbModule.OrbitDB): void | Error {\n    if (!orbitDb) {\n      return this.onFatalError(\n        'An instance of orbit db must be specified',\n        'setOrbitDbInstance'\n      );\n    }\n    this.orbitDb = orbitDb;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider.ts",["1438","1439","1440","1441","1442","1443"],"import KeystoreClass, { Keystore } from 'orbit-db-keystore';\nimport {\n  IdentityProvider,\n  IdentityProviderOptions,\n  IdentityAsJson,\n} from 'orbit-db-identity-provider';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE } from './swarm-store-connector-orbit-db-subclass-identity-provider.const';\n\nexport class SwarmStoreConnectorOrbitDBSubclassIdentityProvider extends IdentityProvider {\n  /**\n   * return name of the identity provider\n   *\n   * @readonly\n   * @static\n   * @type {string}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static get type(): string {\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCLASS_IDENTITY_PROVIDER_TYPE;\n  }\n\n  /**\n   * Verify that identity was signed by the ID\n   *\n   * @static\n   * @param {IdentityAsJson} identity\n   * @returns {Promise<boolean>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   */\n  public static async verifyIdentity(\n    identity: IdentityAsJson\n  ): Promise<boolean> {\n    const verifyResult = await KeystoreClass.verify(\n      identity.signatures.publicKey,\n      identity.publicKey,\n      identity.publicKey + identity.signatures.id\n    );\n\n    return verifyResult;\n  }\n\n  protected _keystore?: Keystore;\n\n  constructor(options: IdentityProviderOptions = {}) {\n    super(options);\n    if (!options.keystore) {\n      throw new Error(\n        'IdentityProvider.createIdentity requires options.keystore'\n      );\n    }\n    if (!options.signingKeystore) {\n      options.signingKeystore = options.keystore;\n    }\n    this._keystore = options.signingKeystore;\n  }\n\n  /**\n   * return identifier of external id (eg. a public key)\n   *\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<string>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async getId(options: IdentityProviderOptions = {}): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n    return id;\n  }\n\n  /**\n   * return a signature of data (signature of the OrbtiDB public key)\n   *\n   * @param {*} data\n   * @param {IdentityProviderOptions} [options={}]\n   * @returns {Promise<any>}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n   * @throws Error\n   */\n  async signIdentity(\n    data: any,\n    options: IdentityProviderOptions = {}\n  ): Promise<string> {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const { _keystore: keystore } = this;\n    const key = await keystore!.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    const result = await (keystore! as any).sign(key, data);\n\n    return result;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-cache/swarm-store-connector-orbit-db-subclass-storage-cache.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.ts",["1444"],"import {\n  ISecretStorageOptions,\n  ISecretStoreCredentials,\n  ISecretStoreCredentialsCryptoKey,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  IOrbitDbCacheStore,\n  IOrbitDbKeystoreStore,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types';\nimport {\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE,\n  SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS,\n} from './swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { TCallbackError, TCallbackErrorValue } from 'orbit-db-cache';\n\nexport class SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n  implements IOrbitDbKeystoreStore, IOrbitDbCacheStore {\n  public get status(): SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS {\n    const { isClose } = this;\n\n    if (isClose) {\n      return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE;\n    }\n    return SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN;\n  }\n\n  /**\n   * this is used in the Cache(orbit-db-cache) in status\n   * ` get status () { return this._store.db.status } `\n   *\n   * @readonly\n   * @type {{ status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS }}\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   */\n  public get db() {\n    return {\n      status: this.status,\n    };\n  }\n\n  protected options?: ISecretStorageOptions;\n\n  protected secretStorage?: InstanceType<typeof SecretStorage>;\n\n  private credentials?: ISecretStoreCredentials;\n\n  private credentialsCryptoKey?: ISecretStoreCredentialsCryptoKey;\n\n  protected isOpen: boolean = false;\n\n  protected isClose: boolean = false;\n\n  constructor(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey,\n    options: Required<ISecretStorageOptions>\n  ) {\n    this.setOptions(options);\n    this.setCredentials(credentials);\n    this.createSecretStorage();\n  }\n\n  public async open(cb?: TCallbackError): Promise<void> {\n    const { isClose, isOpen } = this;\n\n    if (isClose) {\n      throw new Error('The instance was closed before');\n    }\n    if (isOpen) {\n      return;\n    }\n\n    const result = await this.startSecretStorage();\n\n    if (result instanceof Error) {\n      throw result;\n    }\n    this.setIsOpen();\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public async close(cb?: TCallbackError): Promise<void> {\n    this.setIsClose();\n\n    const result = await this.disconnectSecretStorage();\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public async get(\n    k: string,\n    cb?: TCallbackErrorValue\n  ): Promise<string | undefined> {\n    // open connection to the secret storage\n    // before any operations\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const result = await secretStorage.get(k);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    const resulted = result ? result : undefined;\n    if (typeof cb === 'function') {\n      cb(undefined, resulted);\n    }\n    return resulted;\n  }\n\n  public async put(\n    k: string,\n    v: string | Buffer,\n    cb?: TCallbackError\n  ): Promise<void> {\n    await this.openIfNecessary();\n\n    const secretStorage = this.getSecretStorage();\n\n    if (secretStorage instanceof Error) {\n      console.error(secretStorage);\n      throw secretStorage;\n    }\n\n    const value = v instanceof Buffer ? v.toString() : v;\n    const result = await secretStorage.set(k, value);\n\n    if (result instanceof Error) {\n      console.error(result);\n      throw result;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined);\n    }\n  }\n\n  public del(key: string, cb?: TCallbackError) {\n    return this.put(key, '', cb);\n  }\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async load() {}\n\n  // TODO - not implemented in ocrbit-db-cache\n  public async destroy() {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      await this.disconnectSecretStorage();\n    }\n  }\n\n  protected setIsOpen() {\n    this.isOpen = true;\n  }\n\n  protected setIsClose() {\n    this.isClose = true;\n  }\n\n  protected getSecretStorage(): Error | SecretStorage {\n    const { secretStorage } = this;\n\n    if (secretStorage) {\n      return secretStorage;\n    }\n    return new Error('There is no connection to the SecretStorage');\n  }\n\n  protected setOptions(options: Required<ISecretStorageOptions>): void {\n    if (!options) {\n      throw new Error('Options must be provided');\n    }\n    if (typeof options !== 'object') {\n      throw new Error('Options must be an object');\n    }\n\n    const { dbName } = options;\n\n    if (!dbName) {\n      throw new Error('A database name must be specified in the options');\n    }\n    if (typeof dbName !== 'string') {\n      throw new Error('A database name must be a string');\n    }\n    this.options = options;\n  }\n\n  /**\n   * validate and set credentials with password or crypto key\n   *\n   * @protected\n   * @param {(ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey)} credentials\n   * @memberof SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter\n   * @throws\n   */\n  protected setCredentials(\n    credentials: ISecretStoreCredentials | ISecretStoreCredentialsCryptoKey\n  ) {\n    if (!credentials) {\n      throw new Error('Credentials must be specified');\n    }\n    if (typeof credentials !== 'object') {\n      throw new Error('Credentials must be an object');\n    }\n\n    if ((credentials as ISecretStoreCredentialsCryptoKey).key) {\n      const credentialsValidationResult = SecretStorage.validateCryptoKeyCredentials(\n        credentials as ISecretStoreCredentialsCryptoKey\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::crypto credentials not valid');\n      }\n      this.credentialsCryptoKey = credentials as ISecretStoreCredentialsCryptoKey;\n    } else if ((credentials as ISecretStoreCredentials).password) {\n      const credentialsValidationResult = SecretStorage.validateCredentials(\n        credentials as ISecretStoreCredentials\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        throw new Error('setCredentials::credentials not valid');\n      }\n      this.credentials = credentials as ISecretStoreCredentials;\n    }\n  }\n\n  protected unsetCredentials() {\n    this.credentials = undefined;\n  }\n\n  private createSecretStorage() {\n    const secretStorage = new SecretStorage(\n      SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_DEFAULT_OPTIONS_SECRET_STORAGE\n    );\n\n    this.secretStorage = secretStorage;\n  }\n\n  private unsetSecretStorage() {\n    this.secretStorage = undefined;\n  }\n\n  private startSecretStorage(): Promise<Error | boolean> | Error {\n    const { options, credentials, secretStorage, credentialsCryptoKey } = this;\n\n    if (secretStorage) {\n      if (credentialsCryptoKey) {\n        return secretStorage.authorizeByKey(credentialsCryptoKey, options);\n      } else if (credentials) {\n        return secretStorage.authorize(credentials, options);\n      }\n      return new Error('Credentials was not provided');\n    }\n    return new Error('Secret storage is not defined');\n  }\n\n  private async disconnectSecretStorage(): Promise<Error | void> {\n    const { secretStorage } = this;\n\n    if (!secretStorage) {\n      return new Error(\n        'There is no instance of the SecretStorage connected to'\n      );\n    }\n    try {\n      const result = await secretStorage.disconnect();\n\n      if (result instanceof Error) {\n        return result;\n      }\n    } catch (err) {\n      return err;\n    }\n    this.unsetSecretStorage();\n  }\n\n  protected async openIfNecessary(): Promise<void> {\n    const { isOpen } = this;\n\n    if (isOpen) {\n      return;\n    }\n    await this.open();\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const.ts",["1445"],"import { SwarmStoreConnectorOrbitDBSubclassIdentityProvider } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider';\nimport { IdentityProvider } from 'orbit-db-identity-provider';\n\nexport enum ESwarmStoreConnectorOrbitDBEventNames {\n  /**\n   * fired before connecting to the swarm\n   */\n  CONNECTING = 'CONNECTING',\n  /**\n   * firing on the ready state change\n   * if the 'isReady' flag is true\n   * then the instance can be used to read\n   * a data from the database, if the flag\n   * is false, then the instance can be used\n   * to read/write a data.\n   * */\n  STATE_CHANGE = 'STATE_CHANGE',\n  /**\n   * a data was updated in the database and must\n   * be query to get a a new results.\n   * Arguments:\n   * 1) String - name of the database\n   */\n  UPDATE = 'UPDATE',\n  /**\n   * emit when connection to the\n   * database was opened\n   * arguments:\n   * 1) dbName = name of a database opened\n   */\n  READY = 'READY',\n  /**\n   * the instance closed and can't be used\n   * to read/write\n   */\n  CLOSE = 'CLOSE',\n  /**\n   * the instance closed and can't be used\n   * to read/write\n   * * Arguments:\n   * 1) string - name of the database closed\n   * 2) object - instance closed\n   */\n  CLOSE_DATABASE = 'CLOSE_DATABASE',\n  /**\n   * emitted when loading the database from the local data\n   * Arguments:\n   * 1) Number - percentage\n   */\n  LOADING = 'LOADING',\n  /**\n   * an error has occured on any operation\n   * emits with the argument equals to an error\n   */\n  ERROR = 'ERROR',\n}\n\n/**\n * time out before the connection to the swarm throught\n * an ipfs will be timed out\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS = 120000;\n\n/**\n * timeout for open a single database\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS = 30000;\n\n/**\n * maximum attempts to open connection with the database\n */\nexport const SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX = 3;\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE =\n  SwarmStoreConnectorOrbitDBSubclassIdentityProvider.type;\n\n// prefix used in logs\nexport const SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX =\n  'SwarmStoreConnctotOrbitDB';\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME =\n  '___SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME';\n\nexport const SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY =\n  'SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY';\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.ts",["1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464"],"import OrbitDB from 'orbit-db';\nimport Identities from 'orbit-db-identity-provider';\nimport AccessControllers from 'orbit-db-access-controllers';\nimport { Keystore } from 'orbit-db-keystore';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  ESwarmStoreConnectorOrbitDBEventNames,\n  SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS,\n  SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX,\n  SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME,\n  SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY,\n} from './swarm-store-connector-orbit-db.const';\nimport { IPFS } from 'types/ipfs.types';\nimport { SwarmStoreConnectorOrbitDBSubclassIdentityProvider } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-identity-provider/swarm-store-connector-orbit-db-subclass-identity-provider';\nimport { SwarmStoreConnectorOrbitDBSubclassAccessController } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-access-controller/swarm-store-connector-orbit-db-subclass-access-controller';\nimport {\n  ISwarmStoreConnectorOrbitDBOptions,\n  ISwarmStoreConnectorOrbitDBConnectionOptions,\n  TESwarmStoreConnectorOrbitDBEvents,\n} from './swarm-store-connector-orbit-db.types';\nimport { timeout, delay } from 'utils/common-utils/common-utils-timer';\nimport { SwarmStoreConnectorOrbitDBDatabase } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database';\nimport {\n  ISwarmStoreConnectorOrbitDbDatabaseOptions,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodNames,\n  TSwarmStoreConnectorOrbitDbDatabaseMathodArgument,\n} from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { ESwarmConnectorOrbitDbDatabaseEventNames } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.const';\nimport { commonUtilsArrayDeleteFromArray } from 'utils/common-utils/common-utils';\nimport {\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF,\n  COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS,\n} from 'const/common-values/common-values';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStorageConnectorOrbitDBSublassKeyStore } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-keystore/swarm-store-connector-orbit-db-subclass-keystore';\nimport { ISwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric.types';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from './swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport class SwarmStoreConnectorOrbitDB<\n  ISwarmDatabaseValueTypes\n> extends EventEmitter<TESwarmStoreConnectorOrbitDBEvents> {\n  private static isLoadedCustomIdentityProvider: boolean = false;\n\n  private static loadCustomIdentityProvider() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider) {\n      Identities.addIdentityProvider(\n        SwarmStoreConnectorOrbitDBSubclassIdentityProvider\n      );\n      SwarmStoreConnectorOrbitDB.isLoadedCustomIdentityProvider = true;\n    }\n  }\n\n  private static isLoadedCustomAccessController: boolean = false;\n\n  private static loadCustomAccessController() {\n    if (!SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController) {\n      AccessControllers.addAccessController({\n        AccessController: SwarmStoreConnectorOrbitDBSubclassAccessController,\n      });\n      SwarmStoreConnectorOrbitDB.isLoadedCustomAccessController = true;\n    }\n  }\n\n  public isReady: boolean = false;\n\n  public isClosed: boolean = false;\n\n  protected userId: string = '';\n\n  protected directory: string = SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DIRECTORY;\n\n  protected identity?: any;\n\n  protected connectionOptions?: ISwarmStoreConnectorOrbitDBConnectionOptions;\n\n  protected options?: ISwarmStoreConnectorOrbitDBOptions<\n    ISwarmDatabaseValueTypes\n  >;\n\n  protected ipfs?: IPFS; // instance of the IPFS connected through\n\n  protected orbitDb?: OrbitDB; // instance of the OrbitDB\n\n  protected databases: SwarmStoreConnectorOrbitDBDatabase<\n    ISwarmDatabaseValueTypes\n  >[] = [];\n\n  protected identityKeystore?: Keystore;\n\n  protected storage?: ISwarmStoreConnectorOrbitDBSubclassStorageFabric;\n\n  public constructor(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    super();\n    SwarmStoreConnectorOrbitDB.loadCustomIdentityProvider();\n    SwarmStoreConnectorOrbitDB.loadCustomAccessController();\n    this.applyOptions(options);\n  }\n\n  /**\n     * waiting for the connection to the swarm, load the database locally\n     * and ready to use it\n    /**\n     *\n     *\n     * @param {ISwarmStoreConnectorOrbitDBConnectionOptions} connectionOptions\n     * @returns {(Promise<void | Error>)}\n     * @memberof SwarmStoreConnectorOrbitDB\n     */\n  public async connect(\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): Promise<void | Error> {\n    const resultCreateIdentity = await this.createIdentity();\n\n    if (resultCreateIdentity instanceof Error) {\n      console.error(resultCreateIdentity);\n      return this.emitError('Failed to create an identity');\n    }\n\n    const disconnectFromSwarmResult = await this.disconnectFromSwarm();\n\n    if (disconnectFromSwarmResult instanceof Error) {\n      return disconnectFromSwarmResult;\n    }\n\n    const setConnectionOptionsResult = this.setConnectionOptions(\n      connectionOptions\n    );\n\n    if (setConnectionOptionsResult instanceof Error) {\n      return setConnectionOptionsResult;\n    }\n\n    const connectToSwarmResult = await this.connectToSwarm();\n\n    if (connectToSwarmResult instanceof Error) {\n      return connectToSwarmResult;\n    }\n\n    // close the current connections to the databases if exists\n    const closeExistingDatabaseesOpened = await this.closeDatabases();\n\n    if (closeExistingDatabaseesOpened instanceof Error) {\n      return this.emitError(closeExistingDatabaseesOpened, 'openDatabases');\n    }\n\n    // stop the current instance of OrbitDB\n    // if it exists\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n\n    if (stopOrbitDBResult instanceof Error) {\n      return stopOrbitDBResult;\n    }\n\n    // create a new OrbitDB instance\n    const createOrbitDbResult = await this.createOrbitDBInstance();\n\n    if (createOrbitDbResult instanceof Error) {\n      return createOrbitDbResult;\n    }\n\n    // create OrbitDB databases\n    const createDatabases = await this.openDatabases();\n\n    if (createDatabases instanceof Error) {\n      return createDatabases;\n    }\n    // set the database is ready to query\n    this.setIsReady(true);\n  }\n\n  public openDatabase = async (\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    openAttempt: number = 0,\n    checkOptionsIsExists: boolean = true\n  ): Promise<void | Error> => {\n    const { orbitDb, isClosed } = this;\n\n    if (!orbitDb) {\n      return new Error('There is no instance of OrbitDB');\n    }\n    if (isClosed) {\n      return new Error(\"Can't open a database for the connection opened\");\n    }\n\n    // add options in the main setting only\n    // if options are not exists already\n    // in the list. If options are exists\n    // this may mean that the database was\n    // opened but still not ready to use and\n    // waiting when it will be ready to use.\n    const checkDbOptionsResult = checkOptionsIsExists\n      ? this.setDbOptionsIfNotExists(dbOptions)\n      : this.setDbOptions(dbOptions);\n\n    // options checked and set for valid\n    // calculation of the progress percent\n    if (checkDbOptionsResult instanceof Error) {\n      return checkDbOptionsResult;\n    }\n\n    const { dbName } = dbOptions;\n    const db = this.getDbConnectionExists(dbName);\n\n    if (db) {\n      this.unsetOptionsForDatabase(dbName);\n      return new Error(`A database named as ${dbName} is already exists`);\n    }\n\n    const database = new SwarmStoreConnectorOrbitDBDatabase<\n      ISwarmDatabaseValueTypes\n    >(dbOptions, orbitDb);\n\n    this.setListenersDatabaseEvents(database);\n\n    const databaseOpenResult = await this.waitDatabaseOpened(database);\n\n    if (databaseOpenResult instanceof Error) {\n      await this.closeDatabase(database); // close the connection to the database\n      await delay(300);\n      if (\n        openAttempt >\n        SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_RECONNECTION_ATTEMPTS_MAX\n      ) {\n        return this.handleErrorOnDbOpen(\n          database,\n          'The max nunmber of connection attempts has reached'\n        );\n      }\n\n      const openDatabaseResult = await this.openDatabase(\n        dbOptions,\n        (openAttempt += 1)\n      );\n\n      if (openDatabaseResult instanceof Error) {\n        return this.handleErrorOnDbOpen(database, openDatabaseResult);\n      }\n    }\n    this.databases.push(database);\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.READY, dbOptions.dbName);\n  };\n\n  public async closeDb(dbName: string): Promise<Error | void> {\n    const db = this.getDbConnection(dbName);\n\n    if (db) {\n      return this.closeDatabase(db);\n    }\n    return new Error(`The database named ${dbName} was not found`);\n  }\n\n  /**\n   * make a request to a database by it's name\n   * and a method to execute\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public request = async (\n    dbName: string,\n    dbMethod: TSwarmStoreConnectorOrbitDbDatabaseMathodNames,\n    arg: TSwarmStoreConnectorOrbitDbDatabaseMathodArgument<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<Error | any> => {\n    const { isClosed } = this;\n\n    if (isClosed) {\n      return new Error('The Swarm connection was closed');\n    }\n\n    const dbConnection = await this.waitingDbOpened(dbName);\n\n    if (dbConnection instanceof Error) {\n      console.error(dbConnection);\n      return this.emitError(\n        new Error('Failed to get an opened connection to the database')\n      );\n    }\n    return dbConnection[dbMethod](arg as any);\n  };\n\n  /**\n   * close all connections with databases\n   * and the Swarm store\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  public close = async (): Promise<Error | void> => {\n    this.setIsClosed();\n\n    const closeAllDatabasesResult = await this.closeDatabases();\n    const stopOrbitDBResult = await this.stopOrbitDBInsance();\n    let err;\n\n    if (closeAllDatabasesResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close all databases connections');\n    }\n    if (stopOrbitDBResult instanceof Error) {\n      err = true;\n      console.error(closeAllDatabasesResult);\n      this.emitError('Failed to close the current instanceof OrbitDB');\n    }\n    this.unsetAllListenersForEvents();\n    if (err) {\n      return this.emitError(\n        'Failed to close normally the connection to the swarm store'\n      );\n    }\n  };\n  protected setIsClosed = () => {\n    this.setNotReady();\n    this.isClosed = true;\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.CLOSE);\n  };\n\n  /**\n   * return an opened connection with the database by it's name\n   * if exists and undefined if it is not exists\n   * @readonly\n   * @protected\n   * @type {(SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void)}\n   * @memberof SwarmStoreConnctotOrbitDB\n   */\n  protected getDbConnection = (\n    dbName: string,\n    checkIsOpen: boolean = true\n  ): SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes> | void => {\n    const { databases } = this;\n\n    return databases.find((db) => {\n      return (\n        db &&\n        db.dbName === dbName &&\n        (!checkIsOpen || (!db.isClosed && !!db.isReady))\n      );\n    });\n  };\n\n  /**\n   * returns a database if exists into the list\n   * of the databases which were opened.\n   * This method do not check whether db\n   * closed and ready.\n   * @protected\n   * @param {string} dbName\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getDbConnectionExists(dbName: string) {\n    return this.getDbConnection(dbName, false);\n  }\n\n  protected handleDbClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): void {\n    if (database) {\n      const { dbName } = database;\n\n      this.unsetListenersDatabaseEvents(database);\n      this.unsetOptionsForDatabase(dbName);\n      this.deleteDatabaseFromList(database);\n    }\n  }\n\n  protected handleErrorOnDbOpen(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    error: Error | string\n  ): Error {\n    if (database) {\n      const { dbName } = database;\n\n      this.handleDbClose(database);\n      console.error(\n        `An error has occurred while database named ${dbName} opening`\n      );\n      console.error(error);\n    }\n    return this.emitError(error);\n  }\n\n  /**\n   * waiting till connection to the database\n   * will be opened or failed. If a db will\n   * not be ready during a timeout return error.\n   * @protected\n   * @param {string} dbName\n   * @returns {(Promise<Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected async waitingDbOpened(\n    dbName: string\n  ): Promise<\n    Error | SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  > {\n    const { getDbConnection } = this;\n    const db = getDbConnection(dbName);\n\n    if (db) {\n      return db;\n    } else {\n      const removeListener = this.removeListener.bind(this);\n\n      return new Promise((res) => {\n        let timeout: undefined | NodeJS.Timer;\n        function removeListners() {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          removeListener(\n            ESwarmConnectorOrbitDbDatabaseEventNames.READY,\n            onReady\n          );\n          removeListener(\n            ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n            onClose\n          );\n        }\n        function onReady(dbNameReady: string) {\n          if (dbNameReady === dbName) {\n            const db = getDbConnection(dbName);\n\n            if (db) {\n              removeListners();\n              res(db);\n            }\n          }\n        }\n        function onClose() {\n          removeListners();\n          res(new Error('The Swarm store was closed'));\n        }\n\n        timeout = setTimeout(() => {\n          removeListners();\n          res(new Error());\n        }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n        this.once(ESwarmConnectorOrbitDbDatabaseEventNames.READY, onReady);\n        this.once(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, onClose);\n      });\n    }\n  }\n\n  protected unsetAllListenersForEvents = () => {\n    Object.values(ESwarmStoreConnectorOrbitDBEventNames).forEach(\n      this[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_UNSET_ALL_LISTENERS].bind(\n        this\n      )\n    );\n  };\n\n  protected emitDatabaseClose(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (database) {\n      const { dbName } = database;\n\n      console.warn(`Database named ${dbName} was closed`);\n      this.emit(\n        ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE,\n        dbName,\n        database\n      );\n    }\n  }\n\n  protected emitError(error: Error | string, mehodName?: string): Error {\n    const err = typeof error === 'string' ? new Error(error) : error;\n\n    console.error(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::error${\n        mehodName ? `::${mehodName}` : ''\n      }`,\n      err\n    );\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.ERROR, err);\n    return err;\n  }\n\n  private setIsReady(isReady: boolean = false) {\n    this.isReady = isReady;\n    this.emit(ESwarmStoreConnectorOrbitDBEventNames.STATE_CHANGE, isReady);\n  }\n\n  /**\n   * set the flag this instance\n   * is not ready to make a\n   * request to databases\n   * @protected\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setReady() {\n    this.setIsReady(true);\n  }\n\n  protected setNotReady() {\n    this.setIsReady(false);\n  }\n\n  /**\n   * delete the database from the list\n   * of opened databases\n   * @protected\n   * @param {SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>} database\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected deleteDatabaseFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    const { databases } = this;\n\n    if (databases && databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(databases, database);\n    }\n  }\n\n  protected checkDbOptions(\n    options: unknown\n  ): options is ISwarmStoreConnectorOrbitDbDatabaseOptions<\n    ISwarmDatabaseValueTypes\n  > {\n    if (options != null && typeof options === 'object') {\n      const { dbName } = options as { dbName: string };\n\n      return !!dbName && typeof dbName === 'string';\n    }\n    return false;\n  }\n\n  /**\n   * apply options provided for the\n   * instance\n   *\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDBOptions} options\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error - throw an error if the options are not valid\n   */\n  private applyOptions(\n    options: ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>\n  ) {\n    if (!options || typeof options !== 'object') {\n      throw new Error('The options must be an object');\n    }\n\n    this.options = options;\n\n    const { id, credentials, directory } = options;\n\n    if (!id) {\n      console.warn(new Error('The user id is not provided'));\n    } else {\n      this.userId = id;\n    }\n    if (typeof directory === 'string') {\n      this.directory = directory;\n    }\n    if (credentials) {\n      // if credentials provided, then\n      // create the secret keystorage\n      this.createIdentityKeystores(credentials);\n      // create secret storage fabric\n      this.createStorage(credentials);\n    }\n  }\n\n  /**\n   * create keystores for identity provider\n   * throw an error if not valid\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @returns {void}\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws Error\n   */\n  private createIdentityKeystores(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    const validateCredentialsResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (validateCredentialsResult instanceof Error) {\n      console.error(validateCredentialsResult);\n      throw new Error(\n        'createIdentityKeystores::credentials provided are not valid'\n      );\n    }\n\n    const { directory, userId } = this;\n    const identityKeystorePrefix = `${directory}/${userId}`;\n    const identityKeystore = this.createKeystore(\n      credentials,\n      identityKeystorePrefix\n    );\n\n    if (identityKeystore instanceof Error) {\n      console.error(identityKeystore);\n      throw new Error('Failed on create identity keystore');\n    }\n    this.identityKeystore = identityKeystore;\n  }\n\n  /**\n   * create a Storage fabric which is\n   * used by the OrbitDB instance\n   * to generate Cache for a\n   * Keystore and various databases\n   * to read/write values from the\n   * local persistent Cache\n   *\n   * @private\n   * @param {(ISwarmStoreConnectorOrbitDBOptions<ISwarmDatabaseValueTypes>)['credentials']} credentials\n   * @memberof SwarmStoreConnectorOrbitDB\n   * @throws\n   */\n  private createStorage(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials']\n  ): void {\n    const validateCredentialsResult = SecretStorage.validateCredentials(\n      credentials\n    );\n\n    if (validateCredentialsResult instanceof Error) {\n      console.error(validateCredentialsResult);\n      throw new Error(\n        'createIdentityKeystores::credentials provided are not valid'\n      );\n    }\n\n    this.storage = new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n      credentials!\n    );\n  }\n\n  protected createKeystore(\n    credentials: ISwarmStoreConnectorOrbitDBOptions<\n      ISwarmDatabaseValueTypes\n    >['credentials'],\n    keystoreNamePrefix?: string\n  ): Keystore | Error {\n    const keystoreName = `${keystoreNamePrefix ||\n      ''}${SWARM_STORE_CONNECTOR_ORBITDB_KEYSTORE_DEFAULT_DBNAME}`;\n\n    if (!credentials) {\n      return this.emitError('createKeystore::A Credentials must be provided');\n    }\n    return new SwarmStorageConnectorOrbitDBSublassKeyStore({\n      credentials,\n      store: keystoreName,\n    });\n  }\n\n  /**\n   * create identity for the user. If the userid\n   * is provided then the identity will be created\n   * by the value of the user id.\n   *\n   * @private\n   * @returns {(Promise<Error | void>)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private async createIdentity(): Promise<Error | void> {\n    const { userId } = this;\n\n    try {\n      const identity = await Identities.createIdentity({\n        type: SWARM_STORE_CONNECTOR_ORBITDB_IDENTITY_TYPE,\n        id: userId ? userId : undefined,\n        keystore: this.identityKeystore,\n      });\n\n      if (!userId) {\n        this.userId = identity.id;\n        console.warn(`The user id created automatically is ${userId}`);\n      }\n      if (identity instanceof Error) {\n        return identity;\n      }\n      this.identity = identity;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  /**\n   * return index of the options\n   * for a database name is exists\n   * in the main databases options\n   * (in this.options.databases)\n   * @protected\n   * @param {string} dbName\n   * @returns {number | -1}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected getIdxDbOptions(dbName: string): number {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        return databases.findIndex(\n          (db) => !!db && typeof db === 'object' && db.dbName === dbName\n        );\n      }\n    }\n    return -1;\n  }\n\n  protected unsetOptionsForDatabase(dbName: string) {\n    const { options } = this;\n\n    if (options) {\n      const { databases } = options;\n\n      if (databases instanceof Array) {\n        const idx = this.getIdxDbOptions(dbName);\n\n        databases.splice(idx, 1);\n      }\n    }\n  }\n\n  /**\n   * set the Database store options in\n   * the main options (this.options.databases)\n   * of all databases\n   * @protected\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} dbOptions\n   * @param {boolean} [checkIfExists=false]\n   * @returns {(void | Error)}\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  protected setDbOptions(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >,\n    checkIfExists: boolean = false\n  ): void | Error {\n    if (!this.checkDbOptions(dbOptions)) {\n      return new Error('The database options have a wrong format');\n    }\n\n    if (checkIfExists) {\n      const { dbName } = dbOptions;\n      const idxExisting = this.getIdxDbOptions(dbName);\n\n      if (idxExisting !== -1) {\n        return new Error(`\n                    Options for the database ${dbName} is already exists.\n                    May be the database was opened but still not be in ready state\n                `);\n      }\n    }\n\n    const { options } = this;\n\n    if (!options) {\n      this.applyOptions({\n        databases: [dbOptions],\n        id: '',\n      });\n      return;\n    }\n\n    const { databases } = options;\n\n    if (databases instanceof Array) {\n      const { dbName } = dbOptions;\n\n      this.unsetOptionsForDatabase(dbName);\n      databases.push(dbOptions);\n    } else {\n      options.databases = [dbOptions];\n    }\n  }\n\n  protected setDbOptionsIfNotExists(\n    dbOptions: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): void | Error {\n    return this.setDbOptions(dbOptions, true);\n  }\n\n  private async closeDatabase(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | void> {\n    this.unsetListenersDatabaseEvents(database);\n\n    const { dbName } = database;\n\n    this.unsetOptionsForDatabase(dbName);\n    this.deleteDatabaseFromList(database);\n\n    const closeDatabaseResult = await database.close();\n\n    if (closeDatabaseResult instanceof Error) {\n      return this.emitError(closeDatabaseResult);\n    }\n    this.emitDatabaseClose(database);\n  }\n\n  private setConnectionOptions(\n    connectionOptions: ISwarmStoreConnectorOrbitDBConnectionOptions\n  ): void | Error {\n    if (!connectionOptions) {\n      return this.emitError('Connection options must be specified');\n    }\n\n    const { ipfs } = connectionOptions;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of ipfs must be specified in the connection options'\n      );\n    }\n    this.ipfs = ipfs;\n  }\n\n  private unsetSwarmConnectionOptions() {\n    this.ipfs = undefined;\n    this.connectionOptions = undefined;\n  }\n\n  private async disconnectFromSwarm(): Promise<Error | void> {\n    console.warn(\n      `${SWARM_STORE_CONNECTOR_ORBITDB_LOG_PREFIX}::disconnectFromTheSwarm`\n    );\n    this.unsetSwarmConnectionOptions();\n    this.setNotReady();\n  }\n\n  private async connectToSwarm(): Promise<Error | void> {\n    const { ipfs } = this;\n\n    if (!ipfs) {\n      return this.emitError('An instance of the IPFS must be specified');\n    }\n    try {\n      // wait when the ipfs will be ready to use\n      await Promise.race([\n        ipfs.ready,\n        timeout(SWARM_STORE_CONNECTOR_ORBITDB_CONNECTION_TIMEOUT_MS),\n      ]);\n    } catch (err) {\n      return this.emitError(err);\n    }\n  }\n\n  private async stopOrbitDBInsance(): Promise<Error | void> {\n    const { orbitDb } = this;\n\n    if (orbitDb) {\n      try {\n        await orbitDb.stop();\n        this.setNotReady();\n        this.orbitDb = undefined;\n      } catch (err) {\n        return this.emitError(err, 'stopOrbitDBInsance');\n      }\n    }\n  }\n\n  private async createOrbitDBInstance(): Promise<Error | void> {\n    const { ipfs, identity, storage } = this;\n\n    if (!ipfs) {\n      return this.emitError(\n        'An instance of IPFS must exists',\n        'createOrbitDBInstance'\n      );\n    }\n    try {\n      if (!OrbitDB) {\n        return this.emitError('A constructor of the OrbitDb is not provided');\n      }\n      if (!identity) {\n        return this.emitError('An identity must be specified');\n      }\n\n      const instanceOfOrbitDB = await OrbitDB.createInstance(ipfs, {\n        identity,\n        storage,\n      });\n\n      if (instanceOfOrbitDB instanceof Error) {\n        return this.emitError(\n          instanceOfOrbitDB,\n          'createOrbitDBInstance::error has occurred in the \"createInstance\" method'\n        );\n      }\n      this.orbitDb = instanceOfOrbitDB;\n    } catch (err) {\n      return this.emitError(\n        err,\n        'createOrbitDBInstance::failed to create the instance of OrbitDB'\n      );\n    }\n  }\n\n  protected getDbOptions(\n    dbName: string\n  ):\n    | ISwarmStoreConnectorOrbitDbDatabaseOptions<ISwarmDatabaseValueTypes>\n    | void\n    | Error {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'An options is not specified for the database',\n        `getDbOptions::${dbName}`\n      );\n    }\n\n    const { databases: databases } = options;\n\n    return databases.find((option) => option && option.dbName === dbName);\n  }\n\n  protected stop(): Promise<Error | void> {\n    this.setNotReady();\n    return this.closeDatabases();\n  }\n\n  /**\n   * open database and not check if an options are\n   * exists for the database (replace if exists)\n   * @private\n   * @param {ISwarmStoreConnectorOrbitDbDatabaseOptions} optionsForDb\n   * @returns\n   * @memberof SwarmStoreConnectorOrbitDB\n   */\n  private openDatabaseNotCheckOptionsExists(\n    optionsForDb: ISwarmStoreConnectorOrbitDbDatabaseOptions<\n      ISwarmDatabaseValueTypes\n    >\n  ): Promise<void | Error> {\n    return this.openDatabase(optionsForDb, 0, false);\n  }\n\n  private async restartDbConnection(\n    dbName: string,\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<void | Error> {\n    //try to restart the database\n    const optionsForDb = this.getDbOptions(dbName);\n\n    this.unsetListenersDatabaseEvents(database);\n    if (optionsForDb instanceof Error || !optionsForDb) {\n      this.emitError(\n        'Failed to get options to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n\n    const startDbResult = await this.openDatabaseNotCheckOptionsExists(\n      optionsForDb\n    );\n\n    if (startDbResult instanceof Error) {\n      this.emitError(\n        'Failed to open a new db store',\n        `restartDbConnection::${dbName}`\n      );\n      return this.stop();\n    }\n  }\n\n  protected removeDbFromList(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) {\n    if (this.databases instanceof Array) {\n      commonUtilsArrayDeleteFromArray<\n        SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n      >(this.databases, database);\n    }\n  }\n\n  private handleDatabaseStoreClosed = (\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ) => {\n    if (database) {\n      const { dbName } = database;\n\n      this.emitError(\n        'Database closed unexpected',\n        `handleDatabaseStoreClosed::${dbName}`\n      );\n      this.handleDbClose(database);\n      this.restartDbConnection(dbName, database);\n    }\n  };\n\n  private handleLoadingProgress = (dbName: string, progress: number): void => {\n    /* \n            databases - is a list of the databases opened already\n            it means that the loading progress for this databases\n            is 100%\n        */\n    const { databases, options } = this;\n    let currentProgressInPercent = 0;\n\n    if (options) {\n      /* \n                overallDatabases - is a list of all databases\n                which are must be opened\n            */\n      const { databases: overallDatabases } = options;\n      // the progress which will be reached\n      // on all the databases will be opened\n      const overallProgressToReach = overallDatabases.length * 100;\n      // progress reached at this time\n      const currentProgress =\n        (databases ? databases.length : 0) * 100 + progress;\n      // the progress reached at this time in a percentage\n      currentProgressInPercent = currentProgress\n        ? (overallProgressToReach / currentProgress) * 100\n        : 0;\n    }\n    console.log(\n      `Swarm store connector::handleLoadingProgress::${dbName}::progress::${progress}`\n    );\n    this.emit(\n      ESwarmStoreConnectorOrbitDBEventNames.LOADING,\n      currentProgressInPercent\n    );\n  };\n\n  private handleDatabaseUpdated = (dbName: string) => {\n    this.emit(ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE, dbName);\n  };\n\n  private async setListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>,\n    isSet: boolean = true\n  ): Promise<Error | void> {\n    const methodName = isSet\n      ? COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON\n      : COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_OFF;\n\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n      this.handleDatabaseStoreClosed\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.LOADING,\n      this.handleLoadingProgress\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.UPDATE,\n      this.handleDatabaseUpdated\n    );\n    database[methodName](\n      ESwarmConnectorOrbitDbDatabaseEventNames.FATAL,\n      this.handleDatabaseStoreClosed\n    );\n  }\n\n  private async unsetListenersDatabaseEvents(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | void> {\n    this.setListenersDatabaseEvents(database, false);\n  }\n\n  private async closeDatabases(): Promise<Error | void> {\n    const { databases } = this;\n\n    // set that the orbit db is not ready to use\n    this.setNotReady();\n    if (!databases || !databases.length) {\n      return;\n    }\n\n    try {\n      let idx = 0;\n      const databasesToClose = [...databases];\n      const len = databasesToClose.length;\n\n      for (; idx < len; idx += 1) {\n        const db = databasesToClose[idx];\n        const dbCloseResult = await this.closeDatabase(db);\n\n        if (dbCloseResult instanceof Error) {\n          console.error(this.emitError(dbCloseResult));\n          this.emitError(\n            'An error has occurred on closing the database',\n            'closeDatabases'\n          );\n        }\n      }\n      this.databases = [];\n    } catch (err) {\n      return err;\n    }\n  }\n\n  private waitDatabaseOpened(\n    database: SwarmStoreConnectorOrbitDBDatabase<ISwarmDatabaseValueTypes>\n  ): Promise<Error | boolean> {\n    return new Promise<Error | boolean>(async (res) => {\n      let timeout: NodeJS.Timer | undefined = undefined;\n\n      function usetListeners() {\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.READY,\n          res\n        );\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE,\n          res\n        );\n        database.removeListener(\n          ESwarmConnectorOrbitDbDatabaseEventNames.FATAL,\n          res\n        );\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = undefined;\n      }\n\n      timeout = setTimeout(() => {\n        usetListeners();\n        res(\n          new Error('Failed to open the database cause the timeout has reached')\n        );\n      }, SWARM_STORE_CONNECTOR_ORBITDB_DATABASE_CONNECTION_TIMEOUT_MS);\n      try {\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.CLOSE, () => {\n          usetListeners();\n          res(new Error('Database was closed'));\n        });\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.FATAL, () => {\n          usetListeners();\n          res(new Error('A fatal error has occurred while open the database'));\n        });\n        database.once(ESwarmConnectorOrbitDbDatabaseEventNames.READY, () => {\n          usetListeners();\n          res(true);\n        });\n\n        //connect to the database\n        // and wait for an events from it\n        const connectResult = await database.connect();\n\n        if (connectResult instanceof Error) {\n          usetListeners();\n          console.error(connectResult);\n          return this.emitError('The database.connect method was failed');\n        }\n      } catch (err) {\n        console.error(err);\n        usetListeners();\n        res(err);\n      }\n    });\n  }\n\n  private async openDatabases(): Promise<Error | void> {\n    const { options } = this;\n\n    if (!options) {\n      return this.emitError(\n        'The options must be specified to open the databases'\n      );\n    }\n\n    const { databases } = options;\n    const databasesOptions = [...databases];\n\n    if (!(databasesOptions instanceof Array) || !databasesOptions.length) {\n      return this.emitError('The options for databases must be specified');\n    }\n\n    try {\n      let idx = 0;\n      const len = databasesOptions.length;\n\n      for (; idx < len; idx += 1) {\n        const options = databasesOptions[idx];\n        const startResultStatus = await this.openDatabaseNotCheckOptionsExists(\n          options\n        );\n\n        if (startResultStatus instanceof Error) {\n          console.error(startResultStatus);\n          await this.closeDatabases();\n          return new Error('Failed to open the database');\n        }\n      }\n    } catch (err) {\n      await this.closeDatabases();\n      return this.emitError(err);\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-timezone.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-schemes/const-validation-schemes.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-values/const-validation-values-messaging-date.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-values-restrictions-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/index.tsx",[],"/home/paul/projects/decentrilized-protocol/src/react-app-env.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/data-sign-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/encryption-test.ts",["1465","1466","1467","1468","1469","1470","1471","1472","1473","1474"],"import {\n  generateKeyPair,\n  encryptNative,\n  decryptNative,\n  exportKeyPairAsString,\n  importKeyPairFromString,\n  encryptToString,\n  decryptFromString,\n  encryptToTypedArray,\n} from 'utils/encryption-utils';\nimport { calculateHash } from 'utils/hash-calculation-utils';\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n\nconst testEncryption = async () => {\n  const kPair = await generateKeyPair();\n\n  if (kPair instanceof Error) {\n    console.error(kPair);\n  } else {\n    /** THE FIRST USE-CASE */\n    // console.log('export key pair', kPair);\n    // const dataToChiper = '245';\n    // const encryptedData = await encryptNative(\n    //   kPair.publicKey,\n    //   decode(btoa(dataToChiper))\n    // );\n    // if (encryptedData instanceof Error) {\n    //   console.error(encryptedData);\n    // } else {\n    //   const decryptedData = await decryptNative(\n    //     kPair.privateKey,\n    //     decode(encode(encryptedData))\n    //   );\n    //   if (decryptedData instanceof Error) {\n    //     console.error(decryptedData);\n    //   } else {\n    //     console.log('decrypted', atob(encode(decryptedData)));\n    //   }\n    //\n    /** THE SECOND USE-CASE */\n    // const exportedKeyPairString = await exportKeyPairAsString(kPair);\n    // console.log(exportedKeyPairString);\n    // const importedKeyPair = await importKeyPairFromString(\n    //   exportedKeyPairString\n    // );\n    // if (importedKeyPair instanceof Error) {\n    //   throw importedKeyPair;\n    // }\n    // const encryptedStringByExported = await encryptToString(\n    //   importedKeyPair,\n    //   'this is a long long text'\n    // );\n    // const encryptedStringByImported = await encryptToTypedArray(\n    //   exportedKeyPairString,\n    //   'this is a long long text'\n    // );\n    // console.log('encryptedStringByExported', encryptedStringByExported);\n    // console.log('encryptedStringByImported', encryptedStringByImported);\n    // if (!(encryptedStringByExported instanceof Error)) {\n    //   const decrypted = await decryptFromString(\n    //     importedKeyPair,\n    //     encryptedStringByExported\n    //   );\n    //   if (!(decrypted instanceof Error)) {\n    //     console.log('decrypted', decrypted);\n    //   }\n    // }\n    /** HASH CALCULATION */\n    // const hashStrOnce = await calculateHash({ d: 1 });\n    // const hashStrTwice = await calculateHash({ d: 1 });\n    // console.log(hashStrOnce);\n    // console.log(hashStrTwice);\n    // if (hashStrTwice !== hashStrOnce) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n    /** HASH CALCULATION STRING */\n    // const stringData =\n    //   '\"1233465)()09850MNLKADFNDSLKJGN%$%^$^#&#^@&*^)(&$#^&%*#%\"';\n    // const hashStrThird = await calculateHash(stringData);\n    // const hashStrFourth = await calculateHash(stringData);\n    // console.log(hashStrThird);\n    // console.log(hashStrFourth);\n    // if (hashStrThird !== hashStrFourth) {\n    //   console.error(new Error('Hash of the same data does not matching'));\n    // }\n  }\n};\n// testEncryption();\n","/home/paul/projects/decentrilized-protocol/src/test/error-extended-class-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/mocha-chai-initialize.ts",["1475"],"/* global mocha */\nimport { lazyLoadScript } from 'utils/lazy-loading-utils/lazy-loading-utils';\nimport Mocha from 'mocha';\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\n\nconst MOCHA_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/mocha/6.2.1/mocha.min.js';\n\nexport async function initializeMocha() {\n  const mochaNode = document.createElement('div');\n\n  mochaNode.id = 'mocha';\n  document.body.prepend(mochaNode);\n  try {\n    await lazyLoadScript(MOCHA_CDN_URL);\n  } catch (err) {\n    console.error('Failed to load Mocha from cdn');\n    return err;\n  }\n\n  const mochaSetupScript = document.createElement('script');\n\n  mochaSetupScript.type = 'text/javascript';\n  mochaSetupScript.className = 'mocha-init';\n  mochaSetupScript.innerHTML = `\n        mocha.setup({\n            ui: 'bdd',\n            globals: ['globalThis']\n        });\n        mocha.checkLeaks();\n    `;\n  document.body.append(mochaSetupScript);\n  chai.use(chaiAsPromised);\n}\n\ntype TCallbackMochaRun = (failures: number) => void;\n\nexport function runMocha(\n  showErrorsOverlay: boolean = true,\n  cb?: TCallbackMochaRun\n) {\n  // it's necessary to disable\n  // error overlay to run test\n  // with mocha\n  if (!showErrorsOverlay) {\n    const hideErrorFrameStyle = document.createElement('style');\n\n    hideErrorFrameStyle.type = 'text/css';\n    hideErrorFrameStyle.innerHTML = `\n            body > iframe {\n                display: none;\n            }\n        `;\n    document.head.appendChild(hideErrorFrameStyle);\n  }\n  mocha.run(cb);\n}\n","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validate-messaging-timestamps-test.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/channels.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/encryption-keys.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/helper.types.ts",["1476","1477"],"// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TPrototypeKeys = keyof Object;\n\nexport type ownKeyOf<T extends object> = keyof T extends TPrototypeKeys\n  ? never\n  : keyof T;\n\n// onlye own properties values\nexport type ownValueOf<T extends object> = keyof T extends ownKeyOf<T>\n  ? T[keyof T]\n  : never;\n\nexport type ArgumentTypes<F extends Function> = F extends (\n  ...args: infer A\n) => any\n  ? A\n  : never;\n\nexport type OmitTypeProp<T extends {}, E> = {\n  [k in keyof T]: T[k] extends E ? never : T[k];\n};\n\nexport type OmitType<T, O> = T extends O ? never : T;\n\nexport type ConstructorType<T> = new (...args: any[]) => T;\n","/home/paul/projects/decentrilized-protocol/src/types/ipfs.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/ipfs.types.d.ts",["1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605"],"import { EventEmitter } from 'events';\n\ndeclare module 'ipfs' {}\n\ntype Callback<T> = (error: Error, result?: T) => void;\n\nexport class IPFS extends EventEmitter {\n  constructor(options?: Options);\n\n  types: Types;\n\n  init(options: InitOptions, callback: Callback<boolean>): void;\n  init(callback: Callback<boolean>): void;\n\n  preStart(callback: Callback<any>): void;\n  start(callback?: Callback<any>): void;\n  stop(callback?: (error?: Error) => void): void;\n  isOnline(): boolean;\n\n  version(\n    options: any,\n    callback: (error: Error, version: Version) => void\n  ): void;\n  version(options: any): Promise<Version>;\n  version(callback: (error: Error, version: Version) => void): void;\n  version(): Promise<Version>;\n\n  id(options: any, callback: (error: Error, version: Id) => void): void;\n  id(options: any): Promise<Id>;\n  id(callback: (error: Error, version: Id) => void): void;\n  id(): Promise<Id>;\n\n  ready: Promise<boolean>;\n  repo: RepoAPI;\n  bootstrap: any;\n  config: any;\n  block: any;\n  object: ObjectAPI;\n  dag: DagAPI;\n  libp2p: any;\n  swarm: SwarmAPI;\n  files: FilesAPI;\n  bitswap: Bitswap;\n\n  ping(callback: (error: Error) => void): void;\n  ping(): Promise<void>;\n\n  pubsub: Pubsub;\n\n  on(event: string, callback: () => void): this;\n  on(event: 'error', callback: (error: Error) => void): this;\n  once(event: string, callback: () => void): this;\n}\n\nexport interface Options {\n  init?: boolean;\n  start?: boolean;\n  EXPERIMENTAL?: any;\n  repo?: string;\n  config?: any;\n}\n\nexport interface InitOptions {\n  emptyRepo?: boolean;\n  bits?: number;\n  log?: Function;\n}\n\nexport interface Multiaddr {\n  buffer: Uint8Array;\n}\n\nexport type Multihash = any | string;\nexport type CID = any;\n\nexport interface Types {\n  Buffer: any;\n  PeerId: string | any;\n  PeerInfo: any;\n  multiaddr: Multiaddr;\n  multihash: Multihash;\n  CID: CID;\n}\n\nexport interface Version {\n  version: string;\n  repo: string;\n  commit: string;\n}\n\nexport interface Id {\n  id: string;\n  publicKey: string;\n  addresses: Multiaddr[];\n  agentVersion: string;\n  protocolVersion: string;\n}\n\nexport interface RepoAPI {\n  init(bits: number, empty: boolean, callback: Callback<any>): void;\n\n  version(options: any, callback: Callback<any>): void;\n  version(callback: Callback<any>): void;\n\n  gc(): void;\n  path(): string;\n}\n\nexport type FileContent = Record<string, any> | Blob | string;\n\n/** old version? */\nexport interface IPFSFile {\n  path: string;\n  hash: string;\n  size: number;\n  content?: FileContent;\n}\n\nexport interface IPFSGetResult {\n  depth: number;\n  name: string;\n  path: string;\n  size: number;\n  hash: Buffer;\n  content: Buffer;\n  type: 'file' | string;\n}\n\nexport interface FilesAPI {\n  createAddStream(options: any, callback: Callback<any>): void;\n  createAddStream(callback: Callback<any>): void;\n\n  createPullStream(options: any): any;\n\n  add(data: FileContent, options: any, callback: Callback<IPFSFile[]>): void;\n  add(data: FileContent, options: any): Promise<IPFSFile[]>;\n  add(data: FileContent, callback: Callback<IPFSFile[]>): void;\n  add(data: FileContent): Promise<IPFSFile[]>;\n\n  cat(hash: Multihash, callback: Callback<FileContent>): void;\n  cat(hash: Multihash): Promise<FileContent>;\n\n  get(hash: Multihash, callback: Callback<IPFSFile | IPFSGetResult[]>): void;\n  get(hash: Multihash): Promise<IPFSFile | IPFSGetResult[]>;\n\n  getPull(hash: Multihash, callback: Callback<any>): void;\n}\n\nexport interface PeersOptions {\n  v?: boolean;\n  verbose?: boolean;\n}\n\nexport type PeerId = any;\n\nexport interface PeerInfo {\n  id: PeerId;\n  multiaddr: Multiaddr;\n  multiaddrs: Multiaddr[];\n  distinctMultiaddr(): Multiaddr[];\n}\n\nexport interface Peer {\n  addr: Multiaddr;\n  peer: PeerInfo;\n}\n\nexport interface SwarmAPI {\n  peers(options: PeersOptions, callback: Callback<Peer[]>): void;\n  peers(options: PeersOptions): Promise<Peer[]>;\n  peers(callback: Callback<Peer[]>): void;\n  peers(): Promise<Peer[]>;\n\n  addrs(callback: Callback<PeerInfo[]>): void;\n  addrs(): Promise<PeerInfo[]>;\n\n  localAddrs(callback: Callback<Multiaddr[]>): void;\n  localAddrs(): Promise<Multiaddr[]>;\n\n  connect(maddr: Multiaddr | string, callback: Callback<any>): void;\n  connect(maddr: Multiaddr | string): Promise<any>;\n\n  disconnect(maddr: Multiaddr | string, callback: Callback<any>): void;\n  disconnect(maddr: Multiaddr | string): Promise<any>;\n\n  filters(callback: Callback<void>): never;\n}\n\nexport type DAGNode = any;\nexport type DAGLink = any;\nexport type DAGLinkRef = DAGLink | any;\nexport type Obj = BufferSource | Record<string, any>;\n\nexport interface ObjectStat {\n  Hash: Multihash;\n  NumLinks: number;\n  BlockSize: number;\n  LinksSize: number;\n  DataSize: number;\n  CumulativeSize: number;\n}\n\nexport interface PutObjectOptions {\n  enc?: any;\n}\n\nexport interface GetObjectOptions {\n  enc?: any;\n}\n\nexport interface ObjectPatchAPI {\n  addLink(\n    multihash: Multihash,\n    link: DAGLink,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  addLink(\n    multihash: Multihash,\n    link: DAGLink,\n    options: GetObjectOptions\n  ): Promise<any>;\n  addLink(multihash: Multihash, link: DAGLink, callback: Callback<any>): void;\n  addLink(multihash: Multihash, link: DAGLink): Promise<any>;\n\n  rmLink(\n    multihash: Multihash,\n    linkRef: DAGLinkRef,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  rmLink(\n    multihash: Multihash,\n    linkRef: DAGLinkRef,\n    options: GetObjectOptions\n  ): Promise<any>;\n  rmLink(\n    multihash: Multihash,\n    linkRef: DAGLinkRef,\n    callback: Callback<any>\n  ): void;\n  rmLink(multihash: Multihash, linkRef: DAGLinkRef): Promise<any>;\n\n  appendData(\n    multihash: Multihash,\n    data: any,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  appendData(\n    multihash: Multihash,\n    data: any,\n    options: GetObjectOptions\n  ): Promise<any>;\n  appendData(multihash: Multihash, data: any, callback: Callback<any>): void;\n  appendData(multihash: Multihash, data: any): Promise<any>;\n\n  setData(\n    multihash: Multihash,\n    data: any,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  setData(\n    multihash: Multihash,\n    data: any,\n    options: GetObjectOptions\n  ): Promise<any>;\n  setData(multihash: Multihash, data: any, callback: Callback<any>): void;\n  setData(multihash: Multihash, data: any): Promise<any>;\n}\n\nexport interface ObjectAPI {\n  'new'(template: 'unixfs-dir', callback: Callback<DAGNode>): void;\n  'new'(callback: Callback<DAGNode>): void;\n  'new'(): Promise<DAGNode>;\n\n  put(obj: Obj, options: PutObjectOptions, callback: Callback<any>): void;\n  put(obj: Obj, options: PutObjectOptions): Promise<any>;\n  put(obj: Obj, callback: Callback<any>): void;\n  put(obj: Obj): Promise<any>;\n\n  get(\n    multihash: Multihash,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  get(multihash: Multihash, options: GetObjectOptions): Promise<any>;\n  get(multihash: Multihash, callback: Callback<any>): void;\n  get(multihash: Multihash): Promise<any>;\n\n  data(\n    multihash: Multihash,\n    options: GetObjectOptions,\n    callback: Callback<any>\n  ): void;\n  data(multihash: Multihash, options: GetObjectOptions): Promise<any>;\n  data(multihash: Multihash, callback: Callback<any>): void;\n  data(multihash: Multihash): Promise<any>;\n\n  links(\n    multihash: Multihash,\n    options: GetObjectOptions,\n    callback: Callback<DAGLink[]>\n  ): void;\n  links(multihash: Multihash, options: GetObjectOptions): Promise<DAGLink[]>;\n  links(multihash: Multihash, callback: Callback<DAGLink[]>): void;\n  links(multihash: Multihash): Promise<DAGLink[]>;\n\n  stat(\n    multihash: Multihash,\n    options: GetObjectOptions,\n    callback: Callback<ObjectStat>\n  ): void;\n  stat(multihash: Multihash, options: GetObjectOptions): Promise<ObjectStat>;\n  stat(multihash: Multihash, callback: Callback<ObjectStat>): void;\n  stat(multihash: Multihash): Promise<ObjectStat>;\n\n  patch: ObjectPatchAPI;\n}\n\nexport interface DagAPI {\n  put(dagNode: any, options: any, callback: Callback<any>): void;\n  put(dagNode: any, options: any): Promise<any>;\n\n  get(\n    cid: string | CID,\n    path: string,\n    options: any,\n    callback: Callback<any>\n  ): void;\n  get(cid: string | CID, path: string, options: any): Promise<any>;\n  get(cid: string | CID, path: string, callback: Callback<any>): void;\n  get(cid: string | CID, path: string): Promise<any>;\n  get(cid: string | CID, callback: Callback<any>): void;\n  get(cid: string | CID): Promise<any>;\n\n  tree(\n    cid: string | CID,\n    path: string,\n    options: any,\n    callback: Callback<any>\n  ): void;\n  tree(cid: string | CID, path: string, options: any): Promise<any>;\n  tree(cid: string | CID, path: string, callback: Callback<any>): void;\n  tree(cid: string | CID, path: string): Promise<any>;\n  tree(cid: string | CID, options: any, callback: Callback<any>): void;\n  tree(cid: string | CID, options: any): Promise<any>;\n  tree(cid: string | CID, callback: Callback<any>): void;\n  tree(cid: string | CID): Promise<any>;\n}\n\ntype TPubSubTopic = string;\n\ntype TpubSubTopicHandler = (msg: any) => void;\n\ntype TPubSubTopicOptions = {\n  discover: boolean;\n};\n\ntype TPubSubData = string | Buffer;\n\nexport interface Pubsub {\n  subscribe(\n    topic: TPubSubTopic,\n    handler: TpubSubTopicHandler,\n    options: TPubSubTopicOptions,\n    callback: Callback<any>\n  ): void;\n  subscribe(\n    topic: TPubSubTopic,\n    handler: TpubSubTopicHandler,\n    options: TPubSubTopicOptions\n  ): Promise<void>;\n\n  unsubscribe(\n    topic: TPubSubTopic,\n    handler: TpubSubTopicHandler,\n    callback: Callback<void>\n  ): void;\n  unsubscribe(topic: TPubSubTopic, handler: TpubSubTopicHandler): Promise<void>;\n\n  publish(\n    topic: TPubSubTopic,\n    data: TPubSubData,\n    callback: Callback<any>\n  ): void;\n  publish(topic: TPubSubTopic, data: TPubSubData): Promise<any>;\n\n  ls(callback: Callback<any>): void;\n  ls(): Promise<any>;\n\n  peers(topic: TPubSubTopic, callback: Callback<any>): void;\n  peers(topic: TPubSubTopic): Promise<any>;\n\n  setMaxListeners(n: number): void;\n}\n\nexport interface WantListItem {\n  '/': string;\n}\nexport interface WantList {\n  Keys: WantListItem[];\n}\n\n/* class object */\nexport type Big = any;\nexport interface Stat {\n  provideBufLen: number;\n  blocksReceived: Big;\n  wantlist: WantListItem[];\n  peers: string[];\n  dupBlksReceived: Big;\n  dupDataReceived: Big;\n  dataReceived: Big;\n  blocksSent: Big;\n  dataSent: Big;\n}\n\nexport type KeyType = string | Buffer | CID | any;\nexport interface Bitswap {\n  wantlist(peerId: string, callback: Callback<WantList>): void;\n  wantlist(peerId: string): Promise<WantList>;\n  wantlist(callback: Callback<WantList>): void;\n  wantlist(): Promise<WantList>;\n\n  stat(callback: Callback<Stat>): void;\n  stat(): Promise<Stat>;\n\n  unwant(keys: KeyType | KeyType[], callback: Callback<any>): void;\n  unwant(keys: KeyType | KeyType[]): Promise<any>;\n}\n\nexport function create(options: Options): IPFS;\n\nexport as namespace Ipfs;\n","/home/paul/projects/decentrilized-protocol/src/types/main.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-cache.d.ts",["1606"],"declare module 'orbit-db-cache' {\n  export type TCacheStatus = 'open' | 'close';\n\n  export type TCallbackError = (err?: Error) => void;\n\n  export type TCallbackErrorValue = (err?: Error, val?: string) => void;\n\n  export interface IStore {\n    db: { status: TCacheStatus };\n\n    /**\n     *\n     *\n     * @type {string}\n     * @memberof IOrbitDbStoreBase\n     */\n    status: TCacheStatus;\n\n    /**\n     * open connection to the store\n     *\n     * @returns {Promise<void>}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    open(cb?: TCallbackError): Promise<void>;\n\n    /**\n     * close connection to the storage\n     *\n     * @returns {Promise<void>}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    close(cb?: TCallbackError): Promise<void>;\n    /**\n     * get the key value as a string,\n     * if there is no value for the key\n     * then undefined will returned\n     *\n     * @param {string} k\n     * @returns {(Promise<string | void>)}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    get(k: string, cb?: TCallbackErrorValue): Promise<string | void>;\n\n    /**\n     * delete the key from the store\n     *\n     * @param {string} k\n     * @param {TCallbackErrorValue} [cb]\n     * @returns {Promise<void>}\n     * @memberof IStore\n     * @throws\n     */\n    del(k: string, cb?: TCallbackErrorValue): Promise<void>;\n\n    /**\n     * save a string or a Buffer to the\n     * storage. Before save string will be\n     * converted to the utf8 encoding\n     * for safe usage.\n     *\n     * @param {string} k\n     * @param {(Buffer | string)} v\n     * @returns {Promise<string>}\n     * @memberof IOrbitDbStoreBase\n     */\n    put(k: string, v: Buffer | string, cb?: TCallbackError): Promise<void>;\n  }\n\n  export default class Cache {\n    constructor(store: IStore);\n\n    /**\n     *\n     *\n     * @type {string}\n     * @memberof IOrbitDbStoreBase\n     */\n    status: TCacheStatus;\n\n    /**\n     * open connection to the store\n     *\n     * @returns {Promise<void>}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    open(): Promise<void>;\n\n    /**\n     * close connection to the storage\n     *\n     * @returns {Promise<void>}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    close(): Promise<void>;\n    /**\n     * get the key value as a string,\n     * if there is no value for the key\n     * then undefined will returned\n     *\n     * @param {string} k\n     * @returns {(Promise<string | void>)}\n     * @memberof IOrbitDbStoreBase\n     * @throws\n     */\n    get(k: string): Promise<string | void>;\n\n    /**\n     * save a string or a Buffer to the\n     * storage. Before save string will be\n     * converted to the utf8 encoding\n     * for safe usage.\n     *\n     * @param {string} k\n     * @param {(Buffer | string)} v\n     * @returns {Promise<string>}\n     * @memberof IOrbitDbStoreBase\n     */\n    set(k: string, v: string | Buffer): Promise<void>;\n\n    load(): Promise<void>;\n    destroy(): Promise<void>;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/types/orbit-db-identity-provider-ext.d.ts",[],"/home/paul/projects/decentrilized-protocol/src/types/orbit-db-keystore.d.ts",["1607","1608","1609"],"import 'orbit-db-keystore';\n\ndeclare module 'orbit-db-keystore' {\n  export interface IOrbitDBKeystoreStore {\n    status: string;\n    open(): Promise<void>;\n    close(): Promise<void>;\n    put(k: string, v: any): Promise<void>;\n    get(k: string): string | Uint8Array;\n  }\n\n  export interface IOrbitDBKeystoreCache {\n    length: number;\n    keys: string[];\n    set(k: string, v: any): void;\n    get(k: string): any;\n    remove(k: string): void;\n    clear(): void;\n  }\n\n  /**\n   *\n   *\n   * @export\n   * @interface IOrbitDBKeystoreOptionsForSecretStorage\n   * @property {string} path - the custom name of the storage\n   */\n  export interface IOrbitDBKeystoreOptionsForSecretStorage {\n    store?: string | IOrbitDBKeystoreStore;\n    cache?: IOrbitDBKeystoreCache;\n    path?: string;\n    credentials: {\n      password: string;\n    };\n  }\n\n  export type TOrbitDBKeystoreOptions =\n    | IOrbitDBKeystoreOptionsForSecretStorage\n    | string;\n}\n","/home/paul/projects/decentrilized-protocol/src/types/users.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-array.ts",["1610","1611"],"import { bytesInInteger } from './common-utils-number';\n\nexport const commonUtilsArrayOrderByDecComparationFunction = <T>(\n  a: T,\n  b: T\n): number => Number(b) - Number(a);\n\n/**\n * sort array by decreasing\n * value on increased index\n * @param {any[]} arr\n */\nexport const commonUtilsArrayOrderByDec = <T>(arr: T[]): T[] =>\n  arr.sort(commonUtilsArrayOrderByDecComparationFunction);\n\n/**\n * delete an item from the array\n * @param {Array} arr\n * @param {any} item\n */\n\nexport const commonUtilsArrayDeleteFromArray = <T>(arr: T[], item: T) => {\n  if (arr instanceof Array && arr.length) {\n    const idxOfItem = arr.findIndex((el: T) => el === item);\n\n    if (idxOfItem !== -1) {\n      arr.splice(idxOfItem, 1);\n    }\n  }\n};\n\n/**\n * call a callback function for an each item in the\n * array till the result is not an intstance of the\n * Error. If any callback resulted with an Error\n * then the execution will break.\n */\nexport const commonUtilsArrayDoCallbackTillNoError = <T>(\n  arr: T[],\n  cb: (v: T) => Error | any\n): Error | void => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const len = arr.length;\n  let idx = 0;\n  let r: Error | any;\n\n  for (; idx < len; idx += 1) {\n    r = cb(arr[idx]);\n\n    if (r instanceof Error) {\n      return r;\n    }\n  }\n};\n\n/**\n * calculate the overall lenght\n * of the numeric array in bytes\n * @param {number[]} arr\n * @param {number} [maxNumber] - maximum value of the valid number\n * @param {number} [minNumber] - minimum value of the valid number\n * @returns {number | Error} - return a length of the array or an Error\n * if a non-finite or an unsafe number will be met\n */\nexport const commonUtilsArrayCalculateLengthOfIntegerArray = (\n  arr: number[],\n  maxNumber?: number,\n  minNumber?: number\n): number | Error => {\n  if (!(arr instanceof Array)) {\n    return new Error('The array value must be an instance of Array');\n  }\n\n  const maxNumberRes =\n    typeof maxNumber === 'number' ? maxNumber : Number.MAX_SAFE_INTEGER;\n  const minNumberRes = typeof minNumber === 'number' ? minNumber : 0;\n  const len = arr.length;\n  let idx = 0;\n  let item;\n  let result = 0;\n  let bytesInIntem;\n\n  for (; idx < len; idx += 1) {\n    item = arr[idx];\n\n    if (typeof item !== 'number') {\n      return new Error('The value is not a number');\n    }\n    if (!Number.isInteger(item)) {\n      return new Error('The value is not an integer number');\n    }\n    if (item < 0) {\n      return new Error('The number must be greater than 0');\n    }\n    if (!Number.isFinite(item)) {\n      return new Error('The value is not a finite number');\n    }\n    if (item > maxNumberRes) {\n      return new Error('The number is too big');\n    }\n    if (item < minNumberRes) {\n      return new Error('The number is too small');\n    }\n    bytesInIntem = bytesInInteger(item);\n    if (bytesInIntem instanceof Error) {\n      return bytesInIntem;\n    }\n    result += bytesInIntem;\n  }\n  return result;\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-objects.ts",["1612","1613"],"export const isNotEmptyObject = (o: any): o is object => {\n  return !!o && typeof o === 'object' && !!Object.keys(o).length;\n};\n\nexport const isEmptyObject = (o: any): boolean => {\n  return !isNotEmptyObject(o);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-timer.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils-caching-decorator/data-cache-utils-caching-decorator.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-cache-utils/data-cache-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils-strings.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-compression-utils/data-compression-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/data-sign-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/keys.data-sign-utils.ts",["1614","1615","1616"],"import {\n  DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES,\n  DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n  DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n  KEY_NOT_FOUND_ERROR_MESSAGE,\n} from './data-sign-utils.const';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n} from './data-sign-utils.types';\nimport {\n  isCryptoKeyPair,\n  isJWK,\n  getJWK,\n  getJWKOrBool,\n} from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport { TEncryptionKeyStoreFormatType } from 'types/encryption-keys.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    DATA_SIGN_CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    DATA_SIGN_CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = async (\n  key: CryptoKey\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<string | Error> => {\n  const keyExported = await exportKey(key);\n\n  if (keyExported instanceof Error) {\n    return keyExported;\n  }\n  try {\n    return stringify(keyExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportPublicKey = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  if (isCryptoKeyPair(keyPair)) {\n    return exportKey(keyPair.publicKey);\n  }\n  return new Error('Argument must be a CryptoKeyPair');\n};\n\nexport const exportPublicKeyAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<Error | string> => {\n  try {\n    const keyPublicExported = await exportPublicKey(keyPair);\n\n    if (keyPublicExported instanceof Error) {\n      return keyPublicExported;\n    }\n    return stringify(keyPublicExported);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  try {\n    const res = await exportKeyPair(keyPair);\n\n    if (res instanceof Error) {\n      return res;\n    }\n    return stringify(res);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = async (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES,\n  isPublic: boolean = true\n): Promise<CryptoKey | Error> => {\n  try {\n    if (typeof key !== 'object') {\n      return new Error('Unsupported argument type');\n    }\n    const res = await cryptoModule.importKey(\n      DATA_SIGN_CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n      key,\n      DATA_SIGN_CRYPTO_UTIL_KEY_DESC,\n      DATA_SIGN_CRYPTO_UTIL_KEYS_EXTRACTABLE,\n      [\n        isPublic\n          ? DATA_SIGN_CRYPTO_UTIL_PUBLIC_KEY_USAGE\n          : DATA_SIGN_CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n      ]\n    );\n\n    if (!(res instanceof CryptoKey)) {\n      return new Error(\"Can't import the key\");\n    }\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, true);\n\nexport const importPrivateKey = (\n  key: TCRYPTO_UTIL_IMPORT_KEY_TYPES\n): PromiseLike<CryptoKey | Error> => importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TDATA_SIGN_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(\n          keyPair[DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n        ),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TDATA_SIGN_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      if (isCryptoKeyPairImported(keyPairObject)) {\n        return importKeyPair(keyPairObject);\n      }\n      return new Error('There is a wrong format for the imported key pair');\n    }\n    return new Error('The key must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey | Error> | Error => {\n  try {\n    if (typeof keyString !== 'string') {\n      return new Error('The key must be a string');\n    }\n\n    const parsedKey = JSON.parse(keyString);\n\n    return importKey(parsedKey, isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey | Error> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(DATA_SIGN_CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nexport const getKeyOfType = async (\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key in native\n * format\n * @param {} key\n */\nexport const importEncryptionKey = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<CryptoKey | Error> => {\n  if (isTypedArray(key)) {\n    return importKey(key);\n  } else {\n    const jwk = getJWKOrBool(key);\n\n    if (typeof jwk === 'object') {\n      return importKey(jwk);\n    } else if (typeof key === 'string') {\n      return importKeyFromString(key);\n    }\n  }\n  return new Error('There is an unknown key format');\n};\n\n/**\n * import an encryption key from a\n * supported format of an exported key\n * and returns a crypto key as a string\n * @param {} key\n */\nexport const convertAndExportKeyAsString = async (\n  key: TEncryptionKeyStoreFormatType\n): Promise<string | Error> => {\n  const cryptoKeyImported = await importEncryptionKey(key);\n\n  if (cryptoKeyImported instanceof Error) {\n    return cryptoKeyImported;\n  }\n  return exportKeyAsString(cryptoKeyImported);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/main.data-sign-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/sign-data.encryption-utils.ts",["1617"],"import { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n  DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES,\n  TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType, exportKey } from './keys.data-sign-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const signNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES_NATIVE\n): Promise<ArrayBuffer | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data signing`\n    );\n  }\n  try {\n    const res = await cryptoModule.sign(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const signToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<ArrayBuffer | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_SIGN_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return signNative(k, d);\n};\n\nexport const signToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TDATA_SIGN_UTIL_SIGN_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_SIGN_DATA_TYPES\n): Promise<string | Error> => {\n  const signedHashData = await signToTypedArray(key, data);\n\n  if (signedHashData instanceof Error) {\n    return signedHashData;\n  }\n\n  return typedArrayToString(signedHashData);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-sign-utils/verify-data.encryption-utils.ts",["1618"],"import {\n  isTypedArray,\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\nimport { stringify } from 'utils/main-utils';\nimport { cryptoModule } from './main.data-sign-utils.const';\nimport {\n  DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE,\n  DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS,\n} from './data-sign-utils.const';\nimport {\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES,\n  TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n} from './data-sign-utils.types';\nimport { getKeyOfType } from './keys.data-sign-utils';\n\nexport const verifyNative = async (\n  key: CryptoKey,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES_NATIVE\n): Promise<boolean | Error> => {\n  if (key.type !== DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE) {\n    return new Error(\n      `The type of the key ${key.type} may not be used for data decryption`\n    );\n  }\n  if (!isTypedArray(data)) {\n    return new Error('The data type is not supported');\n  }\n  try {\n    const res = await cryptoModule.verify(\n      { ...DATA_SIGN_CRYPTO_UTIL_DATA_SIGN_AND_VERIFY_PARAMS },\n      key,\n      signature,\n      data\n    );\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const verifyFromString = async (\n  key: TDATA_SIGN_UTIL_VERIFY_KEY_TYPES,\n  data: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES | object,\n  signature: TDATA_SIGN_UTIL_VERIFY_DATA_TYPES\n): Promise<boolean | Error> => {\n  const k = await getKeyOfType(key, DATA_SIGN_CRYPTO_UTIL_VERIFY_KEY_TYPE);\n\n  if (k instanceof Error) {\n    return k;\n  }\n\n  let d;\n\n  if (isTypedArray(data)) {\n    d = data;\n  } else if (typeof data === 'object' && !(data instanceof Error)) {\n    d = stringify(data);\n\n    if (d instanceof Error) {\n      return d;\n    }\n    d = stringToTypedArray(d);\n  } else if (typeof data === 'string') {\n    d = stringToTypedArray(data);\n  } else {\n    return new Error('Unsupported data type');\n  }\n  if (d instanceof Error) {\n    return d;\n  }\n\n  const s =\n    typeof signature === 'string' ? stringToTypedArray(signature) : signature;\n\n  if (s instanceof Error) {\n    return s;\n  }\n\n  return verifyNative(k, d, s);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils-common.ts",["1619","1620","1621","1622","1623"],"import {\n  CONST_VALIDATION_SCHEMES_URI,\n  CONST_VALIDATION_SCHEMES_URL,\n  CONST_VALIDATION_SCHEMES_UUID_V4,\n  CONST_VALIDATION_SCHEMES_EMAIL,\n  CONST_VALIDATION_SCHEMES_LOGIN,\n} from 'const/const-validation-schemes/const-validation-schemes-common';\nimport { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const dataValidatorUtilURI = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_URI, v);\n};\n\nexport const dataValidatorUtilURL = (v: any): boolean => {\n  const result = validateBySchema(CONST_VALIDATION_SCHEMES_URL, v);\n\n  return result;\n};\n\nexport const dataValidatorUtilUUIDV4 = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_UUID_V4, v);\n};\n\nexport const dataValidatorUtilEmail = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_EMAIL, v);\n};\n\nexport const dataValidatorUtilSafeLogin = (v: any): boolean => {\n  return validateBySchema(CONST_VALIDATION_SCHEMES_LOGIN, v);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/data-validators-utils/data-validators-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-keys-utils/encryption-keys-utils.ts",["1624","1625","1626","1627","1628","1629"],"import {\n  MIN_JWK_PROPS_COUNT,\n  MIN_JWK_STRING_LENGTH,\n  ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS,\n} from './encryption-keys-utils.const';\n\nexport const isCryptoKey = (v: any): v is CryptoKey => v instanceof CryptoKey;\n\nexport const isCryptoKeyPair = (keyPair: any): keyPair is CryptoKeyPair => {\n  return (\n    typeof keyPair === 'object' &&\n    keyPair.publicKey instanceof CryptoKey &&\n    keyPair.privateKey instanceof CryptoKey\n  );\n};\n\nexport const isCryptoKeyPairExportedAsString = (keyPair: any): boolean => {\n  return typeof keyPair === 'string' && keyPair.length >= MIN_JWK_STRING_LENGTH;\n};\n\nexport const isJWK = (\n  keyObject: object,\n  isReturnError: boolean = false\n): Error | boolean => {\n  if (keyObject && typeof keyObject === 'object') {\n    const options = Object.keys(keyObject);\n    const optionsCount = options.length;\n\n    if (optionsCount > MIN_JWK_PROPS_COUNT) {\n      let idx = 0;\n      let optionName: string;\n\n      for (; idx < optionsCount; idx += 1) {\n        optionName = options[idx];\n        if (\n          !ENCRYPTIONS_KEYS_UTILS_JWK_FORMAT_OBJECT_KEYS.includes(optionName)\n        ) {\n          return isReturnError\n            ? new Error(`There is an unknown property ${optionName}`)\n            : false;\n        }\n      }\n      return true;\n    }\n  }\n  return isReturnError ? new Error('There is a wrong format of JWK') : false;\n};\n\nexport const getJWK = (\n  key: any,\n  isReturnError: boolean = false\n): JsonWebKey | boolean | Error => {\n  let keyObject = key;\n\n  if (typeof key === 'string' && key.length > MIN_JWK_STRING_LENGTH) {\n    try {\n      keyObject = JSON.parse(key);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  const isJWKValid = isJWK(keyObject, isReturnError);\n\n  if (isJWKValid === true) {\n    return keyObject as JsonWebKey;\n  }\n  return isJWKValid instanceof Error\n    ? isJWKValid\n    : new Error('There is a wrong format of JWK');\n};\n\nexport const getJWKOrError = (key: any): JsonWebKey | Error =>\n  getJWK(key, true) as JsonWebKey | Error;\n\nexport const getJWKOrBool = (key: any): JsonWebKey | boolean =>\n  getJWK(key, false) as JsonWebKey | boolean;\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/crypto-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/decrypt-data.encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encrypt-data.encryption-utils.ts",["1630"],"import { cryptoModule } from './main.crypto-utils.const';\nimport {\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_ENCRYPTION_KEY_TYPE,\n  INITIALIZATION_VECTOR_DEFAULT_LENGTH,\n} from './crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG,\n  TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR,\n} from './crypto-utils.types';\nimport { getKeyOfType, exportKey } from './keys.encryption-utils';\nimport {\n  convertToTypedArray,\n  typedArrayToString,\n  arrayBufferFromTypedArray,\n  concatArrayBuffers,\n  getBytesFromArrayBuffer,\n} from 'utils/typed-array-utils';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\n/**\n * return a random vector, used e.g. for aes-gcm\n * encryption\n * @param vectorLength - lenght of the vector generated\n */\nexport const generateInitializationVectorNative = (\n  vectorLength: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): Uint8Array | Error => {\n  try {\n    return window.crypto.getRandomValues(new Uint8Array(vectorLength));\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const generateInitializationVectorNativeArrayBuffer = (\n  vectorLength?: number\n): ArrayBuffer | Error => {\n  const iv = generateInitializationVectorNative(vectorLength);\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n  return arrayBufferFromTypedArray(iv);\n};\n\nexport const concatDataWithInitializationVector = (\n  options: TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR\n): ArrayBuffer | Error => {\n  try {\n    return concatArrayBuffers(options.iv, options.data);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromData = (\n  arrayBuffer: ArrayBuffer,\n  ivLengthBytes: number = INITIALIZATION_VECTOR_DEFAULT_LENGTH\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  try {\n    const iv = getBytesFromArrayBuffer(arrayBuffer, 0, ivLengthBytes);\n\n    if (iv instanceof Error) {\n      return iv;\n    }\n\n    const data = getBytesFromArrayBuffer(arrayBuffer, ivLengthBytes);\n\n    if (data instanceof Error) {\n      return data;\n    }\n    return {\n      iv,\n      data,\n    };\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getInitializationVectorFromDataString = (\n  data: string,\n  ivLengthBytes?: number\n): TCRYPTO_UTILS_DATA_WITH_INITIALIZATION_VECTOR | Error => {\n  const dataArrayBuffer = decodeDOMStringToArrayBuffer(data);\n\n  if (dataArrayBuffer instanceof Error) {\n    return dataArrayBuffer;\n  }\n  return getInitializationVectorFromData(dataArrayBuffer, ivLengthBytes);\n};\n\nexport const encryptNative = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES_NATIVE,\n  //an optional params for the encryption method\n  cryptoKeyConfig: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG = CRYPTO_UTIL_KEY_DESC\n): Promise<ArrayBuffer | Error> => {\n  try {\n    const res = await cryptoModule.encrypt(cryptoKeyConfig, key, data);\n\n    return res;\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const encryptToTypedArray = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<ArrayBuffer | Error> => {\n  let k;\n\n  if (key instanceof CryptoKey) {\n    k = key;\n  } else {\n    k = await getKeyOfType(key, CRYPTO_UTIL_ENCRYPTION_KEY_TYPE);\n  }\n  if (k instanceof Error) {\n    return k;\n  }\n\n  const d = convertToTypedArray(data);\n\n  if (d instanceof Error) {\n    return d;\n  }\n\n  return encryptNative(k, d, cryptoKeyConfig);\n};\n\nexport const encryptToString = async (\n  // crypto key using for data encryption\n  // a public key of the user in the current implementation\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n  //an optional params for the encryption method\n  cryptoKeyConfig?: TCRYPTO_UTILS_ENCRYPT_DATA_KEY_CONFIG\n): Promise<string | Error> => {\n  const encryptedData = await encryptToTypedArray(key, data);\n\n  if (encryptedData instanceof Error) {\n    return encryptedData;\n  }\n\n  return typedArrayToString(encryptedData);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/encryption-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/keys.encryption-utils.ts",["1631"],"import { isCryptoKeyPair } from 'utils/encryption-keys-utils/encryption-keys-utils';\nimport {\n  CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n  CRYPTO_UTIL_KEYPAIR_USAGES,\n  CRYPTO_UTIL_PUBLIC_KEY_USAGE,\n  CRYPTO_UTIL_PRIVATE_KEY_USAGE,\n  CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n  CRYPTO_UTIL_KEY_DESC,\n  CRYPTO_UTIL_KEYS_EXTRACTABLE,\n  CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME,\n  CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME,\n} from './crypto-utils.const';\nimport { cryptoModule } from './main.crypto-utils.const';\nimport {\n  TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE,\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n} from './crypto-utils.types';\nimport { stringify } from 'utils/main-utils';\n\nexport const isCryptoKeyPairImported = (\n  key: any\n): key is TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE => {\n  return (\n    typeof key === 'object' &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME] &&\n    !!key[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]\n  );\n};\n\nexport const generateKeyPair = (): PromiseLike<CryptoKeyPair> =>\n  cryptoModule.generateKey(\n    CRYPTO_UTIL_GENERATE_KEYPAIR_OPTIONS,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    CRYPTO_UTIL_KEYPAIR_USAGES\n  );\n\nexport const exportKey = (\n  key: CryptoKey\n): PromiseLike<TCRYPTO_UTIL_KEY_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    return cryptoModule.exportKey(CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT, key);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportKeyAsString = async (\n  key: CryptoKey\n): Promise<Error | string> => {\n  return stringify(await exportKey(key));\n};\n\nexport const exportPublicKey = async (keyPair: CryptoKeyPair) => {\n  return exportKey(keyPair.publicKey);\n};\n\nexport const exportPublicKeyAsString = async (keyPair: CryptoKeyPair) => {\n  const publicKey = await exportPublicKey(keyPair);\n\n  if (publicKey instanceof Error) {\n    return publicKey;\n  }\n  return stringify(publicKey);\n};\n\nexport const exportKeyPair = async (\n  keyPair: CryptoKeyPair\n): Promise<TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPair(keyPair)) {\n      // do it in parallel\n      const [privateKey, publicKey] = await Promise.all([\n        exportKey(keyPair.privateKey),\n        exportKey(keyPair.publicKey),\n      ]).catch((err) => [err, err]);\n\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('Argument given must be a CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const exportKeyPairAsString = async (\n  keyPair: CryptoKeyPair\n): Promise<string | Error> => {\n  const exportedKeyPair = await exportKeyPair(keyPair);\n\n  if (exportedKeyPair instanceof Error) {\n    return exportedKeyPair;\n  }\n  try {\n    return stringify(exportedKeyPair);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKey = (\n  key: object,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> => {\n  return cryptoModule.importKey(\n    CRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT,\n    key,\n    CRYPTO_UTIL_KEY_DESC,\n    CRYPTO_UTIL_KEYS_EXTRACTABLE,\n    [isPublic ? CRYPTO_UTIL_PUBLIC_KEY_USAGE : CRYPTO_UTIL_PRIVATE_KEY_USAGE]\n  );\n};\n\nexport const importPublicKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, true);\n\nexport const importPrivateKey = (key: object): PromiseLike<CryptoKey> =>\n  importKey(key, false);\n\nexport const importKeyPair = async (\n  keyPair: TCRYPTO_UTIL_KEYPAIR_EXPORT_FORMAT_TYPE\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> => {\n  try {\n    if (isCryptoKeyPairImported(keyPair)) {\n      const [publicKey, privateKey] = await Promise.all([\n        importPublicKey(keyPair[CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]),\n        importPrivateKey(keyPair[CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]),\n      ]).catch((err) => [err, err]);\n\n      if (publicKey instanceof Error) {\n        return publicKey;\n      }\n      if (privateKey instanceof Error) {\n        return privateKey;\n      }\n      return {\n        [CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME]: publicKey,\n        [CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME]: privateKey,\n      };\n    }\n    return new Error('The argument must be an instance of CryptoKeyPair');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyPairFromString = (\n  keyPairString: string\n): Promise<TCRYPTO_UTIL_KEYPAIR_IMPORT_FORMAT_TYPE | Error> | Error => {\n  try {\n    if (typeof keyPairString === 'string') {\n      const keyPairObject = JSON.parse(keyPairString);\n\n      return importKeyPair(keyPairObject);\n    }\n    return new Error('A key pair must be a string');\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importKeyFromString = (\n  keyString: string,\n  isPublic: boolean = true\n): PromiseLike<CryptoKey> | Error => {\n  try {\n    return importKey(JSON.parse(keyString), isPublic);\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPublicKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, true);\n\nexport const importPrivateKeyFromString = (\n  key: string\n): PromiseLike<CryptoKey> | Error => importKeyFromString(key, false);\n\nexport const checkIfStringIsKeyPair = (keyString: string): boolean => {\n  return (\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PRIVATE_KEY_NAME) &&\n    keyString.includes(CRYPTO_UTIL_KEYPAIR_PUBLIC_KEY_NAME)\n  );\n};\n\nconst KEY_NOT_FOUND_ERROR_MESSAGE = 'A key of the required type was not found';\n\nexport const getKeyOfType = async (\n  key: TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  type: KeyType\n): Promise<CryptoKey | Error> => {\n  if (typeof key === 'string') {\n    if (checkIfStringIsKeyPair(key)) {\n      const keyPair = await importKeyPairFromString(key);\n\n      if (keyPair instanceof Error) {\n        return keyPair;\n      }\n      return getKeyOfType(keyPair, type);\n    } else {\n      const keyFromString = await importKeyFromString(key, type === 'public');\n\n      if (keyFromString instanceof Error) {\n        return keyFromString;\n      }\n      return getKeyOfType(keyFromString, type);\n    }\n  }\n  if (key instanceof CryptoKey) {\n    return key.type === type ? key : new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  if (typeof key === 'object') {\n    const keys = Object.values(key);\n    const keyResulted = keys.find(\n      (k: CryptoKey) => k && k.type && k.type === type\n    );\n\n    return keyResulted || new Error(KEY_NOT_FOUND_ERROR_MESSAGE);\n  }\n  return new Error('There is an unsupported type of the key given');\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/main.crypto-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/firebase-utils/firebase-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/hash-calculation-utils/hash-calculation-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/identity-utils/identity-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/lazy-loading-utils/lazy-loading-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/main-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/decrypt.password-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/password-utils/derive-key.password-utils.ts",["1632","1633"],"import { importSalt } from '../encryption-utils/salt-utils';\nimport { TSaltUtilsSaltType } from '../encryption-utils/salt-utils.types';\nimport {\n  TPASSWORD_ENCRYPTION_SUPPORTED_PASSWORD_NATIVE_TYPES,\n  TPASSWORD_ENCRYPTION_SUPPORTES_SALT_NATIVE_TYPES,\n  TPASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT,\n  TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES,\n} from './password-utils.types';\nimport { isTypedArray } from 'utils/typed-array-utils';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT,\n  PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE,\n  PASSWORD_ENCRYPTON_UTILS_KEY_USAGES,\n  PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT,\n  PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT,\n  PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH,\n} from './password-utils.const';\nimport { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\n\nconst cryptoModule = window.crypto.subtle;\n\nexport const generatePasswordKey = async (\n  password: TPASSWORD_ENCRYPTION_SUPPORTED_PASSWORD_NATIVE_TYPES\n): Promise<CryptoKey | Error> => {\n  if (!isTypedArray(password)) {\n    return new Error('The password must have a TypedArray type');\n  }\n  try {\n    return await cryptoModule.importKey(\n      PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT,\n      password,\n      PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n      PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE,\n      PASSWORD_ENCRYPTON_UTILS_KEY_USAGES\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const getDeriviationNative = async (\n  passwordKey: CryptoKey,\n  saltValue: Uint8Array\n): Promise<Error | CryptoKey> => {\n  if (!saltValue) {\n    return new Error('The generated random value of salt is empty');\n  }\n  if (!isTypedArray(saltValue)) {\n    return new Error('The password must have a TypedArray type');\n  }\n  if (!(passwordKey instanceof CryptoKey)) {\n    return new Error('A password key must be an instance of a CryptoKey');\n  }\n  try {\n    return await crypto.subtle.deriveKey(\n      {\n        ...PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG,\n        salt: saltValue,\n      },\n      passwordKey,\n      {\n        ...PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG,\n      },\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED,\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES\n    );\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n};\n\nexport const generatePasswordKeyByPasswordString = async (\n  passwordString: string,\n  saltValue: TSaltUtilsSaltType\n): Promise<CryptoKey | Error> => {\n  const passwordArrayBuffer = decodeDOMStringToArrayBuffer(passwordString);\n\n  if (passwordArrayBuffer instanceof Error) {\n    return passwordArrayBuffer;\n  }\n\n  const passwordBaseKey = await generatePasswordKey(passwordArrayBuffer);\n\n  if (passwordBaseKey instanceof Error) {\n    return passwordBaseKey;\n  }\n\n  const saltImported = importSalt(saltValue);\n\n  if (saltImported instanceof Error) {\n    return saltImported;\n  }\n  return getDeriviationNative(passwordBaseKey, saltImported);\n};\n\nexport const exportPasswordKey = (\n  passwordKey: CryptoKey\n):\n  | PromiseLike<TPASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT>\n  | Error => {\n  try {\n    return cryptoModule.exportKey(\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT,\n      passwordKey\n    );\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const exportPasswordKeyAsString = async (\n  passwordKey: CryptoKey\n): Promise<string | Error> => {\n  try {\n    const cryptoKey = await cryptoModule.exportKey(\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT,\n      passwordKey\n    );\n\n    if (cryptoKey instanceof Error) {\n      return cryptoKey;\n    }\n    return JSON.stringify(cryptoKey);\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n\nexport const generatePasswordKeyInExportFormat = async (\n  passwordString: string,\n  salt: TSaltUtilsSaltType\n): Promise<\n  TPASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT | Error\n> => {\n  const passwordKey = await generatePasswordKeyByPasswordString(\n    passwordString,\n    salt\n  );\n\n  if (passwordKey instanceof Error) {\n    return passwordKey;\n  }\n\n  return exportPasswordKey(passwordKey);\n};\n\nexport const generatePasswordKeyAsString = async (\n  passwordString: string,\n  salt: TSaltUtilsSaltType\n): Promise<string | Error> => {\n  const passwordKeyExported = await generatePasswordKeyInExportFormat(\n    passwordString,\n    salt\n  );\n\n  if (passwordKeyExported instanceof Error) {\n    return passwordKeyExported;\n  }\n\n  return JSON.stringify(passwordKeyExported);\n};\n\nexport const importPasswordKey = async (\n  passwordKey: TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES\n): Promise<CryptoKey | Error> => {\n  try {\n    return await cryptoModule.importKey(\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT,\n      passwordKey,\n      {\n        ...PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG,\n      },\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED,\n      PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES\n    );\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const importPasswordKeyFromString = async (\n  passwordKey: string\n): Promise<CryptoKey | Error> => {\n  try {\n    const keyExportedFormat: TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES = JSON.parse(\n      passwordKey\n    );\n\n    return importPasswordKey(keyExportedFormat);\n  } catch (err) {\n    console.error(err);\n\n    return err;\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/encrypt.password-utils.ts",["1634","1635"],"import { TSaltUtilsSaltType } from './../encryption-utils/salt-utils.types';\nimport {\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH,\n  PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n} from './password-utils.const';\nimport {\n  generateInitializationVectorNativeArrayBuffer,\n  encryptToTypedArray,\n  concatDataWithInitializationVector,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCRYPTO_UTIL_ENCRYPT_KEY_TYPES,\n  TCRYPTO_UTIL_ENCRYPT_DATA_TYPES,\n} from 'utils/encryption-utils/crypto-utils.types';\nimport { encodeArrayBufferToDOMString } from 'utils/string-encoding-utils';\nimport {\n  importPasswordKeyFromString,\n  generatePasswordKeyByPasswordString,\n} from './derive-key.password-utils';\n\nexport const encryptDataToArrayBuffer = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | ArrayBuffer> => {\n  let cryptoKey;\n\n  if (key instanceof CryptoKey) {\n    cryptoKey = key;\n  } else {\n    cryptoKey = await importPasswordKeyFromString(key);\n  }\n  if (cryptoKey instanceof Error) {\n    return cryptoKey;\n  }\n\n  const iv = generateInitializationVectorNativeArrayBuffer();\n\n  if (iv instanceof Error) {\n    return iv;\n  }\n\n  const dataEncrypted = await encryptToTypedArray(cryptoKey, data, {\n    ...PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS,\n    iv,\n  });\n\n  if (dataEncrypted instanceof Error) {\n    return dataEncrypted;\n  }\n\n  return concatDataWithInitializationVector({\n    data: dataEncrypted,\n    iv,\n  });\n};\n\nexport const encryptDataToString = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return encodeArrayBufferToDOMString(encrypted);\n};\n\nexport const encryptDataToUInt8Array = async (\n  key: string | CryptoKey,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | Uint8Array> => {\n  const encrypted = await encryptDataToArrayBuffer(key, data);\n\n  if (encrypted instanceof Error) {\n    return encrypted;\n  }\n  return new Uint8Array(encrypted);\n};\n\nexport const encryptDataWithPassword = async (\n  password: string,\n  salt: TSaltUtilsSaltType,\n  data: TCRYPTO_UTIL_ENCRYPT_DATA_TYPES\n): Promise<Error | string> => {\n  const key = await generatePasswordKeyByPasswordString(password, salt);\n\n  if (key instanceof Error) {\n    console.error(key);\n    return key;\n  }\n\n  return encryptDataToString(key, data);\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.const.ts",["1636","1637"],"import { decodeDOMStringToArrayBuffer } from 'utils/string-encoding-utils';\nimport { TTypedArrays } from 'types/main.types';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_IMPORTED_FORMAT =\n  'raw';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH = 12;\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM = 'PBKDF2';\n\nexport const PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_IS_KEY_EXTRACTABLE = false;\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_USAGES = ['deriveBits', 'deriveKey'];\n\nexport const PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM = 'SHA-512';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS = 100000;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_KEY_LENGTH_BYTES = 16;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BASE_KEY_CONFIG = {\n  name: PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_ALHORITHM,\n  hash: PASSWORD_ENCRYPTON_UTILS_KEY_HASH_ALHORITHM,\n  salt: null,\n  iterations: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_BITS_ITERATIONS,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM =\n  'AES-GCM';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH = 256;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_CONFIG = {\n  name: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_ALGORITHM,\n  length: PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_LENGTH,\n};\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IS_EXPORTED = true;\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_USAGES = [\n  'encrypt',\n  'decrypt',\n];\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT =\n  'jwk';\n\nexport const PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_IMPORT_FORMAT = PASSWORD_ENRYPTION_UTILS_KEY_DERIVED_TARGET_KEY_EXPORT_FORMAT;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH = 15;\n\nexport const PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n\nexport const PASSWORD_ENCRYPTION_UTILS_DECRYPTION_PARAMS = {\n  name: 'AES-GCM',\n  iv: null,\n};\n","/home/paul/projects/decentrilized-protocol/src/utils/password-utils/password-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/string-encoding-utils.ts",["1638"],"/**\n * The sulutions is right from the article\n * https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n */\n\nexport function encodeArrayBufferToDOMString(buf: ArrayBuffer) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\nexport function decodeDOMStringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n","/home/paul/projects/decentrilized-protocol/src/utils/string-utilities.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/typed-array-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/validation-utils/validation-utils.ts",["1639"],"import Ajv, { ValidateFunction } from 'ajv';\nimport ajvJSONSchemaDraft6 from 'ajv/lib/refs/json-schema-draft-06.json';\nimport memoize from 'lodash.memoize';\nimport { isDEV } from 'const/common-values/common-values-env';\n\nconst ajv = new Ajv({\n  allErrors: isDEV,\n  verbose: isDEV,\n});\najv.addMetaSchema(ajvJSONSchemaDraft6);\n\nexport const getValidatorForJSONSchema = memoize(\n  (schema: object): ValidateFunction => ajv.compile(schema)\n);\n\nexport const validateBySchema = (schema: object, value: any): boolean => {\n  const validator = getValidatorForJSONSchema(schema);\n\n  return !!validator(value);\n};\n","/home/paul/projects/decentrilized-protocol/src/App.test.tsx",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-aurhority.keys.common.test.ts",["1640","1641","1642"],"import { signToString, verifyFromString } from 'utils/data-sign-utils';\nimport {\n  getPublicKeysFromCryptoKeyPairs,\n  checkIsCryptoKeyPairs,\n  exportKeyPairsAsString,\n  importKeyPairsFromString,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME,\n  CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME,\n  CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  encryptNative,\n  decryptNative,\n} from 'utils/encryption-utils/encryption-utils';\nimport {\n  TCACryptoKeyPairs,\n  TCACryptoPubilicKeys,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  stringToTypedArray,\n  typedArrayToString,\n} from 'utils/typed-array-utils';\n\nexport const runTestEncryptData = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | true> => {\n  const dataToEncode = 'data to encode';\n  const {\n    [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: encryptionKeyPair,\n  } = keyPairs;\n  const dataToEncodeTypeedArray = stringToTypedArray(dataToEncode);\n\n  if (dataToEncodeTypeedArray instanceof Error) {\n    console.error(dataToEncodeTypeedArray);\n    console.error('Failed to convert data to typed array');\n    return;\n  }\n\n  const encryptedData = await encryptNative(\n    encryptionKeyPair.publicKey,\n    dataToEncodeTypeedArray\n  );\n\n  if (encryptedData instanceof Error) {\n    console.error('Cant encrypt data with the key pair generated');\n    console.error(encryptedData);\n    return;\n  }\n\n  const decryptedData = await decryptNative(\n    encryptionKeyPair.privateKey,\n    encryptedData\n  );\n\n  if (decryptedData instanceof Error) {\n    console.error('Cant decrypt data encrypted with a generated key pairs');\n    console.error(decryptedData);\n    return;\n  }\n\n  const decryptedString = typedArrayToString(decryptedData);\n\n  if (decryptedString instanceof Error) {\n    console.error(decryptedString);\n    console.error(\n      'Failed to convert a string decrypted as array buffer to a DOMString'\n    );\n  }\n\n  if (decryptedString !== dataToEncode) {\n    console.error(\n      `Decrypted data is invalid. Expected: ${dataToEncode}, but ${decryptedString} was received`\n    );\n    return;\n  }\n  return true;\n};\n\nexport const runTestDataSign = async (\n  keyPairs: TCACryptoKeyPairs\n): Promise<undefined | boolean> => {\n  const dataToSign = {\n    hello: 'test hello',\n  };\n  const { [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: signKeyPair } = keyPairs;\n  const signString = await signToString(signKeyPair, dataToSign);\n\n  if (signString instanceof Error) {\n    console.error('Failed to sign the string');\n    console.error(signString);\n    return;\n  }\n  if (typeof signString !== 'string') {\n    console.error('Failed to sign the data as a string');\n    return;\n  }\n\n  const verifyDataResult = await verifyFromString(\n    signKeyPair,\n    dataToSign,\n    signString\n  );\n\n  if (verifyDataResult instanceof Error) {\n    console.error('Failed to verify the data signed');\n    console.error(verifyDataResult);\n    return;\n  }\n  if (verifyDataResult !== true) {\n    console.error('The wrong result was given by the verifyFromString');\n    console.error(verifyDataResult);\n    return;\n  }\n\n  const wrongDataVerifyResult = await verifyFromString(\n    signKeyPair,\n    'Wrong data',\n    signString\n  );\n\n  if (wrongDataVerifyResult instanceof Error) {\n    console.error('Failed to verify a non original string data');\n    console.error(wrongDataVerifyResult);\n    return;\n  }\n  if (wrongDataVerifyResult !== false) {\n    console.error('The wrong result of non origin string verification');\n    return;\n  }\n  return true;\n};\n\nexport const runTestForKeyPairs = async (\n  keyPairs: any\n): Promise<undefined | boolean> => {\n  if (keyPairs instanceof Error) {\n    console.error('Cant generate a crypto key pair');\n    console.error(keyPairs);\n    return;\n  }\n\n  if ((await runTestEncryptData(keyPairs)) !== true) {\n    return;\n  }\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    return;\n  }\n\n  const exportedKeyPairs = await exportKeyPairsAsString(keyPairs);\n\n  if (exportedKeyPairs instanceof Error) {\n    console.error('failed to export the key pair');\n    console.error(exportedKeyPairs);\n    return;\n  }\n  if (typeof exportedKeyPairs !== 'string') {\n    console.error('exportedKeyPairs does not exported in a string format');\n    return;\n  }\n\n  const importedKeyPairs = await importKeyPairsFromString(exportedKeyPairs);\n\n  if (!checkIsCryptoKeyPairs(importedKeyPairs)) {\n    console.error('A wrong format of the imported key pairs');\n    return;\n  }\n  if (importedKeyPairs instanceof Error) {\n    console.error('Failed to import key pairs from string');\n    return;\n  }\n  console.log('run tests for the imported from the exported string key pairs');\n  if ((await runTestEncryptData(importedKeyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs fot data sign'\n  );\n  if ((await runTestDataSign(keyPairs)) !== true) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs fot data sign'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        privateKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        privateKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].privateKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** --data sign test */\n  console.log(\n    'run tests encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey:\n          keyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: keyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME].publicKey,\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  const publicKeys = getPublicKeysFromCryptoKeyPairs(keyPairs);\n\n  if (publicKeys instanceof Error) {\n    console.error('Cant get public keys from crypto key pairs');\n    console.error(publicKeys);\n    return;\n  }\n\n  console.log(\n    'run tests public keys encrypt for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  if (\n    (await runTestEncryptData({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_ENCRYPTION_KEY_PAIR_NAME],\n        publicKey: (publicKeys as TCACryptoPubilicKeys)[\n          CA_CRYPTO_KEY_PAIRS_ENCRYPTION_PUBLIC_KEY_NAME\n        ],\n      },\n    })) !== true\n  ) {\n    console.log(\n      'failed tests public keys for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n    );\n    return;\n  }\n  /** data sign test-- */\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n  );\n  if (\n    (await runTestDataSign({\n      ...importedKeyPairs,\n      [CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME]: {\n        ...importedKeyPairs[CA_CRYPTO_KEY_PAIRS_SIGN_KEY_PAIR_NAME],\n        publicKey: (publicKeys as TCACryptoPubilicKeys)[\n          CA_CRYPTO_KEY_PAIRS_SIGN_PUBLIC_KEY_NAME\n        ],\n      },\n    })) !== true\n  ) {\n    console.error(\n      'failed tests public keys data sign for the imported from the exported string key pairs: use public key from the imported key pairs and the private key from the originally generated key pairs'\n    );\n    return;\n  }\n  console.log(\n    'run tests public keys data sign for the imported from the exported string key pairs: use private key from the imported key pairs and the public key from the originally generated key pairs'\n  );\n  /** --data sign test */\n\n  console.warn('Central authority keys tests are succeed');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.const.ts",["1643"],"import { generateCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\n\nexport const CA_CONNECTION_FIREBASE_CONFIG = {\n  apiKey: 'AIzaSyCwmUlVklNmGZ0SD11NKT8gpvmZXbgbBRk',\n  authDomain: 'protocol-f251b.firebaseapp.com',\n  databaseURL: 'https://protocol-f251b.firebaseio.com',\n  projectId: 'protocol-f251b',\n  storageBucket: '',\n  messagingSenderId: '275196342406',\n  appId: '1:275196342406:web:40b79d671c50af57',\n};\n\nexport const CA_CONNECTION_FIREBASE_USER_CREDENTIALS = {\n  login: 'akulich.p@gmail.com',\n  password: '123456',\n};\n\nexport const CA_CONNECTION_FIREBASE_CREDENTIALS = CA_CONNECTION_FIREBASE_USER_CREDENTIALS;\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.credentials-storage.ts",["1644"],"import { CAConnectionFirestoreUtilsCredentialsStrorage } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { connectWithFirebase } from './central-authority-connection.test.firebase.utils';\nimport { generateCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport {\n  getUserIdentityByCryptoCredentials,\n  compareCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nexport const runTestFirebaseCredentialsStorage = async () => {\n  console.warn('runTestFirebaseCredentialsStorage::start');\n  const firebaseConnection = await connectWithFirebase();\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const credetntialsStoreConnectionToFirebase = new CAConnectionFirestoreUtilsCredentialsStrorage(\n    firebaseConnection\n  );\n\n  if (credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await credetntialsStoreConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!credetntialsStoreConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const credentialsForUser = await credetntialsStoreConnectionToFirebase.getCredentialsForTheCurrentUser();\n\n  if (credentialsForUser instanceof Error) {\n    console.error(credentialsForUser);\n    console.error('Failed to get credentials for the current user');\n    return;\n  }\n  if (!credentialsForUser) {\n    console.error('Credentials for the user must be auto generated on sign up');\n    return;\n  }\n\n  const credentials = await generateCryptoCredentials();\n\n  if (credentials instanceof Error) {\n    console.error('Failed to generate crypto credentials');\n    return;\n  }\n\n  const setCredentialsResult = await credetntialsStoreConnectionToFirebase.setUserCredentials(\n    credentials\n  );\n\n  if (setCredentialsResult instanceof Error) {\n    console.error(setCredentialsResult);\n    console.error('Failed to set credentials');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user created and stored once must be immputable anyway'\n    );\n    return;\n  }\n\n  const userId = getUserIdentityByCryptoCredentials(setCredentialsResult);\n\n  if (userId instanceof Error) {\n    console.error(userId);\n    console.error('Failed to get user id by crypto credentials');\n    return;\n  }\n\n  const getCredentialsResult = await credetntialsStoreConnectionToFirebase.getUserCredentials(\n    userId\n  );\n\n  if (!getCredentialsResult) {\n    console.error(\n      'There is no credentials stored before was found in the Firebsae database'\n    );\n    return;\n  }\n  if (getCredentialsResult instanceof Error) {\n    console.error('Failed to read credentials from the Firebase database');\n    return;\n  }\n  if (\n    (await compareCryptoCredentials(\n      setCredentialsResult,\n      credentialsForUser\n    )) !== true\n  ) {\n    console.error(\n      'Credentials for the user got by the user id must be immputable the same as the credentials set by the user on sign up flow'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseCredentialsStorage::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.database.ts",["1645","1646"],"import CAConnectionWithFirebaseUtilDatabase from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.database/central-authority-connection-firebase-utils.database';\nimport { connectWithFirebase } from './central-authority-connection.test.firebase.utils';\nimport { CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX } from 'classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nexport const runTestFirebaseConnectionDatabase = async () => {\n  console.warn('runTestFirebaseConnectionDatabase::start');\n\n  const login = 'i2ga8r+7mc075w0nc9ns@sharklasers.com';\n  const password = '123456';\n  const firebaseConnection = await connectWithFirebase({\n    login,\n    password,\n  });\n\n  if (firebaseConnection instanceof Error) {\n    console.error(firebaseConnection);\n    return new Error('Failed to connect with firebase');\n  }\n\n  const databaseConnectionToFirebase = new CAConnectionWithFirebaseUtilDatabase();\n\n  if (databaseConnectionToFirebase.isConnected) {\n    console.error('Database connection flag must be false');\n    return;\n  }\n\n  const connectionResult = await databaseConnectionToFirebase.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error('Failed to connect to the database server');\n    return;\n  }\n  if (!databaseConnectionToFirebase.isConnected) {\n    console.error(\n      'Database connection flag must be true after connection method returns a success result'\n    );\n    return;\n  }\n\n  const randomUUID = generateUUID();\n  const testKey = `${CA_CONNECTION_FIREBASE_UTILS_STORAGE_CREDENTIALS_KEY_PREFIX}${randomUUID}`;\n  const testData = {\n    testData: 'testData',\n  };\n  const setValueResult = await databaseConnectionToFirebase.setValue(\n    testKey,\n    testData\n  );\n\n  if (setValueResult instanceof Error) {\n    console.error(setValueResult);\n    return setValueResult;\n  }\n\n  const readValueResult = await databaseConnectionToFirebase.getValue(testKey);\n\n  if (readValueResult instanceof Error) {\n    console.error(readValueResult);\n    console.error('Failed to read a data from the database');\n    return;\n  }\n  if (!readValueResult || typeof readValueResult !== 'object') {\n    console.error('Value is empty or have a wrong format');\n    return;\n  }\n  if ((readValueResult as any).testData !== testData.testData) {\n    console.error(\n      'The data read from the Firebase Realtime Database have a wrong format'\n    );\n    return;\n  }\n  console.warn('runTestFirebaseConnectionDatabase::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.firebase/central-authority-connection.test.firebase.ts",["1647","1648","1649","1650","1651","1652"],"import { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  connectToFirebase,\n  connectWithFirebase,\n  deleteTheUserFromCA,\n} from './central-authority-connection.test.firebase.utils';\nimport {\n  CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n  CA_CONNECTION_FIREBASE_CONFIG,\n} from './central-authority-connection.test.firebase.const';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { ICAConnectionUserAuthorizedResult } from 'classes/central-authority-class/central-authority-connections/central-authority-connections.types';\nimport { compareCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\n\nexport const runTestCAConnectionFirebaseChangeEmail = async () => {\n  const connectionFirebase = await connectToFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  const userProfileWithEmailTest = {\n    name: 'Test account',\n    email: 'gavidan@6mail.top',\n  };\n  const updateProfileWithEmailResult = await connectionFirebase.setProfileData(\n    userProfileWithEmailTest\n  );\n\n  if (updateProfileWithEmailResult instanceof Error) {\n    console.error('Failed to set the profile (with a email) data');\n    return;\n  }\n  if (updateProfileWithEmailResult.name !== updateProfileWithEmailResult.name) {\n    console.error('Name was not updated in the profile');\n    return;\n  }\n  if (\n    updateProfileWithEmailResult.email !== updateProfileWithEmailResult.email\n  ) {\n    console.error('The email was not updated in the profile');\n    return;\n  }\n  if (connectionFirebase.isAuthorized) {\n    console.error(\n      'isAuthorized connection flag must be false on email value changed'\n    );\n    return;\n  }\n};\n\nexport const runTestCAConnectionFirebase = async () => {\n  console.warn('CA connection firebase test started');\n  const credentials = {\n    login: 'lxnmgnyc@sharklasers.com',\n    password: '123456',\n  };\n  const connectionFirebase = await connectWithFirebase(credentials);\n  if (connectionFirebase instanceof Error) {\n    console.error(connectionFirebase);\n    return;\n  }\n\n  console.warn('CA connection firebase test succeed');\n\n  //check profile update result\n  const userProfileTestWOEmailAndPhoneNumber: Partial<\n    ICentralAuthorityUserProfile\n  > = {\n    name: 'Paul',\n    photoURL:\n      'https://cdn.dribbble.com/users/199982/screenshots/4044699/furkan-avatar-dribbble.png',\n  };\n  const updateProfileResult = await connectionFirebase.setProfileData(\n    userProfileTestWOEmailAndPhoneNumber\n  );\n\n  if (updateProfileResult instanceof Error) {\n    console.error('Failed tp set the profile (without a email) data');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n\n  if (\n    userProfileTestWOEmailAndPhoneNumber.photoURL !==\n    updateProfileResult.photoURL\n  ) {\n    console.error('The photo URL was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  if (userProfileTestWOEmailAndPhoneNumber.name !== updateProfileResult.name) {\n    console.error('Name was not updated in the profile');\n    return deleteTheUserFromCA(connectionFirebase, credentials);\n  }\n  const deleteTheUserResult = await deleteTheUserFromCA(\n    connectionFirebase,\n    credentials\n  );\n  if (deleteTheUserResult instanceof Error) {\n    console.error(deleteTheUserResult);\n    return new Error('Failed to delete the user from the Firebase authority');\n  }\n  console.warn('CA connection firebase test success');\n};\n\nexport const runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider = async () => {\n  const credentials = {\n    login: 'lxnmgnyc@sharklasers.com',\n    password: '123456',\n  };\n  console.error('runTestCAConnectionFirebaseWithoutCryptoCredentials::start');\n  const connectionFirebase = await connectWithFirebase();\n\n  if (connectionFirebase instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n  const {\n    cryptoCredentials: cryptoCredentialsGenerated,\n  } = connectionFirebase.getAuthResult() as ICAConnectionUserAuthorizedResult;\n  if (!checkIsValidCryptoCredentials(cryptoCredentialsGenerated)) {\n    console.error(\n      'Invalida crypto credentials generated by Firebase CA connection'\n    );\n    return;\n  }\n\n  const userIdentityByCryptoCredentials = new CentralAuthorityIdentity(\n    cryptoCredentialsGenerated\n  );\n\n  if (!userIdentityByCryptoCredentials.isValid) {\n    console.error('The crypto credentials generated is not valid');\n    return;\n  }\n  const {\n    identityDescription: userIdentityDescription,\n  } = userIdentityByCryptoCredentials;\n\n  if (userIdentityDescription instanceof Error) {\n    console.error(userIdentityDescription);\n    console.error('Failed to parse the identity generated');\n    return;\n  }\n\n  const { authorityProviderURI } = userIdentityDescription;\n\n  if (authorityProviderURI !== CA_CONNECTION_FIREBASE_CONFIG.databaseURL) {\n    console.error(\n      'The url of the Firebase authority provider from generated identity is not valid'\n    );\n    return;\n  }\n  const signOutResult = await connectionFirebase.signOut();\n  if (signOutResult instanceof Error) {\n    console.error(signOutResult);\n    console.error('Failed to sign out');\n    return;\n  }\n\n  const authorizeResultWithCredentialsGenerated = await connectionFirebase.authorize(\n    {\n      ...CA_CONNECTION_FIREBASE_USER_CREDENTIALS,\n      cryptoCredentials: cryptoCredentialsGenerated,\n    }\n  );\n  if (authorizeResultWithCredentialsGenerated instanceof Error) {\n    return new Error('Failed to sign up to the firebase app');\n  }\n  if (!connectionFirebase.isAuthorized) {\n    return new Error(\n      'isAuthorized connection flag must be truthly on authorization succeed'\n    );\n  }\n\n  const {\n    cryptoCredentials: cryptoCredentialsFromAuthorization,\n  } = authorizeResultWithCredentialsGenerated;\n  if (\n    (await compareCryptoCredentials(\n      cryptoCredentialsFromAuthorization,\n      cryptoCredentialsGenerated\n    )) !== true\n  ) {\n    console.error(\n      'Crypto credentials returned after success authorization must be same as provided (if not stored before)'\n    );\n    return;\n  }\n  console.warn('runTestCAConnectionFirebaseWithoutCryptoCredentials::success');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-connection.test/central-authority-connection.test.ts",["1653"],"import { validateUserProfileData } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user';\n\nexport * from './central-authority-connection.test.firebase';\n\nexport const runTestProfileValidation = () => {\n  console.warn('test for CA user profiel data validation started');\n  const test1ProfileValid = {\n    name: '1',\n  };\n\n  if (!validateUserProfileData(test1ProfileValid)) {\n    console.error('The profile data 1 must be valid');\n    return;\n  }\n\n  const test2ProfileValid = {\n    phone: '+79292239192',\n  };\n\n  if (!validateUserProfileData(test2ProfileValid)) {\n    console.error('The profile data 2 must be valid');\n    return;\n  }\n  console.warn('test for CA user profiel data validation succeed');\n\n  const test3ProfileValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'ggg@mail.com',\n    photoURL:\n      'https://camo.githubusercontent.com/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (!validateUserProfileData(test3ProfileValid)) {\n    console.error('The profile data 3 must be valid');\n    return;\n  }\n\n  const testProfileEmailNotValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'gggmail.com',\n    photoURL:\n      'https://camo.githubusercontent.com/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (validateUserProfileData(testProfileEmailNotValid)) {\n    console.error('The email in the profile data is not valid');\n    return;\n  }\n\n  const testProfilePhotoUrlNotValid = {\n    name: 'User Name',\n    phone: '+79292239192',\n    email: 'ggg@mail.com',\n    photoURL:\n      'camo.githubusercontent/e7a14b9a151d9b1d23a0d05dac1af86b0e972714/68747470733a2f2f692e696d6775722e636f6d2f4a497942744b572e706e67',\n  };\n\n  if (validateUserProfileData(testProfilePhotoUrlNotValid)) {\n    console.error('The photo url in the profile data is not valid');\n    return;\n  }\n\n  console.warn('test for CA user profiel data validation succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority-storage-identity-credentials.test.ts",["1654"],"import { CentralAuthorityIdentityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-identity-credentials/central-authority-storage-identity-credentials';\nimport { ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { getUserIdentityByCryptoCredentials, getUserCredentialsByUserIdentityAndCryptoKeys, exportCryptoCredentialsToString } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { ICAUserUniqueIdentifierDescriptionWithOptionalVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { TCentralAuthorityUserIdentity } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\n\n\nconst runCACredentialsIdentityStorageTestForCredentials = async (\n  storageInstance: CentralAuthorityIdentityCredentialsStorage,\n  testIdentityDescription: ICAUserUniqueIdentifierDescriptionWithOptionalVersion | TCentralAuthorityUserIdentity,\n  ): Promise<boolean | undefined> => {\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key Pairs');\n    return;\n  }\n\n  const setInStorageResult = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (setInStorageResult instanceof Error) {\n    console.error(setInStorageResult);\n    return;\n  }\n\n  const caCryptoCredentialsTestRead = await storageInstance.getCredentials(identityTest);\n\n  if (caCryptoCredentialsTestRead instanceof Error) {\n    console.error(caCryptoCredentialsTestRead);\n    console.error('Failed to read the crypto credentials saved previosely');\n    return;\n  }\n  if (!caCryptoCredentialsTestRead) {\n    console.error('The crypto credentials saved previousely have an empty value stored');\n    return;\n  }\n\n  const identityValue = getUserIdentityByCryptoCredentials(caCryptoCredentialsTestRead);\n\n  if (identityValue instanceof Error) {\n    console.error(identityValue);\n    console.error('There is a broken identity value was stored');\n    return;\n  }\n  if (identityValue !== identityTest) {\n    console.error('The identity stored have a wrong value not same as stred');\n    return;\n  }\n\n  const caCredentialsTest = getUserCredentialsByUserIdentityAndCryptoKeys(\n    identityTest,\n    testKeyPairs,\n  );\n\n    if (caCredentialsTest instanceof Error) {\n      console.error(caCredentialsTest);\n      console.error('Failed to create CACryproCredentials by the identity and test key pairs');\n      return;\n    }\n\n  const storeResultCaCryptoCredentials = await storageInstance.setCredentials(caCredentialsTest);\n\n  if (storeResultCaCryptoCredentials instanceof Error) {\n    console.error(storeResultCaCryptoCredentials);\n    console.error('Failed to store the CACryptoCredentials format');\n    return;\n  }\n  if (storeResultCaCryptoCredentials !== false) {\n    console.error('Crypto credentials for the same identity must not be rewritten');\n    return;    \n  }\n  \n  const caCryptoCredentialsExportedToStringTest = await exportCryptoCredentialsToString(caCredentialsTest);\n\n  if (caCryptoCredentialsExportedToStringTest instanceof Error) {\n    console.error(caCryptoCredentialsExportedToStringTest);\n    console.error('Failed to export CACryptoCredentials to a string');\n    return;\n  }\n\n  const storeResultCaCryptoCredentialsExportedToString = await storageInstance.setCredentials(caCryptoCredentialsExportedToStringTest);\n\n  if (storeResultCaCryptoCredentialsExportedToString instanceof Error) {\n    console.error(storeResultCaCryptoCredentialsExportedToString);\n    console.error('Failed to store the CACryptoCredentials exported to a string format');\n    return;\n  }\n  if (storeResultCaCryptoCredentialsExportedToString !== false) {\n    console.error('Crypto credentials (exported as string) for the same identity must not be rewritten');\n    return;    \n  }\n  \n  return true;\n};\n\nexport const runCACredentialsIdentityStorageTest = async () => {\n  console.warn('Storage identity test was started');\n  \n  const conectionCredentials: ISecretStoreCredentials = {\n    password: '11234',\n  };\n  const storageInstance = new CentralAuthorityIdentityCredentialsStorage();\n  const connectionResult = await storageInstance.connect(conectionCredentials);\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    console.error(new Error('Failed to connect to the storage'));\n    return;\n  }\n\n  const testIdentityDescription = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultFirst = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescription\n  );\n\n  if (resultFirst !== true) {\n    console.error('Test for the first credentials was failed');\n    return;\n  }\n\n  const testIdentityDescriptionTwo = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: 'https://google1.com',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultTwo = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionTwo\n  );\n\n  if (resultTwo !== true) {\n    console.error('Test for the second credentials was failed');\n    return;\n  }\n\n  console.warn('Test for a wrong identity valie started');\n  const testIdentityDescriptionWrongFormat = {\n    [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: '',\n    [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: generateUUID(),\n  };\n  const resultMustBeFailed = await runCACredentialsIdentityStorageTestForCredentials(\n    storageInstance,\n    testIdentityDescriptionWrongFormat\n  );\n\n  if (resultMustBeFailed) {\n    console.error('Test for a wrong identity valie must failed');\n    return;\n  }\n  console.warn('Test for a wrong identity value succeed');\n\n  const storageDisconnectResult = await storageInstance.disconnect();\n\n  if (storageDisconnectResult instanceof Error) {\n    console.error(storageDisconnectResult);\n    console.error('Failed to disconnect');\n    return;\n  }\n\n  const caIdentityValueTest = new CentralAuthorityIdentity(\n    testIdentityDescription\n  );\n  const identityTest = caIdentityValueTest.toString();\n    \n  if (!identityTest) {\n    console.error(identityTest);\n    console.error('Failed to generate test identity string on disconnected storage test');\n    return;\n  }\n\n  const testKeyPairs = await generateKeyPairs();\n\n  if (testKeyPairs instanceof Error) {\n    console.error(testKeyPairs);\n    console.error('Failed to generate key pairs on disconnected storage test');\n    return;\n  }\n\n  const setCredentialsResultDisconnected = await storageInstance.setCredentials(\n    identityTest,\n    testKeyPairs\n  );\n\n  if (!(setCredentialsResultDisconnected instanceof Error)) {\n    console.error('Execution of the setCredentials method must failed on disconnected storage')\n    return;\n  }\n\n  const getCredentialsResultDisconnected = await storageInstance.getCredentials(\n    identityTest,\n  );\n\n  if (!(getCredentialsResultDisconnected instanceof Error)) {\n    console.error('Execution of the getCredentials method must failed on disconnected storage')\n    return;\n  }\n  console.warn('Storage identity test was succes');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.credentials-storage.test.ts",["1655"],"import { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { runTestForKeyPairs } from './central-aurhority.keys.common.test';\nimport {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\nimport { CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials.const';\nimport { CentralAuthorityCredentialsStorage } from 'classes/central-authority-class/central-authority-storage/central-authority-storage-credentials/central-authority-storage-credentials';\n\nexport const runTestsCredentialsStorage = async () => {\n  const cryptoKeyPairsGenerated = await generateKeyPairs();\n\n  if (cryptoKeyPairsGenerated instanceof Error) {\n    console.error(cryptoKeyPairsGenerated);\n    console.error('Failed to generate a new key pairs');\n    return;\n  }\n\n  console.warn('Run tests for credentials storage keys generated');\n  const result = await runTestForKeyPairs(cryptoKeyPairsGenerated);\n\n  if (result !== true) {\n    console.warn('Failed tests for credentials storage keys generated');\n    return;\n  }\n\n  const cryptoCredentialsStorage = new CentralAuthorityCredentialsStorage();\n  const storageAuthCredentials = {\n    [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: generateUUID(),\n    [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: 'password',\n  };\n\n  console.warn(\n    'Success result in the tests for credentials storage keys generated'\n  );\n  const connectionResult = await cryptoCredentialsStorage.connect(\n    storageAuthCredentials\n  );\n\n  if (connectionResult instanceof Error) {\n    console.error('Failed to connect to the secret storage');\n    return;\n  }\n\n  const credentials = await cryptoCredentialsStorage.getCredentials();\n\n  if (credentials instanceof Error) {\n    console.error(credentials);\n    console.error('Failed to reade a credentials read from the new instance');\n    return;\n  }\n  if (credentials !== null) {\n    console.error('The credentials read from the new instance must be null');\n    return;\n  }\n\n  const credentialsSetResult = await cryptoCredentialsStorage.setCredentials(\n    cryptoKeyPairsGenerated\n  );\n\n  if (credentialsSetResult instanceof Error) {\n    console.error(credentialsSetResult);\n    console.error('Failed to set the credentials');\n    return;\n  }\n\n  const credentialsCached = await cryptoCredentialsStorage.getCredentials();\n\n  if (credentialsCached instanceof Error) {\n    console.error(credentialsCached);\n    console.error('Failed to read a credentials stored');\n    return;\n  }\n  if (credentialsCached === null) {\n    console.error('The credentials stored are absent in the storage and cache');\n    return;\n  }\n\n  const {\n    [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairsStored,\n  } = credentialsCached;\n  const resultTestCredentialsStored = await runTestForKeyPairs(\n    cryptoKeyPairsStored\n  );\n\n  if (resultTestCredentialsStored !== true) {\n    console.warn(\n      'Failed tests for credentials storage keys read from stored values'\n    );\n    return;\n  }\n\n  const resultCryptoCredentialsStorageDisconnect = await cryptoCredentialsStorage.disconnect();\n\n  if (resultCryptoCredentialsStorageDisconnect instanceof Error) {\n    console.error(resultCryptoCredentialsStorageDisconnect);\n    console.error(\n      'Failed to disconnect the first instance of the resultCryptoCredentialsStorageDisconnect'\n    );\n    return;\n  }\n\n  const credentialsReadFromStorageDisconnected = await cryptoCredentialsStorage.getCredentials();\n\n  if (!(credentialsReadFromStorageDisconnected instanceof Error)) {\n    console.error('Any read from the disconnected storage must cause an error');\n    return;\n  }\n\n  const resultSetCredentialsReadFromStorageDisconnected = await cryptoCredentialsStorage.setCredentials(\n    cryptoKeyPairsGenerated\n  );\n\n  if (!(resultSetCredentialsReadFromStorageDisconnected instanceof Error)) {\n    console.error(\n      'Any write from the disconnected storage must cause an error'\n    );\n    return;\n  }\n  /**\n   * create a new instance\n   * to check if it works\n   * and can to read a stored\n   * piveousely crypto credentials.\n   * Connect with the credentials\n   * exactly same as used\n   * for the first connection\n   */\n\n  const cryptoCredentialsStorageSecondInstance = new CentralAuthorityCredentialsStorage();\n  const connectionResultSecondInstance = await cryptoCredentialsStorageSecondInstance.connect(\n    storageAuthCredentials\n  );\n\n  if (connectionResultSecondInstance instanceof Error) {\n    console.error(\n      'Failed to connect to the secret storage with the second instance'\n    );\n    return;\n  }\n\n  const credentialsReadFromStorage = await cryptoCredentialsStorageSecondInstance.getCredentials();\n\n  if (credentialsReadFromStorage instanceof Error) {\n    console.error(credentials);\n    console.error('Failed to read a credentials read from the second instance');\n    return;\n  }\n  if (credentialsReadFromStorage === null) {\n    console.error('The credentials read by second instance must not be empty');\n    return;\n  }\n\n  const {\n    [CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_CRYPTO_KEYS_KEY_NAME]: cryptoKeyPairsStoredByTheFirstInstance,\n  } = credentialsReadFromStorage;\n  const resultTestCredentialsStoredByTheFirstInstance = await runTestForKeyPairs(\n    cryptoKeyPairsStoredByTheFirstInstance\n  );\n\n  if (resultTestCredentialsStoredByTheFirstInstance !== true) {\n    console.warn(\n      'Failed tests for credentials storage keys read from stored values'\n    );\n    return;\n  }\n  console.warn('Succeed in the crypto credentials storage tests');\n  return true;\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.keys.test.ts",["1656"],"import { generateKeyPairs } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { runTestForKeyPairs } from './central-aurhority.keys.common.test';\n\nexport const runTestKeys = async () => {\n  console.warn('Central authority keys tests start');\n\n  const keyPairs = await generateKeyPairs();\n  return runTestForKeyPairs(keyPairs);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/central-authority.test/central-authority.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.caching-decorator.test.ts",["1657","1658"],"import { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport { generateUUID } from 'utils/identity-utils/identity-utils';\n\nconst ITERATIONS_COUNT = 60000;\nconst CACHE_CAPACITY = 200;\n\nexport const runTestCachingDecorator = async () => {\n  const values: { [k: string]: string } = {};\n\n  let idx = 0;\n  while (idx < ITERATIONS_COUNT) {\n    values[generateUUID()] = generateUUID();\n    idx += 1;\n  }\n\n  class CachingDecoratorTestClass {\n    @caching(CACHE_CAPACITY)\n    async getValue(key: string): Promise<string | undefined> {\n      return (values as any)[key];\n    }\n  }\n\n  const instance = new CachingDecoratorTestClass();\n  let iteration = 0;\n\n  idx = 0;\n  const keysValues = Object.keys(values);\n  let k;\n\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 2 + keysValues.length / 4);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 3 + keysValues.length / 5);\n  while (idx < keysValues.length) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx += 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = keysValues.length;\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  iteration += 1;\n  console.log(`The iteration ${iteration}`);\n  idx = Math.ceil(keysValues.length / 4 + keysValues.length / 3);\n  while (idx >= 0) {\n    k = keysValues[idx];\n    if ((await instance.getValue(k)) !== values[k]) {\n      console.error(`Value for the key '${k}' is not equals`);\n      return;\n    }\n    idx -= 1;\n  }\n  console.error('Test for caching decorator succeed');\n};\n","/home/paul/projects/decentrilized-protocol/src/test/common-utils.test/common-utils.test.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/http-request-class-base.test/http-request-class-base.test.ts",["1659"],"import { expect } from 'chai';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\n\nexport function runTestHttpRequest() {\n  describe('test HttpRequest class', async () => {\n    it('check a response from google.com', async () => {\n      const req = new HttpRequest({\n        url: 'google.com',\n      });\n\n      expect(req).to.be.an.instanceof(HttpRequest);\n      await expect(req.send()).to.eventually.fulfilled;\n    });\n  });\n}\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection-ipfs.test.ts",["1660","1661"],"import { SwarmConnectionSubclassIPFS } from 'classes/swarm-connection-class/swarm-connection-class-subclasses/swarm-connection-class-subclass-ipfs/swarm-connection-class-subclass-ipfs';\nimport { initializeMocha, runMocha } from 'test/mocha-chai-initialize';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD } from './ipfs-swarm-connection.const';\n\nexport const runTestSwarmConnectionIPFS = async () => {\n  await initializeMocha();\n\n  describe('ipfs swarm connection', () => {\n    it('create ipfs swarm connection', async () => {\n      const connection = new SwarmConnectionSubclassIPFS();\n      const password = SWARM_CONNECTION_PASSWORD;\n\n      try {\n        expect(connection.connect).to.be.a('function');\n        await assert.becomes(connection.connect({\n          password,\n        }), true, 'Connection to the swarm was not established');\n        expect(connection.isConnected).to.equal(true);\n        await assert.becomes(connection.close(), true, 'Connection to the swarm was not closed succesfully');\n        expect(connection.isConnected).to.equal(false);\n        await expect(connection.connect({\n          password,\n        })).to.eventually.be.an.instanceOf(Error);\n        assert(connection.isClosed === true, 'Connection isClosed flag must be true, after the connection was closed previousely');\n        assert(connection.isConnected === false, 'Connection isConnected flag must be false, after the connection was closed previousely');\n        return Promise.resolve();\n      } catch(err) {\n        return Promise.reject(err);\n      }\n    }).timeout(10000)\n  })\n  runMocha();\n};\n","/home/paul/projects/decentrilized-protocol/src/test/ipfs-swarm-connection.test/ipfs-swarm-connection.test.ts",["1662","1663","1664"],"import { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmConnectionClassSubclassType, ESwarmConnectionSubclassStatus } from 'classes/swarm-connection-class/swarm-connection-class.types';\nimport { expect, assert } from 'chai';\nimport { SWARM_CONNECTION_PASSWORD, SWARM_CONNECTION_OPTIONS } from './ipfs-swarm-connection.const';\nimport { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport { STATUS_CLASS_STATUS_CHANGE_EVENT } from 'classes/basic-classes/status-class-base/status-class-base.const';\n\nexport const runTestSwarmConnection = async () => {\n  describe('swarm connection:: ipfs', () => {\n    it('create ipfs swarm connection', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n      try {\n        await assert.becomes(connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS), true, 'Failed to connect to the Swarm with ipfs');\n        expect(connectionToSwarm.isConnected).to.equal(true);\n        await assert.becomes(connectionToSwarm.close(), true, 'Connection to the swarm was not closed succesfully');\n        expect(connectionToSwarm.isConnected).to.equal(false);\n        await expect(connectionToSwarm.connect(SWARM_CONNECTION_OPTIONS)).to.eventually.be.an.instanceOf(Error);\n        assert(connectionToSwarm.isClosed === true, 'Connection isClosed flag must be true, after the connection was closed previousely');\n        assert(connectionToSwarm.isConnected === false, 'Connection isConnected flag must be false, after the connection was closed previousely');\n        return Promise.resolve();\n      } catch(err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000);\n\n    it('swarm connection: check status', async () => {\n      console.warn('runTestIPFSSwarmConnection');\n      const connectionToSwarm = new SwarmConnection();\n\n      expect(connectionToSwarm).to.be.an.instanceof(SwarmConnection);\n      expect(connectionToSwarm.connect).to.be.a('function');\n\n      const connectionOptions = {\n        type: ESwarmConnectionClassSubclassType.IPFS,\n        subclassOptions: {\n          password: SWARM_CONNECTION_PASSWORD\n        }\n      };\n\n      try {\n        const { statusEmitter } = connectionToSwarm;\n        const statusesEmitted: ESwarmConnectionSubclassStatus[] = [];\n\n        expect(statusEmitter).to.be.an.instanceof(EventEmitter);\n        statusEmitter.addListener(STATUS_CLASS_STATUS_CHANGE_EVENT, status => statusesEmitted.push(status));\n        await assert.becomes(connectionToSwarm.connect(connectionOptions), true, '');\n        expect(statusesEmitted).to.be.an('array').to.include.members([\n          ESwarmConnectionSubclassStatus.CONNECTED,\n          ESwarmConnectionSubclassStatus.CONNECTING,\n          ESwarmConnectionSubclassStatus.STARTED,\n        ]);\n        return Promise.resolve();\n      } catch(err) {\n        console.error(err);\n        return Promise.reject(err);\n      }\n    }).timeout(10000)\n\n  })\n};\n","/home/paul/projects/decentrilized-protocol/src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js",["1665"],"const admin = require('firebase-admin');\nconst serviceKey = require('./firebase.serviceKey.json');\n\nconst removeAllUsers = async () => {\n  const initResult = await admin.initializeApp({\n    credential: admin.credential.cert(serviceKey),\n    databaseURL: 'https://protocol-f251b.firebaseio.com',\n  });\n\n  if (initResult instanceof Error) {\n    console.error(initResult);\n    return new Error(\"Can't initialize the application\");\n  }\n\n  function deleteUser(uid) {\n    admin\n      .auth()\n      .deleteUser(uid)\n      .then(function() {\n        console.log('Successfully deleted user', uid);\n      })\n      .catch(function(error) {\n        console.log('Error deleting user:', error);\n      });\n  }\n\n  function getAllUsers(nextPageToken) {\n    admin\n      .auth()\n      .listUsers(100, nextPageToken)\n      .then(function(listUsersResult) {\n        listUsersResult.users.forEach(function(userRecord) {\n          let uid = userRecord.toJSON().uid;\n          deleteUser(uid);\n        });\n        if (listUsersResult.pageToken) {\n          getAllUsers(listUsersResult.pageToken);\n        }\n      })\n      .catch(function(error) {\n        console.log('Error listing users:', error);\n      });\n  }\n  getAllUsers();\n};\n\nremoveAllUsers();\n","/home/paul/projects/decentrilized-protocol/src/test/password-key.test.ts",["1666","1667","1668","1669","1670"],"import {\n  generatePasswordKeyAsString,\n  importPasswordKeyFromString,\n  exportPasswordKey,\n} from 'utils/password-utils/derive-key.password-utils';\nimport {\n  encryptDataToArrayBuffer,\n  encryptDataToString,\n  encryptDataWithPassword,\n} from 'utils/password-utils/encrypt.password-utils';\nimport {\n  decryptDataWithKeyNative,\n  decryptDataWithKey,\n  decryptDataByPassword,\n} from 'utils/password-utils/decrypt.password-utils';\n\nconst testKeyGeneration = async () => {\n  /**\n   * test key generation from a password\n   */\n  // const passwordString = '123';\n  // const passwordKey = await generatePasswordKeyAsString(passwordString);\n  // console.log('passwordKey', passwordKey);\n  // const passwordStringAgain = '123';\n  // const passwordKeyAgain = await generatePasswordKeyAsString(\n  //   passwordStringAgain\n  // );\n  // console.log('passwordKeyAgain', passwordKeyAgain);\n  // console.log('isEquals', passwordKeyAgain === passwordKey);\n  // if (typeof passwordKeyAgain === 'string' && typeof passwordKey === 'string') {\n  //   const resultedKeyImported = await importPasswordKeyFromString(passwordKey);\n  //   const resultedKeyImportedAgain = await importPasswordKeyFromString(\n  //     passwordKeyAgain\n  //   );\n  //   if (\n  //     !(resultedKeyImported instanceof Error) &&\n  //     !(resultedKeyImported instanceof Error)\n  //   ) {\n  //     const exportedImported = await exportPasswordKey(resultedKeyImported);\n  //     const exportedAgainImported = await exportPasswordKey(\n  //       resultedKeyImported\n  //     );\n  //     console.log('exportedImported', exportedImported);\n  //     console.log('exportedAgainImported', exportedAgainImported);\n  //     if (\n  //       !(exportedImported instanceof Error) &&\n  //       !(exportedAgainImported instanceof Error)\n  //     ) {\n  //       console.log('isEquals', exportedImported.k === exportedAgainImported.k);\n  //     }\n  //   }\n  // }\n  const passwordString = '12345678';\n  const passwordKey = await generatePasswordKeyAsString(passwordString);\n\n  if (passwordKey instanceof Error) {\n    console.error(passwordKey);\n    return passwordKey;\n  }\n\n  const data = 'test_string';\n  const chipher = await encryptDataToString(passwordKey, data);\n\n  if (chipher instanceof Error) {\n    console.error(chipher);\n    return chipher;\n  }\n  console.log('chipher', chipher);\n  const decrypted = await decryptDataWithKey(passwordKey, chipher);\n\n  if (decrypted instanceof Error) {\n    console.error(decrypted);\n    return decrypted;\n  }\n  console.log('decrypted', decrypted);\n  console.log('is valid', decrypted === data);\n\n  const dataTest = 'test string fo password';\n  const pwd = 'pwd_test';\n  const encrypted = await encryptDataWithPassword(pwd, dataTest);\n\n  if (encrypted instanceof Error) {\n    console.error(encrypted);\n    return encrypted;\n  }\n\n  const decryptedPwd = await decryptDataByPassword(pwd, encrypted);\n\n  if (decryptedPwd instanceof Error) {\n    console.error(decryptedPwd);\n    return decryptedPwd;\n  }\n  console.log('decryptedPwd', decryptedPwd);\n  console.log('is valid', decryptedPwd === dataTest);\n};\n\ntestKeyGeneration();\n","/home/paul/projects/decentrilized-protocol/src/test/safe-storage.test.ts",["1671","1672","1673"],"import { SafeStorage } from 'classes/safe-storage-class';\nimport { ESAFE_STORAGE_STORAGE_TYPE } from 'classes/safe-storage-class/safe-storage-class.const';\n\nexport const runTestAppendLogStorage = async () => {\n  const safeStorageAppendLog = new SafeStorage({\n    name: 'testStorage',\n    credentials: {\n      password: 'test_password',\n    },\n    storageType: ESAFE_STORAGE_STORAGE_TYPE.APPEND_LOG,\n  });\n\n  console.dir(safeStorageAppendLog);\n\n  const connectionResult = await safeStorageAppendLog.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.dir(safeStorageAppendLog);\n\n  const pushDataResult = await safeStorageAppendLog.set({ hello: new Date() });\n\n  if (pushDataResult instanceof Error) {\n    return pushDataResult;\n  }\n\n  const pushNewDataResult = await safeStorageAppendLog.set({\n    newHello: new Date(),\n  });\n\n  if (pushNewDataResult instanceof Error) {\n    return pushNewDataResult;\n  }\n\n  console.log('data was pushed in append log storage');\n};\n\nexport const runTestKeyValueStorage = async () => {\n  const safeStorage = new SafeStorage({\n    name: 'testStorageKeyValue',\n    credentials: {\n      password: 'test_password_KV',\n    },\n    storageType: ESAFE_STORAGE_STORAGE_TYPE.KEY_VALUE,\n  });\n\n  console.dir(safeStorage);\n\n  const connectionResult = await safeStorage.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.dir(safeStorage);\n\n  const pushDataResult = await safeStorage.set(\n    { hello: new Date() },\n    `${new Date()}`\n  );\n\n  if (pushDataResult instanceof Error) {\n    return pushDataResult;\n  }\n\n  const pushNewDataResult = await safeStorage.set(\n    { hello: new Date() },\n    `${new Date()}|||new`\n  );\n\n  if (pushNewDataResult instanceof Error) {\n    return pushNewDataResult;\n  }\n  console.log('data was pushed in key value storage');\n};\n\nexport const runTest = async () => {\n  await runTestAppendLogStorage();\n  // await Promise.all([runTestAppendLogStorage(), runTestKeyValueStorage()]);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/secret-storage.test.ts",["1674"],"import { SecretStorage } from 'classes/secret-storage-class';\n\nexport const runTest = async () => {\n  const secretStorage = new SecretStorage();\n  const password = '494949494';\n  const isAuthorized = await secretStorage.authorize({\n    password,\n  });\n\n  if (isAuthorized instanceof Error) {\n    console.error(isAuthorized);\n    return isAuthorized;\n  }\n  console.log('isAuthorized', isAuthorized);\n\n  const secretStorageNewInstance = new SecretStorage();\n  //should connect because authoirized before and credentials are stored (e.g. in the session storage)\n  const connectionResult = await secretStorageNewInstance.connect();\n\n  if (connectionResult instanceof Error) {\n    console.error(connectionResult);\n    return connectionResult;\n  }\n  console.log('is new instance connected', connectionResult);\n\n  const testValue = 'testy value for the secret storage';\n  const testValueKey = 'test_value';\n  const setTestValueResult = await secretStorage.set(testValueKey, testValue);\n\n  if (setTestValueResult instanceof Error) {\n    console.error(setTestValueResult);\n    return setTestValueResult;\n  }\n  console.log('setTestValueResult', setTestValueResult);\n\n  const getTestValueResult = await secretStorageNewInstance.get(testValueKey);\n\n  if (getTestValueResult instanceof Error) {\n    console.error(getTestValueResult);\n    return getTestValueResult;\n  }\n  console.log('getTestValueResult', getTestValueResult);\n  console.log('is valid', testValue === getTestValueResult);\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.const.ts",["1675","1676"],"import { ISwarmStoreConnectorOrbitDBOptions } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.types';\nimport { ISecretStorageOptions, ISecretStoreCredentials } from 'classes/secret-storage-class/secret-storage-class.types';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME = 'database_test';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME = 'database_test_2';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME = 'database_test_3';\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [{\n        dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n        isPublic: false,\n    }],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [{\n        dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n        isPublic: true,\n        grantAcess: async (entity, id) => {\n            return true;\n        }\n    }],\n};\n\nconst USER_ID_KEY = '____userId';\nconst TEST_VALUE_KEY = '____test_value';\nfunction promptUserIdAndTestValue() {\n    const userIdStored = localStorage.getItem(USER_ID_KEY);\n\n    if (!userIdStored) {\n        const userId = String(window.prompt('user id', 'test1'));\n\n        localStorage.setItem(USER_ID_KEY, userId);\n    }\n    \n    const testValueStored = localStorage.getItem(TEST_VALUE_KEY);\n\n    if (!testValueStored) {\n        const tstv = String(window.prompt('test value', 'tv'));\n\n        localStorage.setItem(TEST_VALUE_KEY, tstv);\n    }\n}\npromptUserIdAndTestValue();\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE = `${localStorage.getItem(TEST_VALUE_KEY)}${new Date()}`;\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n    id: localStorage.getItem(USER_ID_KEY),\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_ACCESS_CONTROLLER,\n    id: localStorage.getItem(USER_ID_KEY),\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO = {\n    dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n    isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE = {\n    dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n    isPublic: false,\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [\n        {\n            dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n            isPublic: true,\n        },\n    ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER: ISwarmStoreConnectorOrbitDBOptions<string> = {\n    databases: [\n        {\n            dbName: SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n            isPublic: true,\n        },\n        {\n            ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n            isPublic: true,\n            grantAcess: async (entity, id): Promise<boolean> => {\n                return !!entity && !!id;\n            }\n        },\n    ],\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE = {\n    ...SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_CUSTOM_ACCESS_CONTROLLER,\n    id: localStorage.getItem(USER_ID_KEY),\n    credentials: {\n        password: '123456',\n    }\n}\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS: Required<ISecretStorageOptions> = {\n    dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS: ISecretStoreCredentials = {\n    password: '123456',\n};\n\nexport const SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS: Required<ISecretStorageOptions> = {\n    dbName: '__SwarmStorageConnectorTest___DB__TEST',\n};\n","/home/paul/projects/decentrilized-protocol/src/test/swarm-storage-orbit-db.test/swarm-storage-orbit-db.test.ts",["1677","1678","1679","1680","1681","1682","1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736","1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748"],"import { IPFS } from 'types/ipfs.types';\nimport ipfs from 'ipfs';\nimport { expect, assert } from 'chai';\nimport { SwarmStoreConnectorOrbitDB } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db';\nimport { \n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE, \n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE,\n    SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n } from './swarm-storage-orbit-db.test.const';\nimport { SWARM_CONNECTION_OPTIONS } from 'test/ipfs-swarm-connection.test/ipfs-swarm-connection.const';\nimport { SwarmConnection } from 'classes/swarm-connection-class/swarm-connection-class';\nimport { ESwarmStoreConnectorOrbitDBEventNames } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db.const';\nimport { ISwarmStoreConnectorOrbitDbDatabaseValue } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-database/swarm-store-connector-orbit-db-subclass-database.types';\nimport { COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON } from 'const/common-values/common-values';\nimport { SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter';\nimport { SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter/swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter.const';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport { SwarmStoreConnectorOrbitDBSubclassStorageFabric } from 'classes/swarm-store-class/swarm-store-connectors/swarm-store-connector-orbit-db/swarm-store-connector-orbit-db-subclasses/swarm-store-connector-orbit-db-subclass-storage-fabric/swarm-store-connector-orbit-db-subclass-storage-fabric';\n\nexport const testDatabase = async (\n    connection: SwarmStoreConnectorOrbitDB<string>,\n    dbName: string,\n) => {\n    const testValue = `${new Date()}--te`;\n    const addValueHash = await connection.request(\n        dbName,\n        'add',\n        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n    )\n\n    expect(addValueHash).to.be.a('string');\n   \n    const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = await connection.request(\n        dbName,\n        'get',\n        addValueHash,\n    );\n   \n    expect(getValueByHashResult.id).to.be.equal((connection as any).orbitDb.identity.id);\n    expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n    expect(getValueByHashResult.value).to.be.equal(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE);\n   \n    await expect(connection.request(\n        dbName,\n        'remove',\n        addValueHash,\n    )).eventually.not.rejected.not.be.an('error');\n\n    const getValueByHashAfterRemoveResult = await connection.request(\n        dbName,\n        'get',\n        addValueHash,\n    );\n    \n    assert(getValueByHashAfterRemoveResult == null, 'The value removed before must be empty');\n}\n\nexport const testDatabaseWithRandomValue = async (\n    connection: SwarmStoreConnectorOrbitDB<string>,\n    dbName: string,\n) => {\n    let i = 0;\n\n    while((i += 1) <= 5) {\n        const testValue = `${new Date()}--test-value`;\n        const addValueHash = await connection.request(\n            dbName,\n            'add',\n            testValue,\n        )\n\n        expect(addValueHash).to.be.a('string');\n    \n        const getValueByHashResult: ISwarmStoreConnectorOrbitDbDatabaseValue<string> = (\n            await connection.request(\n                dbName,\n                'get',\n                addValueHash,\n            )\n        );\n    \n        expect(getValueByHashResult.id).to.be.equal((connection as any).orbitDb.identity.id);\n        expect(getValueByHashResult.hash).to.be.equal(addValueHash);\n        expect(getValueByHashResult.value).to.be.equal(testValue);\n    \n        await expect(connection.request(\n            dbName,\n            'remove',\n            addValueHash,\n        )).eventually.not.rejected.not.be.an('error');\n\n        const getValueByHashAfterRemoveResult = await connection.request(\n            dbName,\n            'get',\n            addValueHash,\n        );\n        \n        assert(getValueByHashAfterRemoveResult == null, 'The value removed before must be empty');\n    }\n}\n\nexport const runTestSwarmStoreOrbitDBConnection = async (name?: string) => {\n    describe('swarm store: orbit db', () => {        \n        let ipfsConnection: IPFS | undefined;\n\n        beforeEach(async function () {\n            this.timeout(60000);\n            const swarmConnection = new SwarmConnection();\n\n            expect(swarmConnection).to.be.an.instanceof(SwarmConnection);\n            await assert.becomes(swarmConnection.connect(SWARM_CONNECTION_OPTIONS), true, '');\n            expect(swarmConnection.isConnected).to.equal(true);\n\n            ipfsConnection = swarmConnection.getNativeConnection();\n\n            expect(ipfsConnection).to.be.an.instanceof(ipfs);\n        });\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases') {\n            it('create swarm store OrbitDB connector - 3 databases', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n    \n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES);\n    \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n    \n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n    \n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n    \n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert((fullProgressEmitted as boolean) === true, 'The event 100% loading progress does not emitted')\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES.databases.map(db => db.dbName)\n                    );\n                \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database, check database close') {\n            it('create swarm store OrbitDB connector - 1 database, check database close', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE);\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert((fullProgressEmitted as boolean) === true, 'The event 100% loading progress does not emitted')\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n\n                //\n                await expect(connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO))\n                    .to.eventually.be.undefined;\n                await expect(connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_TWO))\n                    .to.eventually.be.an('error');\n\n                //\n                const result = await Promise.all([\n                    connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE),\n                    connection.openDatabase(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_DATABASE_THREE),\n                ]);\n\n                expect(result)\n                    .to.be.an('array').that.has.property('length', 2);\n                assert(result[0] == null, 'The first instance must be started');\n                expect(result[1]).to.be.an.instanceof(Error);\n\n                let isEmitDbClose: boolean = false;\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.CLOSE_DATABASE, (dbName: string) => {\n                    if (dbName === SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME) {\n                        isEmitDbClose = true;\n                    }\n                })\n                await expect(connection.closeDb(SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME)).to.eventually.eq(undefined);\n                expect(isEmitDbClose).to.be.equal(true);\n                await expect(connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'get',\n                    '111'\n                )).to.eventually.be.an('Error');\n                \n                let isCloseEmitted: boolean = false;\n\n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n\n                await expect(connection.close()).to.eventually.be.undefined;\n\n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n\n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database with custom identity') {\n            it('create swarm store OrbitDB connector - 1 database with custom identity', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY as any,\n                );\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 1 database with custom acccess provider') {\n            it('create swarm store OrbitDB connector - 1 database with custom acccess provider', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_WITH_IDENTITY_AND_ACCESS_CONTROLLER as any,\n                );\n\n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore') {\n            it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any,\n                );\n                \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                        \n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabase(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n\n        if (!name || name === 'create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore -- with random loop') {\n            it('create swarm store OrbitDB connector - 3 databases with custom acccess provider and secret keystore', async () => {\n                expect(ipfsConnection).to.be.an.instanceof(ipfs);\n\n                const connection = new SwarmStoreConnectorOrbitDB<string>(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASES_WITH_IDENTITY_AND_ACCESS_CONTROLLER_SECRET_KEYSTORE as any,\n                );\n                \n                expect(connection).to.be.an.instanceof(SwarmStoreConnectorOrbitDB);\n                expect(connection.connect).to.be.a('function');\n                \n                let fullProgressEmitted: boolean = false;\n                let readyEmitted: string[] = [];\n\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.LOADING, (loadingProgress: number) => {\n                    if (loadingProgress === 100) {\n                        fullProgressEmitted = true;\n                    }\n                });\n                connection.on(ESwarmStoreConnectorOrbitDBEventNames.READY, (dbName: string) => {\n                    if (dbName) {\n                        readyEmitted.push(dbName);\n                    }\n                });\n\n                await expect(connection.connect({\n                    ipfs: ipfsConnection!,\n                })).to.be.not.eventually.an.instanceof(Error);\n\n                expect(connection.isClosed).to.be.equal(false);\n                expect(connection.isReady).to.be.equal(true);\n                assert(\n                    (fullProgressEmitted as boolean) === true,\n                    'The event 100% loading progress does not emitted',\n                )\n                expect(readyEmitted)\n                    .to.be.an('array')\n                    .that.include.all.members(\n                        SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE.databases.map(db => db.dbName)\n                    );\n                        \n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                );\n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_TWO_DATABASE_DB_NAME,\n                );\n                await testDatabaseWithRandomValue(\n                    connection,\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_THREE_DATABASE_DB_NAME,\n                );\n    \n                let isCloseEmitted: boolean = false;\n    \n                connection[COMMON_VALUE_EVENT_EMITTER_METHOD_NAME_ON](ESwarmStoreConnectorOrbitDBEventNames.CLOSE, () => {\n                    isCloseEmitted = true;\n                });\n    \n                await expect(connection.close()).to.eventually.be.undefined;\n    \n                assert((isCloseEmitted as boolean) === true, 'The close event must be emitted on SwarmStoreConnector close');\n    \n                const addValueHashAfterClose = await connection.request(\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_DB_NAME,\n                    'add',\n                    SWARM_STORE_CONNECTOR_TEST_CONNECTION_OPTIONS_ONE_DATABASE_TEST_VALUE,\n                )\n            \n                expect(addValueHashAfterClose).to.be.an('error');\n            }).timeout(70000);\n        }\n    })\n\n    async function testCache(cache: SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter) {\n        const testKey = '___test_key__cache';\n        const testValue = '___test_value_cache';\n\n        expect(cache)\n            .to.be.an\n            .instanceof(SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter);\n        expect(cache.db).to.deep.equal({\n            status: SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN\n        })\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        await expect(cache!.get(\n            testKey,\n        )).to.be.eventually.oneOf([testValue, undefined]);\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        await expect(cache!.put(\n            testKey,\n            testValue,\n        )).to.eventually.be.fulfilled;\n        await expect(cache!.open()).to.eventually.be.fulfilled;\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n        // TODO - must provide storing values as buffer fo the SecretStorage\n        await expect(cache!.get(\n            testKey,\n        )).to.be.eventually.equal(testValue);\n\n        const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n        const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n        await expect(cache!.put(\n            testKeyRandom,\n            testValueRandom,\n        )).to.eventually.be.fulfilled;\n        // TODO - must provide storing values as buffer fo the SecretStorage\n\n        let cbCalledTimes = 0;\n        const cb = (err: Error | undefined, value: string | undefined) => {\n            if (!err) {\n                cbCalledTimes += Number(!!value);\n            }\n        }\n\n        await expect(cache!.get(\n            testKeyRandom,\n            cb,\n        )).to.be.eventually.equal(testValueRandom);\n        expect(cbCalledTimes).to.equal(1);\n\n        const cbErr = (err: Error | undefined) => {\n            if (!err) {\n                cbCalledTimes += 1;\n            }\n        }\n\n        await expect(cache!.del(\n            testKeyRandom,\n            cbErr,\n        )).to.be.eventually.equal(undefined);\n        expect(cbCalledTimes).to.equal(2);\n        await expect(cache!.close(cbErr,)).to.eventually.be.fulfilled;\n        expect(cbCalledTimes).to.equal(3);\n        expect(cache!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE);\n    }\n\n    describe('swarm store:: orbit db:: subclasses', () => {\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter') { \n            it('subclass swarm-store-connector-orbit-db-subclass-store-to-secret-storage-adapter', async () => {\n                let secretStorageAdapter: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n                const testKey = '___test_key';\n                const testValue = '___test_value';\n\n                expect(() => {\n                    secretStorageAdapter = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_CREDENTIALS,\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_SECRET_STORAGE_CONNECTOR_OPTIONS,\n                    );\n                }).to.not.throw();\n                expect(secretStorageAdapter)\n                    .to.be.an\n                    .instanceof(SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter);\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                await expect(secretStorageAdapter!.get(\n                    testKey,\n                )).to.be.eventually.oneOf([testValue, undefined]);\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                await expect(secretStorageAdapter!.put(\n                    testKey,\n                    testValue,\n                )).to.eventually.be.fulfilled;\n                await expect(secretStorageAdapter!.open()).to.eventually.be.fulfilled;\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.OPEN);\n                // TODO - must provide storing values as buffer fo the SecretStorage\n                await expect(secretStorageAdapter!.get(\n                    testKey,\n                )).to.be.eventually.equal(testValue);\n\n                const testKeyRandom = `${Date.now()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n                const testValueRandom = `${new Date()}!@#$%^&**()_)_)*(&*&TY&*%*$^#$*:\":/*/-*)//..,<><.~~~~';`;\n\n                await expect(secretStorageAdapter!.put(\n                    testKeyRandom,\n                    testValueRandom,\n                )).to.eventually.be.fulfilled;\n                // TODO - must provide storing values as buffer fo the SecretStorage\n                await expect(secretStorageAdapter!.get(\n                    testKeyRandom,\n                )).to.be.eventually.equal(testValueRandom);\n                await expect(secretStorageAdapter!.close()).to.eventually.be.fulfilled;\n                expect(secretStorageAdapter!.status).to.be.equal(SWARM_STORE_CONNECTOR_ORBITDB_SUBCASS_STORE_TO_SECRET_STORAGE_ADAPTER_STATUS.CLOSE);\n            }).timeout(10000);\n        }\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-storage-cache') {\n            it('subclass swarm-store-connector-orbit-db-subclass-storage-cache', async () => {\n                const password = '123456';\n                let key: CryptoKey;\n                let cache: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n                await expect((async () => {\n                    key = await SecretStorage.generatePasswordKeyByPasswordString(password) as CryptoKey;\n                    return key;\n                })()).to.eventually.be.fulfilled;\n\n                expect(key!).to.be.an.instanceOf(CryptoKey);\n                expect(() => {\n                    cache = new SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter(\n                        { key },\n                        SWARM_STORE_CONNECTOR_TEST_SUBCLASS_CACHE_OPTIONS,\n                    );\n                }).to.not.throw();\n                await testCache(cache!);\n            }).timeout(10000);\n        }\n        if (!name || name === 'subclass swarm-store-connector-orbit-db-subclass-storage-fabric') {\n            it('subclass swarm-store-connector-orbit-db-subclass-storage-fabric', async () => {\n                const password = '123456';\n                const cachePath = '___cachePath_test';\n                const passwordFailed = '12345';\n\n                expect(() => {\n                    new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n                        { password: passwordFailed}\n                    );\n                }).to.throw();\n\n                let fabric: undefined | SwarmStoreConnectorOrbitDBSubclassStorageFabric;\n                let cache: undefined | SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n\n                expect(() => {\n                    fabric = new SwarmStoreConnectorOrbitDBSubclassStorageFabric(\n                        { password }\n                    );\n                }).not.to.throw();\n                expect(fabric).to.be.instanceOf(SwarmStoreConnectorOrbitDBSubclassStorageFabric);\n                await expect((async () => {\n                    cache = await fabric!.createStore(cachePath) as SwarmStoreConnectorOrbitDBSubclassStoreToSecretStorageAdapter;\n                })()).to.eventually.be.fulfilled;\n                await testCache(cache!);\n            }).timeout(10000);\n        }\n    });\n};","/home/paul/projects/decentrilized-protocol/src/test/valiation-utils.test.ts",["1749"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\n\nexport const runTest = () => {\n  const schema = {\n    title: 'test',\n    type: 'object',\n    $id: 'http://test.schema',\n    description: 'schema for testing of the validation functionality',\n    properties: {\n      notRequired: {\n        type: 'string',\n      },\n      required: {\n        type: 'array',\n        items: {\n          oneOf: [\n            {\n              type: 'number',\n            },\n            {\n              type: 'string',\n            },\n          ],\n        },\n      },\n    },\n    required: ['required'],\n    additionalProperties: false,\n  };\n\n  const result = validateBySchema(schema, undefined);\n\n  if (result !== false) {\n    console.error('Wrong result for undefined');\n  }\n\n  const testData1 = {\n    required: ['1', 1],\n  };\n  const result1 = validateBySchema(schema, testData1);\n\n  if (result1 !== true) {\n    console.error('Wrong result for requered field');\n  }\n\n  const testData2 = {\n    notRequired: '1',\n  };\n  const result2 = validateBySchema(schema, testData2);\n\n  if (result2 !== false) {\n    console.error('Wrong result for data with no required field');\n  }\n\n  const testData3 = {\n    notRequired: '1',\n    required: ['1', 1],\n  };\n  const result3 = validateBySchema(schema, testData3);\n\n  if (result3 !== true) {\n    console.error('Wrong result for data with all fields');\n  }\n\n  const testData4 = {\n    notRequired: '1',\n    required: ['1', 1],\n    additional: 1,\n  };\n  const result4 = validateBySchema(schema, testData4);\n\n  if (result4 !== false) {\n    console.error('Wrong result for data with additional fields');\n  }\n};\n","/home/paul/projects/decentrilized-protocol/src/test/validation-messaging.test/validation-messaging.test.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.ts",["1750","1751","1752","1753","1754","1755","1756"],"import { EventEmitter } from 'classes/basic-classes/event-emitter-class-base/event-emitter-class-base';\nimport {\n  IPseudoNTPClassEvents,\n  IPseudoNTPClassOptions,\n  TPseudoNTPClassServersPoolOption,\n  IPseudoNTPClassServerConnection,\n  IPseudoNTPClassCommonOptionsMilliseconds,\n  TPseudoNTPClassServerResponse,\n  TPseudoNTPClassResponseRaw,\n  TPseudoNTPClassResponseWithTimesamps,\n  IPseudoNTPClassServerConnectionField,\n  IPseudoNTPClassServerConnectionCb,\n} from './pseudo-ntp-class.types';\nimport {\n  PSEUDO_NTP_CLASS_DEFAULT_OPTIONS,\n  PSEUDO_NTP_CLASS_LOGS_PREFIX,\n  PSEUDO_NTP_CLASS_EVENTS,\n  PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n} from './pseudo-ntp-class.const';\nimport {\n  getTimestampSeconds,\n  addSecondsToDate,\n  datesDifferenceSeconds,\n} from './pseudo-ntp-class.utils';\nimport HttpRequest from 'classes/basic-classes/http-request-class-base/http-request-class-base';\nimport { IHttpRequestOptions } from 'classes/basic-classes/http-request-class-base/http-request-class-base.types';\n\n/**\n * This is class for time sync with the\n * server which provides API to get\n * the current date and time in UTC.\n * This allows to sync time for all users.\n *\n * @export\n * @class PseudoNTPClass\n * @extends {EventEmitter<IPseudoNTPClassEvents>}\n */\nexport class PseudoNTPClass extends EventEmitter<IPseudoNTPClassEvents> {\n  public static Event = PSEUDO_NTP_CLASS_EVENTS;\n\n  /**\n   * true if the sync is running on\n   *\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  public isRunning: boolean = false;\n\n  /**\n   * if sync process is running at now\n   * then this flag will be set on true\n   *\n   * @protected\n   * @type {boolean}\n   * @memberof PseudoNTPClass\n   */\n  protected isSyncInProgress: boolean = false;\n\n  protected serversPool?: TPseudoNTPClassServersPoolOption;\n\n  // index of the server connected to\n  protected currentServerIndex?: number;\n\n  // options of the server connected to\n  protected currentServerOptions?: IPseudoNTPClassServerConnection;\n\n  protected currentServerRequestOptions?: IHttpRequestOptions;\n\n  // a number of fails for the current server\n  protected currentServerFails: number = 0;\n\n  /**\n   * the options used for requesting\n   *\n   * @protected\n   * @type {IPseudoNTPClassCommonOptionsMilliseconds}\n   * @memberof PseudoNTPClass\n   */\n  protected commonOptions: IPseudoNTPClassCommonOptionsMilliseconds = PSEUDO_NTP_CLASS_DEFAULT_OPTIONS;\n\n  /**\n   * the active interval for requesting\n   * the server\n   *\n   * @protected\n   * @type {NodeJS.Timer}\n   * @memberof PseudoNTPClass\n   */\n  protected intervalRunning?: NodeJS.Timeout;\n\n  constructor(options: IPseudoNTPClassOptions) {\n    super();\n    this.setOptions(options);\n  }\n\n  /**\n   * start the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public start() {\n    this.setCurrentServerFromPool();\n    this.startInterval();\n  }\n\n  /**\n   * stop the requesting of the servers in the pool\n   *\n   * @memberof PseudoNTPClass\n   */\n  public stop() {\n    this.stopInterval();\n  }\n\n  /**\n   * write something in console.log\n   *\n   * @protected\n   * @param {(Error | string)} message\n   * @memberof PseudoNTPClass\n   */\n  protected log = (message: Error | string) => {\n    const { currentServerOptions } = this;\n    const consoleMethod = message instanceof Error ? 'error' : 'log';\n\n    console[consoleMethod](\n      PSEUDO_NTP_CLASS_LOGS_PREFIX,\n      `server is ${\n        currentServerOptions ? currentServerOptions.server : 'not defined'\n      }`,\n      message\n    );\n  };\n\n  /**\n   * check is a server's options are valid\n   *\n   * @protected\n   * @param {*} options\n   * @returns {options is IPseudoNTPClassServerConnection}\n   * @memberof PseudoNTPClass\n   */\n  protected checkServerOptions(\n    options: any\n  ): options is IPseudoNTPClassServerConnection {\n    return (\n      !!options &&\n      typeof options === 'object' &&\n      typeof options.server === 'string' &&\n      !!options.server.length\n    );\n  }\n\n  /**\n   * set options for the instance and\n   * convert seconds in milliseconds\n   * for all the options\n   *\n   * @protected\n   * @param {IPseudoNTPClassOptions} options\n   * @memberof PseudoNTPClass\n   * @throws\n   */\n  protected setOptions(options: IPseudoNTPClassOptions) {\n    const {\n      serversPool,\n      maxFailedResponses,\n      maxOffsetErrorS,\n      responseTimeoutS,\n      retryRequestDelayS,\n      syncIntervalS,\n    } = options;\n\n    if (!(serversPool instanceof Array) || !serversPool.length) {\n      throw new Error('The \"servers pool\" option must be defined');\n    }\n    this.serversPool = serversPool;\n\n    const optionsInMs = {\n      maxFailedResponses:\n        typeof maxFailedResponses === 'number'\n          ? maxFailedResponses\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxFailedResponses,\n      maxOffsetErrorS:\n        typeof maxOffsetErrorS === 'number'\n          ? maxOffsetErrorS\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.maxOffsetErrorS,\n      responseTimeoutMs:\n        typeof responseTimeoutS === 'number'\n          ? responseTimeoutS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.responseTimeoutMs,\n      retryRequestDelayMs:\n        typeof retryRequestDelayS === 'number'\n          ? retryRequestDelayS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.retryRequestDelayMs,\n      syncIntervalMs:\n        typeof syncIntervalS === 'number'\n          ? syncIntervalS * 1000\n          : PSEUDO_NTP_CLASS_DEFAULT_OPTIONS.syncIntervalMs,\n    };\n\n    this.commonOptions = optionsInMs;\n  }\n\n  protected setCurrentServerFromPoolIndex(): void {\n    const { serversPool, currentServerIndex } = this;\n    const serversPoolLength = serversPool!.length;\n    let currentServerIndexResolved: number;\n\n    if (typeof currentServerIndex === 'number') {\n      if (currentServerIndex === serversPoolLength) {\n        currentServerIndexResolved = 0;\n      }\n      currentServerIndexResolved = currentServerIndex + 1;\n    } else {\n      currentServerIndexResolved = 0;\n    }\n    this.currentServerIndex = currentServerIndexResolved;\n  }\n\n  /**\n   * create an object to send the request\n   * to the server to request the current\n   * date and time\n   *\n   * @protected\n   * @returns {(void | Error)}\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerRequestOptions(): void | Error {\n    const { currentServerOptions } = this;\n    const { server: serverUrl } = currentServerOptions!;\n\n    if (!currentServerOptions) {\n      return new Error('The current server options is not defined');\n    }\n    this.currentServerRequestOptions = {\n      ...PSEUDO_NTP_CLASS_REQUEST_OPTIONS,\n      url: serverUrl,\n    };\n  }\n\n  protected setCurrentServerFromPoolOptions(): void {\n    const { serversPool, currentServerIndex } = this;\n    const currentServerOptions = serversPool![currentServerIndex || 0];\n\n    if (!this.checkServerOptions(currentServerOptions)) {\n      // if the options is not defined for the server or there is no url for it\n      // choose another server from the pool\n      this.log(\n        `Options is not defined for the server under the index ${currentServerIndex} in the pool`\n      );\n      this.setCurrentServerFromPoolIndex();\n      return this.setCurrentServerFromPoolOptions();\n    }\n    this.currentServerOptions = currentServerOptions;\n\n    const serCurrentServerRequestOptionsResult = this.setCurrentServerRequestOptions();\n\n    if (serCurrentServerRequestOptionsResult instanceof Error) {\n      return this.setCurrentServerFromPoolOptions();\n    }\n  }\n\n  protected resetCurrentServerDescription() {\n    this.currentServerFails = 0;\n    this.currentServerOptions = undefined;\n  }\n\n  /**\n   * choose the next server from the pool\n   * and set it's options to use as the\n   * current server\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected setCurrentServerFromPool() {\n    this.resetCurrentServerDescription();\n    this.setCurrentServerFromPoolIndex();\n    this.setCurrentServerFromPoolOptions();\n  }\n\n  /**\n   * send a request to the server\n   * and handle a response from it\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected sync = async (): Promise<void> => {\n    const { isSyncInProgress } = this;\n\n    if (isSyncInProgress) {\n      // if the sync process is\n      // already is running on\n      return;\n    }\n    this.isSyncInProgress = true;\n\n    const response = await this.sendRequestToCurrentServer();\n\n    if (response instanceof Error) {\n      return this.handleSyncFail(response);\n    }\n\n    const resultOfHandlig = await this.handleServerResponse(response);\n\n    if (resultOfHandlig instanceof Error) {\n      return this.handleSyncFail(resultOfHandlig);\n    }\n    this.isSyncInProgress = false;\n  };\n\n  /**\n   * starts the interval for requesting\n   * the current server from the servers\n   * pool for it's current time\n   *\n   * @protected\n   * @memberof PseudoNTPClass\n   */\n  protected startInterval(): void {\n    const { commonOptions } = this;\n    const { syncIntervalMs } = commonOptions;\n\n    if (this.isRunning) {\n      this.log('Want to start the instance already running');\n    } else {\n      this.intervalRunning = setInterval(this.sync, syncIntervalMs);\n      this.isRunning = true;\n      this.sync();\n    }\n  }\n\n  protected stopInterval() {\n    if (this.intervalRunning) {\n      clearInterval(this.intervalRunning);\n      this.intervalRunning = undefined;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * handle failed sync attempt\n   *\n   * @param err\n   */\n  protected handleSyncFail(err?: Error) {\n    if (err instanceof Error) {\n      this.log(`Request failed ${err.message}`);\n    }\n\n    const { currentServerFails, commonOptions } = this;\n    const { maxFailedResponses } = commonOptions;\n\n    if (currentServerFails > maxFailedResponses) {\n      this.log(`There is ${currentServerFails} fail`);\n      this.setCurrentServerFromPool();\n    }\n  }\n\n  /**\n   * returns the date from the server response\n   * or an error\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  protected parseServerResponse = (\n    response: TPseudoNTPClassServerResponse\n  ): Error | Date => {\n    const { currentServerOptions } = this;\n\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionField)\n        .fieldName === 'string'\n    ) {\n      const {\n        fieldName,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionField;\n\n      if (typeof response !== 'object') {\n        return new Error(\n          `Response must be an object to get the date from the field ${fieldName}`\n        );\n      }\n\n      const fieldValue = (response as any)[fieldName];\n\n      if (typeof fieldValue !== 'string') {\n        return new Error(`Response field ${fieldName} must be a string`);\n      }\n      try {\n        const resultParse = new Date(fieldValue);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n        return new Error(\n          `Failed to parse string from the server response from field ${fieldName}`\n        );\n      } catch (err) {\n        return err;\n      }\n    }\n    if (\n      typeof (currentServerOptions as IPseudoNTPClassServerConnectionCb)\n        .parseCallback === 'function'\n    ) {\n      const {\n        parseCallback,\n      } = currentServerOptions as IPseudoNTPClassServerConnectionCb;\n\n      if (!parseCallback.length) {\n        this.log('The callback seems to have no arguments accepted');\n      }\n      try {\n        const parseResponseResult = parseCallback(response);\n\n        if (parseResponseResult instanceof Error) {\n          return parseResponseResult;\n        }\n        if (parseResponseResult instanceof Date) {\n          return parseResponseResult;\n        }\n      } catch (err) {}\n      return new Error('The server response do not parse correctly');\n    }\n    if (typeof response === 'string') {\n      try {\n        const resultParse = new Date(response);\n\n        if (resultParse instanceof Date) {\n          return resultParse;\n        }\n      } catch (err) {}\n      return new Error('Failed to parse string from the server response');\n    }\n    return new Error('There is unknown response format');\n  };\n\n  protected emitClientServerTimeDifference(timeDifferenceSeconds: number) {\n    this.emit(PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC, timeDifferenceSeconds);\n  }\n\n  /**\n   * handle Date received in a server response\n   * and make an adjustment based on the on the\n   * time the request was sent and\n   * the response was received.\n   * If the difference is more than the max error\n   * then emit the event.\n   *\n   * @protected\n   * @param {Date} serverDate\n   * @param {number} timestampReq - request sent in seconds\n   * @param {number} timestampRes - response received in seconds\n   * @param {Date} dateRes - Date when the responce received\n   * @memberof PseudoNTPClass\n   */\n  protected handleServerDate(\n    serverDate: Date,\n    timestampReq: number,\n    timestampRes: number,\n    dateRes: Date\n  ): void {\n    // we think that the request was received on the\n    // server at half of the request-response time\n    const adjustmentS = (timestampRes - timestampReq) / 2;\n    const clientDate = addSecondsToDate(dateRes, adjustmentS);\n    const offsetClientTimeFromServer = datesDifferenceSeconds(\n      clientDate,\n      serverDate\n    );\n\n    if (offsetClientTimeFromServer) {\n      const { commonOptions } = this;\n      const { maxOffsetErrorS } = commonOptions;\n\n      if (Math.abs(offsetClientTimeFromServer) > maxOffsetErrorS) {\n        this.log(\n          `The client-server time difference is equals to ${offsetClientTimeFromServer}`\n        );\n        this.emitClientServerTimeDifference(offsetClientTimeFromServer);\n      }\n    }\n  }\n\n  protected convertServerResponseRaw(responseRaw: {\n    [key: string]: string;\n  }): TPseudoNTPClassServerResponse | Error {\n    return responseRaw;\n  }\n\n  /**\n   * handle the responce from the server\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private handleServerResponse = async (\n    responseWithTimestamps: TPseudoNTPClassResponseWithTimesamps\n  ): Promise<void | Error> => {\n    const {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    } = responseWithTimestamps;\n    const response = this.convertServerResponseRaw(responseRaw);\n\n    if (response instanceof Error) {\n      return response;\n    }\n\n    const responseResult = this.parseServerResponse(response);\n\n    if (responseResult instanceof Error) {\n      return responseResult;\n    }\n    if (responseResult instanceof Date) {\n      return this.handleServerDate(\n        responseResult,\n        timestampReq,\n        timestempRes,\n        dateRes\n      );\n    }\n    return new Error('An unknown result of parsing the response');\n  };\n\n  /**\n   * send the HTTP request to the current\n   * server from the pool\n   *\n   * @private\n   * @memberof PseudoNTPClass\n   */\n  private async sendRequestToCurrentServer(): Promise<\n    Error | TPseudoNTPClassResponseWithTimesamps\n  > {\n    const { currentServerRequestOptions } = this;\n    // timestamp when the request sent\n    const timestampReq = getTimestampSeconds();\n    const request = new HttpRequest({\n      ...currentServerRequestOptions!,\n    });\n    let responseRaw;\n\n    try {\n      responseRaw = await request.send();\n\n      if (responseRaw instanceof Error) {\n        console.error(responseRaw);\n        return new Error('The request failed');\n      }\n    } catch (err) {\n      return err;\n    }\n    // timestamp when the response received\n    const timestempRes = getTimestampSeconds();\n    const dateRes = new Date();\n    return {\n      responseRaw,\n      timestampReq,\n      timestempRes,\n      dateRes,\n    };\n  }\n}\n\nexport default PseudoNTPClass;\n","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.types.ts",["1757","1758"],"import { PSEUDO_NTP_CLASS_EVENTS } from './pseudo-ntp-class.const';\n\nexport type TPseudoNTPClassResponseRaw = any;\n\n/**\n * @param {number} timestampReq - timestamp when the request was sent\n * @param {number} timestempRes - timestamp when the response was received\n * @param {Date} dateRes - date when the response was received\n * @param {TPseudoNTPClassResponseRaw} responseRaw - reqponse from the server\n */\nexport type TPseudoNTPClassResponseWithTimesamps = {\n  timestampReq: number;\n  timestempRes: number;\n  dateRes: Date;\n  responseRaw: TPseudoNTPClassResponseRaw;\n};\n\n/**\n *  events emitted by the pseudo ntp\n *\n * @export\n * @interface IPseudoNTPClassEvents\n */\nexport interface IPseudoNTPClassEvents {\n  /**\n   * after syncronization with the\n   * server emit the event and\n   * returns the time offset in\n   * seconds\n   */\n  [PSEUDO_NTP_CLASS_EVENTS.TIME_SYNC]: number;\n}\n\nexport type TPseudoNTPClassServerResponse = string | { [key: string]: any };\n\n/**\n *\n * @export\n * @interface IPseudoNTPClassServerConnection\n * @param {string} server - the url of the server connect to\n * @param {string} fieldName - name of the field where is\n * the server's current date as a string in ISO format\n * @param {function} parseCallback - callback which called\n * to parse the response from the server and must return\n * the Date on the server\n */\nexport interface IPseudoNTPClassServerConnectionField {\n  server: string;\n  fieldName: string;\n}\nexport interface IPseudoNTPClassServerConnectionCb {\n  server: string;\n  parseCallback: (response: TPseudoNTPClassServerResponse) => Date | Error;\n}\nexport type IPseudoNTPClassServerConnection =\n  | IPseudoNTPClassServerConnectionCb\n  | IPseudoNTPClassServerConnectionField;\n\nexport type TPseudoNTPClassServersPoolOption = IPseudoNTPClassServerConnection[];\n\n/**\n * @param {number} [1] responseTimeoutS - timeout for reponse from the\n * server in seconds\n * @param {number} [60] syncIntervalS - interval in seconds to request the server\n * to get the time on it\n * @param {number} [10] maxOffsetErrorS - the maximum offset between the client\n * and the server time which will not be suggested as error\n * @param {number} [3] maxFailedResponses - the maximum fails of the responses\n * to switch on the another server\n * @param {number} [5] retryRequestDelayS - the delay to repeat the request\n * after fail\n */\nexport interface IPseudoNTPClassCommonOptions {\n  syncIntervalS?: number;\n  maxFailedResponses?: number;\n  retryRequestDelayS?: number;\n  responseTimeoutS?: number;\n  maxOffsetErrorS?: number;\n}\n\nexport interface IPseudoNTPClassCommonOptionsMilliseconds {\n  syncIntervalMs: number;\n  maxFailedResponses: number;\n  retryRequestDelayMs: number;\n  responseTimeoutMs: number;\n  maxOffsetErrorS: number;\n}\n\n/**\n * options for pseudo ntp class\n *\n * @export\n * @interface IPseudoNTPClassOptions\n * @param {IPseudoNTPClassServerConnection[]} serversPool - this is options for\n * the pool of the servers to receive the current date and time\n */\nexport interface IPseudoNTPClassOptions extends IPseudoNTPClassCommonOptions {\n  serversPool: TPseudoNTPClassServersPoolOption;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/pseudo-ntp-class/pseudo-ntp-class.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-api-conf.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-main.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-date-time/common-date-time-ntp-servers.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time-synced.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator.ts",["1759","1760","1761"],"import assert from 'assert';\nimport {\n  commonUtilsArrayDeleteFromArray,\n  commonUtilsArrayDoCallbackTillNoError,\n} from 'utils/common-utils/common-utils';\nimport { IMessageValidatorOptions } from '../swarm-message-subclass-validator.types';\nimport validateIssuerDesirizlizedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied';\nimport validateIssuerSerializedFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized/swarm-message-subclass-validator-fields-validator-validator-issuer-serialized';\nimport { TSwarmMessageIssuerDeserialized } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied/swarm-message-subclass-validator-fields-validator-validator-issuer-deserizlied.types';\nimport validateTypeFormat from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type';\nimport validateUserIdentifier from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier';\nimport createValidatePayload from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload';\nimport createValidateTimestamp from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp';\nimport { TSwarmMessageType } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-type/swarm-message-subclass-validator-fields-validator-validator-type.types';\nimport { ISwarmMessagePayloadValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-payload/swarm-message-subclass-validator-fields-validator-validator-payload.types';\nimport { ISwarmMessageTimestampValidationOptions } from './swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-timestamp/swarm-message-subclass-validator-fields-validator-validator-timestamp.types';\nimport { ISwarmMessage } from 'classes/swarm-message/swarm-message.types';\n\nexport class SwarmMessageSubclassFieldsValidator {\n  /**\n   * list of a valid issuers.\n   * If it is empty then any issuer will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {string[]}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected issuersList: TSwarmMessageIssuerDeserialized[] = [];\n\n  /**\n   * list of a valid message types.\n   * If it is empty then any type will\n   * be considered correct.\n   *\n   * @protected\n   * @static\n   * @type {Array<string | number>}\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected typesList: TSwarmMessageType[] = [];\n\n  protected payloadValidationOptions?: ISwarmMessagePayloadValidationOptions;\n\n  protected timestampValidationOptions?: ISwarmMessageTimestampValidationOptions;\n\n  /**\n   * Creates an instance of SwarmMessageSubclassValidator.\n   * @param {IMessageValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  constructor(options?: IMessageValidatorOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * validate swarm message object\n   * throw an error if the message\n   * is not valid\n   *\n   * @param {ISwarmMessage} message\n   * @memberof SwarmMessageSubclassFieldsValidator\n   * @throws\n   */\n  public validateMessage(message: ISwarmMessage): void {\n    assert(!!message, 'Message must be defined');\n    assert(typeof message === 'object', 'Message must be an object');\n\n    const { iss, pld, ts, uid, typ } = message;\n\n    this.validateType(typ);\n    this.validateIssuer(iss);\n    this.validatePayload(pld);\n    this.validateTimestamp(ts);\n    // the most complex validation\n    this.validateUserIdentifier(uid);\n  }\n\n  /**\n   * add an issuer string in the list\n   * as a valid issuer.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  public addIssuerToValidList = (issuer: string): void => {\n    const { issuersList } = this;\n\n    validateIssuerDesirizlizedFormat(issuer);\n    if (!issuersList.includes(issuer)) {\n      issuersList.push(issuer);\n    }\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   */\n  public removeIssuerFromValidList(issuer: string): boolean | Error {\n    const { issuersList } = this;\n\n    if (typeof issuer !== 'string') {\n      return new Error('The issuer must be a string');\n    }\n    commonUtilsArrayDeleteFromArray(issuersList, issuer);\n    return true;\n  }\n\n  /**\n   * checks whether the issuer is in the\n   * list of the valid issuers. If the\n   * list of the valid issuers is empty\n   * then returns true\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkIssuerIsInList(issuer: string): void {\n    const { issuersList } = this;\n\n    assert(\n      !issuersList.length || issuersList.includes(issuer),\n      'The issuer is not into the list of the valid issuers'\n    );\n  }\n\n  /**\n   * validate the Issuer format and\n   * if it is in the list of the valid\n   * issuers\n   *\n   * @param {string} issuer\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateIssuer(issuer: string): void {\n    validateIssuerSerializedFormat(issuer);\n    this.checkIssuerIsInList(issuer);\n  }\n\n  /**\n   * add an type string in the list\n   * as a valid types.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected addType = (type: TSwarmMessageType): void => {\n    const { typesList } = this;\n\n    validateTypeFormat(type);\n    if (!typesList.includes(type)) {\n      typesList.push(type);\n    }\n  };\n\n  /**\n   * remove an issuer from the list of the\n   * valid issuers. If there is no\n   * issuer in the list returns true.\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   */\n  protected removeType(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    commonUtilsArrayDeleteFromArray(typesList, type);\n  }\n\n  /**\n   * Checks whether the list of valid types is defined and not empty.\n   * If it is then checks if the type is into the list.\n   *\n   * @param {string| number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected checkTypeInList(type: TSwarmMessageType): void {\n    const { typesList } = this;\n\n    assert(\n      !typesList.length || typesList.includes(type),\n      'The type is not into the list of the valid types'\n    );\n  }\n\n  /**\n   * check the Type value format and\n   * if the type is in the list of the\n   * valid types\n   *\n   * @param {string | number} type\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected validateType(type: TSwarmMessageType): void {\n    validateTypeFormat(type);\n    this.checkTypeInList(type);\n  }\n\n  protected validateUserIdentifier = validateUserIdentifier;\n\n  protected validatePayload = createValidatePayload(\n    this.payloadValidationOptions\n  );\n\n  protected validateTimestamp = createValidateTimestamp(\n    this.timestampValidationOptions\n  );\n\n  /**\n   * set the options\n   *\n   * @protected\n   * @param {IMessageValidatorOptions} options\n   * @memberof SwarmMessageSubclassValidator\n   * @throws\n   */\n  protected setOptions(options?: IMessageValidatorOptions) {\n    if (options != null) {\n      assert(typeof options === 'object', 'The options must be an object');\n\n      const {\n        payloadValidationOptions,\n        issuersList,\n        typesList,\n        timestampValidationOptions,\n      } = options;\n\n      if (timestampValidationOptions) {\n        this.timestampValidationOptions = timestampValidationOptions; // set time to live in milliseconds\n        this.validateTimestamp = createValidateTimestamp(\n          timestampValidationOptions\n        );\n      }\n      if (payloadValidationOptions) {\n        this.payloadValidationOptions = payloadValidationOptions;\n        this.validatePayload = createValidatePayload(payloadValidationOptions);\n      }\n      if (issuersList) {\n        if (issuersList instanceof Array) {\n          const setIssuersListResult = commonUtilsArrayDoCallbackTillNoError<\n            string\n          >(issuersList, this.addIssuerToValidList);\n\n          if (setIssuersListResult instanceof Error) {\n            assert.fail(setIssuersListResult);\n          }\n        } else {\n          assert.fail('The value of the \"issuersList\" option must be an Array');\n        }\n      }\n      if (typesList) {\n        if (typesList instanceof Array) {\n          const setTypesListResult = commonUtilsArrayDoCallbackTillNoError<\n            TSwarmMessageType\n          >(typesList, this.addType);\n\n          if (setTypesListResult instanceof Error) {\n            throw setTypesListResult;\n          }\n        } else {\n          assert.fail('The value of the \"typesList\" option must be an Array');\n        }\n      }\n    }\n  }\n}\n\nexport default SwarmMessageSubclassFieldsValidator;\n","/home/paul/projects/decentrilized-protocol/src/classes/swarm-message/swarm-message-subclasses/swarm-message-subclass-validator/swarm-message-subclass-validator-fields-validator/swarm-message-subclass-validator-fields-validator-validators/swarm-message-subclass-validator-fields-validator-validator-user-identifier/swarm-message-subclass-validator-fields-validator-validator-user-identifier.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-date-time.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-number.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-class.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.ts",[],"/home/paul/projects/decentrilized-protocol/src/backog-classes/channel-authority-class/channel-authority-connections/channel-authority-connection-with-server-api/channel-authority-connection-with-server-api.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.ts",["1762","1763"],"import { SecretStorage } from 'classes/secret-storage-class';\nimport { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport {\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types-crypto-credentials';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n  ICentralAuthorityStorageCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  validateUserIdentity,\n  validateAuthCredentials,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport {\n  CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME,\n  CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME,\n} from 'classes/central-authority-class/central-authority-class-const/central-authority-class-const';\nimport {\n  exportCryptoCredentialsToString,\n  getUserCredentialsByUserIdentityAndCryptoKeys,\n  importCryptoCredentialsFromAString,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials';\nimport {\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS,\n  CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_KEY_CRYPTO_CREDENTIALS,\n  CENTRAL_AUTHORITY_STORAGE_PROVIDER_NAME,\n} from './central-authority-storage-credentials.const';\nimport { TSecretStoreConfiguration } from 'classes/secret-storage-class/secret-storage-class.types';\nimport { calculateHash } from 'utils/hash-calculation-utils/hash-calculation-utils';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n// TODO - it is necessary to refactor cause the unique identifier changed to a user login in CAIdentity\n/**\n * This is storage of the current\n * user's crypto keys for signing\n * and encrypting a data. This keys\n * will be encrypted with the user\n * password. Also this keys will be\n * used to authorize on each authority\n * provider.\n * This is storage which is necessary\n * to save all the user keys along with the user id which\n * are necessary to communicate with another users\n * in the network in encrypted form.\n *\n * @export\n * @class CentralAuthorityCredentialsStorage\n * @extends {StatusClassBase<typeof CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS>}\n */\nexport class CentralAuthorityCredentialsStorage\n  extends getStatusClass<typeof CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS>({\n    errorStatus: CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.ERROR,\n    initialStatus: CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.NEW,\n    instanceName: 'CentralAuthorityCredentialsStorage',\n  })\n  implements ICentralAuthorityStorageCryptoCredentials {\n  protected __userIdentity?: TCentralAuthorityUserIdentity;\n\n  protected __userIdentityHash?: string;\n\n  protected secretStorageConnection?: SecretStorage;\n\n  protected userCryptoCredentialsCached?: TCentralAuthorityUserCryptoCredentials;\n\n  protected get userIdentity(): undefined | string {\n    const { __userIdentity } = this;\n\n    if (validateUserIdentity(__userIdentity)) {\n      return __userIdentity;\n    }\n    return undefined;\n  }\n\n  protected get userIdentityHash(): undefined | string {\n    const { __userIdentityHash } = this;\n\n    return __userIdentityHash || undefined;\n  }\n\n  protected get secretStorageCredentialsValueKey(): string {\n    const { userIdentityHash } = this;\n\n    return `${CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_KEY_CRYPTO_CREDENTIALS}__${userIdentityHash}`;\n  }\n\n  protected get isConnectedToStorage(): boolean {\n    const { status } = this;\n\n    return status === CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTED;\n  }\n\n  protected get secretStorageOptions(): Partial<TSecretStoreConfiguration> {\n    return {\n      storageProviderName: CENTRAL_AUTHORITY_STORAGE_PROVIDER_NAME,\n    };\n  }\n\n  protected async setUserIdentity(userIdentity: any): Promise<Error | boolean> {\n    if (validateUserIdentity(userIdentity)) {\n      const userIdentityHash = await calculateHash(userIdentity);\n\n      if (userIdentityHash instanceof Error) {\n        console.error(userIdentityHash);\n        return new Error(\"Failed to calculate the user's identity hash\");\n      }\n\n      this.__userIdentity = userIdentity;\n      this.__userIdentityHash = userIdentityHash;\n      return true;\n    }\n    return new Error('The user identity is not valid');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  protected createSecretStorageInstance() {\n    const { secretStorageOptions: configuration } = this;\n\n    this.secretStorageConnection = new SecretStorage(configuration);\n  }\n\n  /**\n   * authorize to the storage with a credentials given\n   * @param {object} credentials\n   */\n  protected authorizeWithCredentials(\n    credentials: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<Error | boolean> | Error {\n    const { secretStorageConnection } = this;\n    const {\n      [CA_AUTH_CREDENTIALS_USER_PASSWORD_PROP_NAME]: password,\n    } = credentials;\n\n    if (secretStorageConnection) {\n      return secretStorageConnection.authorize({ password });\n    }\n    return new Error('There is no secretStorageConnection');\n  }\n\n  /**\n   * connect to the SecretStorage without credentials.\n   * the success will depending on the previous\n   * connection with credentials - if it was succed\n   * then the credentials may be stored in the session\n   * storage\n   */\n  protected connectToStorageWithoutCredentials():\n    | Promise<Error | boolean>\n    | Error {\n    const { secretStorageConnection } = this;\n\n    if (secretStorageConnection) {\n      return secretStorageConnection.connect();\n    }\n    return new Error('There is no secretStorageConnection');\n  }\n\n  protected async connectToTheStorage(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error> {\n    if (credentials && validateAuthCredentials(credentials)) {\n      const {\n        [CA_AUTH_CREDENTIALS_USER_IDENTITY_PROP_NAME]: userIdentity,\n      } = credentials;\n      const resultSetUserIdentity = await this.setUserIdentity(userIdentity);\n\n      if (resultSetUserIdentity === true) {\n        return this.authorizeWithCredentials(credentials);\n      }\n      return new Error('A wrong user identity');\n    }\n    return this.connectToStorageWithoutCredentials();\n  }\n\n  public async connect(\n    credentials?: TCentralAuthorityCredentialsStorageAuthCredentials\n  ): Promise<boolean | Error> {\n    this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTING);\n    this.createSecretStorageInstance();\n\n    const connectionResult = await this.connectToTheStorage(credentials);\n\n    if (connectionResult instanceof Error) {\n      this.setStatus(\n        CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTION_FAILED\n      );\n      CentralAuthorityCredentialsStorage.error(connectionResult);\n      return connectionResult;\n    }\n    this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.CONNECTED);\n    return true;\n  }\n\n  protected reset() {\n    this.__userIdentity = undefined;\n    this.__userIdentityHash = undefined;\n    this.secretStorageConnection = undefined;\n  }\n\n  public async disconnect(): Promise<boolean | Error> {\n    const { isConnectedToStorage, secretStorageConnection } = this;\n\n    if (isConnectedToStorage && secretStorageConnection) {\n      const disconnectFromStorageResult = await secretStorageConnection.disconnect();\n\n      if (disconnectFromStorageResult instanceof Error) {\n        console.error(disconnectFromStorageResult);\n        return new Error('Failed to disconnect from the storage');\n      }\n      this.reset();\n      this.setStatus(CENTRAL_AUTHORITY_STORAGE_CREDENTIALS_STATUS.DISCONNECTED);\n      return true;\n    }\n    return new Error('Not connected to the storage');\n  }\n\n  protected setUserCredentialsToCache(\n    userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): undefined | Error {\n    if (!checkIsValidCryptoCredentials(userCryptoCredentials)) {\n      return new Error('The given value is not a valid crypto credentials');\n    }\n    this.userCryptoCredentialsCached = userCryptoCredentials;\n  }\n\n  protected unsetUserCredentialsInCache(): void {\n    this.userCryptoCredentialsCached = undefined;\n  }\n\n  protected async setToStorage(\n    key: string,\n    value: any\n  ): Promise<Error | boolean> {\n    const {\n      secretStorageConnection,\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n    } = this;\n\n    if (isConnectedToTheSecretStorage && secretStorageConnection) {\n      return secretStorageConnection.set(key, value);\n    }\n    return new Error('There is no active connecion to the secret storage');\n  }\n\n  protected async readFromStorage(\n    key: string\n  ): Promise<Error | string | undefined> {\n    const {\n      secretStorageConnection,\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n    } = this;\n\n    if (isConnectedToTheSecretStorage && secretStorageConnection) {\n      return secretStorageConnection.get(key);\n    }\n    return new Error('There is no active connecion to the secret storage');\n  }\n\n  protected async setCryptoCredentialsToStorage(\n    userCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | boolean> {\n    const {\n      isConnectedToStorage: isConnectedToTheSecretStorage,\n      secretStorageCredentialsValueKey,\n    } = this;\n\n    if (!isConnectedToTheSecretStorage) {\n      return new Error('There is no active connecion to the secret storage');\n    }\n\n    const exportedUserCryptoCredentials = await exportCryptoCredentialsToString(\n      userCryptoCredentials\n    );\n\n    if (exportedUserCryptoCredentials instanceof Error) {\n      return exportedUserCryptoCredentials;\n    }\n    return this.setToStorage(\n      secretStorageCredentialsValueKey,\n      exportedUserCryptoCredentials\n    );\n  }\n\n  protected unsetCryptoCredentialsToStorage(): Promise<Error | boolean> {\n    const { secretStorageCredentialsValueKey } = this;\n\n    return this.setToStorage(secretStorageCredentialsValueKey, null);\n  }\n\n  protected getCredentialsCached():\n    | TCentralAuthorityUserCryptoCredentials\n    | Error\n    | undefined {\n    const { userCryptoCredentialsCached } = this;\n\n    if (!userCryptoCredentialsCached) {\n      return undefined;\n    }\n    if (checkIsValidCryptoCredentials(userCryptoCredentialsCached)) {\n      return userCryptoCredentialsCached;\n    }\n    return new Error('There is no a crypto credetials cached');\n  }\n\n  protected async readCryptoCredentialsFromStorage(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  > {\n    const { secretStorageCredentialsValueKey } = this;\n\n    const cryptoCredentials = await this.readFromStorage(\n      secretStorageCredentialsValueKey\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to read the credentials from the storage');\n    }\n    if (!cryptoCredentials) {\n      console.warn('There is no crypto credentials stored');\n      return null;\n    }\n\n    const importedCryptoKey = await importCryptoCredentialsFromAString(\n      cryptoCredentials\n    );\n\n    if (importedCryptoKey instanceof Error) {\n      console.error(importedCryptoKey);\n      return new Error(\n        'Failed to import a crypto credentials value from the string stored'\n      );\n    }\n\n    const resultSetInCache = this.setUserCredentialsToCache(importedCryptoKey);\n\n    if (resultSetInCache instanceof Error) {\n      console.error(resultSetInCache);\n      this.unsetUserCredentialsInCache();\n      return new Error(\n        'Failed to set the crypto credentials value in the cache'\n      );\n    }\n    return importedCryptoKey;\n  }\n\n  public async getCredentials(): Promise<\n    TCentralAuthorityUserCryptoCredentials | Error | null\n  > {\n    const { isConnectedToStorage } = this;\n\n    if (!isConnectedToStorage) {\n      return new Error('There is no an active connection to the storage');\n    }\n    const cachedCryptoCredentials = this.getCredentialsCached();\n\n    if (cachedCryptoCredentials instanceof Error) {\n      console.error(cachedCryptoCredentials);\n      console.error('Failed to read a cached value of a crypto credentials');\n    }\n    if (cachedCryptoCredentials) {\n      return cachedCryptoCredentials;\n    }\n\n    const storedCryptoCredentials = await this.readCryptoCredentialsFromStorage();\n\n    if (storedCryptoCredentials instanceof Error) {\n      console.error(storedCryptoCredentials);\n      return new Error(\n        'Failed to read a crypto credentials value from the storage'\n      );\n    }\n    if (!storedCryptoCredentials) {\n      console.warn('A crypto credentials value is absent');\n      return null;\n    }\n\n    const setToCacheResult = this.setUserCredentialsToCache(\n      storedCryptoCredentials\n    );\n\n    if (setToCacheResult instanceof Error) {\n      console.error(setToCacheResult);\n      this.unsetUserCredentialsInCache();\n      console.error(\n        'Failed to set the crypto credentials read from the storage in the cache'\n      );\n    }\n    return storedCryptoCredentials;\n  }\n\n  public async setCredentials(\n    cryptoKeyPairs: TCACryptoKeyPairs\n  ): Promise<Error | boolean> {\n    const { userIdentity, isConnectedToStorage } = this;\n\n    if (!isConnectedToStorage) {\n      return new Error('There is no an active connection to the storage');\n    }\n    if (!userIdentity) {\n      return new Error('A user identity value was not set');\n    }\n\n    const cryptoCredentials = getUserCredentialsByUserIdentityAndCryptoKeys(\n      userIdentity,\n      cryptoKeyPairs\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error(\n        'Failed to create a valid crypro credentials from the given crypto keys and the user identity'\n      );\n    }\n\n    const setCredentialsInCacheResult = this.setUserCredentialsToCache(\n      cryptoCredentials\n    );\n\n    if (setCredentialsInCacheResult instanceof Error) {\n      this.unsetUserCredentialsInCache();\n      console.error(setCredentialsInCacheResult);\n      return new Error('Failed to set the crypto credentials in the cahce');\n    }\n\n    const resultSetCryptoCredentialsToStorage = await this.setCryptoCredentialsToStorage(\n      cryptoCredentials\n    );\n\n    if (resultSetCryptoCredentialsToStorage instanceof Error) {\n      this.unsetUserCredentialsInCache();\n      if ((await this.unsetCryptoCredentialsToStorage()) instanceof Error) {\n        console.error('Failed to unset a crypto credentials in the storage');\n      }\n      console.error(resultSetCryptoCredentialsToStorage);\n      return new Error('Failed to set the crypto credentials in the storage');\n    }\n    return true;\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-parsers/central-authority-class-user-identity-parsers-parser-v2/central-authority-class-user-identity-parsers-parser-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-validators/central-authority-class-user-identity-validator-v2/central-authority-class-user-identity-validator-v2.ts",["1764"],"import {\n  dataValidatorUtilURL,\n  dataValidatorUtilSafeLogin,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport {\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT,\n} from '../../central-authority-class-user-identity.const';\nimport { ICAUserUniqueIdentifierDescription } from '../../central-authority-class-user-identity.types';\n\nexport const validatorV2 = (\n  v: any\n): v is ICAUserUniqueIdentifierDescription => {\n  if (v && typeof v === 'object') {\n    const {\n      [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: userUniqueIdentifier,\n      [CA_USER_IDENTITY_VERSION_PROP_NAME]: version,\n      [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: authProviderURI,\n    } = v;\n\n    if (\n      typeof version !== 'string' ||\n      version.length !== CA_USER_IDENTITY_VERSION_CHARACTERS_COUNT\n    ) {\n      return false;\n    }\n    if (!dataValidatorUtilURL(authProviderURI)) {\n      console.warn(\n        `The auth provider's uri ${authProviderURI} have a wrong format`\n      );\n      return false;\n    }\n    if (!dataValidatorUtilSafeLogin(userUniqueIdentifier)) {\n      console.warn(\n        `The user unique identifier ${userUniqueIdentifier} have a format different from the user login safe format`\n      );\n      return false;\n    }\n    return true;\n  }\n  console.warn('The URI must be an object');\n  return false;\n};\n\nexport default validatorV2;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-auth/central-authority-storage-auth-providers-credentials.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-current-user-auth/central-authority-storage-auth-providers-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/common-values/common-values-env.ts",[],"/home/paul/projects/decentrilized-protocol/src/const/const-validation-regex/const-validation-regex-common.ts",[],"/home/paul/projects/decentrilized-protocol/src/test/central-authority-identity.test/central-authority-identity.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity-formatters/central-authority-class-user-identity-formatters-formatter-v2/central-authority-class-user-identity-formatters-formatter-v2.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.ts",["1765","1766","1767","1768","1769"],"import { getStatusClass } from 'classes/basic-classes/status-class-base/status-class-base';\nimport {\n  CA_IDENTITY_CREDENTIALS_STORAGE_STATUS,\n  CA_IDENTITY_CREDENTIALS_STORAGE_CONFIGURATION,\n  CA_IDENTITY_CREDENTIALS_STORAGE_READ_CACHE_CAPACITY,\n  CA_IDENTITY_CREDENTIALS_STORAGE_READ_RAW_CACHE_CAPACITY,\n} from './central-authority-storage-swarm-users-identity-credentials.const';\nimport { ICAIdentityCredentialsStorage } from './central-authority-storage-swarm-users-identity-credentials.types';\nimport { SecretStorage } from 'classes/secret-storage-class/secret-storage-class';\nimport {\n  ISecretStoreCredentials,\n  ISecretStorage,\n} from 'classes/secret-storage-class/secret-storage-class.types';\nimport {\n  TCentralAuthorityUserIdentity,\n  TCACryptoKeyPairs,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport {\n  getExportedCryptoCredentialsByCAIdentity,\n  replaceCryptoCredentialsIdentity,\n  importCryptoCredentialsFromAString,\n  getUserIdentityByCryptoCredentials,\n  getCryptoKeyPairsByCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport { dataCachingUtilsCachingDecorator as caching } from 'utils/data-cache-utils/data-cache-utils';\nimport {\n  checkIsValidExportedCryptoCredentialsToString,\n  checkIsValidCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\n\n/**\n * This is storage to cache swarm users credentials locally.\n * To do not request it each time from the auth provider.\n */\nexport class CentralAuthorityIdentityCredentialsStorage\n  extends getStatusClass<typeof CA_IDENTITY_CREDENTIALS_STORAGE_STATUS>({\n    errorStatus: CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.ERROR,\n    initialStatus: CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.NEW,\n    instanceName: 'CentralAuthorityIdentityCredentialsStorage',\n  })\n  implements ICAIdentityCredentialsStorage {\n  protected secretStorageConnection?: ISecretStorage;\n\n  protected createConnectionToSecretStorage(): SecretStorage | Error {\n    try {\n      const connection = new SecretStorage(\n        CA_IDENTITY_CREDENTIALS_STORAGE_CONFIGURATION\n      );\n\n      return connection;\n    } catch (err) {\n      console.error(err);\n      return err;\n    }\n  }\n\n  public get isActive(): boolean {\n    const { status, secretStorageConnection } = this;\n\n    return (\n      status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED &&\n      !!secretStorageConnection &&\n      secretStorageConnection.isActive\n    );\n  }\n\n  /**\n   * connect to the SecretStorage with\n   * the user's credentials\n   * @param storageCredentials\n   */\n  public async connect(\n    storageCredentials?: ISecretStoreCredentials\n  ): Promise<boolean | Error> {\n    const connection = this.createConnectionToSecretStorage();\n\n    if (connection instanceof Error) {\n      console.error(connection);\n      return this.setErrorStatus(\n        'Failed to create an instance of SecretStorage'\n      );\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTING);\n\n    let connectionResult;\n\n    if (storageCredentials) {\n      connectionResult = await connection.authorize(storageCredentials);\n    } else {\n      connectionResult = await connection.connect();\n    }\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTION_FAILED);\n      return new Error('Failed to authorize');\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED);\n    this.secretStorageConnection = connection;\n    return true;\n  }\n\n  /**\n   * get credentials stored for the identity\n   * in the local storage\n   *\n   * @param {TCentralAuthorityUserIdentity} identity\n   * @returns {(Promise<TCentralAuthorityUserCryptoCredentials | Error | null>)}\n   * @memberof CentralAuthorityIdentityCredentialsStorage\n   */\n  public async getCredentials(\n    identity: TCentralAuthorityUserIdentity\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    return this.getCredentialsCached(identity);\n  }\n\n  /**\n   * set the credentials (identity + crypto keys)\n   * in the local secret storage\n   *\n   * @param {[]} args\n   * @param {string} args[0] - CAIdentity seriazlized\n   * @param {TCACryptoKeyPairs} args[1] - crypto key pairs\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CentralAuthorityIdentityCredentialsStorage\n   */\n  /**\n   * @param {...any[]} args\n   * @param {string | } args[1] - Crypto credentials (CAIdentity + TACryptoKeyPairs) serialized or deserialized\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CentralAuthorityIdentityCredentialsStorage\n   */\n  public async setCredentials(...args: any[]): Promise<boolean | Error> {\n    const argsLenght = args.length;\n\n    if (argsLenght === 2) {\n      return this.setCredentialsByIdentity(args[0], args[1]);\n    } else if (argsLenght === 1) {\n      const caCryptoCredentials = args[0];\n\n      if (checkIsValidExportedCryptoCredentialsToString(caCryptoCredentials)) {\n        return this.setCredentialsByCACryptoCredentialsExportedToString(\n          caCryptoCredentials\n        );\n      } else if (checkIsValidCryptoCredentials(caCryptoCredentials)) {\n        return this.setCredentialsByCACryptoCredentials(caCryptoCredentials);\n      }\n    }\n    return new Error('An unknown arguments');\n  }\n\n  /**\n   * disconnect from the local secret storage\n   *\n   * @returns {(Promise<Error | boolean>)}\n   * @memberof CentralAuthorityIdentityCredentialsStorage\n   */\n  public async disconnect(): Promise<Error | boolean> {\n    const { status, secretStorageConnection } = this;\n\n    if (status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.DISCONNECTED) {\n      console.error(\n        new Error('The instance is already disconnected from the storage')\n      );\n      // return false cause already disconnected\n      return false;\n    }\n    if (\n      status !== CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.CONNECTED ||\n      status === CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.ERROR\n    ) {\n      return this.setErrorStatus(\n        new Error(\n          \"Can't disconnect cause the instance is not in the Connected state\"\n        )\n      );\n    }\n    if (!(secretStorageConnection instanceof SecretStorage)) {\n      return this.setErrorStatus('There is no connection to the SecretStorage');\n    }\n\n    const disconnectionResult = await secretStorageConnection.disconnect();\n\n    if (disconnectionResult instanceof Error) {\n      console.error(disconnectionResult);\n      return this.setErrorStatus('SecretStorage failed to disconnect');\n    }\n    this.setStatus(CA_IDENTITY_CREDENTIALS_STORAGE_STATUS.DISCONNECTED);\n    return true;\n  }\n\n  protected getKeyNameWithPrefix(key: string): string {\n    return `__CICS_${key}`;\n  }\n\n  /**\n   * returns a string as a key under which the\n   * identity will be stored in the key-value\n   * storage.\n   *\n   * @protected\n   * @param {CentralAuthorityIdentity} identity\n   * @returns {(string | Error)}\n   * @memberof CentralAuthorityIdentityCredentialsStorage\n   */\n  protected getStorageKeyByCAIdentity(\n    identity: CentralAuthorityIdentity\n  ): string | Error {\n    if (!(identity instanceof CentralAuthorityIdentity)) {\n      return new Error(\n        'The argument must be an instance of CentralAuthorityIdentity'\n      );\n    }\n    if (!identity.isValid) {\n      return new Error('The CA identity is not valid');\n    }\n\n    const { id } = identity;\n\n    // the id - is a unique string which identifies the user\n    // in the swarm\n    if (id instanceof Error) {\n      console.error(id);\n      return new Error('Failed to get the unique identifier of the user');\n    }\n    return this.getKeyNameWithPrefix(id);\n  }\n\n  @caching(CA_IDENTITY_CREDENTIALS_STORAGE_READ_RAW_CACHE_CAPACITY)\n  protected async getCredentialsRaw(\n    identityKey: string\n  ): Promise<string | Error | undefined> {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    try {\n      const { secretStorageConnection } = this;\n      const caCryptoCredentials = await secretStorageConnection!!.get(\n        identityKey\n      );\n\n      if (caCryptoCredentials instanceof Error) {\n        console.error(caCryptoCredentials);\n        return new Error('Failed to read credentials from the storage');\n      }\n      return caCryptoCredentials ? caCryptoCredentials : undefined;\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to read a credentials for identity from the storage'\n      );\n    }\n  }\n\n  protected setCredentialsByIdentity = async (\n    identity: TCentralAuthorityUserIdentity,\n    cryptoKeyPairs: TCACryptoKeyPairs\n  ): Promise<boolean | Error> => {\n    const { isActive } = this;\n\n    if (!isActive) {\n      return new Error('The storage is not active');\n    }\n    try {\n      // parse the identity\n      const caIdentity = new CentralAuthorityIdentity(identity);\n      const caIdentityStorageKey = this.getStorageKeyByCAIdentity(caIdentity);\n\n      if (caIdentityStorageKey instanceof Error) {\n        console.error(caIdentityStorageKey);\n        return new Error('The identity is not valid');\n      }\n\n      const cryptoCredentialsExported = await getExportedCryptoCredentialsByCAIdentity(\n        caIdentity,\n        cryptoKeyPairs\n      );\n\n      if (cryptoCredentialsExported instanceof Error) {\n        console.error(cryptoCredentialsExported);\n        return new Error('Failed to export the credentials to a string');\n      }\n\n      const credentialsStoredForIdentity = await this.getCredentialsRaw(\n        caIdentityStorageKey\n      );\n\n      // if a credentials was already\n      // stored for the identity\n      // do not modify it.\n      // Cause it's value\n      // must be immutable\n      if (\n        credentialsStoredForIdentity &&\n        !(credentialsStoredForIdentity instanceof Error)\n      ) {\n        return false;\n      }\n\n      // if the given values are valid\n      // then can put it to the storage\n      // connected to\n      const { secretStorageConnection } = this;\n\n      return secretStorageConnection!!.set(\n        caIdentityStorageKey,\n        cryptoCredentialsExported\n      );\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to store the credentials');\n    }\n  };\n\n  protected async setCredentialsByCACryptoCredentials(\n    caCryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<boolean | Error> {\n    const identity = getUserIdentityByCryptoCredentials(caCryptoCredentials);\n\n    if (identity instanceof Error) {\n      console.error(identity);\n      return new Error(\n        'The user identity is not valid or have an unknown format'\n      );\n    }\n\n    const cryptoKeyPairs = getCryptoKeyPairsByCryptoCredentials(\n      caCryptoCredentials\n    );\n\n    if (cryptoKeyPairs instanceof Error) {\n      console.error(cryptoKeyPairs);\n      return new Error(\n        'The crypto key pairs are not valid or have an unknown format'\n      );\n    }\n\n    return this.setCredentialsByIdentity(identity, cryptoKeyPairs);\n  }\n\n  protected async setCredentialsByCACryptoCredentialsExportedToString(\n    caCryptoCredentialsExportedToString: string\n  ): Promise<boolean | Error> {\n    const cryptoCredentials = await importCryptoCredentialsFromAString(\n      caCryptoCredentialsExportedToString\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to import crypto credentials from the string');\n    }\n    return this.setCredentialsByCACryptoCredentials(cryptoCredentials);\n  }\n\n  @caching(CA_IDENTITY_CREDENTIALS_STORAGE_READ_CACHE_CAPACITY)\n  protected async getCredentialsCached(\n    identity: TCentralAuthorityUserIdentity\n  ): Promise<TCentralAuthorityUserCryptoCredentials | Error | null> {\n    try {\n      // parse the identity\n      const caIdentity = new CentralAuthorityIdentity(identity);\n      const credentialsKey = this.getStorageKeyByCAIdentity(caIdentity);\n\n      if (credentialsKey instanceof Error) {\n        console.error(credentialsKey);\n        return new Error('The identity has a wrong format');\n      }\n\n      const caCryptoCredentials = await this.getCredentialsRaw(credentialsKey);\n\n      if (caCryptoCredentials instanceof Error) {\n        console.error(caCryptoCredentials);\n        return new Error('Failed to read credentials from the storage');\n      }\n      if (!caCryptoCredentials) {\n        return null;\n      }\n\n      const importedCryptoCredentials = await importCryptoCredentialsFromAString(\n        caCryptoCredentials\n      );\n\n      if (importedCryptoCredentials instanceof Error) {\n        console.error(importedCryptoCredentials);\n        return new Error('Failed to import the value read');\n      }\n\n      // replace the existing value\n      // of the user identity\n      // by a requested value.\n      // Because the stored identity\n      // version may be different\n      // from the requested. It may\n      // cause an unexpected issues\n      const resultedValue = replaceCryptoCredentialsIdentity(\n        importedCryptoCredentials,\n        identity\n      );\n\n      if (resultedValue instanceof Error) {\n        console.error(resultedValue);\n        return new Error(\n          'Failed to replace the identity in the credentials read from the storage'\n        );\n      }\n      return resultedValue;\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to read a credentials for identity from the storage'\n      );\n    }\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-swarm-users-auth/central-authority-storage-swarm-users-identity-credentials/central-authority-storage-swarm-users-identity-credentials.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-base/central-authority-connection-firebase-base.ts",["1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780"],"import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport {\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport {\n  ICAConnectionConfigurationFirebase,\n  ICAConnectionFirebaseUserProfile,\n} from '../central-authority-connection-firebase.types.configuration';\nimport {\n  ICentralAuthorityUserAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n  ICentralAuthorityUserProfile,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport { validateUserProfileData } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-user/central-authority-validators-user';\nimport {\n  dataValidatorUtilEmail,\n  dataValidatorUtilURL,\n} from 'utils/data-validators-utils/data-validators-utils';\nimport { checkIsValidCryptoCredentials } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-crypto-keys/central-authority-validators-crypto-keys';\nimport { generateCryptoCredentialsWithUserIdentityV1 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport CentralAuthorityIdentity from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity';\nimport { CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { CAConnectionFirestoreUtilsCredentialsStrorage } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.credentials-storage/central-authority-connection-firebase-utils.credentials-storage';\nimport { CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS } from '../central-authority-connection-firebase.const/central-authority-connection-firebase.const.restrictions';\nimport { validatePassword } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport ErrorExtendedBaseClass from 'classes/basic-classes/error-extended-class-base/error-extended-class-base';\nimport {\n  CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE,\n  CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE,\n} from '../../central-authority-connections-const/central-authority-connections-const';\nimport { valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration } from '../central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators';\n\n/**\n *\n * This is the class realized the basic functions\n * allows to connect with the Firebase.\n *\n * @export\n * @class CAConnectionWithFirebase\n */\nexport class CAConnectionWithFirebaseBase {\n  public static validateConfiguration = valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration;\n\n  // if the application is connected with the remote Firebase\n  public isConnected: boolean = false;\n\n  public get isUserSignedIn(): boolean {\n    const { isConnected, isVerifiedAccount } = this;\n\n    if (!isConnected) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return isVerifiedAccount;\n  }\n\n  public get isAuthorized(): boolean {\n    const {\n      isUserSignedIn,\n      valueofCredentialsSignUpOnAuthorizedSuccess: credentialsAuthorizedSuccess,\n    } = this;\n\n    if (!isUserSignedIn) {\n      return false;\n    }\n    // according to the https://firebase.google.com/docs/auth/web/manage-users\n    return !!credentialsAuthorizedSuccess;\n  }\n\n  public get authResult(): ICAConnectionUserAuthorizedResult | void {\n    return this.valueofCredentialsSignUpOnAuthorizedSuccess;\n  }\n\n  protected app?: firebase.app.App;\n\n  protected configuration?: ICAConnectionConfigurationFirebase;\n\n  protected isAuthorizedWithCredentials: boolean = false;\n\n  protected valueofCredentialsSignUpOnAuthorizedSuccess?: ICAConnectionUserAuthorizedResult;\n\n  protected connectionWithCredentialsStorage?: CAConnectionFirestoreUtilsCredentialsStrorage;\n\n  protected get currentUser(): firebase.User | null {\n    const { isConnected, app } = this;\n\n    return isConnected ? app!!.auth().currentUser : null;\n  }\n\n  protected get isVerifiedAccount(): boolean {\n    const { isConnected, currentUser: currentUserData } = this;\n\n    if (!isConnected) {\n      return false;\n    }\n    if (!currentUserData) {\n      return false;\n    }\n    if (!currentUserData.emailVerified) {\n      return false;\n    }\n    return true;\n  }\n\n  protected get databaseURL(): Error | string {\n    const { configuration } = this;\n\n    if (!configuration) {\n      return new Error(\n        'There is no url specified for the Firebase authority provided'\n      );\n    }\n\n    const { databaseURL } = configuration;\n\n    if (dataValidatorUtilURL(databaseURL)) {\n      return databaseURL;\n    }\n    return new Error(\n      'An invalid URL provided for the Firebase authority provider'\n    );\n  }\n\n  // return the firebase application\n  public getApp(): void | firebase.app.App {\n    return this.app;\n  }\n\n  /**\n   * sign out if authorized before\n   *\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async signOut(): Promise<boolean | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    // disconnect the strage cause it's necessary\n    // that the user was authorized\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    try {\n      await app!!.auth().signOut();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to sign out');\n    }\n    this.handleUnauthorized();\n\n    return true;\n  }\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @param {string} name - name of the application,\n   * it's necessary to provide a name string if more than one Firebase\n   * applications will be used simultaneousely. But at the first time\n   * no name must be provided, cause it means that the DEFAULT application\n   * will be created, which is required by the Firebase.\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase,\n    name?: string\n  ): Promise<boolean | Error> {\n    let app;\n\n    try {\n      app = firebase.initializeApp(configuration, name);\n      this.configuration = configuration;\n    } catch (err) {\n      console.error(err);\n      this.setConnectedStatus(false);\n      return new Error(\n        'Failed to initialize the application with the given configuration'\n      );\n    }\n    this.setConnectedStatus(app);\n    return true;\n  }\n\n  /**\n   * This method may be substituted by firebase\n   * connection implementation to be compilant\n   * to an CA identifier version.\n   * When call the method createOrSetCredentialsInDB\n   * functions to generate credentials and store\n   * it in the database may be substitudet by\n   * an implementation of it compolant to the\n   * identifier version.\n   * Thi version is compilant to the identity v1.\n   *\n   * @param signUpCredentials\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    return this.createOrSetCredentialsInDB(signUpCredentials.cryptoCredentials);\n  }\n\n  protected setConnectedStatus(isConnected: false | firebase.app.App) {\n    this.isConnected = !!isConnected;\n    if (isConnected) {\n      this.app = isConnected;\n    }\n  }\n\n  protected setAuthorizedStatus(isAuthorized: boolean) {\n    this.isAuthorizedWithCredentials = isAuthorized;\n  }\n\n  protected checkIfConnected(): boolean | Error {\n    const { isConnected, connectionWithCredentialsStorage } = this;\n\n    if (\n      !connectionWithCredentialsStorage ||\n      !connectionWithCredentialsStorage.isConnected\n    ) {\n      return false;\n    }\n    return !isConnected\n      ? new Error('There is no active connection with the Firebase')\n      : true;\n  }\n\n  protected checkSignUpCredentials(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): boolean | Error {\n    if (!signUpCredentials) {\n      return new Error('Sign up credentials must be provided');\n    }\n    if (typeof signUpCredentials !== 'object') {\n      return new Error('Sign up credentials must be an object');\n    }\n\n    const {\n      cryptoCredentials: credentialsGiven,\n      login,\n      password,\n    } = signUpCredentials;\n\n    if (credentialsGiven) {\n      const resultCheckCredentialsGiven = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsGiven\n      );\n\n      if (resultCheckCredentialsGiven instanceof Error) {\n        console.error(resultCheckCredentialsGiven);\n        return new Error(\n          'Credentials given is not valid for the Firebase auth provider'\n        );\n      }\n    }\n    if (!dataValidatorUtilEmail(login)) {\n      return new Error('The login must be an email valid');\n    }\n    if (!validatePassword(password)) {\n      return new Error('The password provided is not valid');\n    }\n    return true;\n  }\n\n  protected setConnectionWithCredentialsStorage(\n    connectionWithCredentialsStorage: CAConnectionFirestoreUtilsCredentialsStrorage\n  ) {\n    this.connectionWithCredentialsStorage = connectionWithCredentialsStorage;\n  }\n\n  protected async startConnectionWithCredentialsStorage(): Promise<\n    boolean | Error\n  > {\n    if (this.connectionWithCredentialsStorage) {\n      // if already connected with the credentials storage\n      return true;\n    }\n\n    const connectionWithCredentialsStorage = new CAConnectionFirestoreUtilsCredentialsStrorage(\n      this\n    );\n    const storageConnectionResult = await connectionWithCredentialsStorage.connect();\n\n    if (storageConnectionResult instanceof Error) {\n      console.error(storageConnectionResult);\n      return new Error('Failed connect to the Firebase credentials storage');\n    }\n    if (!connectionWithCredentialsStorage.isConnected) {\n      return new Error(\n        'Connection to the Firebase credentials storage was not succeed'\n      );\n    }\n    this.setConnectionWithCredentialsStorage(connectionWithCredentialsStorage);\n    return true;\n  }\n\n  protected async waitingUserInit(): Promise<void | firebase.User | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return new Error('The connection is not established');\n    }\n    if (!this.app) {\n      return new Error('The Firebase app is not defined');\n    }\n    return new Promise((res) => {\n      this.app!!.auth().onAuthStateChanged((user) => {\n        debugger;\n        if (user && user.email) {\n          res(user);\n        }\n      });\n    });\n  }\n\n  protected handleUnauthorized() {\n    this.setAuthorizedStatus(false);\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  // handle an authorization attemp failed\n  protected onAuthorizationFailed(error: Error | string): Error {\n    const err = error instanceof Error ? error : new Error(String(error));\n\n    console.error(err);\n    console.error('Authorization failed on remote Firebase server');\n    this.handleUnauthorized();\n    return err;\n  }\n\n  protected async singUpWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      authCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    const { login, password } = authCredentials;\n\n    try {\n      await firebase.auth().createUserWithEmailAndPassword(login, password);\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  /**\n   * sign in under the login\n   * provided by the user\n   * @param authCredentials\n   * @param {string} authCredentials.login\n   * @param {string} authCredentials.password\n   */\n  protected async singInWithAuthCredentials(\n    authCredentials: ICentralAuthorityUserAuthCredentials\n  ): Promise<boolean | Error> {\n    let signInResult;\n    const { login, password } = authCredentials;\n\n    try {\n      signInResult = await firebase\n        .auth()\n        .signInWithEmailAndPassword(login, password);\n    } catch (err) {\n      console.error(err);\n      return new Error(\n        'Failed to sign up to the Firebase with the given credentials'\n      );\n    }\n    return true;\n  }\n\n  protected async getUserProfileData(): Promise<\n    Error | ICentralAuthorityUserProfile\n  > {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser: currentUserData } = this;\n\n    // current user is instance\n    // of the firebase current user\n    if (!currentUserData) {\n      // if there is no profile data\n      return {};\n    }\n\n    const { displayName, photoURL, phoneNumber, email } = currentUserData;\n\n    return {\n      name: displayName || null,\n      email: email || null,\n      phone: phoneNumber || null,\n      photoURL: photoURL || null,\n    };\n  }\n\n  protected async returnOnAuthorizedResult(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const userProfile = await this.getUserProfileData();\n\n    if (userProfile instanceof Error) {\n      console.error(userProfile);\n      return new Error('Failed to get profile data');\n    }\n    return {\n      cryptoCredentials,\n      profile: userProfile,\n    };\n  }\n\n  protected mapAppProfileToFirebaseProfileWithoutEmail(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): ICAConnectionFirebaseUserProfile {\n    return {\n      displayName: (profile && profile.name) || null,\n      photoURL: (profile && profile.photoURL) || null,\n    };\n  }\n\n  protected async setProfileDataEmail(email: string): Promise<Error | boolean> {\n    const checkIsConnectedResult = this.checkIfConnected();\n\n    if (checkIsConnectedResult instanceof Error) {\n      return checkIsConnectedResult;\n    }\n    if (!dataValidatorUtilEmail(email)) {\n      return new Error('The email is not valid');\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('Failed to get the user profile data');\n    }\n    if (currentUser.email !== email) {\n      try {\n        await currentUser.updateEmail(email);\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to update the email address');\n      }\n\n      const sendEmailVerificationResult = await this.handleAuthEmailNotVerified();\n\n      if (sendEmailVerificationResult instanceof Error) {\n        console.error(sendEmailVerificationResult);\n        return new Error('Failed to update the email address');\n      }\n      // TODO - if the user was authentificated by OAuth\n      // it is necessary to invoke the reauthentificate method\n      // of the Firebase\n      const logOutResult = await this.signOut();\n\n      if (logOutResult instanceof Error) {\n        console.error(logOutResult);\n        return new Error('Failed to log out');\n      }\n      return true;\n    }\n    return true;\n  }\n\n  /**\n   * At no a phone number can't be updated\n   * @param profileDataPartialWithoutPhoneNumber\n   */\n  protected async setProfileDataWithFirebase(\n    profileDataPartialWithoutPhoneNumber: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('There is no current user profile');\n    }\n\n    const profileMappedForFirebaseWithoutEmail = this.mapAppProfileToFirebaseProfileWithoutEmail(\n      profileDataPartialWithoutPhoneNumber\n    );\n\n    try {\n      await currentUser.updateProfile(profileMappedForFirebaseWithoutEmail);\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to set the Firebase profile data');\n    }\n    // TODO - what to do with a phone number\n    return true;\n  }\n\n  // TODO - test it and change to private method\n  protected async setProfileData(\n    profile: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICentralAuthorityUserProfile> {\n    if (isEmptyObject(profile)) {\n      return await this.getUserProfileData();\n    }\n    if (!validateUserProfileData(profile)) {\n      return new Error('The profile is not valid');\n    }\n\n    const resultUpdateProfile = await this.setProfileDataWithFirebase(profile);\n\n    if (resultUpdateProfile instanceof Error) {\n      return resultUpdateProfile;\n    }\n\n    const updatedProfile = await this.getUserProfileData();\n\n    if (updatedProfile instanceof Error) {\n      console.error(updatedProfile);\n      return new Error('Failed to read the updated profile data');\n    }\n\n    const { email } = profile;\n\n    if (email) {\n      // if it is necessary to update email value\n      // it will cause that user must authentificate\n      // once again\n      const updateEmailResult = await this.setProfileDataEmail(email);\n\n      if (updateEmailResult instanceof Error) {\n        return updateEmailResult;\n      }\n      return {\n        ...updatedProfile,\n        email,\n      };\n    }\n    return updatedProfile;\n  }\n\n  protected async handleAuthEmailNotVerified(): Promise<boolean | Error> {\n    debugger;\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n    debugger;\n    if (!currentUser) {\n      return new Error('There is no user authorized');\n    }\n\n    try {\n      await currentUser.sendEmailVerification();\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to send the email verification link');\n    }\n    return true;\n  }\n\n  /**\n   * check if an account of the user\n   * was verified or not.\n   * If it wasn't, then send an email\n   * to verify it.\n   * @protected\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebase\n   */\n  protected async chekIfVerifiedAccount(): Promise<boolean | Error> {\n    // if the account was validated by email\n    if (this.isVerifiedAccount) {\n      return true;\n    }\n\n    // if the account was not validated by email\n    // send the verification email\n    const sendVerificationEmailResult = await this.handleAuthEmailNotVerified();\n\n    if (sendVerificationEmailResult instanceof Error) {\n      console.error(sendVerificationEmailResult);\n      return new Error('Failed to send the email verification');\n    }\n    return new ErrorExtendedBaseClass(\n      'Please verify the email address',\n      CA_CONNECTION_ERROR_ACCOUNT_NOT_VERIFIED_CODE\n    );\n  }\n\n  protected generateNewCryptoCredentialsForConfigurationProvided = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV1(\n      {\n        authorityProviderURI: databaseURL,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  protected checkUserIdentityIsValidForConfigurationProvided(\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Error | TCentralAuthorityUserCryptoCredentials {\n    const { databaseURL } = this;\n\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n    if (!checkIsValidCryptoCredentials(cryptoCredentials)) {\n      return new Error('The crypto credentials value is not valid');\n    }\n\n    const caUserIdentity = new CentralAuthorityIdentity(cryptoCredentials);\n\n    if (!caUserIdentity.isValid) {\n      return new Error('User identity is not valid');\n    }\n\n    const { identityDescription: identityDescriptionParsed } = caUserIdentity;\n\n    if (identityDescriptionParsed instanceof Error) {\n      console.error(identityDescriptionParsed);\n      return new Error('Failed to get description by identity string');\n    }\n    if (\n      identityDescriptionParsed[\n        CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME\n      ] !== databaseURL\n    ) {\n      return new Error(\n        'Wrong authority provider url got from the identity string'\n      );\n    }\n    return cryptoCredentials;\n  }\n\n  protected async readCryptoCredentialsForTheUserFromDatabase(): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials | null\n  > {\n    const isConnected = this.checkIfConnected();\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n\n    const { connectionWithCredentialsStorage } = this;\n    const credentialsForTheCurrentUser = await connectionWithCredentialsStorage!!.getCredentialsForTheCurrentUser();\n\n    if (credentialsForTheCurrentUser instanceof Error) {\n      console.error(credentialsForTheCurrentUser);\n      return new Error('Failed to read credentials of the current user');\n    }\n    return credentialsForTheCurrentUser;\n  }\n\n  protected setCryptoCredentialsForTheUserToDatabase = async (\n    cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> => {\n    const isConnected = this.checkIfConnected();\n    const { connectionWithCredentialsStorage } = this;\n\n    if (!isConnected) {\n      return new Error(\n        'There is no active connection to the Firebase auth provider'\n      );\n    }\n    // set the new generated credentials forcely\n    // and rewrite the existing\n    // cause it is not valid\n    const setCredentialsResult = await connectionWithCredentialsStorage!!.setUserCredentials(\n      cryptoCredentials\n    );\n\n    if (setCredentialsResult instanceof Error) {\n      return setCredentialsResult;\n    }\n    // if not an error then return\n    // a crypto credentials\n    return setCredentialsResult;\n  };\n\n  protected async createOrSetCredentialsInDB(\n    credentialsGiven?: TCentralAuthorityUserCryptoCredentials,\n    generateNewCryptoCredentialsForConfigurationProvided: () => Promise<\n      Error | TCentralAuthorityUserCryptoCredentials\n    > = this.generateNewCryptoCredentialsForConfigurationProvided,\n    setCryptoCredentialsForTheUserToDatabase: (\n      cryptoCredentials: TCentralAuthorityUserCryptoCredentials\n    ) => Promise<Error | TCentralAuthorityUserCryptoCredentials> = this\n      .setCryptoCredentialsForTheUserToDatabase\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    let attempt = 0;\n    let cryptoCredentials:\n      | TCentralAuthorityUserCryptoCredentials\n      | Error = new Error(\n      'Failed to generate and set a crypto credentials for the user because of unknown reason'\n    );\n    let isSuccess: boolean = false;\n\n    if (\n      typeof generateNewCryptoCredentialsForConfigurationProvided !== 'function'\n    ) {\n      return new Error(\n        'The generateNewCryptoCredentialsForConfigurationProvided argument must be a function'\n      );\n    }\n    if (typeof setCryptoCredentialsForTheUserToDatabase !== 'function') {\n      return new Error(\n        'The setCryptoCredentialsForTheUserToDatabase argument must be a function'\n      );\n    }\n\n    // try a multiple times cause may be\n    // a network errors or user id\n    // is already exists in the database\n    while (\n      attempt < CA_CONNECTION_FIREBASE_CREDENTIALS_GENERATION_MAX_ATTEMPTS &&\n      !isSuccess\n    ) {\n      cryptoCredentials = credentialsGiven\n        ? // if a credentials provided, then use it\n          credentialsGiven\n        : // if a credentials not provided, generate a new one\n          await generateNewCryptoCredentialsForConfigurationProvided();\n\n      if (cryptoCredentials instanceof Error) {\n        // fialed to generate a new crypto credentials\n        console.error(cryptoCredentials);\n      } else {\n        const setCredentialsResult = await setCryptoCredentialsForTheUserToDatabase(\n          cryptoCredentials\n        );\n\n        if (setCredentialsResult instanceof Error) {\n          console.error(setCredentialsResult);\n          cryptoCredentials = new Error(\n            'Failed to store credentials for the user in the database'\n          );\n        } else {\n          cryptoCredentials = setCredentialsResult;\n          isSuccess = true;\n        }\n      }\n      attempt += 1;\n    }\n    return cryptoCredentials;\n  }\n\n  /**\n   * check if a credentials are already exists\n   * in the remote storage for the user.\n   *\n   * @protected\n   * @returns\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  protected async checkIfCredentialsExistsForTheUser(): Promise<\n    Error | void | TCentralAuthorityUserCryptoCredentials\n  > {\n    const credentialsExistingForTheCurrentUser = await this.readCryptoCredentialsForTheUserFromDatabase();\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      // if something was going wrong when reading\n      // a credentials for the current user\n      // return an Error, because if ignore\n      // and set a new credentials in storage\n      // the data may become inconsistent, cause\n      // credentials is already exists in the database\n      // but an error has occurred once for a some reason.\n      console.error(credentialsExistingForTheCurrentUser);\n      return new Error(\n        'Failed to read credentials for the user from the Firebase database'\n      );\n    }\n\n    if (credentialsExistingForTheCurrentUser) {\n      const credentialsValidationResult = this.checkUserIdentityIsValidForConfigurationProvided(\n        credentialsExistingForTheCurrentUser\n      );\n\n      if (credentialsValidationResult instanceof Error) {\n        console.error(credentialsValidationResult);\n        console.error('The credentials stored for the user is not valid');\n        // if credentials exists for the user but invalid at now\n        // return an error to inform that the user can't user\n        // this account for authorization.\n        // Credentials was already read by another users\n        // and if we set a new one in the storage it may\n        // cause inconsistency.\n        return new ErrorExtendedBaseClass(\n          \"Sorry, you can't use this account anymore, cause a credentials existing for the account exists and not valid\",\n          CA_CONNECTION_ERROR_ACCOUNT_CAN_NOT_BE_USED_ANYMORE\n        );\n      }\n\n      // if the credentials read from the\n      // Firebase storage is valid\n      // for the current configuration return it\n      return credentialsExistingForTheCurrentUser;\n    }\n  }\n\n  protected async createOrReturnExistingCredentialsForUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsExistingForTheCurrentUser = await this.checkIfCredentialsExistsForTheUser();\n\n    if (credentialsExistingForTheCurrentUser instanceof Error) {\n      return credentialsExistingForTheCurrentUser;\n    }\n    if (credentialsExistingForTheCurrentUser != null) {\n      // if an existing credentials returned\n      return credentialsExistingForTheCurrentUser;\n    }\n    // if there is no credentials stored for the user\n\n    // generate a new credentials for the user and\n    // set it in the storage. If a credentials was\n    // provided into signUpCredentials and valid, it will be used\n    // instead of generating a new one.\n    const newCredentialsGenerated = await this.generateAndSetCredentialsForTheCurrentUser(\n      signUpCredentials\n    );\n\n    if (newCredentialsGenerated instanceof Error) {\n      console.error(newCredentialsGenerated);\n      return new Error(\n        'Failed to generate or set a crypto credentials for the user'\n      );\n    }\n    return newCredentialsGenerated;\n  }\n\n  protected async signIn(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<boolean | Error> {\n    const checkSignUpCredentialsResult = this.checkSignUpCredentials(\n      firebaseCredentials\n    );\n\n    if (checkSignUpCredentialsResult instanceof Error) {\n      console.error(checkSignUpCredentialsResult);\n      return this.onAuthorizationFailed(checkSignUpCredentialsResult);\n    }\n\n    // try to sign in with the credentials, then try to sign up\n    return this.singInWithAuthCredentials(firebaseCredentials);\n  }\n\n  protected async signUp(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    // if failed to sign in with the\n    // credentials, then try to\n    // sign up\n    const signUpResult = await this.singUpWithAuthCredentials(\n      signUpCredentials\n    );\n\n    if (signUpResult instanceof Error) {\n      // if sign up failed then return\n      // error that the authorization\n      // failed\n      return this.onAuthorizationFailed(\n        'Failed to authorize on Firebase remote server with the credentials'\n      );\n    }\n    return true;\n  }\n\n  protected async disconnectCredentialsStorage(): Promise<Error | boolean> {\n    const { connectionWithCredentialsStorage } = this;\n\n    if (\n      connectionWithCredentialsStorage &&\n      connectionWithCredentialsStorage.isConnected\n    ) {\n      const res = await connectionWithCredentialsStorage.disconnect();\n\n      if (res instanceof Error) {\n        console.error(res);\n        return new Error(\n          'Failed to disconnect from the Firebase credentials storage'\n        );\n      }\n    }\n\n    this.connectionWithCredentialsStorage = undefined;\n    return true;\n  }\n}\n\nexport default CAConnectionWithFirebaseBase;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-connection-implementation/central-authority-connection-firebase-connection-implementation.ts",["1781","1782","1783","1784"],"import firebase from 'firebase';\nimport 'firebase/auth';\nimport memoize from 'lodash.memoize';\nimport CAConnectionWithFirebaseBase from '../central-authority-connection-firebase-base/central-authority-connection-firebase-base';\nimport {\n  ICAConnection,\n  ICAConnectionSignUpCredentials,\n  ICAConnectionUserAuthorizedResult,\n} from '../../central-authority-connections.types';\nimport { isEmptyObject } from 'utils/common-utils/common-utils-objects';\nimport {\n  ICentralAuthorityUserProfile,\n  TCentralAuthorityUserCryptoCredentials,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { getVersionOfCryptoCredentials } from 'classes/central-authority-class/central-authority-utils-common/central-authority-utils-crypto-credentials/central-authority-utils-crypto-credentials';\nimport {\n  CA_USER_IDENTITY_VERSIONS,\n  CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME,\n  CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME,\n  CA_USER_IDENTITY_VERSION_CURRENT,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.const';\nimport { generateCryptoCredentialsWithUserIdentityV2 } from 'classes/central-authority-class/central-authority-utils-common/central-authority-util-crypto-keys/central-authority-util-crypto-keys';\nimport { validateUserIdentityVersion } from 'classes/central-authority-class/central-authority-validators/central-authority-validators-auth-credentials/central-authority-validators-auth-credentials';\nimport { TUserIdentityVersion } from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\nimport { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase.types.configuration';\nimport { CA_CONNECTION_STATUS } from '../../central-authority-connections-const/central-authority-connections-const';\n\n/**\n *\n * This is the class realized connection with the Firebase.\n * It allows to sign up and authorize on it, set a crypto credentials\n * for the user and read credentials for another users.\n * The versions of a connections to the Firebase must\n * extends this class. This implementation is compilant\n * to the V1 and V2 of the user identity.\n *\n * @export\n * @class CAConnectionWithFirebase\n * @implements {ICAConnection}\n */\nexport class CAConnectionWithFirebaseImplementation\n  extends CAConnectionWithFirebaseBase\n  implements ICAConnection {\n  public get cryptoCredentials():\n    | TCentralAuthorityUserCryptoCredentials\n    | undefined {\n    const { valueofCredentialsSignUpOnAuthorizedSuccess } = this;\n\n    if (valueofCredentialsSignUpOnAuthorizedSuccess) {\n      const { cryptoCredentials } = valueofCredentialsSignUpOnAuthorizedSuccess;\n\n      return cryptoCredentials;\n    }\n  }\n\n  public get authProviderURL() {\n    const { databaseURL } = this;\n\n    return databaseURL instanceof Error ? undefined : databaseURL;\n  }\n\n  /**\n   * the current status of the connection\n   * to the Firebase remote database\n   *\n   * @readonly\n   * @type {CA_CONNECTION_STATUS}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public get status(): CA_CONNECTION_STATUS {\n    const { isConnected, isAuthorized, isAnonymousely } = this;\n\n    if (!isConnected) {\n      return CA_CONNECTION_STATUS.DISCONNECTED;\n    }\n    if (isAuthorized) {\n      return CA_CONNECTION_STATUS.AUTHORIZED;\n    }\n    if (isAnonymousely) {\n      return CA_CONNECTION_STATUS.CONNECTED;\n    }\n    return CA_CONNECTION_STATUS.DISCONNECTED;\n  }\n\n  /**\n   * whether the user is connected anonymousely\n   * or not. User must be authorized or connected\n   * anonymousely\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected isAnonymousely = false;\n\n  protected userLogin?: string;\n\n  /**\n   * list with identity versions supported by the connection\n   *\n   * @type {Array<TUserIdentityVersion>}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected readonly supportedVersions: Array<TUserIdentityVersion> = [\n    CA_USER_IDENTITY_VERSIONS['01'],\n    CA_USER_IDENTITY_VERSIONS['02'],\n  ];\n\n  /**\n   * checks whether the identity version\n   * is supported by the connection\n   *\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public isVersionSupported = memoize(\n    (version: TUserIdentityVersion): boolean =>\n      this.supportedVersions.includes(version)\n  );\n\n  /**\n   * connect to the Firebase database. To authorize\n   * in the database to set credentials it is necesssry\n   * to authorize in.\n   * To read credentials of another user authorization is not\n   * necessary.\n   * Connection will be established in the anonymous mode\n   *\n   * @param {ICAConnectionConfigurationFirebase} configuration\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof CAConnectionWithFirebaseBase\n   */\n  public async connect(\n    configuration: ICAConnectionConfigurationFirebase\n  ): Promise<boolean | Error> {\n    // if there is an active apps exists then it is necessary\n    // to provide the app name, elswere the Firebase will throw\n    // an error.\n    const appName = firebase.apps.length\n      ? configuration.databaseURL\n      : undefined;\n    const resultConnection = await super.connect(configuration, appName);\n\n    if (resultConnection instanceof Error) {\n      return resultConnection;\n    }\n    try {\n      const connectAnonymouselyResult = await firebase\n        .auth()\n        .signInAnonymously();\n\n      if (connectAnonymouselyResult instanceof Error) {\n        return connectAnonymouselyResult;\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to connect anonymousely');\n    }\n\n    const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n    if (connectWithStorageResult instanceof Error) {\n      console.error(connectWithStorageResult);\n      return new Error('Failed to connect to the credentials storage');\n    }\n    this.setIsAnonymousely();\n    return resultConnection;\n  }\n\n  /**\n   * return a credentials for the user\n   * with the id = userId.\n   * For the v1 the user id must be a uuidV4.\n   * For the v2 the user id must be a login/email/uuid.\n   * under which the user was registered the\n   * Firebase account.\n   *\n   * @param {string} userId\n   * @returns {(Promise<Error | null | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionFirestoreUtilsCredentialsStrorage\n   */\n  public async getUserCredentials(\n    userId: string\n  ): Promise<Error | null | TCentralAuthorityUserCryptoCredentials> {\n    const { status } = this;\n\n    if (status !== CA_CONNECTION_STATUS.DISCONNECTED) {\n      const { connectionWithCredentialsStorage } = this;\n\n      return connectionWithCredentialsStorage!.getUserCredentials(userId);\n    }\n    return new Error('Not connected to the Firebase');\n  }\n\n  /**\n   * @param {ICAConnectionSignUpCredentials} firebaseCredentials\n   * @param firebaseCredentials.login - there must be an email to authorize with a Firebase account\n   * @param firebaseCredentials.password - password used for encrypt a sensitive data and authorize\n   * in the Firebase account\n   * @param profile - if provided then the user profile will be set in firebase\n   */\n  public async authorize(\n    firebaseCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<ICAConnectionUserAuthorizedResult | Error> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return this.onAuthorizationFailed(isConnected);\n    }\n\n    let authHandleResult;\n    const { isAuthorized } = this;\n\n    if (isAuthorized) {\n      authHandleResult = this.valueofCredentialsSignUpOnAuthorizedSuccess!!;\n    } else {\n      // try to sign in with the credentials, then try to sign up\n      // const userLoggedPromise = this.waitingUserInit();\n      const signInResult = await this.signIn(firebaseCredentials);\n      debugger;\n      if (signInResult instanceof Error) {\n        console.warn('Failed to sign in with the credentials given');\n\n        // if failed to sign in with the credentials\n        // try to sign up\n        const signUpResult = await this.signUp(firebaseCredentials);\n\n        if (signUpResult instanceof Error) {\n          console.error(signUpResult);\n          return this.onAuthorizationFailed('The user was failed to sign up');\n        }\n      }\n\n      // const user = await userLoggedPromise;\n      // debugger;\n      // if (!user) {\n      //   return new Error('Failed to get the user authorized');\n      // }\n      // if (user instanceof Error) {\n      //   return new Error('Error on login');\n      // }\n      // if (!user.emailVerified) {\n      debugger;\n      // check if the account was verfied by the user\n      const isVerifiedResult = await this.chekIfVerifiedAccount();\n\n      if (isVerifiedResult instanceof Error) {\n        console.error('The account is not verified');\n        return this.onAuthorizationFailed(isVerifiedResult);\n      }\n      //}\n\n      const connectWithStorageResult = await this.startConnectionWithCredentialsStorage();\n\n      if (connectWithStorageResult instanceof Error) {\n        console.error(connectWithStorageResult);\n        return new Error('Failed to connect to the credentials storage');\n      }\n      // set the user login to use it to generate\n      // crypto credentials\n      this.setUserLogin(firebaseCredentials.login);\n\n      // create a new credentnials for the user or return\n      // an existing.\n      // if a crytpto credentials provided in signUpCredentials\n      // it will be used to set in the Firebase credentials\n      // storage\n      const cryptoCredentials = await this.createOrReturnExistingCredentialsForUser(\n        firebaseCredentials\n      );\n\n      if (cryptoCredentials instanceof Error) {\n        console.error('Failed to get a crypto credentials valid for the user');\n        return this.onAuthorizationFailed(cryptoCredentials);\n      }\n\n      // give user's profile\n      // with a credentials\n      authHandleResult = await this.returnOnAuthorizedResult(cryptoCredentials);\n    }\n\n    if (authHandleResult instanceof Error) {\n      return this.onAuthorizationFailed(authHandleResult);\n    }\n    // if a profile data is necessary to be set\n    // by a profile data from the arguments given\n    if (profile && !isEmptyObject(profile)) {\n      const setProfileResult = await this.setProfileData(profile);\n\n      if (setProfileResult instanceof Error) {\n        console.error(setProfileResult);\n        return this.onAuthorizationFailed('Failed to set the profile data');\n      }\n\n      // set porofile is the user's profile\n      // data stored in the firebase\n      authHandleResult = {\n        profile: setProfileResult,\n        // TODO it is necessry to set this credentials in the database\n        cryptoCredentials: authHandleResult.cryptoCredentials,\n      };\n    }\n    // set the authentification success\n    // result. To return it on the second authorization\n    // request\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authHandleResult;\n    this.setValueofCredentialsSignUpOnAuthorizedSuccess(authHandleResult);\n    this.unsetIsAnonymousely();\n    return authHandleResult;\n  }\n\n  /**\n   * disconnect from the app and sign out\n   * if authorized\n   *\n   * @returns\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  public async disconnect() {\n    const { app } = this;\n    if (!app) {\n      return;\n    }\n    debugger;\n    if ((app as any).isDeleted_) {\n      return;\n    }\n    if (this.status === CA_CONNECTION_STATUS.AUTHORIZED) {\n      const signOutResult = await this.signOut();\n\n      if (signOutResult instanceof Error) {\n        return signOutResult;\n      }\n      if (signOutResult !== true) {\n        return new Error('An unknown error has occurred while sign out');\n      }\n    }\n    return this.disconnectFromTheApp();\n  }\n\n  public async delete(\n    firebaseCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | boolean> {\n    const isConnected = this.checkIfConnected();\n\n    if (isConnected instanceof Error) {\n      return isConnected;\n    }\n\n    const { currentUser } = this;\n\n    if (currentUser instanceof Error) {\n      console.error(currentUser);\n      return new Error('Failed to read the current user');\n    }\n    if (currentUser == null) {\n      return new Error('There is no current user');\n    }\n\n    // try to sign in with the credentials.\n    // it is required by the firebase to sign in before\n    // delete the user.\n    const signInResult = await this.signIn(firebaseCredentials);\n\n    if (signInResult instanceof Error) {\n      console.error('Failed to sign in before the user deletion');\n      return signInResult;\n    }\n\n    try {\n      const result = (await currentUser.delete()) as unknown; // or maybe deleteWithCompletion method\n\n      if (result instanceof Error) {\n        console.error(result);\n        return new Error('Failed to delete the user from the firebase');\n      }\n    } catch (err) {\n      console.error(err);\n      return new Error('Failed to delete the user from the authority');\n    }\n\n    // disconnection from the firebase\n    // is not necessry cause the firebase\n    // disconnects automatically if the user\n    // delete himself\n    return true;\n  }\n\n  /**\n   * set that connected anonymousely\n   * to the Firebase\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setIsAnonymousely() {\n    this.isAnonymousely = true;\n  }\n\n  /**\n   * unset that connected to the Firebase\n   * anonymousely\n   *\n   * @protected\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected unsetIsAnonymousely() {\n    this.isAnonymousely = false;\n  }\n\n  protected setValueofCredentialsSignUpOnAuthorizedSuccess(\n    authResult: ICAConnectionUserAuthorizedResult\n  ) {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = authResult;\n  }\n\n  protected unsetValueofCredentialsSignUpOnAuthorizedSuccess() {\n    this.valueofCredentialsSignUpOnAuthorizedSuccess = undefined;\n  }\n\n  /**\n   * set identity versions which are\n   * supported by the connection\n   * instance\n   *\n   * @protected\n   * @param {Array<TUserIdentityVersion>} [supportedVersions]\n   * @returns {(Error | void)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected setVersionsSupported(\n    supportedVersions?: Array<TUserIdentityVersion>\n  ): Error | void {\n    if (supportedVersions instanceof Array) {\n      const len = supportedVersions.length;\n      let idx = 0;\n      let version;\n\n      for (; idx++; len < idx) {\n        version = supportedVersions[idx];\n        if (validateUserIdentityVersion(version)) {\n          this.supportedVersions.push(version);\n        }\n        return new Error('The version is not supproted');\n      }\n    }\n    return new Error('The argument must be an Array');\n  }\n\n  protected setUserLogin(login: string) {\n    this.userLogin = login;\n  }\n\n  /**\n   * this method generates credentials compilant to the version\n   * version 2 of the user identity. The firebase app user uid\n   * is used as the user id.\n   *\n   * @protected\n   * @returns {(Promise<\n   *     Error | TCentralAuthorityUserCryptoCredentials\n   *   >)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected generateNewCryptoCredentialsForConfigurationProvidedV2 = async (): Promise<\n    Error | TCentralAuthorityUserCryptoCredentials\n  > => {\n    const { databaseURL, currentUser } = this;\n\n    if (!currentUser) {\n      return new Error('The user is not defined');\n    }\n    if (databaseURL instanceof Error) {\n      return databaseURL;\n    }\n\n    const cryptoCredentials = await generateCryptoCredentialsWithUserIdentityV2(\n      {\n        [CA_USER_IDENTITY_AUTH_PROVIDER_IDENTIFIER_PROP_NAME]: databaseURL,\n        [CA_USER_IDENTITY_USER_UNIQUE_IDENTFIER_PROP_NAME]: currentUser.uid,\n      }\n    );\n\n    if (cryptoCredentials instanceof Error) {\n      console.error(cryptoCredentials);\n      return new Error('Failed to generate a new crypto credentials');\n    }\n    return cryptoCredentials;\n  };\n\n  /**\n   * substitute the method to support v2 identity\n   *\n   * @protected\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @returns {(Promise<Error | TCentralAuthorityUserCryptoCredentials>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async generateAndSetCredentialsForTheCurrentUser(\n    signUpCredentials: ICAConnectionSignUpCredentials\n  ): Promise<Error | TCentralAuthorityUserCryptoCredentials> {\n    const credentialsProvidedCheckResult = this.checkSignUpCredentials(\n      signUpCredentials\n    );\n\n    if (credentialsProvidedCheckResult instanceof Error) {\n      console.error(credentialsProvidedCheckResult);\n      return credentialsProvidedCheckResult;\n    }\n\n    const { cryptoCredentials } = signUpCredentials;\n    const V1 = CA_USER_IDENTITY_VERSIONS['01'];\n    let credentialsForV1 = false;\n\n    if (this.isVersionSupported(V1)) {\n      credentialsForV1 =\n        CA_USER_IDENTITY_VERSION_CURRENT === CA_USER_IDENTITY_VERSIONS['01'];\n\n      if (cryptoCredentials) {\n        // check a version of the credentials\n        // to decide what to do next\n        const cryptoCredentialsVersion = getVersionOfCryptoCredentials(\n          cryptoCredentials\n        );\n\n        if (cryptoCredentialsVersion instanceof Error) {\n          console.error(cryptoCredentialsVersion);\n          return new Error(\n            'Failed to define a version of the crypto credentials'\n          );\n        }\n        if (cryptoCredentialsVersion === CA_USER_IDENTITY_VERSIONS['01']) {\n          // if the credentials version is 01 we may use the\n          // current implementation cause it is fully\n          // compilant to that version\n          credentialsForV1 = true;\n        } else {\n          credentialsForV1 = false;\n        }\n      }\n      // if a credentials for the V1 must be generated and set\n      if (credentialsForV1 === true) {\n        return this.createOrSetCredentialsInDB(cryptoCredentials);\n      }\n    }\n    // if the version is not 01, then provide another implementations\n    // of the methods to generate and set the crypto credentials\n    return this.createOrSetCredentialsInDB(\n      cryptoCredentials,\n      this.generateNewCryptoCredentialsForConfigurationProvidedV2\n    );\n  }\n\n  /**\n   * disconnect from the Firebase app\n   *\n   * @protected\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionWithFirebaseImplementation\n   */\n  protected async disconnectFromTheApp(): Promise<Error | void> {\n    this.unsetIsAnonymousely();\n    this.unsetValueofCredentialsSignUpOnAuthorizedSuccess();\n\n    const disconnectFromStorageResult = await this.disconnectCredentialsStorage();\n\n    if (disconnectFromStorageResult instanceof Error) {\n      return disconnectFromStorageResult;\n    }\n\n    const { app } = this;\n\n    if (app) {\n      try {\n        // delete the application to allow connect to the Firebase with the same settings\n        await app.delete();\n      } catch (err) {\n        console.error(err);\n        return new Error('Failed to disconnect from the Firebase app');\n      }\n    } else {\n      return new Error('There is no active Firebase App instance to close');\n    }\n  }\n}\n\nexport default CAConnectionWithFirebaseImplementation;\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connection-firebase/central-authority-connection-firebase-utils/central-authority-connection-firebase-utils.validators/central-authority-connection-firebase-utils.validators.ts",["1785"],"import { validateBySchema } from 'utils/validation-utils/validation-utils';\nimport { ICAConnectionConfigurationFirebase } from '../../central-authority-connection-firebase.types.configuration';\nimport { CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS } from './central-authority-connection-firebase-utils.validators.const';\nimport { isURL } from 'validator';\n\nexport const valiateCAAuthConnectionFirebaseUtilsConnetionConfiguration = (\n  configuration: any\n): configuration is ICAConnectionConfigurationFirebase => {\n  if (\n    !validateBySchema(\n      CA_AUTH_CONNECTION_FIREBASE_UTILS_VALIDATOR_SCHEME_CONNECTION_OPTIONS,\n      configuration\n    )\n  ) {\n    return false;\n  }\n  return isURL(configuration.databaseURL);\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.ts",["1786","1787"],"import { normalizeUrl } from 'utils/common-utils/common-utils-url';\nimport {\n  ICAConnectionsPoolOptions,\n  ICAConnectionsPoolConnections,\n  IAuthProviderConnectionConfiguration,\n  ICAConnectionsPoolCurrentConnections,\n  ICAConnectionPool,\n} from './central-authority-connections-pool.types';\nimport {\n  normalizeCAConnectionAuthProviderURL,\n  validateCAConnectionAuthProviderType,\n  validateCAConnectionAuthProviderConnectionConfiguration,\n  validateCAConnectionAuthProviderUrl,\n} from '../central-authority-connections-utils/central-authority-connections-utils';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { getConnectionConstructorAuthProviderType } from '../central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport { CA_CONNECTION_STATUS } from '../central-authority-connections-const/central-authority-connections-const';\n\n/**\n * This is used to establish connections\n * with auth providers to collect a\n * crypto keys of swarm users.\n *\n * @export\n * @class CAConnectionsPool\n */\nexport class CAConnectionsPool implements ICAConnectionPool {\n  /**\n   * States of connections to auth\n   * providers\n   *\n   * @protected\n   * @type {ICAConnectionsPoolConnections}\n   * @memberof CAConnectionsPool\n   */\n  protected providersConnectionState: ICAConnectionsPoolConnections = {};\n\n  /**\n   * connection throught which the user\n   * is authorized on auth provider service.\n   * Search trought all the connections\n   * connection with the auth flag.\n   *\n   * @readonly\n   * @protected\n   * @type {(ICAConnection | void)}\n   * @memberof CAConnectionsPool\n   */\n  protected get authConnection(): {\n    connection: ICAConnection;\n    authProviderUrl: string;\n  } | void {\n    const { providersConnectionState } = this;\n    const providersConnectionsStates = Object.values(providersConnectionState);\n    let idx = 0;\n    let authProviderConnection;\n    let authProviderUrl;\n    const len = providersConnectionsStates.length;\n\n    while (idx < len) {\n      ({\n        connection: authProviderConnection,\n        caProviderUrl: authProviderUrl,\n      } = providersConnectionsStates[idx++]);\n      if (\n        authProviderConnection &&\n        authProviderConnection.status === CA_CONNECTION_STATUS.AUTHORIZED\n      ) {\n        return {\n          connection: authProviderConnection,\n          authProviderUrl:\n            authProviderUrl ||\n            (authProviderConnection.authProviderURL as string),\n        };\n      }\n    }\n  }\n\n  /**\n   * Creates an instance of CAConnectionsPool.\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  constructor(options: ICAConnectionsPoolOptions) {\n    this.setOptions(options);\n  }\n\n  /**\n   * at now it is alias for the connect method\n   *\n   * @param {TCAAuthProviderIdentity} authProvider\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  public getConnection(authProvider: TCAAuthProviderIdentity) {\n    return this.connect(authProvider);\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider or returns an existing connection\n   * if it is active(status !== DISCONNECTED)\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<ICAConnection | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async connect(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<ICAConnection | Error> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n\n    const currentConnectionWithAuthProvider = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      console.error(currentConnectionWithAuthProvider);\n      return new Error(\n        `Failed to resolve an active connection with the provider ${authProviderUrl}`\n      );\n    }\n    if (currentConnectionWithAuthProvider) {\n      return currentConnectionWithAuthProvider;\n    }\n\n    const connectionWithAuthProvider = await this.connectWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (connectionWithAuthProvider instanceof Error) {\n      return connectionWithAuthProvider;\n    }\n\n    const setConnectionInAuhProviderConnectionStatesStore = this.setConnectionWithAuthProvider(\n      authProviderUrl,\n      connectionWithAuthProvider\n    );\n\n    if (setConnectionInAuhProviderConnectionStatesStore instanceof Error) {\n      console.error(setConnectionInAuhProviderConnectionStatesStore);\n\n      const disconnectResult = await connectionWithAuthProvider.disconnect();\n\n      if (disconnectResult instanceof Error) {\n        console.error(disconnectResult);\n      }\n      return new Error('Failed to set connection with auth provider');\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * authorize on the service or return an existing\n   * connection which is the user authorized through\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnectionSignUpCredentials} signUpCredentials\n   * @param {Partial<ICentralAuthorityUserProfile>} [profile]\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  public async authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection> {\n    if (!validateCAConnectionAuthProviderUrl(authProviderUrl)) {\n      return new Error(\n        'The url provided as the auth provider service url is not valid'\n      );\n    }\n\n    const currentConnectionWithProviderAuthOn = this.authConnection;\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('Failed to normalize the url of the auth provider');\n    }\n    if (currentConnectionWithProviderAuthOn) {\n      const {\n        authProviderUrl: currentAuthProviderUrl,\n        connection,\n      } = currentConnectionWithProviderAuthOn;\n      const normalizedUrlAuthProviderCurrent = normalizeUrl(\n        currentAuthProviderUrl\n      );\n\n      if (normalizedUrlAuthProviderCurrent !== normalizedUrl) {\n        return new Error(\n          `Already authorized on the ${normalizedUrlAuthProviderCurrent} service, differ from the requested ${authProviderUrl}`\n        );\n      }\n      return connection;\n    }\n\n    const connectionWithAuthProvider = await this.connect(authProviderUrl);\n\n    if (connectionWithAuthProvider instanceof Error) {\n      console.error(connectionWithAuthProvider);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n\n    const authResult = await connectionWithAuthProvider.authorize(\n      signUpCredentials,\n      profile\n    );\n\n    if (authResult instanceof Error) {\n      console.error(authResult);\n      return new Error(\n        `Failed to authorize with the auth provider ${authProviderUrl}`\n      );\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * disconnect from the auth provider.\n   * succed even if not connected to.\n   *\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<void | Error>)}\n   * @memberof CAConnectionsPool\n   */\n  public async disconnect(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<void | Error> {\n    debugger;\n    const currentConnectionWithAuthProvider = this.getConnectionWithAuthProvider(\n      authProviderUrl\n    );\n    debugger;\n    if (currentConnectionWithAuthProvider instanceof Error) {\n      return currentConnectionWithAuthProvider;\n    }\n    if (currentConnectionWithAuthProvider) {\n      const disconnectionResult = await currentConnectionWithAuthProvider.disconnect();\n\n      if (disconnectionResult instanceof Error) {\n        console.error(disconnectionResult);\n        return new Error(\n          `Failed to disconnect from the auth provider ${authProviderUrl}`\n        );\n      }\n    }\n    return this.unsetConnectionWithAuthProvider(authProviderUrl);\n  }\n\n  /**\n   * disconnect from all the active connections\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async close(): Promise<Error | void> {\n    const { providersConnectionState } = this;\n    const providerConnectionStateValues = Object.values(\n      providersConnectionState\n    );\n    const disconnectResults = [];\n    const len = providerConnectionStateValues.length;\n    let idx = 0;\n    let connectionToAuthProviderStateDesc;\n    let connectionToAuthProvider;\n    let errorMessage = '';\n\n    while (idx < len) {\n      connectionToAuthProviderStateDesc = providerConnectionStateValues[idx++];\n      ({\n        connection: connectionToAuthProvider,\n      } = connectionToAuthProviderStateDesc);\n      idx += 1;\n      if (connectionToAuthProvider) {\n        const connectionToAuthProviderUrl =\n          connectionToAuthProviderStateDesc.caProviderUrl;\n\n        if (\n          connectionToAuthProvider.status !== CA_CONNECTION_STATUS.DISCONNECTED\n        ) {\n          disconnectResults.push(\n            connectionToAuthProvider\n              .disconnect()\n              .then((result) => {\n                if (result instanceof Error) {\n                  console.error(result);\n                  errorMessage += `/nThe error has occured when disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n                } else {\n                  this.unsetConnectionWithAuthProvider(\n                    connectionToAuthProviderUrl\n                  );\n                }\n              })\n              .catch((err) => {\n                console.error(err);\n                errorMessage += `/nCrashed while disconnect from the auth provider ${connectionToAuthProviderUrl}`;\n              })\n          );\n        }\n        this.unsetConnectionWithAuthProvider(connectionToAuthProviderUrl);\n      }\n    }\n    // wait till all connections will be pro\n    await Promise.all(disconnectResults);\n    if (errorMessage) {\n      return new Error(errorMessage);\n    }\n  }\n\n  /**\n   * sign out from the auth provider service\n   * which is currently authorized on and close the connection\n   *\n   * @returns {(Promise<Error | void>)}\n   * @memberof CAConnectionsPool\n   */\n  public async signOut(): Promise<Error | void> {\n    const { authConnection } = this;\n\n    if (authConnection) {\n      const { connection, authProviderUrl } = authConnection;\n\n      if (connection) {\n        return this.disconnect(authProviderUrl);\n      }\n    }\n  }\n\n  /**\n   * returns the current state of a connection\n   * to the auth provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnectionsPoolCurrentConnections | undefined | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getAuthProviderStateDesc(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnectionsPoolCurrentConnections | undefined | Error {\n    const normalizedUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedUrl instanceof Error) {\n      console.error(normalizedUrl);\n      return new Error('The url is not valid');\n    }\n\n    const { providersConnectionState } = this;\n\n    return providersConnectionState[normalizedUrl];\n  }\n\n  /**\n   * returns connection which is active\n   * and the status !== DISCONNECTED\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getActiveConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      const { connection } = authProviderState;\n\n      if (\n        connection &&\n        connection.status !== CA_CONNECTION_STATUS.DISCONNECTED\n      ) {\n        return connection;\n      }\n    }\n  }\n\n  /**\n   * returns any connection\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(ICAConnection | void | Error)}\n   * @memberof CAConnectionsPool\n   */\n  protected getConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): ICAConnection | void | Error {\n    const authProviderState = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (authProviderState instanceof Error) {\n      return authProviderState;\n    }\n    if (authProviderState) {\n      return authProviderState.connection;\n    }\n  }\n\n  /**\n   * updates the current state of connection\n   * with the auth provider.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolCurrentConnections} authProviderConnectionState\n   * @memberof CAConnectionsPool\n   */\n  protected updateStateAuthProvider(\n    authProviderConnectionState: Partial<\n      ICAConnectionsPoolCurrentConnections\n    > & { caProviderUrl: ICAConnectionsPoolCurrentConnections['caProviderUrl'] }\n  ) {\n    const { caProviderUrl } = authProviderConnectionState;\n\n    if (!caProviderUrl) {\n      return new Error('An url of the auth provider must be specified');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n\n    if (authProviderUrlNormalized instanceof Error) {\n      return authProviderUrlNormalized;\n    }\n\n    const { providersConnectionState } = this;\n    const existingState = providersConnectionState[authProviderUrlNormalized];\n\n    if (!existingState) {\n      providersConnectionState[\n        caProviderUrl\n      ] = authProviderConnectionState as ICAConnectionsPoolCurrentConnections;\n    } else {\n      Object.assign(existingState, authProviderConnectionState);\n    }\n  }\n\n  /**\n   * set an active connection with an\n   * auth provider in the auth\n   * providers state.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @param {ICAConnection} connection\n   * @returns\n   * @memberof CAConnectionsPool\n   */\n  protected setConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity,\n    connection: ICAConnection\n  ) {\n    const authProviderUrlNormalized = normalizeUrl(authProviderUrl);\n\n    if (authProviderUrlNormalized instanceof Error) {\n      console.error(authProviderUrlNormalized);\n      return new Error('The url is not valid');\n    }\n\n    if (!connection) {\n      return new Error(\n        `Connection with the auth provider ${authProviderUrl} must be specified`\n      );\n    }\n    if (\n      typeof connection.authorize !== 'function' ||\n      typeof connection.connect !== 'function'\n    ) {\n      return new Error('The instance of the CAConnection is not valid');\n    }\n    if (connection.status === CA_CONNECTION_STATUS.DISCONNECTED) {\n      return new Error('The connection must be in active state');\n    }\n\n    const existingConnection = this.getActiveConnectionWithAuthProvider(\n      authProviderUrl\n    );\n\n    if (existingConnection instanceof Error) {\n      return existingConnection;\n    }\n    if (existingConnection) {\n      return new Error(\n        `Connection with the ${authProviderUrl} is already exists`\n      );\n    }\n    return this.updateStateAuthProvider({\n      connection,\n      caProviderUrl: authProviderUrl,\n    });\n  }\n\n  /**\n   * unset the current connection in the auth provider\n   * connections states store\n   *\n   * @protected\n   * @memberof CAConnectionsPool\n   */\n  protected unsetConnectionWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Error | void {\n    return this.updateStateAuthProvider({\n      caProviderUrl: authProviderUrl,\n      connection: undefined,\n    });\n  }\n\n  /**\n   * establish a new connection with the auth\n   * provider.\n   *\n   * @protected\n   * @param {TCAAuthProviderIdentity} authProviderUrl\n   * @returns {(Promise<Error | ICAConnection>)}\n   * @memberof CAConnectionsPool\n   */\n  protected async connectWithAuthProvider(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection> {\n    const normalizedAuthProviderUrl = normalizeUrl(authProviderUrl);\n\n    if (normalizedAuthProviderUrl instanceof Error) {\n      console.error(normalizedAuthProviderUrl);\n      return new Error('The url provided for the auth provider is not valid');\n    }\n\n    const stateOfAuthProvider = this.getAuthProviderStateDesc(authProviderUrl);\n\n    if (stateOfAuthProvider instanceof Error) {\n      console.error(stateOfAuthProvider);\n      return new Error(\n        `The configuration for the ${authProviderUrl} is not valid`\n      );\n    }\n    if (!stateOfAuthProvider) {\n      return new Error(`The url provided ${authProviderUrl} is not known`);\n    }\n\n    const { options, caProvider } = stateOfAuthProvider;\n\n    if (!options) {\n      return new Error(\n        `Connection options is not specified for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (caProvider == null) {\n      return new Error(\n        'Auth provider type is not specified in the current state'\n      );\n    }\n\n    const ConnectionConstructor = getConnectionConstructorAuthProviderType(\n      caProvider\n    );\n\n    if (!ConnectionConstructor) {\n      return new Error(\n        `There is no constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n    if (ConnectionConstructor instanceof Error) {\n      console.error(ConnectionConstructor);\n      return new Error(\n        `An error has occurred on define constructor class for the auth provider ${authProviderUrl}`\n      );\n    }\n\n    let connectionWithAuthProvider;\n    try {\n      connectionWithAuthProvider = new ConnectionConstructor();\n    } catch (err) {\n      console.error(err);\n      return new Error('The error has occurred when construct the connection');\n    }\n\n    const connectionResult = await connectionWithAuthProvider.connect(options);\n\n    if (connectionResult instanceof Error) {\n      console.error(connectionResult);\n      return new Error(\n        `Failed to connect with the auth provider ${authProviderUrl}`\n      );\n    }\n    return connectionWithAuthProvider;\n  }\n\n  /**\n   * add auth provider in the description\n   * of a state of connections\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration} authProviderConnectionConfiguration\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected addAuthProvider = (\n    authProviderConnectionConfiguration: IAuthProviderConnectionConfiguration\n  ): void => {\n    if (!authProviderConnectionConfiguration) {\n      throw new Error('Configuration for the auth provider is not defined');\n    }\n    if (typeof authProviderConnectionConfiguration !== 'object') {\n      throw new Error('Configuration must be an object');\n    }\n\n    const {\n      caProvider,\n      caProviderUrl,\n      options,\n    } = authProviderConnectionConfiguration;\n\n    if (caProvider == null) {\n      throw new Error('Provider type must be defined');\n    }\n    if (!validateCAConnectionAuthProviderType(caProvider)) {\n      throw new Error('The auth provider type is wrong');\n    }\n\n    const authProviderUrlNormalized = normalizeCAConnectionAuthProviderURL(\n      caProviderUrl\n    );\n    const { providersConnectionState } = this;\n\n    if (authProviderUrlNormalized instanceof Error) {\n      throw authProviderUrlNormalized;\n    }\n    if (providersConnectionState[authProviderUrlNormalized]) {\n      throw new Error(\n        `Configuration was already set for the auth provider ${authProviderUrlNormalized}`\n      );\n    }\n    if (!options) {\n      throw new Error(\n        `Configuration for the auth provider ${authProviderUrlNormalized} is not specified`\n      );\n    }\n    if (\n      !validateCAConnectionAuthProviderConnectionConfiguration(\n        caProvider,\n        options\n      )\n    ) {\n      throw new Error(\n        `The configuration for the auth provider ${authProviderUrlNormalized} is not valid`\n      );\n    }\n\n    const setAuthProviderConnectionStateResult = this.updateStateAuthProvider({\n      caProvider,\n      caProviderUrl,\n      options,\n    });\n\n    if (setAuthProviderConnectionStateResult instanceof Error) {\n      throw setAuthProviderConnectionStateResult;\n    }\n  };\n\n  /**\n   * set options for auth providers connections constructors\n   *\n   * @protected\n   * @param {IAuthProviderConnectionConfiguration[]} providers\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptionsOfAuthProviders(\n    providers: IAuthProviderConnectionConfiguration[]\n  ): void {\n    if (!providers) {\n      throw new Error('Providers property must be specified');\n    }\n    if (!(providers instanceof Array)) {\n      throw new Error('Providers must be an instance of Array');\n    }\n    if (!providers.length) {\n      throw new Error('Providers property must not be an empty array');\n    }\n    // add each auth provider configuration\n    // to connect on in a feature\n    providers.forEach(this.addAuthProvider);\n  }\n\n  /**\n   * set options for the instance.\n   *\n   * @protected\n   * @param {ICAConnectionsPoolOptions} options\n   * @memberof CAConnectionsPool\n   * @throws\n   */\n  protected setOptions(options: ICAConnectionsPoolOptions): void {\n    const { providers } = options;\n\n    this.setOptionsOfAuthProviders(providers);\n  }\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-pool/central-authority-connections-pool.types.ts",["1788"],"import { ICAConnectionConfigurationFirebase } from '../central-authority-connection-firebase/central-authority-connection-firebase.types.configuration';\nimport {\n  ICAConnection,\n  TCAAuthProviderIdentity,\n  TCAConnectionsAuthProviderConnectionOptions,\n  ICAConnectionSignUpCredentials,\n} from '../central-authority-connections.types';\nimport { CA_CONNECTION_AUTH_PROVIDERS } from '../central-authority-connections.const';\nimport { ICentralAuthorityUserProfile } from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\n\n/**\n * options to connect with\n * auth provider extended by the provider type\n */\nexport type TAuthProviderConnectionOptions = TCAConnectionsAuthProviderConnectionOptions;\n\n/**\n * configuration to establish connectoin\n * with an auth provider\n */\nexport interface IAuthProviderConnectionConfiguration {\n  options: TAuthProviderConnectionOptions;\n  caProviderUrl: TCAAuthProviderIdentity;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n}\n\n/**\n * options for all known auth\n * providers, to establish connection\n * with any provider is necessary to\n * read swarm user's crypro credentials\n *\n * @export\n * @interface ICAConnectionsPoolOptions\n */\nexport interface ICAConnectionsPoolOptions {\n  providers: IAuthProviderConnectionConfiguration[];\n}\n\n/**\n * description of a connection which is currently\n * established or not.\n * If connection is defined than it means active.\n *\n * @export\n * @interface ICAConnectionsPoolCurrentConnections\n */\nexport interface ICAConnectionsPoolCurrentConnections {\n  options: TAuthProviderConnectionOptions;\n  caProvider: CA_CONNECTION_AUTH_PROVIDERS;\n  caProviderUrl: TCAAuthProviderIdentity;\n  connection?: ICAConnection;\n}\n\n/**\n * States of a connections are in here.\n * If connection is established then\n * it's not necessary to establish a new\n * one.\n *\n * @export\n * @interface ICAConnectionsPoolConnections\n */\nexport interface ICAConnectionsPoolConnections {\n  [key: string]: ICAConnectionsPoolCurrentConnections;\n}\n\nexport interface ICAConnectionPool {\n  // establish a new connection with the auth provider or returns an existing\n  getConnection(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection>;\n  // establish a new connection with the auth provider or returns an existing\n  connect(\n    authProviderUrl: TCAAuthProviderIdentity\n  ): Promise<Error | ICAConnection>;\n  // authorize on the auth provider service or return an existing connection authorized on\n  authorize(\n    authProviderUrl: TCAAuthProviderIdentity,\n    signUpCredentials: ICAConnectionSignUpCredentials,\n    profile?: Partial<ICentralAuthorityUserProfile>\n  ): Promise<Error | ICAConnection>;\n  // disconnect from the auth provider service\n  disconnect(authProviderUrl: TCAAuthProviderIdentity): Promise<Error | void>;\n  // disconnect from all the connected providers\n  close(): Promise<Error | void>;\n  // sign out from the service currently authorized throught\n  signOut(): Promise<Error | void>;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.normalizers.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.validators/central-authority-connections-utils.validators.ts",["1789","1790"],"import {\n  CA_CONNECTION_AUTH_PROVIDERS,\n  CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS,\n} from '../../central-authority-connections.const';\nimport { CA_CONNECTIONS_AUTH_PROVIDERS_VALUES } from './central-authority-connections-utils.validators.const';\nimport { isURL } from 'validator';\nimport { TCAAuthProviderIdentity } from '../../central-authority-connections.types';\n\nexport const validateCAConnectionAuthProviderType = (\n  caAuthProvider: any\n): caAuthProvider is CA_CONNECTION_AUTH_PROVIDERS =>\n  CA_CONNECTIONS_AUTH_PROVIDERS_VALUES.includes(caAuthProvider);\n\nexport const validateCAConnectionAuthProviderUrl = (\n  caAuthProviderUrl: string\n): caAuthProviderUrl is TCAAuthProviderIdentity => {\n  try {\n    return isURL(caAuthProviderUrl);\n  } catch {\n    return false;\n  }\n};\n\nexport const validateCAConnectionAuthProviderConnectionConfiguration = (\n  authProviderType: CA_CONNECTION_AUTH_PROVIDERS,\n  connectionConf: any\n): boolean => {\n  if (validateCAConnectionAuthProviderType(authProviderType)) {\n    const AuthProviderConnectionConstructor =\n      CA_CONNECTIONS_POOL_AUTH_PROVIDERS_CONNECTION_CONSTRUCTORS[\n        authProviderType\n      ];\n\n    return AuthProviderConnectionConstructor.validateConfiguration(\n      connectionConf\n    );\n  }\n  return false;\n};\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/common-utils/common-utils-url.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-utils/central-authority-connections-utils.common/central-authority-connections-utils.common.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-connections/central-authority-connections-const/central-authority-connections-const-status.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.types.ts",["1791","1792","1793"],"import {\n  TCentralAuthorityCredentialsStorageAuthCredentials,\n  TCentralAuthorityUserCryptoCredentials,\n  TCACryptoKeyPairs,\n} from 'classes/central-authority-class/central-authority-class-types/central-authority-class-types';\nimport {\n  TCAuthProviderIdentifier,\n  TCAuthProviderUserIdentifier,\n} from 'classes/central-authority-class/central-authority-class-user-identity/central-authority-class-user-identity.types';\n\nexport interface ICAStorageCredentialsAuthCredentials {\n  login: string;\n  password: string;\n}\n\n/**\n *\n *\n * @export\n * @interface ICAStorageCredentialsUserCryptoInfo\n * @param {string} login - login of the user on the auth provider\n * @param {string} userIdentity - the user identifier\n * @param {TCACryptoKeyPairs} - the crypto credentials of the user\n * including private and public keys.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ICAStorageCredentialsUserCryptoInfo\n  extends TCentralAuthorityUserCryptoCredentials {}\n\n/**\n * the class used to read the public and provate keys\n * or if there is no connection to the auth provider\n *\n * @export\n * @interface ICAStorageCredentials\n */\nexport interface ICAStorageCredentials {\n  /**\n   * the auth provider, on which the user is authorized\n   *\n   * @type {TCAuthProviderIdentifier}\n   * @memberof ICAStorageCredentials\n   */\n  authProvider: TCAuthProviderIdentifier;\n  /**\n   * connect to the storage with the password and user identity\n   *\n   * @param {TCentralAuthorityCredentialsStorageAuthCredentials} [credentials]\n   * @returns {(Promise<boolean | Error>)}\n   * @memberof ICentralAuthorityStorageCredentials\n   */\n  connect(\n    credentials?: ICAStorageCredentialsAuthCredentials\n  ): Promise<void | Error>;\n  /**\n   * disconnect from the storage and clear\n   * all cached data from the memory\n   *\n   * @returns {(Promise<void | Error>)}\n   * @memberof ICAStorageCredentials\n   */\n  disconnect(): Promise<void | Error>;\n  /**\n   * read user credentials from the storage\n   *\n   * @returns {(Promise<\n   *     TCentralAuthorityUserCryptoCredentials | Error | null\n   *   >)}\n   * @memberof ICAStorageCredentials\n   */\n  getUserCryptoInfo(): Promise<\n    ICAStorageCredentialsUserCryptoInfo | Error | null\n  >;\n  /**\n   * set credentials for the user, only if\n   * there is no credentials exists in the\n   * storage.\n   *\n   * @param {TCACryptoKeyPairs} cryptoKeyPairs\n   * @returns {(Promise<Error | boolean>)}\n   * @memberof ICAStorageCredentials\n   */\n  setUserCryptoInfo(\n    userCryptoInfo: ICAStorageCredentialsUserCryptoInfo\n  ): Promise<Error | boolean>;\n}\n","/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials.utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.const.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.ts",[],"/home/paul/projects/decentrilized-protocol/src/utils/encryption-utils/salt-utils.types.ts",[],"/home/paul/projects/decentrilized-protocol/src/classes/central-authority-class/central-authority-storage-local/central-authority-storage-current-user-auth/central-authority-storage-credentials/central-authority-storage-credentials copy.ts",[],{"ruleId":"1794","severity":1,"message":"1795","line":2,"column":8,"nodeType":"1796","endLine":2,"endColumn":12},{"ruleId":"1794","severity":1,"message":"1797","line":5,"column":10,"nodeType":"1796","endLine":5,"endColumn":43},{"ruleId":"1794","severity":1,"message":"1798","line":6,"column":10,"nodeType":"1796","endLine":6,"endColumn":43},{"ruleId":"1794","severity":1,"message":"1799","line":8,"column":3,"nodeType":"1796","endLine":8,"endColumn":52},{"ruleId":"1794","severity":1,"message":"1800","line":9,"column":3,"nodeType":"1796","endLine":9,"endColumn":22},{"ruleId":"1794","severity":1,"message":"1801","line":12,"column":3,"nodeType":"1796","endLine":12,"endColumn":30},{"ruleId":"1794","severity":1,"message":"1802","line":13,"column":3,"nodeType":"1796","endLine":13,"endColumn":77},{"ruleId":"1794","severity":1,"message":"1803","line":15,"column":10,"nodeType":"1796","endLine":15,"endColumn":30},{"ruleId":"1794","severity":1,"message":"1804","line":16,"column":10,"nodeType":"1796","endLine":16,"endColumn":32},{"ruleId":"1794","severity":1,"message":"1805","line":17,"column":10,"nodeType":"1796","endLine":17,"endColumn":36},{"ruleId":"1794","severity":1,"message":"1806","line":19,"column":10,"nodeType":"1796","endLine":19,"endColumn":44},{"ruleId":"1794","severity":1,"message":"1807","line":20,"column":10,"nodeType":"1796","endLine":20,"endColumn":48},{"ruleId":"1794","severity":1,"message":"1808","line":21,"column":10,"nodeType":"1796","endLine":21,"endColumn":28},{"ruleId":"1794","severity":1,"message":"1809","line":22,"column":10,"nodeType":"1796","endLine":22,"endColumn":31},{"ruleId":"1794","severity":1,"message":"1810","line":23,"column":10,"nodeType":"1796","endLine":23,"endColumn":33},{"ruleId":"1794","severity":1,"message":"1811","line":24,"column":10,"nodeType":"1796","endLine":24,"endColumn":40},{"ruleId":"1794","severity":1,"message":"1812","line":25,"column":10,"nodeType":"1796","endLine":25,"endColumn":29},{"ruleId":"1794","severity":1,"message":"1813","line":26,"column":10,"nodeType":"1796","endLine":26,"endColumn":45},{"ruleId":"1794","severity":1,"message":"1814","line":27,"column":10,"nodeType":"1796","endLine":27,"endColumn":45},{"ruleId":"1794","severity":1,"message":"1815","line":28,"column":10,"nodeType":"1796","endLine":28,"endColumn":31},{"ruleId":"1794","severity":1,"message":"1816","line":29,"column":10,"nodeType":"1796","endLine":29,"endColumn":38},{"ruleId":"1794","severity":1,"message":"1817","line":2,"column":10,"nodeType":"1796","endLine":2,"endColumn":13},{"ruleId":"1818","severity":1,"message":"1819","line":9,"column":56,"nodeType":"1820","messageId":"1821","endLine":9,"endColumn":59},{"ruleId":"1818","severity":1,"message":"1819","line":15,"column":55,"nodeType":"1820","messageId":"1821","endLine":15,"endColumn":58},{"ruleId":"1822","severity":1,"message":"1823","line":18,"column":3,"nodeType":"1824","messageId":"1825","endLine":18,"endColumn":57},{"ruleId":"1826","severity":1,"message":"1827","line":87,"column":15,"nodeType":"1828","messageId":"1829","endLine":87,"endColumn":27},{"ruleId":"1794","severity":1,"message":"1830","line":32,"column":9,"nodeType":"1796","endLine":32,"endColumn":15},{"ruleId":"1794","severity":1,"message":"1831","line":8,"column":10,"nodeType":"1796","endLine":8,"endColumn":20},{"ruleId":"1818","severity":1,"message":"1819","line":77,"column":27,"nodeType":"1820","messageId":"1821","endLine":77,"endColumn":30},{"ruleId":"1818","severity":1,"message":"1819","line":78,"column":39,"nodeType":"1820","messageId":"1821","endLine":78,"endColumn":42},{"ruleId":"1822","severity":1,"message":"1832","line":47,"column":3,"nodeType":"1833","messageId":"1825","endLine":47,"endColumn":52},{"ruleId":"1822","severity":1,"message":"1834","line":49,"column":3,"nodeType":"1833","messageId":"1825","endLine":49,"endColumn":26},{"ruleId":"1822","severity":1,"message":"1835","line":51,"column":3,"nodeType":"1833","messageId":"1825","endLine":51,"endColumn":29},{"ruleId":"1822","severity":1,"message":"1836","line":53,"column":3,"nodeType":"1833","messageId":"1825","endLine":53,"endColumn":32},{"ruleId":"1822","severity":1,"message":"1837","line":55,"column":3,"nodeType":"1833","messageId":"1825","endLine":55,"endColumn":59},{"ruleId":"1822","severity":1,"message":"1838","line":57,"column":3,"nodeType":"1833","messageId":"1825","endLine":57,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1839","line":59,"column":3,"nodeType":"1833","messageId":"1825","endLine":59,"endColumn":40},{"ruleId":"1822","severity":1,"message":"1840","line":61,"column":3,"nodeType":"1833","messageId":"1825","endLine":61,"endColumn":46},{"ruleId":"1822","severity":1,"message":"1823","line":69,"column":3,"nodeType":"1824","messageId":"1825","endLine":82,"endColumn":4},{"ruleId":"1826","severity":1,"message":"1827","line":98,"column":36,"nodeType":"1828","messageId":"1829","endLine":98,"endColumn":40},{"ruleId":"1818","severity":1,"message":"1819","line":130,"column":38,"nodeType":"1820","messageId":"1821","endLine":130,"endColumn":41},{"ruleId":"1794","severity":1,"message":"1841","line":38,"column":7,"nodeType":"1796","endLine":38,"endColumn":17},{"ruleId":"1822","severity":1,"message":"1842","line":24,"column":3,"nodeType":"1833","messageId":"1825","endLine":24,"endColumn":35},{"ruleId":"1822","severity":1,"message":"1843","line":25,"column":3,"nodeType":"1833","messageId":"1825","endLine":25,"endColumn":45},{"ruleId":"1822","severity":1,"message":"1844","line":26,"column":3,"nodeType":"1833","messageId":"1825","endLine":26,"endColumn":68},{"ruleId":"1822","severity":1,"message":"1845","line":27,"column":3,"nodeType":"1833","messageId":"1825","endLine":27,"endColumn":53},{"ruleId":"1822","severity":1,"message":"1846","line":28,"column":3,"nodeType":"1833","messageId":"1825","endLine":28,"endColumn":37},{"ruleId":"1822","severity":1,"message":"1823","line":30,"column":3,"nodeType":"1824","messageId":"1825","endLine":33,"endColumn":4},{"ruleId":"1822","severity":1,"message":"1847","line":25,"column":5,"nodeType":"1833","messageId":"1825","endLine":27,"endColumn":19},{"ruleId":"1822","severity":1,"message":"1848","line":29,"column":5,"nodeType":"1833","messageId":"1825","endLine":29,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1849","line":37,"column":5,"nodeType":"1833","messageId":"1825","endLine":39,"endColumn":10},{"ruleId":"1850","severity":1,"message":"1851","line":53,"column":3,"nodeType":"1824","endLine":53,"endColumn":19},{"ruleId":"1852","severity":1,"message":"1853","line":53,"column":17,"nodeType":"1854","messageId":"1855"},{"ruleId":"1794","severity":1,"message":"1856","line":2,"column":3,"nodeType":"1796","endLine":2,"endColumn":28},{"ruleId":"1794","severity":1,"message":"1857","line":3,"column":3,"nodeType":"1796","endLine":3,"endColumn":41},{"ruleId":"1794","severity":1,"message":"1858","line":1,"column":10,"nodeType":"1796","endLine":1,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":14,"column":6,"nodeType":"1820","messageId":"1821","endLine":14,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":2,"column":7,"nodeType":"1820","messageId":"1821","endLine":2,"endColumn":10},{"ruleId":"1818","severity":1,"message":"1819","line":12,"column":12,"nodeType":"1820","messageId":"1821","endLine":12,"endColumn":15},{"ruleId":"1818","severity":1,"message":"1819","line":46,"column":28,"nodeType":"1820","messageId":"1821","endLine":46,"endColumn":31},{"ruleId":"1818","severity":1,"message":"1819","line":66,"column":28,"nodeType":"1820","messageId":"1821","endLine":66,"endColumn":31},{"ruleId":"1794","severity":1,"message":"1859","line":18,"column":3,"nodeType":"1796","endLine":18,"endColumn":28},{"ruleId":"1794","severity":1,"message":"1831","line":21,"column":10,"nodeType":"1796","endLine":21,"endColumn":20},{"ruleId":"1818","severity":1,"message":"1819","line":44,"column":58,"nodeType":"1820","messageId":"1821","endLine":44,"endColumn":61},{"ruleId":"1794","severity":1,"message":"1860","line":20,"column":10,"nodeType":"1796","endLine":20,"endColumn":30},{"ruleId":"1826","severity":1,"message":"1827","line":84,"column":14,"nodeType":"1828","messageId":"1829","endLine":84,"endColumn":19},{"ruleId":"1826","severity":1,"message":"1827","line":84,"column":14,"nodeType":"1828","messageId":"1829","endLine":84,"endColumn":18},{"ruleId":"1822","severity":1,"message":"1861","line":130,"column":3,"nodeType":"1824","messageId":"1825","endLine":134,"endColumn":4},{"ruleId":"1818","severity":1,"message":"1819","line":159,"column":29,"nodeType":"1820","messageId":"1821","endLine":159,"endColumn":32},{"ruleId":"1818","severity":1,"message":"1819","line":189,"column":29,"nodeType":"1820","messageId":"1821","endLine":189,"endColumn":32},{"ruleId":"1818","severity":1,"message":"1819","line":226,"column":20,"nodeType":"1820","messageId":"1821","endLine":226,"endColumn":23},{"ruleId":"1794","severity":1,"message":"1860","line":4,"column":10,"nodeType":"1796","endLine":4,"endColumn":30},{"ruleId":"1818","severity":1,"message":"1819","line":37,"column":32,"nodeType":"1820","messageId":"1821","endLine":37,"endColumn":35},{"ruleId":"1826","severity":1,"message":"1827","line":103,"column":13,"nodeType":"1828","messageId":"1829","endLine":103,"endColumn":23},{"ruleId":"1826","severity":1,"message":"1827","line":103,"column":13,"nodeType":"1828","messageId":"1829","endLine":103,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1827","line":134,"column":13,"nodeType":"1828","messageId":"1829","endLine":134,"endColumn":23},{"ruleId":"1826","severity":1,"message":"1827","line":134,"column":13,"nodeType":"1828","messageId":"1829","endLine":134,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1827","line":152,"column":30,"nodeType":"1828","messageId":"1829","endLine":152,"endColumn":40},{"ruleId":"1826","severity":1,"message":"1827","line":152,"column":30,"nodeType":"1828","messageId":"1829","endLine":152,"endColumn":39},{"ruleId":"1794","severity":1,"message":"1862","line":1,"column":13,"nodeType":"1796","endLine":1,"endColumn":21},{"ruleId":"1818","severity":1,"message":"1819","line":19,"column":58,"nodeType":"1820","messageId":"1821","endLine":19,"endColumn":61},{"ruleId":"1818","severity":1,"message":"1819","line":34,"column":13,"nodeType":"1820","messageId":"1821","endLine":34,"endColumn":16},{"ruleId":"1818","severity":1,"message":"1819","line":64,"column":13,"nodeType":"1820","messageId":"1821","endLine":64,"endColumn":16},{"ruleId":"1818","severity":1,"message":"1819","line":87,"column":15,"nodeType":"1820","messageId":"1821","endLine":87,"endColumn":18},{"ruleId":"1794","severity":1,"message":"1863","line":11,"column":3,"nodeType":"1796","endLine":11,"endColumn":23},{"ruleId":"1794","severity":1,"message":"1864","line":14,"column":3,"nodeType":"1796","endLine":14,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":131,"column":30,"nodeType":"1820","messageId":"1821","endLine":131,"endColumn":33},{"ruleId":"1818","severity":1,"message":"1819","line":164,"column":28,"nodeType":"1820","messageId":"1821","endLine":164,"endColumn":31},{"ruleId":"1818","severity":1,"message":"1819","line":19,"column":45,"nodeType":"1820","messageId":"1821","endLine":19,"endColumn":48},{"ruleId":"1818","severity":1,"message":"1819","line":23,"column":6,"nodeType":"1820","messageId":"1821","endLine":23,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":28,"column":6,"nodeType":"1820","messageId":"1821","endLine":28,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":56,"column":6,"nodeType":"1820","messageId":"1821","endLine":56,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":60,"column":6,"nodeType":"1820","messageId":"1821","endLine":60,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":68,"column":34,"nodeType":"1820","messageId":"1821","endLine":68,"endColumn":37},{"ruleId":"1818","severity":1,"message":"1819","line":72,"column":58,"nodeType":"1820","messageId":"1821","endLine":72,"endColumn":61},{"ruleId":"1818","severity":1,"message":"1819","line":18,"column":62,"nodeType":"1820","messageId":"1821","endLine":18,"endColumn":65},{"ruleId":"1818","severity":1,"message":"1819","line":29,"column":22,"nodeType":"1820","messageId":"1821","endLine":29,"endColumn":25},{"ruleId":"1818","severity":1,"message":"1819","line":75,"column":22,"nodeType":"1820","messageId":"1821","endLine":75,"endColumn":25},{"ruleId":"1818","severity":1,"message":"1819","line":114,"column":38,"nodeType":"1820","messageId":"1821","endLine":114,"endColumn":41},{"ruleId":"1818","severity":1,"message":"1819","line":6,"column":16,"nodeType":"1820","messageId":"1821","endLine":6,"endColumn":19},{"ruleId":"1822","severity":1,"message":"1865","line":52,"column":3,"nodeType":"1833","messageId":"1825","endLine":52,"endColumn":38},{"ruleId":"1822","severity":1,"message":"1866","line":54,"column":3,"nodeType":"1833","messageId":"1825","endLine":54,"endColumn":47},{"ruleId":"1822","severity":1,"message":"1867","line":56,"column":3,"nodeType":"1833","messageId":"1825","endLine":56,"endColumn":43},{"ruleId":"1822","severity":1,"message":"1868","line":58,"column":3,"nodeType":"1833","messageId":"1825","endLine":58,"endColumn":37},{"ruleId":"1822","severity":1,"message":"1869","line":60,"column":3,"nodeType":"1833","messageId":"1825","endLine":60,"endColumn":59},{"ruleId":"1822","severity":1,"message":"1870","line":62,"column":3,"nodeType":"1833","messageId":"1825","endLine":62,"endColumn":74},{"ruleId":"1822","severity":1,"message":"1871","line":64,"column":3,"nodeType":"1833","messageId":"1825","endLine":66,"endColumn":79},{"ruleId":"1822","severity":1,"message":"1872","line":78,"column":3,"nodeType":"1833","messageId":"1825","endLine":80,"endColumn":79},{"ruleId":"1822","severity":1,"message":"1873","line":93,"column":3,"nodeType":"1833","messageId":"1825","endLine":95,"endColumn":79},{"ruleId":"1822","severity":1,"message":"1874","line":97,"column":3,"nodeType":"1833","messageId":"1825","endLine":97,"endColumn":54},{"ruleId":"1822","severity":1,"message":"1823","line":99,"column":3,"nodeType":"1824","messageId":"1825","endLine":123,"endColumn":4},{"ruleId":"1794","severity":1,"message":"1875","line":546,"column":38,"nodeType":"1796","endLine":546,"endColumn":44},{"ruleId":"1794","severity":1,"message":"1875","line":858,"column":38,"nodeType":"1796","endLine":858,"endColumn":44},{"ruleId":"1818","severity":1,"message":"1819","line":972,"column":34,"nodeType":"1820","messageId":"1821","endLine":972,"endColumn":37},{"ruleId":"1794","severity":1,"message":"1876","line":3,"column":3,"nodeType":"1796","endLine":3,"endColumn":28},{"ruleId":"1794","severity":1,"message":"1877","line":3,"column":8,"nodeType":"1796","endLine":3,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1827","line":145,"column":26,"nodeType":"1828","messageId":"1829","endLine":145,"endColumn":39},{"ruleId":"1826","severity":1,"message":"1827","line":169,"column":26,"nodeType":"1828","messageId":"1829","endLine":169,"endColumn":39},{"ruleId":"1826","severity":1,"message":"1827","line":155,"column":26,"nodeType":"1828","messageId":"1829","endLine":155,"endColumn":39},{"ruleId":"1826","severity":1,"message":"1827","line":179,"column":26,"nodeType":"1828","messageId":"1829","endLine":179,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":184,"column":37,"nodeType":"1820","messageId":"1821","endLine":184,"endColumn":40},{"ruleId":"1794","severity":1,"message":"1878","line":17,"column":22,"nodeType":"1796","endLine":17,"endColumn":30},{"ruleId":"1818","severity":1,"message":"1819","line":111,"column":30,"nodeType":"1820","messageId":"1821","endLine":111,"endColumn":33},{"ruleId":"1822","severity":1,"message":"1879","line":135,"column":3,"nodeType":"1833","messageId":"1825","endLine":136,"endColumn":77},{"ruleId":"1822","severity":1,"message":"1880","line":138,"column":3,"nodeType":"1833","messageId":"1825","endLine":138,"endColumn":62},{"ruleId":"1822","severity":1,"message":"1881","line":140,"column":3,"nodeType":"1833","messageId":"1825","endLine":140,"endColumn":25},{"ruleId":"1822","severity":1,"message":"1882","line":142,"column":3,"nodeType":"1833","messageId":"1825","endLine":142,"endColumn":56},{"ruleId":"1822","severity":1,"message":"1883","line":153,"column":3,"nodeType":"1833","messageId":"1825","endLine":153,"endColumn":63},{"ruleId":"1822","severity":1,"message":"1884","line":155,"column":3,"nodeType":"1833","messageId":"1825","endLine":155,"endColumn":60},{"ruleId":"1822","severity":1,"message":"1885","line":157,"column":3,"nodeType":"1833","messageId":"1825","endLine":159,"endColumn":5},{"ruleId":"1822","severity":1,"message":"1867","line":168,"column":3,"nodeType":"1833","messageId":"1825","endLine":168,"endColumn":43},{"ruleId":"1822","severity":1,"message":"1886","line":177,"column":3,"nodeType":"1833","messageId":"1825","endLine":177,"endColumn":27},{"ruleId":"1822","severity":1,"message":"1823","line":198,"column":3,"nodeType":"1824","messageId":"1825","endLine":202,"endColumn":4},{"ruleId":"1794","severity":1,"message":"1887","line":1,"column":10,"nodeType":"1796","endLine":1,"endColumn":64},{"ruleId":"1794","severity":1,"message":"1888","line":1,"column":8,"nodeType":"1796","endLine":1,"endColumn":17},{"ruleId":"1794","severity":1,"message":"1889","line":5,"column":3,"nodeType":"1796","endLine":5,"endColumn":70},{"ruleId":"1818","severity":1,"message":"1819","line":24,"column":40,"nodeType":"1820","messageId":"1821","endLine":24,"endColumn":43},{"ruleId":"1818","severity":1,"message":"1819","line":22,"column":20,"nodeType":"1820","messageId":"1821","endLine":22,"endColumn":23},{"ruleId":"1818","severity":1,"message":"1819","line":108,"column":38,"nodeType":"1820","messageId":"1821","endLine":108,"endColumn":41},{"ruleId":"1818","severity":1,"message":"1819","line":150,"column":46,"nodeType":"1820","messageId":"1821","endLine":150,"endColumn":49},{"ruleId":"1822","severity":1,"message":"1890","line":56,"column":3,"nodeType":"1833","messageId":"1825","endLine":56,"endColumn":49},{"ruleId":"1822","severity":1,"message":"1891","line":58,"column":3,"nodeType":"1833","messageId":"1825","endLine":58,"endColumn":45},{"ruleId":"1850","severity":1,"message":"1851","line":4,"column":3,"nodeType":"1824","endLine":4,"endColumn":70},{"ruleId":"1852","severity":1,"message":"1853","line":4,"column":68,"nodeType":"1854","messageId":"1855"},{"ruleId":"1794","severity":1,"message":"1892","line":1,"column":8,"nodeType":"1796","endLine":1,"endColumn":32},{"ruleId":"1822","severity":1,"message":"1893","line":44,"column":3,"nodeType":"1833","messageId":"1825","endLine":44,"endColumn":40},{"ruleId":"1822","severity":1,"message":"1894","line":46,"column":3,"nodeType":"1833","messageId":"1825","endLine":48,"endColumn":5},{"ruleId":"1822","severity":1,"message":"1895","line":50,"column":3,"nodeType":"1833","messageId":"1825","endLine":50,"endColumn":32},{"ruleId":"1822","severity":1,"message":"1896","line":52,"column":3,"nodeType":"1833","messageId":"1825","endLine":54,"endColumn":5},{"ruleId":"1822","severity":1,"message":"1823","line":56,"column":3,"nodeType":"1824","messageId":"1825","endLine":63,"endColumn":4},{"ruleId":"1818","severity":1,"message":"1819","line":161,"column":33,"nodeType":"1820","messageId":"1821","endLine":161,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1897","line":216,"column":3,"nodeType":"1833","messageId":"1825","endLine":216,"endColumn":80},{"ruleId":"1822","severity":1,"message":"1898","line":218,"column":3,"nodeType":"1833","messageId":"1825","endLine":218,"endColumn":45},{"ruleId":"1822","severity":1,"message":"1899","line":220,"column":3,"nodeType":"1833","messageId":"1825","endLine":220,"endColumn":57},{"ruleId":"1818","severity":1,"message":"1819","line":268,"column":14,"nodeType":"1820","messageId":"1821","endLine":268,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1827","line":271,"column":24,"nodeType":"1828","messageId":"1829","endLine":271,"endColumn":32},{"ruleId":"1826","severity":1,"message":"1827","line":289,"column":19,"nodeType":"1828","messageId":"1829","endLine":289,"endColumn":28},{"ruleId":"1818","severity":1,"message":"1819","line":292,"column":26,"nodeType":"1820","messageId":"1821","endLine":292,"endColumn":29},{"ruleId":"1826","severity":1,"message":"1827","line":511,"column":26,"nodeType":"1828","messageId":"1829","endLine":511,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1900","line":42,"column":3,"nodeType":"1833","messageId":"1825","endLine":42,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1823","line":44,"column":3,"nodeType":"1824","messageId":"1825","endLine":55,"endColumn":4},{"ruleId":"1818","severity":1,"message":"1819","line":84,"column":11,"nodeType":"1820","messageId":"1821","endLine":84,"endColumn":14},{"ruleId":"1826","severity":1,"message":"1827","line":94,"column":23,"nodeType":"1828","messageId":"1829","endLine":94,"endColumn":32},{"ruleId":"1826","severity":1,"message":"1827","line":100,"column":27,"nodeType":"1828","messageId":"1829","endLine":100,"endColumn":36},{"ruleId":"1818","severity":1,"message":"1819","line":100,"column":40,"nodeType":"1820","messageId":"1821","endLine":100,"endColumn":43},{"ruleId":"1852","severity":1,"message":"1901","line":157,"column":23,"nodeType":"1854","messageId":"1855"},{"ruleId":"1794","severity":1,"message":"1902","line":2,"column":10,"nodeType":"1796","endLine":2,"endColumn":26},{"ruleId":"1822","severity":1,"message":"1903","line":57,"column":3,"nodeType":"1833","messageId":"1825","endLine":57,"endColumn":66},{"ruleId":"1822","severity":1,"message":"1904","line":68,"column":3,"nodeType":"1833","messageId":"1825","endLine":68,"endColumn":35},{"ruleId":"1822","severity":1,"message":"1905","line":70,"column":3,"nodeType":"1833","messageId":"1825","endLine":70,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1906","line":72,"column":3,"nodeType":"1833","messageId":"1825","endLine":72,"endColumn":33},{"ruleId":"1822","severity":1,"message":"1907","line":74,"column":3,"nodeType":"1833","messageId":"1825","endLine":74,"endColumn":90},{"ruleId":"1822","severity":1,"message":"1908","line":76,"column":3,"nodeType":"1833","messageId":"1825","endLine":76,"endColumn":28},{"ruleId":"1818","severity":1,"message":"1819","line":76,"column":24,"nodeType":"1820","messageId":"1821","endLine":76,"endColumn":27},{"ruleId":"1822","severity":1,"message":"1909","line":78,"column":3,"nodeType":"1833","messageId":"1825","endLine":78,"endColumn":78},{"ruleId":"1822","severity":1,"message":"1867","line":80,"column":3,"nodeType":"1833","messageId":"1825","endLine":82,"endColumn":5},{"ruleId":"1822","severity":1,"message":"1910","line":84,"column":3,"nodeType":"1833","messageId":"1825","endLine":84,"endColumn":25},{"ruleId":"1822","severity":1,"message":"1911","line":86,"column":3,"nodeType":"1833","messageId":"1825","endLine":86,"endColumn":31},{"ruleId":"1822","severity":1,"message":"1912","line":88,"column":3,"nodeType":"1833","messageId":"1825","endLine":90,"endColumn":12},{"ruleId":"1822","severity":1,"message":"1913","line":92,"column":3,"nodeType":"1833","messageId":"1825","endLine":92,"endColumn":41},{"ruleId":"1822","severity":1,"message":"1914","line":94,"column":3,"nodeType":"1833","messageId":"1825","endLine":94,"endColumn":72},{"ruleId":"1822","severity":1,"message":"1823","line":96,"column":3,"nodeType":"1824","messageId":"1825","endLine":103,"endColumn":4},{"ruleId":"1818","severity":1,"message":"1819","line":271,"column":22,"nodeType":"1820","messageId":"1821","endLine":271,"endColumn":25},{"ruleId":"1818","severity":1,"message":"1819","line":286,"column":42,"nodeType":"1820","messageId":"1821","endLine":286,"endColumn":45},{"ruleId":"1826","severity":1,"message":"1827","line":647,"column":7,"nodeType":"1828","messageId":"1829","endLine":647,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1916","line":933,"column":13,"nodeType":"1917","endLine":933,"endColumn":33,"fix":"1918"},{"ruleId":"1794","severity":1,"message":"1919","line":3,"column":3,"nodeType":"1796","endLine":3,"endColumn":16},{"ruleId":"1794","severity":1,"message":"1920","line":4,"column":3,"nodeType":"1796","endLine":4,"endColumn":16},{"ruleId":"1794","severity":1,"message":"1921","line":5,"column":3,"nodeType":"1796","endLine":5,"endColumn":24},{"ruleId":"1794","severity":1,"message":"1922","line":6,"column":3,"nodeType":"1796","endLine":6,"endColumn":26},{"ruleId":"1794","severity":1,"message":"1923","line":7,"column":3,"nodeType":"1796","endLine":7,"endColumn":18},{"ruleId":"1794","severity":1,"message":"1924","line":8,"column":3,"nodeType":"1796","endLine":8,"endColumn":20},{"ruleId":"1794","severity":1,"message":"1925","line":9,"column":3,"nodeType":"1796","endLine":9,"endColumn":22},{"ruleId":"1794","severity":1,"message":"1926","line":11,"column":10,"nodeType":"1796","endLine":11,"endColumn":23},{"ruleId":"1794","severity":1,"message":"1927","line":13,"column":10,"nodeType":"1796","endLine":13,"endColumn":29},{"ruleId":"1794","severity":1,"message":"1928","line":23,"column":7,"nodeType":"1796","endLine":23,"endColumn":21},{"ruleId":"1794","severity":1,"message":"1929","line":3,"column":8,"nodeType":"1796","endLine":3,"endColumn":13},{"ruleId":"1818","severity":1,"message":"1819","line":15,"column":6,"nodeType":"1820","messageId":"1821","endLine":15,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":25,"column":48,"nodeType":"1820","messageId":"1821","endLine":25,"endColumn":51},{"ruleId":"1822","severity":1,"message":"1930","line":10,"column":3,"nodeType":"1833","messageId":"1825","endLine":10,"endColumn":16},{"ruleId":"1818","severity":1,"message":"1819","line":15,"column":31,"nodeType":"1820","messageId":"1821","endLine":15,"endColumn":34},{"ruleId":"1818","severity":1,"message":"1819","line":16,"column":29,"nodeType":"1820","messageId":"1821","endLine":16,"endColumn":32},{"ruleId":"1818","severity":1,"message":"1819","line":21,"column":14,"nodeType":"1820","messageId":"1821","endLine":21,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":24,"column":20,"nodeType":"1820","messageId":"1821","endLine":24,"endColumn":23},{"ruleId":"1818","severity":1,"message":"1819","line":28,"column":15,"nodeType":"1820","messageId":"1821","endLine":28,"endColumn":18},{"ruleId":"1818","severity":1,"message":"1819","line":29,"column":15,"nodeType":"1820","messageId":"1821","endLine":29,"endColumn":18},{"ruleId":"1822","severity":1,"message":"1931","line":33,"column":3,"nodeType":"1833","messageId":"1825","endLine":33,"endColumn":27},{"ruleId":"1822","severity":1,"message":"1932","line":34,"column":3,"nodeType":"1833","messageId":"1825","endLine":34,"endColumn":17},{"ruleId":"1822","severity":1,"message":"1933","line":35,"column":3,"nodeType":"1833","messageId":"1825","endLine":35,"endColumn":18},{"ruleId":"1818","severity":1,"message":"1819","line":35,"column":14,"nodeType":"1820","messageId":"1821","endLine":35,"endColumn":17},{"ruleId":"1822","severity":1,"message":"1934","line":36,"column":3,"nodeType":"1833","messageId":"1825","endLine":36,"endColumn":15},{"ruleId":"1818","severity":1,"message":"1819","line":36,"column":11,"nodeType":"1820","messageId":"1821","endLine":36,"endColumn":14},{"ruleId":"1822","severity":1,"message":"1935","line":37,"column":3,"nodeType":"1833","messageId":"1825","endLine":37,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":37,"column":10,"nodeType":"1820","messageId":"1821","endLine":37,"endColumn":13},{"ruleId":"1822","severity":1,"message":"1936","line":38,"column":3,"nodeType":"1833","messageId":"1825","endLine":38,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1937","line":39,"column":3,"nodeType":"1833","messageId":"1825","endLine":39,"endColumn":15},{"ruleId":"1822","severity":1,"message":"1938","line":40,"column":3,"nodeType":"1833","messageId":"1825","endLine":40,"endColumn":15},{"ruleId":"1818","severity":1,"message":"1819","line":40,"column":11,"nodeType":"1820","messageId":"1821","endLine":40,"endColumn":14},{"ruleId":"1822","severity":1,"message":"1939","line":41,"column":3,"nodeType":"1833","messageId":"1825","endLine":41,"endColumn":19},{"ruleId":"1822","severity":1,"message":"1940","line":42,"column":3,"nodeType":"1833","messageId":"1825","endLine":42,"endColumn":19},{"ruleId":"1822","severity":1,"message":"1941","line":43,"column":3,"nodeType":"1833","messageId":"1825","endLine":43,"endColumn":20},{"ruleId":"1822","severity":1,"message":"1942","line":48,"column":3,"nodeType":"1833","messageId":"1825","endLine":48,"endColumn":18},{"ruleId":"1818","severity":1,"message":"1819","line":58,"column":18,"nodeType":"1820","messageId":"1821","endLine":58,"endColumn":21},{"ruleId":"1818","severity":1,"message":"1819","line":60,"column":12,"nodeType":"1820","messageId":"1821","endLine":60,"endColumn":15},{"ruleId":"1818","severity":1,"message":"1819","line":73,"column":25,"nodeType":"1820","messageId":"1821","endLine":73,"endColumn":28},{"ruleId":"1818","severity":1,"message":"1819","line":74,"column":19,"nodeType":"1820","messageId":"1821","endLine":74,"endColumn":22},{"ruleId":"1818","severity":1,"message":"1819","line":77,"column":11,"nodeType":"1820","messageId":"1821","endLine":77,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":78,"column":20,"nodeType":"1820","messageId":"1821","endLine":78,"endColumn":23},{"ruleId":"1818","severity":1,"message":"1819","line":79,"column":13,"nodeType":"1820","messageId":"1821","endLine":79,"endColumn":16},{"ruleId":"1818","severity":1,"message":"1819","line":100,"column":57,"nodeType":"1820","messageId":"1821","endLine":100,"endColumn":60},{"ruleId":"1818","severity":1,"message":"1819","line":102,"column":20,"nodeType":"1820","messageId":"1821","endLine":102,"endColumn":23},{"ruleId":"1818","severity":1,"message":"1819","line":102,"column":44,"nodeType":"1820","messageId":"1821","endLine":102,"endColumn":47},{"ruleId":"1818","severity":1,"message":"1819","line":103,"column":30,"nodeType":"1820","messageId":"1821","endLine":103,"endColumn":33},{"ruleId":"1818","severity":1,"message":"1819","line":109,"column":42,"nodeType":"1820","messageId":"1821","endLine":109,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":130,"column":28,"nodeType":"1820","messageId":"1821","endLine":130,"endColumn":31},{"ruleId":"1818","severity":1,"message":"1819","line":130,"column":52,"nodeType":"1820","messageId":"1821","endLine":130,"endColumn":55},{"ruleId":"1818","severity":1,"message":"1819","line":131,"column":38,"nodeType":"1820","messageId":"1821","endLine":131,"endColumn":41},{"ruleId":"1818","severity":1,"message":"1819","line":133,"column":29,"nodeType":"1820","messageId":"1821","endLine":133,"endColumn":32},{"ruleId":"1818","severity":1,"message":"1819","line":133,"column":35,"nodeType":"1820","messageId":"1821","endLine":133,"endColumn":38},{"ruleId":"1818","severity":1,"message":"1819","line":135,"column":35,"nodeType":"1820","messageId":"1821","endLine":135,"endColumn":38},{"ruleId":"1818","severity":1,"message":"1819","line":136,"column":35,"nodeType":"1820","messageId":"1821","endLine":136,"endColumn":38},{"ruleId":"1818","severity":1,"message":"1819","line":146,"column":47,"nodeType":"1820","messageId":"1821","endLine":146,"endColumn":50},{"ruleId":"1818","severity":1,"message":"1819","line":154,"column":22,"nodeType":"1820","messageId":"1821","endLine":154,"endColumn":25},{"ruleId":"1818","severity":1,"message":"1819","line":180,"column":57,"nodeType":"1820","messageId":"1821","endLine":180,"endColumn":60},{"ruleId":"1818","severity":1,"message":"1819","line":181,"column":47,"nodeType":"1820","messageId":"1821","endLine":181,"endColumn":50},{"ruleId":"1818","severity":1,"message":"1819","line":183,"column":60,"nodeType":"1820","messageId":"1821","endLine":183,"endColumn":63},{"ruleId":"1818","severity":1,"message":"1819","line":184,"column":50,"nodeType":"1820","messageId":"1821","endLine":184,"endColumn":53},{"ruleId":"1818","severity":1,"message":"1819","line":189,"column":23,"nodeType":"1820","messageId":"1821","endLine":189,"endColumn":26},{"ruleId":"1818","severity":1,"message":"1819","line":190,"column":23,"nodeType":"1820","messageId":"1821","endLine":190,"endColumn":26},{"ruleId":"1818","severity":1,"message":"1819","line":191,"column":36,"nodeType":"1820","messageId":"1821","endLine":191,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":192,"column":49,"nodeType":"1820","messageId":"1821","endLine":192,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":204,"column":9,"nodeType":"1820","messageId":"1821","endLine":204,"endColumn":12},{"ruleId":"1818","severity":1,"message":"1819","line":208,"column":9,"nodeType":"1820","messageId":"1821","endLine":208,"endColumn":12},{"ruleId":"1818","severity":1,"message":"1819","line":216,"column":24,"nodeType":"1820","messageId":"1821","endLine":216,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":222,"column":14,"nodeType":"1820","messageId":"1821","endLine":222,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":223,"column":67,"nodeType":"1820","messageId":"1821","endLine":223,"endColumn":70},{"ruleId":"1818","severity":1,"message":"1819","line":224,"column":57,"nodeType":"1820","messageId":"1821","endLine":224,"endColumn":60},{"ruleId":"1818","severity":1,"message":"1819","line":230,"column":24,"nodeType":"1820","messageId":"1821","endLine":230,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":236,"column":14,"nodeType":"1820","messageId":"1821","endLine":236,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":240,"column":24,"nodeType":"1820","messageId":"1821","endLine":240,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":242,"column":62,"nodeType":"1820","messageId":"1821","endLine":242,"endColumn":65},{"ruleId":"1818","severity":1,"message":"1819","line":246,"column":11,"nodeType":"1820","messageId":"1821","endLine":246,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":248,"column":24,"nodeType":"1820","messageId":"1821","endLine":248,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":252,"column":11,"nodeType":"1820","messageId":"1821","endLine":252,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":254,"column":14,"nodeType":"1820","messageId":"1821","endLine":254,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":255,"column":42,"nodeType":"1820","messageId":"1821","endLine":255,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":255,"column":66,"nodeType":"1820","messageId":"1821","endLine":255,"endColumn":69},{"ruleId":"1818","severity":1,"message":"1819","line":256,"column":42,"nodeType":"1820","messageId":"1821","endLine":256,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":256,"column":56,"nodeType":"1820","messageId":"1821","endLine":256,"endColumn":59},{"ruleId":"1818","severity":1,"message":"1819","line":260,"column":11,"nodeType":"1820","messageId":"1821","endLine":260,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":262,"column":24,"nodeType":"1820","messageId":"1821","endLine":262,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":266,"column":11,"nodeType":"1820","messageId":"1821","endLine":266,"endColumn":14},{"ruleId":"1818","severity":1,"message":"1819","line":268,"column":14,"nodeType":"1820","messageId":"1821","endLine":268,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":269,"column":39,"nodeType":"1820","messageId":"1821","endLine":269,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":269,"column":63,"nodeType":"1820","messageId":"1821","endLine":269,"endColumn":66},{"ruleId":"1818","severity":1,"message":"1819","line":270,"column":39,"nodeType":"1820","messageId":"1821","endLine":270,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":270,"column":53,"nodeType":"1820","messageId":"1821","endLine":270,"endColumn":56},{"ruleId":"1818","severity":1,"message":"1819","line":278,"column":63,"nodeType":"1820","messageId":"1821","endLine":278,"endColumn":66},{"ruleId":"1818","severity":1,"message":"1819","line":279,"column":53,"nodeType":"1820","messageId":"1821","endLine":279,"endColumn":56},{"ruleId":"1818","severity":1,"message":"1819","line":280,"column":36,"nodeType":"1820","messageId":"1821","endLine":280,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":281,"column":26,"nodeType":"1820","messageId":"1821","endLine":281,"endColumn":29},{"ruleId":"1818","severity":1,"message":"1819","line":286,"column":24,"nodeType":"1820","messageId":"1821","endLine":286,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":288,"column":65,"nodeType":"1820","messageId":"1821","endLine":288,"endColumn":68},{"ruleId":"1818","severity":1,"message":"1819","line":289,"column":48,"nodeType":"1820","messageId":"1821","endLine":289,"endColumn":51},{"ruleId":"1818","severity":1,"message":"1819","line":290,"column":38,"nodeType":"1820","messageId":"1821","endLine":290,"endColumn":41},{"ruleId":"1818","severity":1,"message":"1819","line":295,"column":24,"nodeType":"1820","messageId":"1821","endLine":295,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":297,"column":66,"nodeType":"1820","messageId":"1821","endLine":297,"endColumn":69},{"ruleId":"1818","severity":1,"message":"1819","line":298,"column":49,"nodeType":"1820","messageId":"1821","endLine":298,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":299,"column":39,"nodeType":"1820","messageId":"1821","endLine":299,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":323,"column":16,"nodeType":"1820","messageId":"1821","endLine":323,"endColumn":19},{"ruleId":"1818","severity":1,"message":"1819","line":323,"column":30,"nodeType":"1820","messageId":"1821","endLine":323,"endColumn":33},{"ruleId":"1818","severity":1,"message":"1819","line":323,"column":54,"nodeType":"1820","messageId":"1821","endLine":323,"endColumn":57},{"ruleId":"1818","severity":1,"message":"1819","line":324,"column":16,"nodeType":"1820","messageId":"1821","endLine":324,"endColumn":19},{"ruleId":"1818","severity":1,"message":"1819","line":324,"column":30,"nodeType":"1820","messageId":"1821","endLine":324,"endColumn":33},{"ruleId":"1818","severity":1,"message":"1819","line":324,"column":44,"nodeType":"1820","messageId":"1821","endLine":324,"endColumn":47},{"ruleId":"1818","severity":1,"message":"1819","line":329,"column":14,"nodeType":"1820","messageId":"1821","endLine":329,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":330,"column":24,"nodeType":"1820","messageId":"1821","endLine":330,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":332,"column":49,"nodeType":"1820","messageId":"1821","endLine":332,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":332,"column":63,"nodeType":"1820","messageId":"1821","endLine":332,"endColumn":66},{"ruleId":"1818","severity":1,"message":"1819","line":333,"column":59,"nodeType":"1820","messageId":"1821","endLine":333,"endColumn":62},{"ruleId":"1818","severity":1,"message":"1819","line":334,"column":49,"nodeType":"1820","messageId":"1821","endLine":334,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":335,"column":45,"nodeType":"1820","messageId":"1821","endLine":335,"endColumn":48},{"ruleId":"1818","severity":1,"message":"1819","line":336,"column":35,"nodeType":"1820","messageId":"1821","endLine":336,"endColumn":38},{"ruleId":"1818","severity":1,"message":"1819","line":341,"column":14,"nodeType":"1820","messageId":"1821","endLine":341,"endColumn":17},{"ruleId":"1818","severity":1,"message":"1819","line":342,"column":24,"nodeType":"1820","messageId":"1821","endLine":342,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":344,"column":50,"nodeType":"1820","messageId":"1821","endLine":344,"endColumn":53},{"ruleId":"1818","severity":1,"message":"1819","line":344,"column":64,"nodeType":"1820","messageId":"1821","endLine":344,"endColumn":67},{"ruleId":"1818","severity":1,"message":"1819","line":345,"column":60,"nodeType":"1820","messageId":"1821","endLine":345,"endColumn":63},{"ruleId":"1818","severity":1,"message":"1819","line":346,"column":50,"nodeType":"1820","messageId":"1821","endLine":346,"endColumn":53},{"ruleId":"1818","severity":1,"message":"1819","line":347,"column":36,"nodeType":"1820","messageId":"1821","endLine":347,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":347,"column":60,"nodeType":"1820","messageId":"1821","endLine":347,"endColumn":63},{"ruleId":"1818","severity":1,"message":"1819","line":348,"column":36,"nodeType":"1820","messageId":"1821","endLine":348,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":348,"column":50,"nodeType":"1820","messageId":"1821","endLine":348,"endColumn":53},{"ruleId":"1818","severity":1,"message":"1819","line":349,"column":46,"nodeType":"1820","messageId":"1821","endLine":349,"endColumn":49},{"ruleId":"1818","severity":1,"message":"1819","line":350,"column":36,"nodeType":"1820","messageId":"1821","endLine":350,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":355,"column":34,"nodeType":"1820","messageId":"1821","endLine":355,"endColumn":37},{"ruleId":"1818","severity":1,"message":"1819","line":368,"column":24,"nodeType":"1820","messageId":"1821","endLine":368,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":386,"column":24,"nodeType":"1820","messageId":"1821","endLine":386,"endColumn":27},{"ruleId":"1818","severity":1,"message":"1819","line":388,"column":60,"nodeType":"1820","messageId":"1821","endLine":388,"endColumn":63},{"ruleId":"1818","severity":1,"message":"1819","line":390,"column":25,"nodeType":"1820","messageId":"1821","endLine":390,"endColumn":28},{"ruleId":"1818","severity":1,"message":"1819","line":391,"column":17,"nodeType":"1820","messageId":"1821","endLine":391,"endColumn":20},{"ruleId":"1818","severity":1,"message":"1819","line":393,"column":49,"nodeType":"1820","messageId":"1821","endLine":393,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":394,"column":39,"nodeType":"1820","messageId":"1821","endLine":394,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":407,"column":19,"nodeType":"1820","messageId":"1821","endLine":407,"endColumn":22},{"ruleId":"1818","severity":1,"message":"1819","line":420,"column":47,"nodeType":"1820","messageId":"1821","endLine":420,"endColumn":50},{"ruleId":"1818","severity":1,"message":"1819","line":430,"column":56,"nodeType":"1820","messageId":"1821","endLine":430,"endColumn":59},{"ruleId":"1818","severity":1,"message":"1819","line":431,"column":46,"nodeType":"1820","messageId":"1821","endLine":431,"endColumn":49},{"ruleId":"1822","severity":1,"message":"1943","line":82,"column":5,"nodeType":"1833","messageId":"1825","endLine":82,"endColumn":26},{"ruleId":"1818","severity":1,"message":"1819","line":8,"column":23,"nodeType":"1820","messageId":"1821","endLine":8,"endColumn":26},{"ruleId":"1818","severity":1,"message":"1819","line":15,"column":23,"nodeType":"1820","messageId":"1821","endLine":15,"endColumn":26},{"ruleId":"1818","severity":1,"message":"1819","line":16,"column":21,"nodeType":"1820","messageId":"1821","endLine":16,"endColumn":24},{"ruleId":"1818","severity":1,"message":"1819","line":40,"column":25,"nodeType":"1820","messageId":"1821","endLine":40,"endColumn":28},{"ruleId":"1818","severity":1,"message":"1819","line":48,"column":18,"nodeType":"1820","messageId":"1821","endLine":48,"endColumn":21},{"ruleId":"1818","severity":1,"message":"1819","line":1,"column":37,"nodeType":"1820","messageId":"1821","endLine":1,"endColumn":40},{"ruleId":"1818","severity":1,"message":"1819","line":5,"column":34,"nodeType":"1820","messageId":"1821","endLine":5,"endColumn":37},{"ruleId":"1794","severity":1,"message":"1944","line":23,"column":3,"nodeType":"1796","endLine":23,"endColumn":8},{"ruleId":"1794","severity":1,"message":"1945","line":24,"column":3,"nodeType":"1796","endLine":24,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":32,"column":8,"nodeType":"1820","messageId":"1821","endLine":32,"endColumn":11},{"ruleId":"1794","severity":1,"message":"1946","line":11,"column":24,"nodeType":"1796","endLine":11,"endColumn":33},{"ruleId":"1794","severity":1,"message":"1947","line":4,"column":3,"nodeType":"1796","endLine":4,"endColumn":21},{"ruleId":"1818","severity":1,"message":"1819","line":10,"column":41,"nodeType":"1820","messageId":"1821","endLine":10,"endColumn":44},{"ruleId":"1818","severity":1,"message":"1819","line":14,"column":41,"nodeType":"1820","messageId":"1821","endLine":14,"endColumn":44},{"ruleId":"1818","severity":1,"message":"1819","line":20,"column":44,"nodeType":"1820","messageId":"1821","endLine":20,"endColumn":47},{"ruleId":"1818","severity":1,"message":"1819","line":24,"column":43,"nodeType":"1820","messageId":"1821","endLine":24,"endColumn":46},{"ruleId":"1818","severity":1,"message":"1819","line":28,"column":47,"nodeType":"1820","messageId":"1821","endLine":28,"endColumn":50},{"ruleId":"1818","severity":1,"message":"1819","line":7,"column":32,"nodeType":"1820","messageId":"1821","endLine":7,"endColumn":35},{"ruleId":"1818","severity":1,"message":"1819","line":9,"column":42,"nodeType":"1820","messageId":"1821","endLine":9,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":17,"column":58,"nodeType":"1820","messageId":"1821","endLine":17,"endColumn":61},{"ruleId":"1818","severity":1,"message":"1819","line":50,"column":8,"nodeType":"1820","messageId":"1821","endLine":50,"endColumn":11},{"ruleId":"1818","severity":1,"message":"1819","line":73,"column":36,"nodeType":"1820","messageId":"1821","endLine":73,"endColumn":39},{"ruleId":"1818","severity":1,"message":"1819","line":76,"column":35,"nodeType":"1820","messageId":"1821","endLine":76,"endColumn":38},{"ruleId":"1794","severity":1,"message":"1946","line":14,"column":24,"nodeType":"1796","endLine":14,"endColumn":33},{"ruleId":"1818","severity":1,"message":"1819","line":23,"column":8,"nodeType":"1820","messageId":"1821","endLine":23,"endColumn":11},{"ruleId":"1794","severity":1,"message":"1948","line":5,"column":3,"nodeType":"1796","endLine":5,"endColumn":51},{"ruleId":"1794","severity":1,"message":"1949","line":21,"column":3,"nodeType":"1796","endLine":21,"endColumn":69},{"ruleId":"1794","severity":1,"message":"1950","line":3,"column":3,"nodeType":"1796","endLine":3,"endColumn":68},{"ruleId":"1794","severity":1,"message":"1951","line":12,"column":3,"nodeType":"1796","endLine":12,"endColumn":33},{"ruleId":"1794","severity":1,"message":"1952","line":1,"column":10,"nodeType":"1796","endLine":1,"endColumn":38},{"ruleId":"1794","severity":1,"message":"1953","line":2,"column":10,"nodeType":"1796","endLine":2,"endColumn":22},{"ruleId":"1818","severity":1,"message":"1819","line":7,"column":66,"nodeType":"1820","messageId":"1821","endLine":7,"endColumn":69},{"ruleId":"1818","severity":1,"message":"1819","line":16,"column":57,"nodeType":"1820","messageId":"1821","endLine":16,"endColumn":60},{"ruleId":"1818","severity":1,"message":"1819","line":135,"column":13,"nodeType":"1820","messageId":"1821","endLine":135,"endColumn":16},{"ruleId":"1954","severity":2,"message":"1955","line":285,"column":21,"nodeType":"1956","messageId":"1957","endLine":285,"endColumn":55,"fix":"1958"},{"ruleId":"1954","severity":2,"message":"1955","line":305,"column":21,"nodeType":"1956","messageId":"1957","endLine":305,"endColumn":55,"fix":"1959"},{"ruleId":"1794","severity":1,"message":"1960","line":1,"column":10,"nodeType":"1796","endLine":1,"endColumn":35},{"ruleId":"1961","severity":1,"message":"1962","line":9,"column":50,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":61},{"ruleId":"1961","severity":1,"message":"1962","line":6,"column":50,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":61},{"ruleId":"1818","severity":1,"message":"1819","line":68,"column":27,"nodeType":"1820","messageId":"1821","endLine":68,"endColumn":30},{"ruleId":"1961","severity":1,"message":"1962","line":16,"column":55,"nodeType":"1963","messageId":"1964","endLine":16,"endColumn":66},{"ruleId":"1965","severity":1,"message":"1966","line":36,"column":7,"nodeType":"1967","endLine":36,"endColumn":78},{"ruleId":"1965","severity":1,"message":"1966","line":41,"column":5,"nodeType":"1967","endLine":41,"endColumn":78},{"ruleId":"1961","severity":1,"message":"1962","line":54,"column":44,"nodeType":"1963","messageId":"1964","endLine":54,"endColumn":55},{"ruleId":"1961","severity":1,"message":"1962","line":107,"column":91,"nodeType":"1963","messageId":"1964","endLine":107,"endColumn":102},{"ruleId":"1794","severity":1,"message":"1968","line":108,"column":9,"nodeType":"1796","endLine":108,"endColumn":20},{"ruleId":"1961","severity":1,"message":"1962","line":5,"column":41,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":46},{"ruleId":"1961","severity":1,"message":"1962","line":111,"column":52,"nodeType":"1963","messageId":"1964","endLine":111,"endColumn":63},{"ruleId":"1961","severity":1,"message":"1962","line":11,"column":43,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":54},{"ruleId":"1961","severity":1,"message":"1962","line":4,"column":28,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":39},{"ruleId":"1961","severity":1,"message":"1962","line":7,"column":40,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":51},{"ruleId":"1818","severity":1,"message":"1819","line":19,"column":25,"nodeType":"1820","messageId":"1821","endLine":19,"endColumn":28},{"ruleId":"1961","severity":1,"message":"1962","line":4,"column":8,"nodeType":"1969","messageId":"1964","endLine":4,"endColumn":37},{"ruleId":"1961","severity":1,"message":"1962","line":6,"column":43,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":54},{"ruleId":"1970","severity":2,"message":"1971","line":15,"column":16,"nodeType":"1972","messageId":"1973","endLine":15,"endColumn":34},{"ruleId":"1961","severity":1,"message":"1962","line":8,"column":39,"nodeType":"1963","messageId":"1964","endLine":8,"endColumn":50},{"ruleId":"1970","severity":2,"message":"1971","line":15,"column":14,"nodeType":"1972","messageId":"1973","endLine":15,"endColumn":39},{"ruleId":"1970","severity":2,"message":"1971","line":36,"column":14,"nodeType":"1972","messageId":"1973","endLine":36,"endColumn":39},{"ruleId":null,"fatal":true,"severity":2,"message":"1974"},{"ruleId":"1794","severity":1,"message":"1975","line":3,"column":3,"nodeType":"1796","endLine":3,"endColumn":30},{"ruleId":"1794","severity":1,"message":"1976","line":4,"column":3,"nodeType":"1796","endLine":4,"endColumn":20},{"ruleId":"1794","severity":1,"message":"1977","line":7,"column":3,"nodeType":"1796","endLine":7,"endColumn":27},{"ruleId":"1794","severity":1,"message":"1978","line":12,"column":3,"nodeType":"1796","endLine":12,"endColumn":27},{"ruleId":"1961","severity":1,"message":"1962","line":17,"column":27,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":38},{"ruleId":"1961","severity":1,"message":"1962","line":4,"column":40,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":51},{"ruleId":"1961","severity":1,"message":"1962","line":40,"column":39,"nodeType":"1963","messageId":"1964","endLine":40,"endColumn":50},{"ruleId":"1961","severity":1,"message":"1962","line":79,"column":24,"nodeType":"1963","messageId":"1964","endLine":79,"endColumn":35},{"ruleId":"1961","severity":1,"message":"1962","line":3,"column":24,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":35},{"ruleId":"1961","severity":1,"message":"1962","line":21,"column":21,"nodeType":"1963","messageId":"1964","endLine":21,"endColumn":42},{"ruleId":"1961","severity":1,"message":"1962","line":29,"column":1,"nodeType":"1969","messageId":"1964","endLine":29,"endColumn":36},{"ruleId":"1961","severity":1,"message":"1962","line":31,"column":29,"nodeType":"1963","messageId":"1964","endLine":34,"endColumn":5},{"ruleId":"1794","severity":1,"message":"1979","line":35,"column":11,"nodeType":"1796","endLine":35,"endColumn":20},{"ruleId":"1818","severity":1,"message":"1819","line":50,"column":64,"nodeType":"1820","messageId":"1821","endLine":50,"endColumn":67},{"ruleId":"1961","severity":1,"message":"1962","line":69,"column":44,"nodeType":"1963","messageId":"1964","endLine":72,"endColumn":5},{"ruleId":"1818","severity":1,"message":"1819","line":93,"column":68,"nodeType":"1820","messageId":"1821","endLine":93,"endColumn":71},{"ruleId":"1961","severity":1,"message":"1962","line":113,"column":51,"nodeType":"1963","messageId":"1964","endLine":113,"endColumn":75},{"ruleId":"1970","severity":2,"message":"1971","line":138,"column":24,"nodeType":"1972","messageId":"1973","endLine":138,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":141,"column":21,"nodeType":"1796","messageId":"1982","endLine":141,"endColumn":43,"fix":"1983"},{"ruleId":"1826","severity":1,"message":"1827","line":155,"column":27,"nodeType":"1828","messageId":"1829","endLine":155,"endColumn":42},{"ruleId":"1970","severity":2,"message":"1971","line":208,"column":24,"nodeType":"1972","messageId":"1973","endLine":208,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":211,"column":21,"nodeType":"1796","messageId":"1982","endLine":211,"endColumn":43,"fix":"1984"},{"ruleId":"1826","severity":1,"message":"1827","line":225,"column":27,"nodeType":"1828","messageId":"1829","endLine":225,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":299,"column":97,"nodeType":"1820","messageId":"1821","endLine":299,"endColumn":100},{"ruleId":"1970","severity":2,"message":"1971","line":303,"column":24,"nodeType":"1972","messageId":"1973","endLine":303,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":306,"column":21,"nodeType":"1796","messageId":"1982","endLine":306,"endColumn":43,"fix":"1985"},{"ruleId":"1826","severity":1,"message":"1827","line":320,"column":27,"nodeType":"1828","messageId":"1829","endLine":320,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":347,"column":119,"nodeType":"1820","messageId":"1821","endLine":347,"endColumn":122},{"ruleId":"1970","severity":2,"message":"1971","line":351,"column":24,"nodeType":"1972","messageId":"1973","endLine":351,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":354,"column":21,"nodeType":"1796","messageId":"1982","endLine":354,"endColumn":43,"fix":"1986"},{"ruleId":"1826","severity":1,"message":"1827","line":368,"column":27,"nodeType":"1828","messageId":"1829","endLine":368,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":395,"column":138,"nodeType":"1820","messageId":"1821","endLine":395,"endColumn":141},{"ruleId":"1970","severity":2,"message":"1971","line":399,"column":24,"nodeType":"1972","messageId":"1973","endLine":399,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":402,"column":21,"nodeType":"1796","messageId":"1982","endLine":402,"endColumn":43,"fix":"1987"},{"ruleId":"1826","severity":1,"message":"1827","line":416,"column":27,"nodeType":"1828","messageId":"1829","endLine":416,"endColumn":42},{"ruleId":"1818","severity":1,"message":"1819","line":469,"column":138,"nodeType":"1820","messageId":"1821","endLine":469,"endColumn":141},{"ruleId":"1970","severity":2,"message":"1971","line":473,"column":24,"nodeType":"1972","messageId":"1973","endLine":473,"endColumn":42},{"ruleId":"1980","severity":2,"message":"1981","line":476,"column":21,"nodeType":"1796","messageId":"1982","endLine":476,"endColumn":43,"fix":"1988"},{"ruleId":"1826","severity":1,"message":"1827","line":490,"column":27,"nodeType":"1828","messageId":"1829","endLine":490,"endColumn":42},{"ruleId":"1961","severity":1,"message":"1962","line":539,"column":5,"nodeType":"1969","messageId":"1964","endLine":539,"endColumn":99},{"ruleId":"1954","severity":2,"message":"1955","line":549,"column":16,"nodeType":"1828","messageId":"1957","endLine":549,"endColumn":22,"fix":"1989"},{"ruleId":"1826","severity":1,"message":"1827","line":549,"column":16,"nodeType":"1828","messageId":"1829","endLine":549,"endColumn":22},{"ruleId":"1954","severity":2,"message":"1955","line":550,"column":22,"nodeType":"1828","messageId":"1957","endLine":550,"endColumn":28,"fix":"1990"},{"ruleId":"1826","severity":1,"message":"1827","line":550,"column":22,"nodeType":"1828","messageId":"1829","endLine":550,"endColumn":28},{"ruleId":"1954","severity":2,"message":"1955","line":553,"column":16,"nodeType":"1828","messageId":"1957","endLine":553,"endColumn":22,"fix":"1991"},{"ruleId":"1826","severity":1,"message":"1827","line":553,"column":16,"nodeType":"1828","messageId":"1829","endLine":553,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1827","line":554,"column":22,"nodeType":"1828","messageId":"1829","endLine":554,"endColumn":28},{"ruleId":"1954","severity":2,"message":"1955","line":554,"column":22,"nodeType":"1828","messageId":"1957","endLine":554,"endColumn":28,"fix":"1992"},{"ruleId":"1954","severity":2,"message":"1955","line":558,"column":22,"nodeType":"1828","messageId":"1957","endLine":558,"endColumn":28,"fix":"1993"},{"ruleId":"1826","severity":1,"message":"1827","line":558,"column":22,"nodeType":"1828","messageId":"1829","endLine":558,"endColumn":28},{"ruleId":"1826","severity":1,"message":"1827","line":559,"column":16,"nodeType":"1828","messageId":"1829","endLine":559,"endColumn":22},{"ruleId":"1954","severity":2,"message":"1955","line":559,"column":16,"nodeType":"1828","messageId":"1957","endLine":559,"endColumn":22,"fix":"1994"},{"ruleId":"1826","severity":1,"message":"1827","line":561,"column":22,"nodeType":"1828","messageId":"1829","endLine":561,"endColumn":28},{"ruleId":"1954","severity":2,"message":"1955","line":561,"column":22,"nodeType":"1828","messageId":"1957","endLine":561,"endColumn":28,"fix":"1995"},{"ruleId":"1954","severity":2,"message":"1955","line":568,"column":22,"nodeType":"1828","messageId":"1957","endLine":568,"endColumn":28,"fix":"1996"},{"ruleId":"1826","severity":1,"message":"1827","line":568,"column":22,"nodeType":"1828","messageId":"1829","endLine":568,"endColumn":28},{"ruleId":"1961","severity":1,"message":"1962","line":575,"column":20,"nodeType":"1963","messageId":"1964","endLine":575,"endColumn":74},{"ruleId":"1954","severity":2,"message":"1955","line":581,"column":22,"nodeType":"1828","messageId":"1957","endLine":581,"endColumn":28,"fix":"1997"},{"ruleId":"1826","severity":1,"message":"1827","line":581,"column":22,"nodeType":"1828","messageId":"1829","endLine":581,"endColumn":28},{"ruleId":"1961","severity":1,"message":"1962","line":587,"column":23,"nodeType":"1963","messageId":"1964","endLine":587,"endColumn":50},{"ruleId":"1954","severity":2,"message":"1955","line":593,"column":22,"nodeType":"1828","messageId":"1957","endLine":593,"endColumn":28,"fix":"1998"},{"ruleId":"1826","severity":1,"message":"1827","line":593,"column":22,"nodeType":"1828","messageId":"1829","endLine":593,"endColumn":28},{"ruleId":"1954","severity":2,"message":"1955","line":598,"column":22,"nodeType":"1828","messageId":"1957","endLine":598,"endColumn":28,"fix":"1999"},{"ruleId":"1826","severity":1,"message":"1827","line":598,"column":22,"nodeType":"1828","messageId":"1829","endLine":598,"endColumn":28},{"ruleId":"1826","severity":1,"message":"1827","line":600,"column":16,"nodeType":"1828","messageId":"1829","endLine":600,"endColumn":22},{"ruleId":"1954","severity":2,"message":"1955","line":600,"column":16,"nodeType":"1828","messageId":"1957","endLine":600,"endColumn":22,"fix":"2000"},{"ruleId":"1826","severity":1,"message":"1827","line":619,"column":24,"nodeType":"1828","messageId":"1829","endLine":619,"endColumn":45},{"ruleId":"1826","severity":1,"message":"1827","line":620,"column":30,"nodeType":"1828","messageId":"1829","endLine":620,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":623,"column":24,"nodeType":"1828","messageId":"1829","endLine":623,"endColumn":45},{"ruleId":"1826","severity":1,"message":"1827","line":624,"column":30,"nodeType":"1828","messageId":"1829","endLine":624,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":628,"column":30,"nodeType":"1828","messageId":"1829","endLine":628,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":629,"column":24,"nodeType":"1828","messageId":"1829","endLine":629,"endColumn":45},{"ruleId":"1826","severity":1,"message":"1827","line":631,"column":30,"nodeType":"1828","messageId":"1829","endLine":631,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":638,"column":30,"nodeType":"1828","messageId":"1829","endLine":638,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":643,"column":30,"nodeType":"1828","messageId":"1829","endLine":643,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":646,"column":30,"nodeType":"1828","messageId":"1829","endLine":646,"endColumn":51},{"ruleId":"1826","severity":1,"message":"1827","line":647,"column":24,"nodeType":"1828","messageId":"1829","endLine":647,"endColumn":45},{"ruleId":"1961","severity":1,"message":"1962","line":656,"column":31,"nodeType":"1963","messageId":"1964","endLine":656,"endColumn":42},{"ruleId":"1826","severity":1,"message":"1827","line":661,"column":24,"nodeType":"1828","messageId":"1829","endLine":661,"endColumn":28},{"ruleId":"1826","severity":1,"message":"1827","line":668,"column":33,"nodeType":"1828","messageId":"1829","endLine":668,"endColumn":39},{"ruleId":"1961","severity":1,"message":"1962","line":692,"column":31,"nodeType":"1963","messageId":"1964","endLine":692,"endColumn":42},{"ruleId":"1826","severity":1,"message":"1827","line":693,"column":35,"nodeType":"1828","messageId":"1829","endLine":693,"endColumn":42},{"ruleId":"1826","severity":1,"message":"1827","line":695,"column":33,"nodeType":"1828","messageId":"1829","endLine":695,"endColumn":39},{"ruleId":"1961","severity":1,"message":"1962","line":3,"column":24,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":29},{"ruleId":"1794","severity":1,"message":"2001","line":9,"column":3,"nodeType":"1796","endLine":9,"endColumn":29},{"ruleId":"1818","severity":1,"message":"1819","line":144,"column":14,"nodeType":"1820","messageId":"1821","endLine":144,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1827","line":207,"column":31,"nodeType":"1828","messageId":"1829","endLine":207,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1827","line":232,"column":35,"nodeType":"1828","messageId":"1829","endLine":232,"endColumn":56},{"ruleId":"1826","severity":1,"message":"1827","line":245,"column":34,"nodeType":"1828","messageId":"1829","endLine":245,"endColumn":46},{"ruleId":"1818","severity":1,"message":"1819","line":389,"column":39,"nodeType":"1820","messageId":"1821","endLine":389,"endColumn":42},{"ruleId":"1826","severity":1,"message":"1827","line":547,"column":10,"nodeType":"1828","messageId":"1829","endLine":547,"endColumn":38},{"ruleId":"1818","severity":1,"message":"1819","line":3,"column":42,"nodeType":"1820","messageId":"1821","endLine":3,"endColumn":45},{"ruleId":"1818","severity":1,"message":"1819","line":34,"column":71,"nodeType":"1820","messageId":"1821","endLine":34,"endColumn":74},{"ruleId":"1822","severity":1,"message":"2002","line":211,"column":3,"nodeType":"1833","messageId":"1825","endLine":211,"endColumn":61},{"ruleId":"1822","severity":1,"message":"2003","line":213,"column":3,"nodeType":"1833","messageId":"1825","endLine":215,"endColumn":5},{"ruleId":"1822","severity":1,"message":"2004","line":217,"column":3,"nodeType":"1833","messageId":"1825","endLine":219,"endColumn":5},{"ruleId":"1818","severity":1,"message":"1819","line":100,"column":49,"nodeType":"1820","messageId":"1821","endLine":100,"endColumn":52},{"ruleId":"1818","severity":1,"message":"1819","line":233,"column":12,"nodeType":"1820","messageId":"1821","endLine":233,"endColumn":15},{"ruleId":"1818","severity":1,"message":"1819","line":14,"column":6,"nodeType":"1820","messageId":"1821","endLine":14,"endColumn":9},{"ruleId":"1818","severity":1,"message":"1819","line":140,"column":40,"nodeType":"1820","messageId":"1821","endLine":140,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1827","line":247,"column":41,"nodeType":"1828","messageId":"1829","endLine":247,"endColumn":66},{"ruleId":"1826","severity":1,"message":"1827","line":247,"column":41,"nodeType":"1828","messageId":"1829","endLine":247,"endColumn":65},{"ruleId":"1826","severity":1,"message":"1827","line":314,"column":14,"nodeType":"1828","messageId":"1829","endLine":314,"endColumn":39},{"ruleId":"1826","severity":1,"message":"1827","line":314,"column":14,"nodeType":"1828","messageId":"1829","endLine":314,"endColumn":38},{"ruleId":"1826","severity":1,"message":"1827","line":90,"column":26,"nodeType":"1828","messageId":"1829","endLine":90,"endColumn":31},{"ruleId":"1826","severity":1,"message":"1827","line":90,"column":26,"nodeType":"1828","messageId":"1829","endLine":90,"endColumn":30},{"ruleId":"1826","severity":1,"message":"1827","line":156,"column":13,"nodeType":"1828","messageId":"1829","endLine":156,"endColumn":18},{"ruleId":"1826","severity":1,"message":"1827","line":156,"column":13,"nodeType":"1828","messageId":"1829","endLine":156,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1827","line":332,"column":7,"nodeType":"1828","messageId":"1829","endLine":332,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1827","line":332,"column":7,"nodeType":"1828","messageId":"1829","endLine":332,"endColumn":16},{"ruleId":"1794","severity":1,"message":"2005","line":391,"column":9,"nodeType":"1796","endLine":391,"endColumn":21},{"ruleId":"1826","severity":1,"message":"1827","line":700,"column":48,"nodeType":"1828","messageId":"1829","endLine":700,"endColumn":82},{"ruleId":"1826","severity":1,"message":"1827","line":700,"column":48,"nodeType":"1828","messageId":"1829","endLine":700,"endColumn":81},{"ruleId":"1826","severity":1,"message":"1827","line":723,"column":40,"nodeType":"1828","messageId":"1829","endLine":723,"endColumn":74},{"ruleId":"1826","severity":1,"message":"1827","line":723,"column":40,"nodeType":"1828","messageId":"1829","endLine":723,"endColumn":73},{"ruleId":"1826","severity":1,"message":"1827","line":187,"column":14,"nodeType":"1828","messageId":"1829","endLine":187,"endColumn":47},{"ruleId":"1826","severity":1,"message":"1827","line":213,"column":26,"nodeType":"1828","messageId":"1829","endLine":213,"endColumn":76},{"ruleId":"1826","severity":1,"message":"1827","line":213,"column":26,"nodeType":"1828","messageId":"1829","endLine":213,"endColumn":75},{"ruleId":"1818","severity":1,"message":"1819","line":323,"column":17,"nodeType":"1820","messageId":"1821","endLine":323,"endColumn":20},{"ruleId":"1818","severity":1,"message":"1819","line":7,"column":18,"nodeType":"1820","messageId":"1821","endLine":7,"endColumn":21},{"ruleId":"2006","severity":1,"message":"2007","line":297,"column":21,"nodeType":"1963","messageId":"2008","endLine":306,"endColumn":16},{"ruleId":"2006","severity":1,"message":"2007","line":307,"column":22,"nodeType":"1963","messageId":"2008","endLine":310,"endColumn":16},{"ruleId":"1794","severity":1,"message":"2009","line":1,"column":10,"nodeType":"1796","endLine":1,"endColumn":44},{"ruleId":"1818","severity":1,"message":"1819","line":10,"column":19,"nodeType":"1820","messageId":"1821","endLine":10,"endColumn":22},{"ruleId":"1818","severity":1,"message":"1819","line":26,"column":19,"nodeType":"1820","messageId":"1821","endLine":26,"endColumn":22},{"ruleId":"1794","severity":1,"message":"2010","line":2,"column":3,"nodeType":"1796","endLine":2,"endColumn":53},{"ruleId":"1794","severity":1,"message":"2011","line":4,"column":3,"nodeType":"1796","endLine":4,"endColumn":20},{"ruleId":"1794","severity":1,"message":"2012","line":8,"column":3,"nodeType":"1796","endLine":8,"endColumn":31},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","'runTestFirebaseConnectionDatabase' is defined but never used.","'runTestFirebaseCredentialsStorage' is defined but never used.","'runTestCAIdentityWithAuthorityProviderGeneratorV1' is defined but never used.","'runTestCAIdentityV1' is defined but never used.","'runTestCAConnectionFirebase' is defined but never used.","'runTestCAConnectionFirebaseCryptoCredentialsGenerateByFirebaseAuthProvider' is defined but never used.","'runTestErrorExtended' is defined but never used.","'runTestSwarmConnection' is defined but never used.","'runTestSwarmConnectionIPFS' is defined but never used.","'runTestSwarmStoreOrbitDBConnection' is defined but never used.","'runTestValidateMessagingTimestampsTest' is defined but never used.","'runTestHttpRequest' is defined but never used.","'runTestPseudoNtpClass' is defined but never used.","'runTestClientTimeSynced' is defined but never used.","'runSwarmMessageFieldsValidator' is defined but never used.","'runTestCAIdentityV2' is defined but never used.","'runCACredentialsIdentityStorageTest' is defined but never used.","'runTestCAConnectionsUtilsValidators' is defined but never used.","'runTestCommonUtilsURL' is defined but never used.","'runTestCAConnectionsPoolTest' is defined but never used.","'any' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny","@typescript-eslint/member-ordering","Member constructor should be declared before all static method definitions.","MethodDefinition","incorrectOrder","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'result' is assigned a value but never used.","'ownValueOf' is defined but never used.","Member baseUrl should be declared before all static method definitions.","ClassProperty","Member url should be declared before all static method definitions.","Member method should be declared before all static method definitions.","Member mode should be declared before all static method definitions.","Member token should be declared before all static method definitions.","Member contentType should be declared before all static method definitions.","Member queryStringParams should be declared before all static method definitions.","Member credentials should be declared before all static method definitions.","'thirdParam' is assigned a value but never used.","Member queue should be declared before all static method definitions.","Member itemsInBatch should be declared before all static method definitions.","Member intervalMs should be declared before all static method definitions.","Member lastEmitMs should be declared before all static method definitions.","Member interval should be declared before all static method definitions.","Member status should be declared before all static method definitions.","Member errorOccurred should be declared before all static method definitions.","Member statusEmitter should be declared before all static method definitions.","@typescript-eslint/no-useless-constructor","Useless constructor.","@typescript-eslint/no-empty-function","Unexpected empty constructor.","FunctionExpression","unexpected","'TCACryptoKeyPairsExported' is defined but never used.","'validateUserIdentityDescriptionVersion' is defined but never used.","'TCentralAuthorityUserIdentity' is defined but never used.","'CA_USER_IDENTITY_VERSIONS' is defined but never used.","'CA_CONNECTION_STATUS' is defined but never used.","Member constructor should be declared before all instance method definitions.","'firebase' is defined but never used.","'TCACryptoPubilicKeys' is defined but never used.","'CA_CRYPTO_KEY_PAIRS_STRINGIFIED_MIN_LENGTH' is defined but never used.","Member storageName should be declared before all static method definitions.","Member storageNameAppendLog should be declared before all static method definitions.","Member options should be declared before all static method definitions.","Member dumpIntervalMs should be declared before all static method definitions.","Member dumpIntervalRunning should be declared before all static method definitions.","Member secretStorageConnection should be declared before all static method definitions.","Member tableData should be declared before all static method definitions.","Member appendData should be declared before all static method definitions.","Member appendDataTemp should be declared before all static method definitions.","Member storageType should be declared before all static method definitions.","'status' is assigned a value but never used.","'TSecretStoreConfiguration' is defined but never used.","'encodingDown' is defined but never used.","'ownKeyOf' is defined but never used.","Member AuthStorageProvider should be declared before all static method definitions.","Member KEY_IN_AUTH_STORAGE should be declared before all static method definitions.","Member k should be declared before all static method definitions.","Member storageProvider should be declared before all static method definitions.","Member isStorageProviderSupportUInt8Array should be declared before all static method definitions.","Member authStorageProvider should be declared before all static method definitions.","Member storageProviderName should be declared before all static method definitions.","Member dbName should be declared before all static method definitions.","'TPASSWORD_ENCRYPTION_KEY_IMPORT_NATIVE_SUPPORTED_TYPES' is defined but never used.","'Multiaddr' is defined but never used.","'SWARM_CONNECTION_SUBCLASS_IPFS_CONFIG_DELEGATE_BOOTSTRAP_MULTIADDRS' is defined but never used.","Member connection should be declared before all instance method definitions.","Member options should be declared before all instance method definitions.","'CentralAuthorityIdentity' is defined but never used.","Member _isPublic should be declared before all static method definitions.","Member _grantAccessCallback should be declared before all static method definitions.","Member _orbitdb should be declared before all static method definitions.","Member _options should be declared before all static method definitions.","Member options should be declared before all constructor definitions.","Member orbitDb should be declared before all constructor definitions.","Member database should be declared before all constructor definitions.","Member _keystore should be declared before all static method definitions.","Unexpected empty async method 'load'.","'IdentityProvider' is defined but never used.","Member isLoadedCustomAccessController should be declared before all static method definitions.","Member isReady should be declared before all static method definitions.","Member isClosed should be declared before all static method definitions.","Member userId should be declared before all static method definitions.","Member directory should be declared before all static method definitions.","Member identity should be declared before all static method definitions.","Member connectionOptions should be declared before all static method definitions.","Member ipfs should be declared before all static method definitions.","Member orbitDb should be declared before all static method definitions.","Member databases should be declared before all static method definitions.","Member identityKeystore should be declared before all static method definitions.","Member storage should be declared before all static method definitions.","no-useless-rename","Destructuring assignment databases unnecessarily renamed.","Property",{"range":"2013","text":"2014"},"'encryptNative' is defined but never used.","'decryptNative' is defined but never used.","'exportKeyPairAsString' is defined but never used.","'importKeyPairFromString' is defined but never used.","'encryptToString' is defined but never used.","'decryptFromString' is defined but never used.","'encryptToTypedArray' is defined but never used.","'calculateHash' is defined but never used.","'arrayBufferToBase64' is defined but never used.","'testEncryption' is assigned a value but never used.","'Mocha' is defined but never used.","Member types should be declared before all constructor definitions.","Member ready should be declared before all constructor definitions.","Member repo should be declared before all constructor definitions.","Member bootstrap should be declared before all constructor definitions.","Member config should be declared before all constructor definitions.","Member block should be declared before all constructor definitions.","Member object should be declared before all constructor definitions.","Member dag should be declared before all constructor definitions.","Member libp2p should be declared before all constructor definitions.","Member swarm should be declared before all constructor definitions.","Member files should be declared before all constructor definitions.","Member bitswap should be declared before all constructor definitions.","Member pubsub should be declared before all constructor definitions.","Member status should be declared before all constructor definitions.","'isJWK' is defined but never used.","'getJWK' is defined but never used.","'exportKey' is defined but never used.","'typedArrayToString' is defined but never used.","'TPASSWORD_ENCRYPTION_SUPPORTES_SALT_NATIVE_TYPES' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_KEY_GENERATION_KEY_SALT_GENERATED_LENGTH' is defined but never used.","'PASSWORD_ENCRYPTION_UTILS_ENCRYPTION_INITIALIZATION_VECTOR_LENGTH' is defined but never used.","'TCRYPTO_UTIL_ENCRYPT_KEY_TYPES' is defined but never used.","'decodeDOMStringToArrayBuffer' is defined but never used.","'TTypedArrays' is defined but never used.","@typescript-eslint/no-unnecessary-type-assertion","This assertion is unnecessary since it does not change the type of the expression.","TSAsExpression","unnecessaryAssertion",{"range":"2015","text":"2016"},{"range":"2017","text":"2016"},"'generateCryptoCredentials' is defined but never used.","@typescript-eslint/explicit-function-return-type","Missing return type on function.","ArrowFunctionExpression","missingReturnType","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","'credentials' is assigned a value but never used.","FunctionDeclaration","@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.","MemberExpression","unbound","Parsing error: \"parserOptions.project\" has been set for @typescript-eslint/parser.\nThe file does not match your project config: src/test/nodejs-helpers.test/nodejs-helpers.test.firebase/nodejs-helpers.test.firebase.js.\nThe file must be included in at least one of the projects provided.","'importPasswordKeyFromString' is defined but never used.","'exportPasswordKey' is defined but never used.","'encryptDataToArrayBuffer' is defined but never used.","'decryptDataWithKeyNative' is defined but never used.","'testValue' is assigned a value but never used.","prefer-const","'readyEmitted' is never reassigned. Use 'const' instead.","useConst",{"range":"2018","text":"2019"},{"range":"2020","text":"2019"},{"range":"2021","text":"2019"},{"range":"2022","text":"2019"},{"range":"2023","text":"2019"},{"range":"2024","text":"2019"},{"range":"2025","text":"2016"},{"range":"2026","text":"2016"},{"range":"2027","text":"2016"},{"range":"2028","text":"2016"},{"range":"2029","text":"2016"},{"range":"2030","text":"2016"},{"range":"2031","text":"2016"},{"range":"2032","text":"2016"},{"range":"2033","text":"2016"},{"range":"2034","text":"2016"},{"range":"2035","text":"2016"},{"range":"2036","text":"2016"},"'TPseudoNTPClassResponseRaw' is defined but never used.","Member validateUserIdentifier should be declared before all constructor definitions.","Member validatePayload should be declared before all constructor definitions.","Member validateTimestamp should be declared before all constructor definitions.","'signInResult' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'errorMessage'.","unsafeRefs","'ICAConnectionConfigurationFirebase' is defined but never used.","'TCentralAuthorityCredentialsStorageAuthCredentials' is defined but never used.","'TCACryptoKeyPairs' is defined but never used.","'TCAuthProviderUserIdentifier' is defined but never used.",[27905,27925],"databases",[9411,9435],"",[10219,10243],[7072,7075],"const",[10363,10366],[15013,15016],[17212,17215],[19488,19491],[23003,23006],[26227,26228],[26359,26360],[26466,26467],[26598,26599],[26714,26715],[26772,26773],[26981,26982],[27289,27290],[27701,27702],[28010,28011],[28178,28179],[28286,28287]]